const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":2310,\"nextId\":2310,\"documentIds\":{\"0\":\"0\",\"1\":\"0#个人简介\",\"2\":\"0@0\",\"3\":\"0@1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"3\",\"7\":\"3@0\",\"8\":\"4\",\"9\":\"4#人物\",\"10\":\"4#地点\",\"11\":\"4#对象\",\"12\":\"4#符号\",\"13\":\"4#自然\",\"14\":\"4@0\",\"15\":\"4@1\",\"16\":\"5\",\"17\":\"5#_1-标题\",\"18\":\"5#_2-段落\",\"19\":\"5#_3-强调\",\"20\":\"5#_4-列表\",\"21\":\"5#无序列表\",\"22\":\"5#有序列表\",\"23\":\"5#_5-链接\",\"24\":\"5#_6-图片\",\"25\":\"5#_7-引用\",\"26\":\"5#_8-代码\",\"27\":\"5#行内代码\",\"28\":\"5#代码块\",\"29\":\"5#_10-表格\",\"30\":\"5#_11-任务列表\",\"31\":\"5#_12-注脚\",\"32\":\"5#_13-表情符号\",\"33\":\"5#_14-转义字符\",\"34\":\"5#_15-公式\",\"35\":\"5#_16-定义列表\",\"36\":\"5@0\",\"37\":\"5@1\",\"38\":\"6\",\"39\":\"6@0\",\"40\":\"6@1\",\"41\":\"7\",\"42\":\"7@0\",\"43\":\"8\",\"44\":\"8@0\",\"45\":\"9\",\"46\":\"9#标题-2\",\"47\":\"9#标题-3\",\"48\":\"9@0\",\"49\":\"9@1\",\"50\":\"10\",\"51\":\"10#标题-2\",\"52\":\"10#标题-3\",\"53\":\"10@0\",\"54\":\"10@1\",\"55\":\"12\",\"56\":\"12@0\",\"57\":\"13\",\"58\":\"13@0\",\"59\":\"13@1\",\"60\":\"14\",\"61\":\"14@0\",\"62\":\"15\",\"63\":\"15#_2024年7月13日-donald-john-trump-遇刺\",\"64\":\"15@0\",\"65\":\"15@1\",\"66\":\"16\",\"67\":\"16@0\",\"68\":\"16@1\",\"69\":\"17\",\"70\":\"17@0\",\"71\":\"17@1\",\"72\":\"18\",\"73\":\"18#music-心之火\",\"74\":\"18#fire-of-heart\",\"75\":\"18@0\",\"76\":\"18@1\",\"77\":\"19\",\"78\":\"19@0\",\"79\":\"19@1\",\"80\":\"20\",\"81\":\"20@0\",\"82\":\"21\",\"83\":\"21@0\",\"84\":\"22\",\"85\":\"22@0\",\"86\":\"22@1\",\"87\":\"23\",\"88\":\"23@0\",\"89\":\"23@1\",\"90\":\"24\",\"91\":\"24#常用链接\",\"92\":\"25\",\"93\":\"25@0\",\"94\":\"26\",\"95\":\"26@0\",\"96\":\"27\",\"97\":\"27@0\",\"98\":\"28\",\"99\":\"28#windows-10系统\",\"100\":\"28#装机流程\",\"101\":\"28#下载系统镜像\",\"102\":\"28#启动盘制作\",\"103\":\"28@0\",\"104\":\"28@1\",\"105\":\"29\",\"106\":\"29@0\",\"107\":\"29@1\",\"108\":\"30\",\"109\":\"30@0\",\"110\":\"30@1\",\"111\":\"31\",\"112\":\"31@0\",\"113\":\"31@1\",\"114\":\"32\",\"115\":\"32@0\",\"116\":\"32@1\",\"117\":\"33\",\"118\":\"33@0\",\"119\":\"33@1\",\"120\":\"34\",\"121\":\"34@0\",\"122\":\"34@1\",\"123\":\"35\",\"124\":\"35@0\",\"125\":\"35@1\",\"126\":\"37\",\"127\":\"37#python\",\"128\":\"37#python基础\",\"129\":\"37#python基础语法\",\"130\":\"37#编码\",\"131\":\"37#标识符\",\"132\":\"37#注释\",\"133\":\"37#python保留字\",\"134\":\"37#行与缩进\",\"135\":\"37#python基本数据类型\",\"136\":\"37#标准数据类型\",\"137\":\"37#number-数字\",\"138\":\"37#string-字符串\",\"139\":\"37#bool-布尔类型\",\"140\":\"37#list-列表\",\"141\":\"37#创建列表\",\"142\":\"37#访问列表元素\",\"143\":\"37#修改列表元素\",\"144\":\"37#列表切片\",\"145\":\"37#添加元素\",\"146\":\"37#删除元素\",\"147\":\"37#其他常用方法\",\"148\":\"37#列表的高级操作\",\"149\":\"37#tuple-元组\",\"150\":\"37#创建元组\",\"151\":\"37#访问元组元素\",\"152\":\"37#元组切片\",\"153\":\"37#解包元组\",\"154\":\"37#合并与重复元组\",\"155\":\"37#其他常用操作\",\"156\":\"37#元组的使用场景\",\"157\":\"37#示例-函数返回多个值\",\"158\":\"37#set-集合\",\"159\":\"37#创建集合\",\"160\":\"37#添加与删除元素\",\"161\":\"37#集合操作\",\"162\":\"37#集合的其他常用方法\",\"163\":\"37#集合推导式\",\"164\":\"37#示例-集合的应用场景\",\"165\":\"37#去重\",\"166\":\"37#检测集合之间的关系\",\"167\":\"37#dictionary-字典\",\"168\":\"37#创建字典\",\"169\":\"37#访问字典元素\",\"170\":\"37#修改字典元素\",\"171\":\"37#删除字典元素\",\"172\":\"37#字典的其他常用操作\",\"173\":\"37#字典推导式\",\"174\":\"37#字典的合并与更新\",\"175\":\"37#示例-字典的实际应用\",\"176\":\"37#统计单词出现的次数\",\"177\":\"37#记录学生成绩\",\"178\":\"37#python变量和常量\",\"179\":\"37#变量\",\"180\":\"37#变量的定义和使用\",\"181\":\"37#常量\",\"182\":\"37#常量的定义和使用\",\"183\":\"37#变量与常量的区别\",\"184\":\"37#python数据类型转换\",\"185\":\"37#_1-转换为整数\",\"186\":\"37#_2-转换为浮点数\",\"187\":\"37#_3-转换为字符串\",\"188\":\"37#_4-转换为列表\",\"189\":\"37#_5-转换为元组\",\"190\":\"37#_6-转换为集合\",\"191\":\"37#_7-转换为字典\",\"192\":\"37#python运算符\",\"193\":\"37#_1-算术运算符\",\"194\":\"37#_2-比较运算符\",\"195\":\"37#_3-逻辑运算符\",\"196\":\"37#_4-位运算符\",\"197\":\"37#_5-赋值运算符\",\"198\":\"37#_6-成员运算符\",\"199\":\"37#_7-身份运算符\",\"200\":\"37#python循环与流程控制\",\"201\":\"37#if-条件分支\",\"202\":\"37#match-判断\",\"203\":\"37#while-循环\",\"204\":\"37#for-循环\",\"205\":\"37#中断语句\",\"206\":\"37#break-语句\",\"207\":\"37#continue-语句\",\"208\":\"37#else-子句\",\"209\":\"37#python-函数编程\",\"210\":\"37#函数声明和调用\",\"211\":\"37#函数的参数\",\"212\":\"37#匿名函数\",\"213\":\"37#递归\",\"214\":\"37#高阶函数\",\"215\":\"37#返回函数和闭包\",\"216\":\"37#函数装饰器\",\"217\":\"37#偏函数\",\"218\":\"37#高级特性\",\"219\":\"37#切片\",\"220\":\"37#推导式\",\"221\":\"37#列表推导式\",\"222\":\"37#集合推导式-1\",\"223\":\"37#字典推导式-1\",\"224\":\"37#迭代器\",\"225\":\"37#生成器\",\"226\":\"37#装饰器\",\"227\":\"37#python模块\",\"228\":\"37#使用模块\",\"229\":\"37#导入模块\",\"230\":\"37#安装模块\",\"231\":\"37#内置模块\",\"232\":\"37#os-模块\",\"233\":\"37#sys-模块\",\"234\":\"37#datetime-模块\",\"235\":\"37#random-模块\",\"236\":\"37#常用模块\",\"237\":\"37#requests-模块\",\"238\":\"37#numpy-模块\",\"239\":\"37#pandas-模块\",\"240\":\"37#matplotlib-模块\",\"241\":\"37#python面向对象编程\",\"242\":\"37#核心概念\",\"243\":\"37#示例\",\"244\":\"37#错误、调试和测试\",\"245\":\"37#常见的错误类型\",\"246\":\"37#调试技巧\",\"247\":\"37#测试方法\",\"248\":\"37#示例-调试和测试\",\"249\":\"37#文件与io\",\"250\":\"37#文件操作基础\",\"251\":\"37#打开文件\",\"252\":\"37#读取文件\",\"253\":\"37#写入文件\",\"254\":\"37#关闭文件\",\"255\":\"37#文件路径\",\"256\":\"37#文件和目录操作\",\"257\":\"37#处理csv文件\",\"258\":\"37#处理json文件\",\"259\":\"37#示例-1\",\"260\":\"37#标准输入输出\",\"261\":\"37#标准输出\",\"262\":\"37#标准输入\",\"263\":\"37@0\",\"264\":\"37@1\",\"265\":\"38\",\"266\":\"38#python数据结构\",\"267\":\"38#进程与线程\",\"268\":\"38#gui编程\",\"269\":\"38#网络编程\",\"270\":\"38#数据库编程\",\"271\":\"38#web开发\",\"272\":\"38#异步的io\",\"273\":\"38#数据分析\",\"274\":\"38#机器学习\",\"275\":\"38#其他\",\"276\":\"38#python资源\",\"277\":\"38@0\",\"278\":\"38@1\",\"279\":\"39\",\"280\":\"39#python环境\",\"281\":\"39#windows环境\",\"282\":\"39#linux环境\",\"283\":\"39#集成开发环境\",\"284\":\"39#python3\",\"285\":\"39#科学计算环境\",\"286\":\"39#虚拟环境\",\"287\":\"39@0\",\"288\":\"39@1\",\"289\":\"40\",\"290\":\"40#库和模块\",\"291\":\"40#自建库\",\"292\":\"40#内置库\",\"293\":\"40#常用库-分类\",\"294\":\"40@0\",\"295\":\"40@1\",\"296\":\"41\",\"297\":\"41@0\",\"298\":\"41@1\",\"299\":\"42\",\"300\":\"42@0\",\"301\":\"42@1\",\"302\":\"43\",\"303\":\"43@0\",\"304\":\"44\",\"305\":\"44@0\",\"306\":\"44@1\",\"307\":\"45\",\"308\":\"45#单片机及开发板\",\"309\":\"45#实验手册\",\"310\":\"45#小项目\",\"311\":\"45@0\",\"312\":\"45@1\",\"313\":\"46\",\"314\":\"46@0\",\"315\":\"46@1\",\"316\":\"47\",\"317\":\"47@0\",\"318\":\"47@1\",\"319\":\"48\",\"320\":\"48@0\",\"321\":\"48@1\",\"322\":\"49\",\"323\":\"49@0\",\"324\":\"49@1\",\"325\":\"50\",\"326\":\"50@0\",\"327\":\"50@1\",\"328\":\"51\",\"329\":\"51@0\",\"330\":\"51@1\",\"331\":\"53\",\"332\":\"53@0\",\"333\":\"53@1\",\"334\":\"59\",\"335\":\"59#文章模板\",\"336\":\"59#头信息\",\"337\":\"59#标题\",\"338\":\"59@0\",\"339\":\"59@1\",\"340\":\"60\",\"341\":\"60@0\",\"342\":\"61\",\"343\":\"61@0\",\"344\":\"61@1\",\"345\":\"62\",\"346\":\"62@0\",\"347\":\"64\",\"348\":\"64@0\",\"349\":\"65\",\"350\":\"65#为什么重新学数学\",\"351\":\"65#享受数学的美\",\"352\":\"65#数学的知识体系\",\"353\":\"65#数学的意义\",\"354\":\"65@0\",\"355\":\"65@1\",\"356\":\"67\",\"357\":\"67#python-最佳的科学计算环境\",\"358\":\"67#配置python数据分析环境\",\"359\":\"67#数据分析的任务\",\"360\":\"67#python科学计算库\",\"361\":\"67@0\",\"362\":\"67@1\",\"363\":\"68\",\"364\":\"68@0\",\"365\":\"69\",\"366\":\"69#前言\",\"367\":\"69#机器学习\",\"368\":\"69#监督学习\",\"369\":\"69#无监督学习\",\"370\":\"69#机器学习的工具\",\"371\":\"69#机器学习的第一个应用-鸢尾花分类\",\"372\":\"69#监督学习-1\",\"373\":\"69@0\",\"374\":\"69@1\",\"375\":\"70\",\"376\":\"70@0\",\"377\":\"71\",\"378\":\"71#知识点\",\"379\":\"71#中国研究生数学建模竞赛\",\"380\":\"71#数学建模\",\"381\":\"71#数学建模的基本步骤\",\"382\":\"71#常用的数学建模方法\",\"383\":\"71#数学建模软件和工具\",\"384\":\"71#示例-简单的线性规划模型\",\"385\":\"71@0\",\"386\":\"71@1\",\"387\":\"72\",\"388\":\"72#图论\",\"389\":\"72#基本概念\",\"390\":\"72#图的表示方法\",\"391\":\"72#图的类型\",\"392\":\"72#图论中的重要算法\",\"393\":\"72#matlab中图论的应用\",\"394\":\"72#例子\",\"395\":\"72#最大流问题\",\"396\":\"72#最大流问题的基本概念\",\"397\":\"72#最大流的算法\",\"398\":\"72#ford-fulkerson算法\",\"399\":\"72#edmonds-karp算法\",\"400\":\"72#最小费用问题\",\"401\":\"72#_1-最小费用最大流问题\",\"402\":\"72#_2-主要算法\",\"403\":\"72#bellman-ford-算法\",\"404\":\"72#dijkstra-算法\",\"405\":\"72#spfa-shortest-path-faster-algorithm\",\"406\":\"72#_3-复杂度\",\"407\":\"72#_4-应用场景\",\"408\":\"72#背包问题\",\"409\":\"72#指派问题\",\"410\":\"72#旅行商问题\",\"411\":\"72@0\",\"412\":\"72@1\",\"413\":\"73\",\"414\":\"73#优化算法\",\"415\":\"73#_1-确定性优化算法\",\"416\":\"73#_2-启发式算法\",\"417\":\"73#_3-智能优化算法\",\"418\":\"73#_4-混合优化算法\",\"419\":\"73#应用领域\",\"420\":\"73#智能优化算法\",\"421\":\"73#模拟退火算法\",\"422\":\"73#_1-算法原理\",\"423\":\"73#_2-算法步骤\",\"424\":\"73#_3-关键参数\",\"425\":\"73#_4-优缺点\",\"426\":\"73#_5-应用领域\",\"427\":\"73#目标函数\",\"428\":\"73#模拟退火算法的实现\",\"429\":\"73#代码说明\",\"430\":\"73#运行结果\",\"431\":\"73#遗传算法\",\"432\":\"73#_1-遗传算法的基本概念\",\"433\":\"73#_2-遗传算法的流程\",\"434\":\"73#_3-python实现遗传算法\",\"435\":\"73#代码说明-1\",\"436\":\"73#运行结果-1\",\"437\":\"73#应用场景\",\"438\":\"73#神经网络\",\"439\":\"73#_1-神经网络的基本组成部分\",\"440\":\"73#_2-基本概念\",\"441\":\"73#_3-常见的神经网络类型\",\"442\":\"73#_4-应用领域\",\"443\":\"73#实现一个简单的神经网络\",\"444\":\"73#_1-导入必要的库\",\"445\":\"73#_2-定义激活函数和其导数\",\"446\":\"73#_3-初始化数据和权重\",\"447\":\"73#_4-训练神经网络\",\"448\":\"73#_5-测试神经网络\",\"449\":\"73#完整代码\",\"450\":\"73#输出结果\",\"451\":\"73@0\",\"452\":\"73@1\",\"453\":\"74\",\"454\":\"74@0\",\"455\":\"74@1\",\"456\":\"75\",\"457\":\"75#_1-numpy-基础\",\"458\":\"75#_2-pandas-基础\",\"459\":\"75#_3-matplotlib-和-seaborn-基础\",\"460\":\"75#_4-scipy-基础\",\"461\":\"75@0\",\"462\":\"75@1\",\"463\":\"76\",\"464\":\"76#统计分析\",\"465\":\"76#_1-描述统计\",\"466\":\"76#_2-假设检验\",\"467\":\"76#_3-信度分析\",\"468\":\"76#_4-列联表分析\",\"469\":\"76#_5-相关分析\",\"470\":\"76#_6-方差分析\",\"471\":\"76#_7-回归分析\",\"472\":\"76#_8-聚类分析\",\"473\":\"76#_9-判别分析\",\"474\":\"76#_10-主成分分析和因子分析\",\"475\":\"76#_11-时间序列分析\",\"476\":\"76#_12-生存分析\",\"477\":\"76#python描述统计分析\",\"478\":\"76#_1-描述统计-1\",\"479\":\"76#_2-假设检验-1\",\"480\":\"76#_3-信度分析-1\",\"481\":\"76#_4-列联表分析-1\",\"482\":\"76#_5-相关分析-1\",\"483\":\"76#_6-方差分析-anova\",\"484\":\"76#_7-回归分析-1\",\"485\":\"76#_8-聚类分析-1\",\"486\":\"76#_9-判别分析-1\",\"487\":\"76#_10-主成分分析和因子分析-1\",\"488\":\"76#_11-时间序列分析-1\",\"489\":\"76#_12-生存分析-1\",\"490\":\"76#回归模型与分析\",\"491\":\"76#_1-一元线性回归-simple-linear-regression\",\"492\":\"76#_2-多元线性回归-multiple-linear-regression\",\"493\":\"76#_3-逐步回归-stepwise-regression\",\"494\":\"76#_4-多项式回归-polynomial-regression\",\"495\":\"76#_5-广义线性回归-generalized-linear-regression\",\"496\":\"76#python实现回归分析\",\"497\":\"76#_1-线性回归-linear-regression\",\"498\":\"76#_2-岭回归-ridge-regression\",\"499\":\"76#_3-lasso回归-lasso-regression\",\"500\":\"76#_4-弹性网回归-elastic-net-regression\",\"501\":\"76#_5-多项式回归-polynomial-regression\",\"502\":\"76#_6-支持向量回归-support-vector-regression-svr\",\"503\":\"76#_7-决策树回归-decision-tree-regression\",\"504\":\"76#总结\",\"505\":\"76@0\",\"506\":\"76@1\",\"507\":\"77\",\"508\":\"77#聚类分析\",\"509\":\"77#_1-主要概念\",\"510\":\"77#_2-常用聚类方法\",\"511\":\"77#_1-k-means-聚类\",\"512\":\"77#_2-层次聚类-hierarchical-clustering\",\"513\":\"77#_3-基于密度的聚类-dbscan\",\"514\":\"77#_4-高斯混合模型-gmms\",\"515\":\"77#_3-聚类效果评价指标\",\"516\":\"77#_4-应用场景\",\"517\":\"77#_5-python-实现示例-k-means-聚类\",\"518\":\"77#判断分析\",\"519\":\"77#_1-判别分析的主要类型\",\"520\":\"77#_1-线性判别分析-lda-linear-discriminant-analysis\",\"521\":\"77#_2-二次判别分析-qda-quadratic-discriminant-analysis\",\"522\":\"77#_3-贝叶斯判别分析-bayesian-discriminant-analysis\",\"523\":\"77#_2-判别分析的应用场景\",\"524\":\"77#_3-python-实现示例-lda\",\"525\":\"77#_4-lda-与-qda-的比较\",\"526\":\"77#_5-判别分析的优势与局限性\",\"527\":\"77#监督学习\",\"528\":\"77#_1-监督学习的基本概念\",\"529\":\"77#_2-监督学习的类型\",\"530\":\"77#_1-分类-classification\",\"531\":\"77#_2-回归-regression\",\"532\":\"77#_3-监督学习的工作流程\",\"533\":\"77#_4-监督学习中的关键概念\",\"534\":\"77#_5-监督学习的应用场景\",\"535\":\"77#_6-监督学习的python实现示例\",\"536\":\"77#_7-监督学习的挑战与发展\",\"537\":\"77#无监督学习\",\"538\":\"77#_1-无监督学习的基本概念\",\"539\":\"77#_2-无监督学习的常见方法\",\"540\":\"77#_1-聚类分析-clustering\",\"541\":\"77#_2-降维-dimensionality-reduction\",\"542\":\"77#_3-无监督学习的应用场景\",\"543\":\"77#_4-无监督学习的python实现示例\",\"544\":\"77#_5-无监督学习的优势与局限性\",\"545\":\"77#优势\",\"546\":\"77#局限性\",\"547\":\"77#_6-无监督学习的发展趋势\",\"548\":\"77#python的聚类算法实现\",\"549\":\"77#_1-k-means聚类\",\"550\":\"77#_2-层次聚类-hierarchical-clustering-1\",\"551\":\"77#_3-dbscan聚类\",\"552\":\"77#_4-gaussian-mixture-model-gmm\",\"553\":\"77#_5-选择适合的聚类算法\",\"554\":\"77#matlab实现聚类算法\",\"555\":\"77#_1-k-means聚类-1\",\"556\":\"77#_2-层次聚类-hierarchical-clustering-2\",\"557\":\"77#_3-dbscan聚类-1\",\"558\":\"77#_4-gaussian-mixture-model-gmm-1\",\"559\":\"77#总结\",\"560\":\"77#s型聚类和r型聚类\",\"561\":\"77#_1-s型聚类-subject-clustering\",\"562\":\"77#_2-r型聚类-variable-clustering\",\"563\":\"77#_3-s型聚类和r型聚类的关系\",\"564\":\"77#_4-实现方法\",\"565\":\"77#matlab-实现示例\",\"566\":\"77#_5-总结\",\"567\":\"77#python的判断分析算法实现\",\"568\":\"77#_1-线性判别分析-lda\",\"569\":\"77#示例代码\",\"570\":\"77#_2-二次判别分析-qda\",\"571\":\"77#示例代码-1\",\"572\":\"77#_3-判别分析的应用场景\",\"573\":\"77#_4-总结\",\"574\":\"77#机器学习的分类问题\",\"575\":\"77#分类问题的基本概念\",\"576\":\"77#常见分类算法\",\"577\":\"77#_1-逻辑回归-logistic-regression\",\"578\":\"77#_2-支持向量机-svm\",\"579\":\"77#_3-决策树-decision-tree\",\"580\":\"77#_4-随机森林-random-forest\",\"581\":\"77#_5-k-近邻算法-k-nearest-neighbors-knn\",\"582\":\"77#分类问题的评价指标\",\"583\":\"77#总结-1\",\"584\":\"77#模式识别\",\"585\":\"77#模式识别的基本流程\",\"586\":\"77#常用的模式识别方法\",\"587\":\"77#python-实现模式识别的示例\",\"588\":\"77#_1-图像分类-使用支持向量机\",\"589\":\"77#_2-文本分类-使用朴素贝叶斯\",\"590\":\"77#_3-图像特征提取-使用主成分分析\",\"591\":\"77#总结-2\",\"592\":\"77#机器学习的算法\",\"593\":\"77#_1-监督学习算法\",\"594\":\"77#_2-无监督学习算法\",\"595\":\"77#_3-半监督学习算法\",\"596\":\"77#_4-强化学习算法\",\"597\":\"77#_5-集成学习算法\",\"598\":\"77#_6-深度学习算法\",\"599\":\"77#_7-推荐算法\",\"600\":\"77#机器学习算法实现\",\"601\":\"77#_1-逻辑回归-logistic-regression-1\",\"602\":\"77#_2-支持向量机-svm-1\",\"603\":\"77#_3-决策树-decision-tree-1\",\"604\":\"77#_4-随机森林-random-forest-1\",\"605\":\"77#_5-k-近邻算法-k-nearest-neighbors-knn-1\",\"606\":\"77#_6-线性回归-linear-regression\",\"607\":\"77#_7-朴素贝叶斯-naive-bayes\",\"608\":\"77#_8-神经网络-neural-networks\",\"609\":\"77#_9-梯度提升机-gradient-boosting-machine-gbm\",\"610\":\"77#_10-卷积神经网络-convolutional-neural-network-cnn\",\"611\":\"77@0\",\"612\":\"77@1\",\"613\":\"78\",\"614\":\"78#数据维度和降维\",\"615\":\"78#主成分分析\",\"616\":\"78#pca-的基本步骤\",\"617\":\"78#pca-的特点和应用\",\"618\":\"78#示例\",\"619\":\"78#使用-python-进行-pca\",\"620\":\"78#优缺点\",\"621\":\"78#python实现主成分数据降维\",\"622\":\"78#_1-导入必要的库\",\"623\":\"78#_2-生成示例数据\",\"624\":\"78#_3-实现pca并逐步降维\",\"625\":\"78#_4-可视化完整的降维过程\",\"626\":\"78#解释代码\",\"627\":\"78#scikit-learn数据降维\",\"628\":\"78@0\",\"629\":\"78@1\",\"630\":\"79\",\"631\":\"79#预测模型\",\"632\":\"79#灰色预测模型\",\"633\":\"79#_1-灰色系统理论\",\"634\":\"79#_2-gm-1-1-模型\",\"635\":\"79#_3-gm-1-n-模型\",\"636\":\"79#_4-灰色-verhulst-模型\",\"637\":\"79#_5-灰色马尔科夫模型\",\"638\":\"79#_6-灰色关联分析\",\"639\":\"79#python的实现\",\"640\":\"79#_1-导入必要的库\",\"641\":\"79#_2-定义gm-1-1-模型的核心函数\",\"642\":\"79#_3-定义预测函数\",\"643\":\"79#_4-生成虚拟数据并进行预测\",\"644\":\"79#_5-运行代码\",\"645\":\"79#马尔科夫预测模型\",\"646\":\"79#_1-马尔科夫链的基本概念\",\"647\":\"79#_2-马尔科夫链的性质\",\"648\":\"79#_3-python实现马尔科夫预测模型\",\"649\":\"79#示例-天气预测\",\"650\":\"79#_4-代码说明\",\"651\":\"79#_5-运行结果\",\"652\":\"79#_6-扩展应用\",\"653\":\"79#神经元网络预测\",\"654\":\"79#_1-前馈神经网络-feedforward-neural-network-ffnn\",\"655\":\"79#_2-递归神经网络-recurrent-neural-network-rnn\",\"656\":\"79#_3-长短期记忆网络-long-short-term-memory-lstm\",\"657\":\"79#_4-用python实现一个简单的神经网络预测模型\",\"658\":\"79#_1-导入必要的库-1\",\"659\":\"79#_2-准备数据\",\"660\":\"79#_3-构建lstm模型\",\"661\":\"79#_4-进行预测\",\"662\":\"79#_5-代码说明\",\"663\":\"79#_6-扩展应用-1\",\"664\":\"79@0\",\"665\":\"79@1\",\"666\":\"80\",\"667\":\"80@0\",\"668\":\"80@1\",\"669\":\"81\",\"670\":\"81#几何模型\",\"671\":\"81#_1-实体模型-solid-models\",\"672\":\"81#_2-曲面模型-surface-models\",\"673\":\"81#_3-线框模型-wireframe-models\",\"674\":\"81#_4-点云模型-point-cloud-models\",\"675\":\"81#_5-体素模型-voxel-models\",\"676\":\"81#_6-隐式曲面-implicit-surfaces\",\"677\":\"81#_7-分形模型-fractal-models\",\"678\":\"81#管道包扎模型\",\"679\":\"81#管道包扎模型的构建过程\",\"680\":\"81#示例\",\"681\":\"81#代码解释\",\"682\":\"81#运行结果\",\"683\":\"81#应用场景\",\"684\":\"81#优点和挑战\",\"685\":\"81#铺瓷砖模型\",\"686\":\"81#_1-基本概念\",\"687\":\"81#_2-实现思路\",\"688\":\"81#_3-实现代码\",\"689\":\"81#_4-代码解释\",\"690\":\"81#_5-运行结果\",\"691\":\"81#_6-扩展\",\"692\":\"81#钢板切割模型\",\"693\":\"81#_1-问题描述\",\"694\":\"81#_2-解决方案的策略\",\"695\":\"81#_3-简单示例\",\"696\":\"81#_4-数学模型\",\"697\":\"81#_4-1-变量定义\",\"698\":\"81#_4-2-目标函数\",\"699\":\"81#_4-3-约束条件\",\"700\":\"81#_5-python实现示例\",\"701\":\"81#_6-实际应用中的考虑因素\",\"702\":\"81@0\",\"703\":\"81@1\",\"704\":\"82\",\"705\":\"82#规划问题\",\"706\":\"82#_1-线性规划-linear-programming-lp\",\"707\":\"82#_2-整数规划-integer-programming-ip\",\"708\":\"82#_3-非线性规划-nonlinear-programming-nlp\",\"709\":\"82#_4-动态规划-dynamic-programming-dp\",\"710\":\"82#_5-多目标规划-multi-objective-programming-mop\",\"711\":\"82#_6-混合整数非线性规划-mixed-integer-nonlinear-programming-minlp\",\"712\":\"82#_7-随机规划-stochastic-programming\",\"713\":\"82#线性规划模型\",\"714\":\"82#什么是线性规划模型\",\"715\":\"82#线性规划的组成\",\"716\":\"82#线性规划的应用\",\"717\":\"82#具体问题示例\",\"718\":\"82#求解线性规划\",\"719\":\"82#实际线性规划问题\",\"720\":\"82#问题描述\",\"721\":\"82#线性规划模型-1\",\"722\":\"82#求解过程\",\"723\":\"82#整数规划模型\",\"724\":\"82#纯整数规划模型\",\"725\":\"82#线性规划问题-整数约束\",\"726\":\"82#matlab-代码\",\"727\":\"82#结果解释\",\"728\":\"82#详细解释\",\"729\":\"82#_0-1整数规划模型\",\"730\":\"82#实际问题示例\",\"731\":\"82#_0-1整数规划模型-1\",\"732\":\"82#matlab-代码-1\",\"733\":\"82#结果解释-1\",\"734\":\"82#详细解释-1\",\"735\":\"82#tsp旅行商问题\",\"736\":\"82#tsp-问题描述\",\"737\":\"82#数学模型\",\"738\":\"82#matlab-代码-2\",\"739\":\"82#结果解释-2\",\"740\":\"82#详细解释-2\",\"741\":\"82@0\",\"742\":\"82@1\",\"743\":\"83\",\"744\":\"83#博弈模型\",\"745\":\"83#博弈模型的基本概念\",\"746\":\"83#博弈模型的分类\",\"747\":\"83#博弈模型的应用\",\"748\":\"83#常见博弈模型示例\",\"749\":\"83@0\",\"750\":\"83@1\",\"751\":\"84\",\"752\":\"84#综合评价\",\"753\":\"84#综合评价方法的主要步骤\",\"754\":\"84#常见的综合评价方法\",\"755\":\"84#综合评价方法的应用\",\"756\":\"84#综合评价指标\",\"757\":\"84#综合评价指标的分类\",\"758\":\"84#综合评价指标的确定方法\",\"759\":\"84#综合评价指标的标准化\",\"760\":\"84#综合评价指标的权重确定\",\"761\":\"84#综合评价指标的应用实例\",\"762\":\"84#综合评价数据处理\",\"763\":\"84#综合评价数据处理的主要步骤\",\"764\":\"84#处理综合评价数据时的注意事项\",\"765\":\"84#常用模型\",\"766\":\"84#_1-层次分析法-ahp-analytic-hierarchy-process\",\"767\":\"84#_2-熵权法\",\"768\":\"84#_3-topsis法-technique-for-order-preference-by-similarity-to-an-ideal-solution\",\"769\":\"84#_4-灰色关联分析法\",\"770\":\"84#_5-模糊综合评价法\",\"771\":\"84#_6-数据包络分析法-dea-data-envelopment-analysis\",\"772\":\"84#_7-vikor法-vlsekriterijumska-optimizacija-i-kompromisno-resenje\",\"773\":\"84#_8-理想点法-ideal-point-method\",\"774\":\"84#_9-copeland评分法\",\"775\":\"84#_10-层次熵权topsis法\",\"776\":\"84@0\",\"777\":\"84@1\",\"778\":\"85\",\"779\":\"85#科技论文\",\"780\":\"85#论文组成\",\"781\":\"85@0\",\"782\":\"85@1\",\"783\":\"86\",\"784\":\"86#图像处理\",\"785\":\"86#_1-图像的表示\",\"786\":\"86#_2-图像变换\",\"787\":\"86#_3-图像增强\",\"788\":\"86#_4-图像分割\",\"789\":\"86#_5-形态学处理\",\"790\":\"86#_6-特征提取\",\"791\":\"86#_7-图像复原\",\"792\":\"86#_8-机器学习与深度学习在图像处理中的应用\",\"793\":\"86#图像处理的工具\",\"794\":\"86#_1-编程库和框架\",\"795\":\"86#_2-商业软件\",\"796\":\"86#_3-在线工具\",\"797\":\"86#_4-深度学习框架\",\"798\":\"86#_5-图像处理与分析平台\",\"799\":\"86#python的图像处理\",\"800\":\"86#_1-opencv\",\"801\":\"86#_2-pillow-pil\",\"802\":\"86#_3-scikit-image\",\"803\":\"86#_4-numpy\",\"804\":\"86#_5-matplotlib\",\"805\":\"86#_6-imageai\",\"806\":\"86#matlab的图像处理\",\"807\":\"86#_1-图像读取与显示\",\"808\":\"86#_2-图像转换\",\"809\":\"86#_3-图像增强-1\",\"810\":\"86#_4-边缘检测\",\"811\":\"86#_5-图像分割\",\"812\":\"86#_6-形态学操作\",\"813\":\"86#_7-特征提取\",\"814\":\"86#_8-图像复原\",\"815\":\"86#_9-图像的几何变换\",\"816\":\"86#_10-图像分析\",\"817\":\"86#图像处理的实例\",\"818\":\"86#实例-1-灰度转换\",\"819\":\"86#实例-2-高斯模糊\",\"820\":\"86#实例-3-边缘检测-canny算法\",\"821\":\"86#实例-4-图像缩放\",\"822\":\"86#实例-5-图像旋转\",\"823\":\"86#实例-6-图像直方图均衡化\",\"824\":\"86#实例-7-图像二值化-thresholding\",\"825\":\"86#实例-8-图像形态学操作-膨胀与腐蚀\",\"826\":\"86#实例-9-图像特征检测-harris角点检测\",\"827\":\"86#实例-10-人脸检测\",\"828\":\"86@0\",\"829\":\"86@1\",\"830\":\"87\",\"831\":\"87#非线性规划模型\",\"832\":\"87#_1-模型结构\",\"833\":\"87#_2-非线性规划问题的分类\",\"834\":\"87#_3-常用算法\",\"835\":\"87#_4-应用示例\",\"836\":\"87#示例-1-投资组合优化\",\"837\":\"87#示例-2-非线性回归\",\"838\":\"87#_5-软件工具\",\"839\":\"87#多目标规划模型\",\"840\":\"87#多目标规划模型的基本概念\",\"841\":\"87#多目标规划模型的构建步骤\",\"842\":\"87#实例\",\"843\":\"87#工具和软件\",\"844\":\"87#实践应用\",\"845\":\"87@0\",\"846\":\"87@1\",\"847\":\"88\",\"848\":\"88#常微分方程\",\"849\":\"88#微分方程模型的作用\",\"850\":\"88#应用问题示例\",\"851\":\"88#示例-sir传染病模型\",\"852\":\"88#python代码实现\",\"853\":\"88#代码解释\",\"854\":\"88#一个实例-物体冷却问题\",\"855\":\"88#问题中的条件\",\"856\":\"88#python代码\",\"857\":\"88#代码解释-1\",\"858\":\"88#结果\",\"859\":\"88@0\",\"860\":\"88@1\",\"861\":\"89\",\"862\":\"89#差分方程\",\"863\":\"89#差分方程的定义\",\"864\":\"89#线性差分方程\",\"865\":\"89#差分方程的解\",\"866\":\"89#示例\",\"867\":\"89#应用\",\"868\":\"89#差分方程模型\",\"869\":\"89#_1-人口增长模型\",\"870\":\"89#_2-经济学中的存款模型\",\"871\":\"89#_3-生态系统模型\",\"872\":\"89#_4-生物医学中的药物动力学模型\",\"873\":\"89#_5-经济学中的库存模型\",\"874\":\"89#模型求解方法\",\"875\":\"89#示例-人口增长模型的求解\",\"876\":\"89@0\",\"877\":\"89@1\",\"878\":\"90\",\"879\":\"90#偏微分方程\",\"880\":\"90#基本概念\",\"881\":\"90#常见的偏微分方程\",\"882\":\"90#经典问题\",\"883\":\"90#解法\",\"884\":\"90#示例\",\"885\":\"90#应用\",\"886\":\"90#python描述偏微分方程\",\"887\":\"90#一维热传导方程\",\"888\":\"90#初始条件和边界条件\",\"889\":\"90#python实现\",\"890\":\"90#代码解释\",\"891\":\"90#椭圆型偏微分\",\"892\":\"90#拉普拉斯方程和泊松方程\",\"893\":\"90#数值求解\",\"894\":\"90#问题描述\",\"895\":\"90#python代码\",\"896\":\"90#代码解释-1\",\"897\":\"90#抛物型偏微分\",\"898\":\"90#热传导方程\",\"899\":\"90#初始条件和边界条件-1\",\"900\":\"90#初始条件\",\"901\":\"90#边界条件\",\"902\":\"90#python实现-1\",\"903\":\"90#python代码-1\",\"904\":\"90#代码解释-2\",\"905\":\"90#双曲型偏微分\",\"906\":\"90#波动方程\",\"907\":\"90#初始条件和边界条件-2\",\"908\":\"90#初始条件-1\",\"909\":\"90#边界条件-1\",\"910\":\"90#python实现-2\",\"911\":\"90#python代码-2\",\"912\":\"90#代码解释-3\",\"913\":\"90#sympy符号计算库\",\"914\":\"90#安装-sympy\",\"915\":\"90#基本用法\",\"916\":\"90#_1-符号定义\",\"917\":\"90#_2-表达式操作\",\"918\":\"90#_3-求导\",\"919\":\"90#_4-积分\",\"920\":\"90#_5-解方程\",\"921\":\"90#_6-矩阵运算\",\"922\":\"90#高级用法\",\"923\":\"90#_1-解析求解偏微分方程\",\"924\":\"90#_2-拉普拉斯变换\",\"925\":\"90#_3-傅里叶变换\",\"926\":\"90#反映扩散方程\",\"927\":\"90#示例-fisher-kpp-方程\",\"928\":\"90#代码说明\",\"929\":\"90@0\",\"930\":\"90@1\",\"931\":\"91\",\"932\":\"91#插值\",\"933\":\"91#插值方法\",\"934\":\"91#python中的插值实例\",\"935\":\"91#线性插值\",\"936\":\"91#样条插值\",\"937\":\"91#拉格朗日插值\",\"938\":\"91#拟合\",\"939\":\"91#拟合方法\",\"940\":\"91#python中的拟合实例\",\"941\":\"91#线性回归\",\"942\":\"91#多项式拟合\",\"943\":\"91#非线性拟合\",\"944\":\"91#样条拟合\",\"945\":\"91#插值和拟合的实例\",\"946\":\"91#python-图像处理中的插值与拟合\",\"947\":\"91#图像插值示例\",\"948\":\"91#音频处理中的插值与拟合\",\"949\":\"91@0\",\"950\":\"91@1\",\"951\":\"92\",\"952\":\"92#图论\",\"953\":\"92#图的基本概念\",\"954\":\"92#图的表示方法\",\"955\":\"92#matlab中的图论工具\",\"956\":\"92#最短路径\",\"957\":\"92#最短路径算法\",\"958\":\"92#dijkstra算法\",\"959\":\"92#bellman-ford算法\",\"960\":\"92#floyd-warshall算法\",\"961\":\"92#最小生成树\",\"962\":\"92#最小生成树的基本概念\",\"963\":\"92#最小生成树的算法\",\"964\":\"92#kruskal算法\",\"965\":\"92#prim算法\",\"966\":\"92@0\",\"967\":\"92@1\",\"968\":\"93\",\"969\":\"93@0\",\"970\":\"93@1\",\"971\":\"94\",\"972\":\"94@0\",\"973\":\"95\",\"974\":\"95@0\",\"975\":\"96\",\"976\":\"96@0\",\"977\":\"97\",\"978\":\"97@0\",\"979\":\"98\",\"980\":\"98@0\",\"981\":\"99\",\"982\":\"99@0\",\"983\":\"99@1\",\"984\":\"100\",\"985\":\"100#中华民族的历史文化\",\"986\":\"100#五千年前-中国人和埃及人一样对抗汹涌的洪水\",\"987\":\"100#四千年前-中华文明和古巴比伦一样进入了青铜器时代\",\"988\":\"100#三千年前-中国先贤和古希腊哲学家一样在思考这个世界\",\"989\":\"100#两千年前-帝国的军队和古罗马一样在征战四方\",\"990\":\"100#一千年前-中国和阿拉伯一样都是富足的地区\",\"991\":\"100#而现在-我们和美利坚合众国一样拥有强大的国力\",\"992\":\"100#十年后、二十年后、五十年后、百年后\",\"993\":\"100@0\",\"994\":\"100@1\",\"995\":\"101\",\"996\":\"101@0\",\"997\":\"102\",\"998\":\"102#第一性原理是什么\",\"999\":\"102#如何运用第一性原理在工作和学习中\",\"1000\":\"102#第一性原理的三个问题\",\"1001\":\"102#寻求本质\",\"1002\":\"102#批判旧事物\",\"1003\":\"102#探索新事物\",\"1004\":\"102@0\",\"1005\":\"102@1\",\"1006\":\"103\",\"1007\":\"103@0\",\"1008\":\"103@1\",\"1009\":\"104\",\"1010\":\"104@0\",\"1011\":\"105\",\"1012\":\"105@0\",\"1013\":\"106\",\"1014\":\"106@0\",\"1015\":\"106@1\",\"1016\":\"107\",\"1017\":\"107@0\",\"1018\":\"107@1\",\"1019\":\"108\",\"1020\":\"108@0\",\"1021\":\"108@1\",\"1022\":\"109\",\"1023\":\"109#一、培养目标和要求\",\"1024\":\"109#一-培养目标\",\"1025\":\"109#二-培养要求\",\"1026\":\"109#二、学制和学习年限\",\"1027\":\"109#三、专业方向\",\"1028\":\"109#四、培养方式\",\"1029\":\"109#五、课程设置及学分要求\",\"1030\":\"109#一-学分要求\",\"1031\":\"109#二-补修课程\",\"1032\":\"109#三-其他说明\",\"1033\":\"109#六、主要培养环节及要求\",\"1034\":\"109#一-制定个人培养计划\",\"1035\":\"109#二-专业实践\",\"1036\":\"109#三-中期考核\",\"1037\":\"109#四-学位论文\",\"1038\":\"109#_1-论文选题开题\",\"1039\":\"109#五-毕业与学位授予\",\"1040\":\"109#七、本学科主要文献和书目\",\"1041\":\"111\",\"1042\":\"111@0\",\"1043\":\"111@1\",\"1044\":\"112\",\"1045\":\"112@0\",\"1046\":\"112@1\",\"1047\":\"113\",\"1048\":\"113@0\",\"1049\":\"113@1\",\"1050\":\"114\",\"1051\":\"114#第一周文献\",\"1052\":\"114#太赫兹的概念\",\"1053\":\"114#超材料的概念\",\"1054\":\"114#专业名词学习\",\"1055\":\"114@0\",\"1056\":\"114@1\",\"1057\":\"115\",\"1058\":\"115#一、是什么的问题\",\"1059\":\"115#二、先入为主-感性认知\",\"1060\":\"115#三、系统学习-理性认知\",\"1061\":\"115#四、知行合一-实践的方法\",\"1062\":\"115#五、质疑、假设和验证结果\",\"1063\":\"115#六、工具\",\"1064\":\"115@0\",\"1065\":\"115@1\",\"1066\":\"116\",\"1067\":\"116#文献检索平台\",\"1068\":\"116#文献搜索引擎\",\"1069\":\"116#中文文献\",\"1070\":\"116#英文文献\",\"1071\":\"116#研究方向的检索词\",\"1072\":\"116@0\",\"1073\":\"116@1\",\"1074\":\"117\",\"1075\":\"117#文献管理工具\",\"1076\":\"117#endnote\",\"1077\":\"117#mendeley\",\"1078\":\"117#noteexpress\",\"1079\":\"117#zotero\",\"1080\":\"117#f1000-workspace\",\"1081\":\"117#zotero-1\",\"1082\":\"117#zotero官方文档\",\"1083\":\"117#zotero中文社区\",\"1084\":\"117#_1-导入文献\",\"1085\":\"117#_2-文献管理\",\"1086\":\"117#_3-生成引文报告\",\"1087\":\"117#_4-数据同步和备份\",\"1088\":\"117#_5-设置首选项\",\"1089\":\"117#_6-其他\",\"1090\":\"117@0\",\"1091\":\"117@1\",\"1092\":\"118\",\"1093\":\"118@0\",\"1094\":\"118@1\",\"1095\":\"119\",\"1096\":\"119@0\",\"1097\":\"119@1\",\"1098\":\"120\",\"1099\":\"120#latex环境配置\",\"1100\":\"120#windows\",\"1101\":\"120#mac\",\"1102\":\"120#linux\",\"1103\":\"120#总结\",\"1104\":\"120#vscode配置latex环境\",\"1105\":\"120#latex基础\",\"1106\":\"120#命令与环境\",\"1107\":\"120#基本结构\",\"1108\":\"120#常用命令\",\"1109\":\"120#特殊字符\",\"1110\":\"120#文件输出\",\"1111\":\"120#段落与文本\",\"1112\":\"120@0\",\"1113\":\"120@1\",\"1114\":\"121\",\"1115\":\"121#matlab\",\"1116\":\"121#matlab简介\",\"1117\":\"121#matlab系统组成\",\"1118\":\"121#_1-matlab开发环境\",\"1119\":\"121#_2-matlab数学函数库\",\"1120\":\"121#_3-matlab语言\",\"1121\":\"121#_4-matlab图形处理系统\",\"1122\":\"121#_5-matlab应用程序接口\",\"1123\":\"121#matlab基础\",\"1124\":\"121#命令\",\"1125\":\"121#会话管理\",\"1126\":\"121#系统命令\",\"1127\":\"121#数据类型\",\"1128\":\"121#矩阵\",\"1129\":\"121#_1-创建矩阵\",\"1130\":\"121#_1-1-直接定义矩阵\",\"1131\":\"121#_1-2-使用函数创建特殊矩阵\",\"1132\":\"121#_2-矩阵操作\",\"1133\":\"121#_2-1-矩阵加减法\",\"1134\":\"121#_2-2-矩阵乘法\",\"1135\":\"121#_2-3-矩阵转置\",\"1136\":\"121#_2-4-矩阵求逆\",\"1137\":\"121#_3-矩阵索引和切片\",\"1138\":\"121#_3-1-基本索引\",\"1139\":\"121#_3-2-矩阵切片\",\"1140\":\"121#_4-基本矩阵函数\",\"1141\":\"121#_4-1-矩阵大小\",\"1142\":\"121#_4-2-矩阵的行列和对角线\",\"1143\":\"121#_4-3-矩阵的行列式和特征值\",\"1144\":\"121#示例代码\",\"1145\":\"121#运算符\",\"1146\":\"121#_1-算术运算符\",\"1147\":\"121#_2-关系运算符\",\"1148\":\"121#_3-逻辑运算符\",\"1149\":\"121#_4-按位运算符\",\"1150\":\"121#_5-集合运算符\",\"1151\":\"121#_6-特殊字符\",\"1152\":\"121#示例代码-matlab-运算符使用\",\"1153\":\"121#数组和向量\",\"1154\":\"121#数组\",\"1155\":\"121#向量\",\"1156\":\"121#数组和向量的常用操作\",\"1157\":\"121#matlab编程\",\"1158\":\"121#分支语句\",\"1159\":\"121#_1-if-语句\",\"1160\":\"121#_2-if-else-语句\",\"1161\":\"121#_3-if-elseif-else-语句\",\"1162\":\"121#_4-switch-case-语句\",\"1163\":\"121#_5-嵌套分支语句\",\"1164\":\"121#循环语句\",\"1165\":\"121#_1-for-循环\",\"1166\":\"121#_2-while-循环\",\"1167\":\"121#_3-break-语句\",\"1168\":\"121#_4-continue-语句\",\"1169\":\"121#_5-嵌套循环\",\"1170\":\"121#_6-循环与条件语句结合\",\"1171\":\"121#函数\",\"1172\":\"121#_1-定义函数\",\"1173\":\"121#_2-函数输入与输出\",\"1174\":\"121#_3-函数的局部变量与全局变量\",\"1175\":\"121#_4-嵌套函数\",\"1176\":\"121#_5-匿名函数\",\"1177\":\"121#_6-函数句柄\",\"1178\":\"121#_7-可变输入与输出参数\",\"1179\":\"121#_8-函数文档\",\"1180\":\"121#m文件\",\"1181\":\"121#_1-脚本文件\",\"1182\":\"121#_2-函数文件\",\"1183\":\"121#_3-类文件\",\"1184\":\"121#_4-脚本与函数的区别\",\"1185\":\"121#_5-单元测试文件\",\"1186\":\"121#_6-如何创建和编辑-m-文件\",\"1187\":\"121#_7-注释\",\"1188\":\"121#_8-调试-m-文件\",\"1189\":\"121#数据输入输出\",\"1190\":\"121#_1-数据输入\",\"1191\":\"121#_1-1-从命令行输入\",\"1192\":\"121#_1-2-从文件读取数据\",\"1193\":\"121#_2-数据输出\",\"1194\":\"121#_2-1-输出到命令行\",\"1195\":\"121#_2-2-保存数据到文件\",\"1196\":\"121#_3-示例\",\"1197\":\"121#官方文档\",\"1198\":\"121#app构建\",\"1199\":\"121#matlab绘图\",\"1200\":\"121#_1-基本绘图函数\",\"1201\":\"121#_1-1-绘制二维图\",\"1202\":\"121#_1-2-绘制散点图\",\"1203\":\"121#_1-3-绘制柱状图\",\"1204\":\"121#_1-4-绘制饼图\",\"1205\":\"121#_2-三维绘图\",\"1206\":\"121#_2-1-绘制三维曲线图\",\"1207\":\"121#_2-2-绘制三维网格图\",\"1208\":\"121#_3-子图和多图\",\"1209\":\"121#_3-1-绘制多个子图\",\"1210\":\"121#_3-2-在同一图上绘制多条曲线\",\"1211\":\"121#_4-导出图像\",\"1212\":\"121#_5-高级绘图\",\"1213\":\"121#绘图文档\",\"1214\":\"121#matlab数学\",\"1215\":\"121#_1-基本数学运算\",\"1216\":\"121#_1-1-算术运算\",\"1217\":\"121#_1-2-常数\",\"1218\":\"121#_1-3-三角函数\",\"1219\":\"121#_1-4-指数和对数函数\",\"1220\":\"121#_2-向量和矩阵运算\",\"1221\":\"121#_2-1-向量运算\",\"1222\":\"121#_2-2-矩阵运算\",\"1223\":\"121#_3-微积分\",\"1224\":\"121#_3-1-符号计算\",\"1225\":\"121#_3-2-求导\",\"1226\":\"121#_3-3-积分\",\"1227\":\"121#_3-4-数值积分\",\"1228\":\"121#_4-概率和统计\",\"1229\":\"121#_4-1-基本统计量\",\"1230\":\"121#_4-2-概率分布\",\"1231\":\"121#_5-线性代数\",\"1232\":\"121#_5-1-求解线性方程组\",\"1233\":\"121#_5-2-特征值和特征向量\",\"1234\":\"121#官方文档-1\",\"1235\":\"121#matlab高级\",\"1236\":\"121#偏微分方程工具箱\",\"1237\":\"121#优化工具箱\",\"1238\":\"121#小波分析工具箱\",\"1239\":\"121#simulink仿真基础\",\"1240\":\"121#simulink仿真应用\",\"1241\":\"121#句柄图形对象\",\"1242\":\"121#图形用户界面\",\"1243\":\"121#文件io\",\"1244\":\"121@0\",\"1245\":\"121@1\",\"1246\":\"122\",\"1247\":\"122#origin\",\"1248\":\"122@0\",\"1249\":\"122@1\",\"1250\":\"123\",\"1251\":\"123@0\",\"1252\":\"123@1\",\"1253\":\"124\",\"1254\":\"124@0\",\"1255\":\"124@1\",\"1256\":\"125\",\"1257\":\"125#java\",\"1258\":\"125#java简介\",\"1259\":\"125#主要特性\",\"1260\":\"125#java的版本和体系\",\"1261\":\"125#三个版本\",\"1262\":\"125#java的体系架构\",\"1263\":\"125#jvm\",\"1264\":\"125#_1-jvm的基本概念\",\"1265\":\"125#_2-jvm的主要组件\",\"1266\":\"125#_3-jvm的工作过程\",\"1267\":\"125#_4-jvm的调优与管理\",\"1268\":\"125#_5-jvm与多线程\",\"1269\":\"125#_6-常见jvm问题与调试\",\"1270\":\"125#java开发环境\",\"1271\":\"125#windows开发环境\",\"1272\":\"125#ide\",\"1273\":\"125#基础语法\",\"1274\":\"125#hello-world\",\"1275\":\"125#基本规则\",\"1276\":\"125#标识符\",\"1277\":\"125#修饰符\",\"1278\":\"125#变量\",\"1279\":\"125#关键字\",\"1280\":\"125#注释\",\"1281\":\"125#单行注释\",\"1282\":\"125#多行注释\",\"1283\":\"125#文档注释\",\"1284\":\"125#java编译运行\",\"1285\":\"125#基本数据类型\",\"1286\":\"125#_1-整数类型-integer-types\",\"1287\":\"125#_2-浮点类型-floating-point-types\",\"1288\":\"125#_3-字符类型-character-type\",\"1289\":\"125#_4-布尔类型-boolean-type\",\"1290\":\"125#类型默认值\",\"1291\":\"125#引用类型\",\"1292\":\"125#常量\",\"1293\":\"125#类型转换\",\"1294\":\"125#_1-自动类型转换-implicit-casting\",\"1295\":\"125#_2-强制类型转换-explicit-casting\",\"1296\":\"125#_3-特殊类型转换\",\"1297\":\"125#字符与数值类型的转换\",\"1298\":\"125#字符串与基本数据类型的转换\",\"1299\":\"125#_4-类型转换的注意事项\",\"1300\":\"125#变量-1\",\"1301\":\"125#_1-局部变量-local-variables\",\"1302\":\"125#_2-实例变量-instance-variables\",\"1303\":\"125#_3-类变量-class-variables\",\"1304\":\"125#变量的声明和初始化\",\"1305\":\"125#变量命名规则\",\"1306\":\"125#修饰符-1\",\"1307\":\"125#_1-访问修饰符-access-modifiers\",\"1308\":\"125#_2-非访问修饰符-non-access-modifiers\",\"1309\":\"125#修饰符的组合\",\"1310\":\"125#运算符\",\"1311\":\"125#_1-算术运算符-arithmetic-operators\",\"1312\":\"125#_2-赋值运算符-assignment-operators\",\"1313\":\"125#_3-比较运算符-relational-operators\",\"1314\":\"125#_4-逻辑运算符-logical-operators\",\"1315\":\"125#_5-位运算符-bitwise-operators\",\"1316\":\"125#_6-三元运算符-ternary-operator\",\"1317\":\"125#_7-instanceof运算符\",\"1318\":\"125#_8-字符串连接运算符\",\"1319\":\"125#语句\",\"1320\":\"125#_1-分支语句\",\"1321\":\"125#_1-1-if-else语句\",\"1322\":\"125#_1-2-switch语句\",\"1323\":\"125#_2-循环语句\",\"1324\":\"125#_2-1-for循环\",\"1325\":\"125#_2-2-增强型for循环-for-each\",\"1326\":\"125#_2-3-while循环\",\"1327\":\"125#_2-4-do-while循环\",\"1328\":\"125#_3-控制循环的语句\",\"1329\":\"125#_3-1-break\",\"1330\":\"125#_3-2-continue\",\"1331\":\"125#_4-嵌套循环和分支\",\"1332\":\"125#_5-总结\",\"1333\":\"125#函数-方法\",\"1334\":\"125#_1-方法的定义和调用\",\"1335\":\"125#_1-1-定义方法\",\"1336\":\"125#_1-2-调用方法\",\"1337\":\"125#_2-方法的参数\",\"1338\":\"125#_2-1-参数传递\",\"1339\":\"125#_2-2-可变参数\",\"1340\":\"125#_3-返回值\",\"1341\":\"125#_3-1-返回基本数据类型\",\"1342\":\"125#_3-2-返回引用数据类型\",\"1343\":\"125#_4-方法的重载\",\"1344\":\"125#_5-静态方法\",\"1345\":\"125#_6-递归方法\",\"1346\":\"125#_7-方法的作用域\",\"1347\":\"125#_8-方法的修饰符\",\"1348\":\"125#_9-总结\",\"1349\":\"125#数组\",\"1350\":\"125#_1-创建数组\",\"1351\":\"125#_1-1-声明和初始化\",\"1352\":\"125#_1-2-使用数组字面量初始化\",\"1353\":\"125#_2-访问数组元素\",\"1354\":\"125#_3-数组的长度\",\"1355\":\"125#_4-遍历数组\",\"1356\":\"125#_4-1-使用for循环\",\"1357\":\"125#_4-2-使用for-each循环\",\"1358\":\"125#_5-多维数组\",\"1359\":\"125#_5-1-创建和初始化二维数组\",\"1360\":\"125#_5-2-访问和遍历二维数组\",\"1361\":\"125#_6-java中的数组操作\",\"1362\":\"125#_6-1-数组的复制\",\"1363\":\"125#_6-2-数组的排序\",\"1364\":\"125#_6-3-搜索数组中的元素\",\"1365\":\"125#_7-常见问题\",\"1366\":\"125#_8-总结\",\"1367\":\"125#字符串\",\"1368\":\"125#_1-string-类\",\"1369\":\"125#_1-1-特点\",\"1370\":\"125#_1-2-常用方法\",\"1371\":\"125#_2-stringbuffer-类\",\"1372\":\"125#_2-1-特点\",\"1373\":\"125#_2-2-常用方法\",\"1374\":\"125#_3-stringbuilder-类\",\"1375\":\"125#_3-1-特点\",\"1376\":\"125#_3-2-常用方法\",\"1377\":\"125#_4-string-vs-stringbuffer-vs-stringbuilder\",\"1378\":\"125#_5-选择使用哪种类\",\"1379\":\"125#_6-总结\",\"1380\":\"125#number类\",\"1381\":\"125#_1-number-类概述\",\"1382\":\"125#_1-1-常用方法\",\"1383\":\"125#_2-number-类的子类\",\"1384\":\"125#_3-示例代码\",\"1385\":\"125#_4-自动装箱和拆箱\",\"1386\":\"125#_5-数值类的用法\",\"1387\":\"125#_6-总结-1\",\"1388\":\"125#math类\",\"1389\":\"125#_1-math-类概述\",\"1390\":\"125#_1-1-特性\",\"1391\":\"125#_2-常用方法\",\"1392\":\"125#_2-1-基本数学运算\",\"1393\":\"125#_2-2-三角函数\",\"1394\":\"125#_2-3-对数和幂运算\",\"1395\":\"125#_2-4-随机数生成\",\"1396\":\"125#_3-常量\",\"1397\":\"125#_4-math类的使用场景\",\"1398\":\"125#_5-总结-1\",\"1399\":\"125#日期时间\",\"1400\":\"125#_1-java-util-date-和-java-util-calendar\",\"1401\":\"125#_1-1-date-类\",\"1402\":\"125#_1-2-calendar-类\",\"1403\":\"125#_2-java-time-包\",\"1404\":\"125#_2-1-localdate、localtime-和-localdatetime\",\"1405\":\"125#_2-2-zoneddatetime\",\"1406\":\"125#_2-3-duration-和-period\",\"1407\":\"125#_3-日期时间格式化\",\"1408\":\"125#_4-总结\",\"1409\":\"125#正则表达式\",\"1410\":\"125#_1-基本概念\",\"1411\":\"125#_2-常用正则表达式语法\",\"1412\":\"125#_2-1-元字符\",\"1413\":\"125#_2-2-量词\",\"1414\":\"125#_3-使用-pattern-和-matcher-类\",\"1415\":\"125#_3-1-pattern-类\",\"1416\":\"125#_3-2-matcher-类\",\"1417\":\"125#_4-常见应用场景\",\"1418\":\"125#_5-示例-验证电子邮件地址\",\"1419\":\"125#_6-总结-2\",\"1420\":\"125#输入输出\",\"1421\":\"125#_1-使用-scanner-类读取用户输入\",\"1422\":\"125#_1-1-基本用法\",\"1423\":\"125#_1-2-scanner-常用方法\",\"1424\":\"125#_2-使用-system-out-输出信息\",\"1425\":\"125#_2-1-基本用法\",\"1426\":\"125#_2-2-system-out-常用方法\",\"1427\":\"125#_3-综合示例-用户输入输出\",\"1428\":\"125#_4-异常处理\",\"1429\":\"125#_5-总结-2\",\"1430\":\"125#文件io\",\"1431\":\"125#_1-字符流-vs-字节流\",\"1432\":\"125#_2-字符流\",\"1433\":\"125#_2-1-filereader-和-filewriter\",\"1434\":\"125#_2-2-bufferedreader-和-bufferedwriter\",\"1435\":\"125#_3-字节流\",\"1436\":\"125#_3-1-fileinputstream-和-fileoutputstream\",\"1437\":\"125#_3-2-bufferedinputstream-和-bufferedoutputstream\",\"1438\":\"125#_4-文件操作\",\"1439\":\"125#_4-1-file-类\",\"1440\":\"125#_5-nio-new-i-o\",\"1441\":\"125#_6-总结-3\",\"1442\":\"125#异常处理\",\"1443\":\"125#_1-基本概念-1\",\"1444\":\"125#_2-异常处理语法\",\"1445\":\"125#_2-1-try-catch-语句\",\"1446\":\"125#_2-2-finally-语句\",\"1447\":\"125#_2-3-throw-关键字\",\"1448\":\"125#_2-4-自定义异常\",\"1449\":\"125#_3-异常分类\",\"1450\":\"125#_3-1-检查异常-checked-exception\",\"1451\":\"125#_3-2-非检查异常-unchecked-exception\",\"1452\":\"125#_4-异常处理最佳实践\",\"1453\":\"125#_5-总结-3\",\"1454\":\"125@0\",\"1455\":\"125@1\",\"1456\":\"126\",\"1457\":\"126#java基础\",\"1458\":\"126#java高级\",\"1459\":\"126#计算机基础\",\"1460\":\"126#javaweb\",\"1461\":\"126#中间件\",\"1462\":\"126#分布式微服务\",\"1463\":\"126#大数据\",\"1464\":\"126@0\",\"1465\":\"126@1\",\"1466\":\"127\",\"1467\":\"127#java对象和类\",\"1468\":\"127#_1-类-class\",\"1469\":\"127#_2-对象-object\",\"1470\":\"127#_3-继承-inheritance\",\"1471\":\"127#_4-封装-encapsulation\",\"1472\":\"127#_5-多态-polymorphism\",\"1473\":\"127#_6-抽象-abstraction\",\"1474\":\"127#_7-接口-interface\",\"1475\":\"127#_8-方法-method\",\"1476\":\"127#_9-重载-overloading\",\"1477\":\"127#类源文件声明\",\"1478\":\"127#对象修饰符\",\"1479\":\"127#_1-访问修饰符\",\"1480\":\"127#_1-1-public\",\"1481\":\"127#_1-2-protected\",\"1482\":\"127#_1-3-default-无修饰符\",\"1483\":\"127#_1-4-private\",\"1484\":\"127#_2-类修饰符\",\"1485\":\"127#_2-1-abstract\",\"1486\":\"127#_2-2-final\",\"1487\":\"127#_3-方法修饰符\",\"1488\":\"127#_3-1-static\",\"1489\":\"127#_3-2-synchronized\",\"1490\":\"127#_3-3-volatile\",\"1491\":\"127#_3-4-transient\",\"1492\":\"127#_3-5-native\",\"1493\":\"127#_4-字段修饰符\",\"1494\":\"127#_4-1-enum\",\"1495\":\"127#_5-修饰符的组合\",\"1496\":\"127#面向对象的关键字\",\"1497\":\"127#_1-class\",\"1498\":\"127#_2-interface\",\"1499\":\"127#_3-extends\",\"1500\":\"127#_4-implements\",\"1501\":\"127#_5-abstract\",\"1502\":\"127#_6-final\",\"1503\":\"127#_7-static\",\"1504\":\"127#_8-super\",\"1505\":\"127#_9-this\",\"1506\":\"127#_10-private、protected、public、default\",\"1507\":\"127#继承\",\"1508\":\"127#_1-继承的基本概念\",\"1509\":\"127#_2-继承的语法\",\"1510\":\"127#_3-示例代码\",\"1511\":\"127#_3-1-基本继承示例\",\"1512\":\"127#_3-2-构造函数和继承\",\"1513\":\"127#_3-3-方法重写\",\"1514\":\"127#_3-4-super-关键字\",\"1515\":\"127#_4-继承的注意事项\",\"1516\":\"127#_5-实例化\",\"1517\":\"127#重写和重载\",\"1518\":\"127#_1-重写-overriding\",\"1519\":\"127#_1-1-重写的规则\",\"1520\":\"127#_1-2-示例代码\",\"1521\":\"127#_2-重载-overloading\",\"1522\":\"127#_2-1-重载的规则\",\"1523\":\"127#_2-2-示例代码\",\"1524\":\"127#总结\",\"1525\":\"127#多态\",\"1526\":\"127#_1-多态的概念\",\"1527\":\"127#_2-静态多态-方法重载\",\"1528\":\"127#示例代码\",\"1529\":\"127#_3-动态多态-方法重写\",\"1530\":\"127#示例代码-1\",\"1531\":\"127#_4-多态的好处\",\"1532\":\"127#_5-多态与接口\",\"1533\":\"127#示例代码-2\",\"1534\":\"127#_6-注意事项\",\"1535\":\"127#向下转型\",\"1536\":\"127#_1-向下转型的基本概念\",\"1537\":\"127#_2-向下转型的注意事项\",\"1538\":\"127#_2-1-向下转型前的类型检查\",\"1539\":\"127#_2-2-classcastexception异常\",\"1540\":\"127#_3-向下转型的应用场景\",\"1541\":\"127#_3-1-多态的应用\",\"1542\":\"127#_3-2-处理集合中的多态对象\",\"1543\":\"127#总结-1\",\"1544\":\"127#代码块\",\"1545\":\"127#_1-普通代码块\",\"1546\":\"127#_2-构造块-初始化块\",\"1547\":\"127#_3-静态代码块\",\"1548\":\"127#_4-同步代码块\",\"1549\":\"127#_5-静态代码块与构造块的区别\",\"1550\":\"127#总结-2\",\"1551\":\"127#抽象\",\"1552\":\"127#_1-抽象类\",\"1553\":\"127#_1-1-定义抽象类\",\"1554\":\"127#_1-2-示例代码-1\",\"1555\":\"127#_2-接口\",\"1556\":\"127#_2-1-定义接口\",\"1557\":\"127#_2-2-示例代码-1\",\"1558\":\"127#_3-抽象类与接口的比较\",\"1559\":\"127#_4-使用抽象类和接口的场景\",\"1560\":\"127#_5-抽象方法和接口中的默认方法\",\"1561\":\"127#示例代码-3\",\"1562\":\"127#总结-3\",\"1563\":\"127#封装\",\"1564\":\"127#_1-封装的概念\",\"1565\":\"127#_2-如何实现封装\",\"1566\":\"127#_2-1-定义私有属性\",\"1567\":\"127#_2-2-提供公共方法\",\"1568\":\"127#_2-3-示例代码\",\"1569\":\"127#_3-封装的好处\",\"1570\":\"127#_4-封装与其他面向对象特性\",\"1571\":\"127#_5-封装的实践\",\"1572\":\"127#接口\",\"1573\":\"127#_1-接口的定义\",\"1574\":\"127#_1-1-定义接口\",\"1575\":\"127#_1-2-示例代码-2\",\"1576\":\"127#_2-实现接口\",\"1577\":\"127#_2-1-示例代码\",\"1578\":\"127#_3-接口的默认方法\",\"1579\":\"127#_3-1-示例代码\",\"1580\":\"127#_4-接口的静态方法\",\"1581\":\"127#_4-1-示例代码\",\"1582\":\"127#_5-接口的多重继承\",\"1583\":\"127#_5-1-示例代码\",\"1584\":\"127#_6-接口与抽象类的比较\",\"1585\":\"127#_7-接口的应用\",\"1586\":\"127#内部类\",\"1587\":\"127#_1-成员内部类-非静态内部类\",\"1588\":\"127#_1-1-定义成员内部类\",\"1589\":\"127#_1-2-成员内部类的特性\",\"1590\":\"127#_2-静态内部类-静态嵌套类\",\"1591\":\"127#_2-1-定义静态内部类\",\"1592\":\"127#_2-2-静态内部类的特性\",\"1593\":\"127#_3-局部内部类\",\"1594\":\"127#_3-1-定义局部内部类\",\"1595\":\"127#_3-2-局部内部类的特性\",\"1596\":\"127#_4-匿名内部类\",\"1597\":\"127#_4-1-定义匿名内部类\",\"1598\":\"127#_4-2-匿名内部类的特性\",\"1599\":\"127#_5-使用内部类的好处\",\"1600\":\"127#_6-内部类的使用注意事项\",\"1601\":\"127#总结-4\",\"1602\":\"127#枚举\",\"1603\":\"127#_1-定义枚举\",\"1604\":\"127#_1-1-基本语法\",\"1605\":\"127#_2-使用枚举\",\"1606\":\"127#_2-1-示例代码-1\",\"1607\":\"127#_3-枚举的字段和方法\",\"1608\":\"127#_3-1-示例代码-1\",\"1609\":\"127#_4-枚举的方法\",\"1610\":\"127#_4-1-示例代码-1\",\"1611\":\"127#_5-枚举的高级用法\",\"1612\":\"127#_5-1-示例代码-1\",\"1613\":\"127#_6-枚举的最佳实践\",\"1614\":\"127#_7-枚举与数据库\",\"1615\":\"127#总结-5\",\"1616\":\"127#包\",\"1617\":\"127#_1-包的概念\",\"1618\":\"127#_2-创建包\",\"1619\":\"127#_2-1-示例代码-2\",\"1620\":\"127#_3-使用包\",\"1621\":\"127#_3-1-导入单个类\",\"1622\":\"127#_3-2-导入整个包\",\"1623\":\"127#_4-包的访问控制\",\"1624\":\"127#_4-1-示例代码-2\",\"1625\":\"127#_5-包的目录结构\",\"1626\":\"127#_5-1-示例目录结构\",\"1627\":\"127#_6-包与类路径\",\"1628\":\"127#_6-1-编译\",\"1629\":\"127#_6-2-运行\",\"1630\":\"127#_7-java-标准包\",\"1631\":\"127#_8-自定义包的最佳实践\",\"1632\":\"127#总结-6\",\"1633\":\"127#反射\",\"1634\":\"127#_1-反射的基本概念\",\"1635\":\"127#_2-获取-class-对象\",\"1636\":\"127#_2-1-通过-class-forname\",\"1637\":\"127#_2-2-通过类名\",\"1638\":\"127#_2-3-通过对象的-getclass-方法\",\"1639\":\"127#_3-创建实例\",\"1640\":\"127#_4-访问字段\",\"1641\":\"127#_4-1-获取字段\",\"1642\":\"127#_4-2-读取和修改字段\",\"1643\":\"127#_5-调用方法\",\"1644\":\"127#_5-1-获取方法\",\"1645\":\"127#_5-2-调用方法\",\"1646\":\"127#_6-访问构造函数\",\"1647\":\"127#_6-1-获取构造函数\",\"1648\":\"127#_6-2-创建实例\",\"1649\":\"127#_7-反射的使用场景\",\"1650\":\"127#_8-反射的注意事项\",\"1651\":\"127#_9-示例代码\",\"1652\":\"127#总结-7\",\"1653\":\"127#java面向对象实践\",\"1654\":\"127#_1-定义包\",\"1655\":\"127#_2-主类\",\"1656\":\"127#_3-编译和运行\",\"1657\":\"127#_3-1-编译\",\"1658\":\"127#_3-2-运行\",\"1659\":\"127#总结-8\",\"1660\":\"127#项目概述\",\"1661\":\"127#java代码示例\",\"1662\":\"127#代码说明\",\"1663\":\"127#运行结果\",\"1664\":\"127#java-object类\",\"1665\":\"127#_1-object-类的作用\",\"1666\":\"127#_2-object-类的常用方法\",\"1667\":\"127#_2-1-tostring-方法\",\"1668\":\"127#_2-2-equals-object-obj-方法\",\"1669\":\"127#_2-3-hashcode-方法\",\"1670\":\"127#_2-4-getclass-方法\",\"1671\":\"127#_2-5-clone-方法\",\"1672\":\"127#_2-6-finalize-方法\",\"1673\":\"127#_2-7-wait-、notify-、notifyall-方法\",\"1674\":\"127#_3-重写-object-类的方法的最佳实践\",\"1675\":\"127#_3-1-重写-tostring-方法\",\"1676\":\"127#_3-2-重写-equals-和-hashcode-方法\",\"1677\":\"127#_4-示例代码\",\"1678\":\"127#_5-总结\",\"1679\":\"127#java-bean\",\"1680\":\"127#java-bean-的特征\",\"1681\":\"127#java-bean-的用途\",\"1682\":\"127#java-bean-示例\",\"1683\":\"127#总结-9\",\"1684\":\"127#lambda\",\"1685\":\"127#_1-lambda表达式的语法\",\"1686\":\"127#_2-lambda表达式与函数式接口\",\"1687\":\"127#_3-使用lambda表达式的场景\",\"1688\":\"127#_3-1-使用runnable接口\",\"1689\":\"127#_3-2-使用comparator接口\",\"1690\":\"127#_4-方法引用-method-references\",\"1691\":\"127#_5-内置函数式接口\",\"1692\":\"127#_6-流与lambda表达式\",\"1693\":\"127#_7-捕获lambda表达式中的变量\",\"1694\":\"127#总结-10\",\"1695\":\"127#包装类\",\"1696\":\"127#一、java-包装类有哪些\",\"1697\":\"127#二、包装类的使用\",\"1698\":\"127#三、装箱和拆箱\",\"1699\":\"127#_1-自动装箱-autoboxing\",\"1700\":\"127#_2-自动拆箱-unboxing\",\"1701\":\"127#四、手动装箱和拆箱\",\"1702\":\"127#_1-手动装箱示例\",\"1703\":\"127#_2-手动拆箱示例\",\"1704\":\"127#五、包装类的常用方法\",\"1705\":\"127#六、示例代码\",\"1706\":\"127#七、小结\",\"1707\":\"127#总结-11\",\"1708\":\"127#java-面向对象编程总结\",\"1709\":\"127#一、面向对象编程的四大基本特性\",\"1710\":\"127#二、类与对象\",\"1711\":\"127#三、构造器-constructor\",\"1712\":\"127#四、访问控制修饰符\",\"1713\":\"127#五、this-关键字\",\"1714\":\"127#六、super-关键字\",\"1715\":\"127#七、接口与抽象类的区别\",\"1716\":\"127#八、总结\",\"1717\":\"127@0\",\"1718\":\"127@1\",\"1719\":\"128\",\"1720\":\"128#java数据结构\",\"1721\":\"128#基本数据结构\",\"1722\":\"128#_1-数组-array\",\"1723\":\"128#_2-链表-linked-list\",\"1724\":\"128#java集合框架中的数据结构\",\"1725\":\"128#_1-列表-list\",\"1726\":\"128#_2-集合-set\",\"1727\":\"128#_3-队列-queue\",\"1728\":\"128#_4-映射-map\",\"1729\":\"128#特殊数据结构\",\"1730\":\"128#_1-栈-stack\",\"1731\":\"128#_2-堆-heap\",\"1732\":\"128#_3-图-graph\",\"1733\":\"128#自定义数据结构\",\"1734\":\"128#java集合类\",\"1735\":\"128#集合框架的核心接口\",\"1736\":\"128#常见集合类\",\"1737\":\"128#_1-list-e-接口及其实现类\",\"1738\":\"128#_2-set-e-接口及其实现类\",\"1739\":\"128#_3-queue-e-接口及其实现类\",\"1740\":\"128#_4-map-k-v-接口及其实现类\",\"1741\":\"128#集合工具类\",\"1742\":\"128#集合与线程安全\",\"1743\":\"128#list\",\"1744\":\"128#一、list-接口的基本概念\",\"1745\":\"128#二、list-接口常用方法\",\"1746\":\"128#三、arraylist-类\",\"1747\":\"128#_1-arraylist-的特点\",\"1748\":\"128#_2-示例-使用-arraylist\",\"1749\":\"128#四、linkedlist-类\",\"1750\":\"128#_1-linkedlist-的特点\",\"1751\":\"128#_2-示例-使用-linkedlist\",\"1752\":\"128#五、arraylist-与-linkedlist-的对比\",\"1753\":\"128#六、copyonwritearraylist-类\",\"1754\":\"128#示例-使用-copyonwritearraylist\",\"1755\":\"128#七、总结\",\"1756\":\"128#queue\",\"1757\":\"128#一、queue-接口的基本概念\",\"1758\":\"128#_1-queue-的特点\",\"1759\":\"128#_2-queue-的常用方法\",\"1760\":\"128#二、queue-的实现类\",\"1761\":\"128#三、linkedlist-作为-queue-的实现\",\"1762\":\"128#示例-使用-linkedlist-实现-queue\",\"1763\":\"128#四、priorityqueue-类\",\"1764\":\"128#示例-使用-priorityqueue\",\"1765\":\"128#五、arraydeque-类\",\"1766\":\"128#示例-使用-arraydeque-实现-queue\",\"1767\":\"128#六、blockingqueue-接口\",\"1768\":\"128#示例-使用-linkedblockingqueue\",\"1769\":\"128#七、总结-1\",\"1770\":\"128#stack\",\"1771\":\"128#一、stack-类的基本概念\",\"1772\":\"128#_1-stack-的特点\",\"1773\":\"128#_2-stack-类的常用方法\",\"1774\":\"128#二、stack-类的使用示例\",\"1775\":\"128#三、stack-的应用场景\",\"1776\":\"128#四、deque-作为栈的替代\",\"1777\":\"128#示例-使用-arraydeque-作为栈\",\"1778\":\"128#五、stack-与-arraydeque-的对比\",\"1779\":\"128#六、总结\",\"1780\":\"128#set\",\"1781\":\"128#一、set-接口的基本概念\",\"1782\":\"128#_1-set-的特点\",\"1783\":\"128#_2-set-接口的常用方法\",\"1784\":\"128#二、set-的实现类\",\"1785\":\"128#三、hashset-类\",\"1786\":\"128#示例-使用-hashset\",\"1787\":\"128#四、linkedhashset-类\",\"1788\":\"128#示例-使用-linkedhashset\",\"1789\":\"128#五、treeset-类\",\"1790\":\"128#示例-使用-treeset\",\"1791\":\"128#六、enumset-类\",\"1792\":\"128#示例-使用-enumset\",\"1793\":\"128#七、set-的常见操作和应用\",\"1794\":\"128#八、总结\",\"1795\":\"128#map\",\"1796\":\"128#一、map-接口的基本概念\",\"1797\":\"128#_1-map-的特点\",\"1798\":\"128#_2-map-接口的常用方法\",\"1799\":\"128#二、map-的实现类\",\"1800\":\"128#三、hashmap-类\",\"1801\":\"128#示例-使用-hashmap\",\"1802\":\"128#四、linkedhashmap-类\",\"1803\":\"128#示例-使用-linkedhashmap\",\"1804\":\"128#五、treemap-类\",\"1805\":\"128#示例-使用-treemap\",\"1806\":\"128#六、hashtable-类\",\"1807\":\"128#示例-使用-hashtable\",\"1808\":\"128#七、concurrenthashmap-类\",\"1809\":\"128#示例-使用-concurrenthashmap\",\"1810\":\"128#八、总结-1\",\"1811\":\"128#iterator\",\"1812\":\"128#一、java-中的迭代器-iterator\",\"1813\":\"128#_1-iterator-接口的基本方法\",\"1814\":\"128#_2-示例-使用-iterator-遍历集合\",\"1815\":\"128#_3-for-each-循环与迭代器\",\"1816\":\"128#二、java-中的生成器-generator\",\"1817\":\"128#_1-使用-iterator-接口模拟生成器\",\"1818\":\"128#示例-创建一个生成斐波那契数列的生成器\",\"1819\":\"128#_2-使用-stream-api-实现生成器\",\"1820\":\"128#示例-使用-stream-生成斐波那契数列\",\"1821\":\"128#三、listiterator-接口\",\"1822\":\"128#_1-listiterator-的基本方法\",\"1823\":\"128#_2-示例-使用-listiterator-遍历集合\",\"1824\":\"128#四、总结\",\"1825\":\"128#反射\",\"1826\":\"128#反射的基本概念\",\"1827\":\"128#获取-class-对象\",\"1828\":\"128#动态创建对象\",\"1829\":\"128#访问和修改字段\",\"1830\":\"128#调用方法\",\"1831\":\"128#示例-使用反射获取类的信息\",\"1832\":\"128#反射的用途\",\"1833\":\"128#反射的局限性和注意事项\",\"1834\":\"128#泛型\",\"1835\":\"128#基本概念\",\"1836\":\"128#语法\",\"1837\":\"128#常见用途\",\"1838\":\"128#限定泛型\",\"1839\":\"128#通配符\",\"1840\":\"128#注意事项\",\"1841\":\"128#注解\",\"1842\":\"128#基本概念-1\",\"1843\":\"128#常见的内置注解\",\"1844\":\"128#自定义注解\",\"1845\":\"128#注解的元注解\",\"1846\":\"128#处理注解\",\"1847\":\"128#注解的应用场景\",\"1848\":\"128#单元测试\",\"1849\":\"128#_1-什么是单元测试\",\"1850\":\"128#_2-java-单元测试框架\",\"1851\":\"128#_2-1-junit\",\"1852\":\"128#_3-编写junit测试用例\",\"1853\":\"128#_3-1-基本测试用例\",\"1854\":\"128#_3-2-运行测试\",\"1855\":\"128#_4-测试常用注解\",\"1856\":\"128#_5-断言-assertions\",\"1857\":\"128#_6-参数化测试\",\"1858\":\"128#_7-mocking-测试\",\"1859\":\"128#总结\",\"1860\":\"128#序列化\",\"1861\":\"128#序列化的用途\",\"1862\":\"128#序列化的基本要求\",\"1863\":\"128#序列化和反序列化\",\"1864\":\"128#transient-关键字\",\"1865\":\"128#externalizable-接口\",\"1866\":\"128#序列化的注意事项\",\"1867\":\"128#io流\",\"1868\":\"128#一、java-io-流的分类\",\"1869\":\"128#二、字节流-byte-streams\",\"1870\":\"128#_1-字节输入流-inputstream\",\"1871\":\"128#_2-字节输出流-outputstream\",\"1872\":\"128#三、字符流-character-streams\",\"1873\":\"128#_1-字符输入流-reader\",\"1874\":\"128#_2-字符输出流-writer\",\"1875\":\"128#四、常用的-io-流类\",\"1876\":\"128#五、序列化与反序列化\",\"1877\":\"128#六、文件流与缓冲流的区别\",\"1878\":\"128#七、java-nio-new-io\",\"1879\":\"128#八、总结-2\",\"1880\":\"128#java-nio\",\"1881\":\"128#一、java-nio-的主要组件\",\"1882\":\"128#二、channel-通道\",\"1883\":\"128#创建-filechannel-示例\",\"1884\":\"128#三、buffer-缓冲区\",\"1885\":\"128#buffer-的基本操作\",\"1886\":\"128#四、selector-选择器\",\"1887\":\"128#selector-的使用步骤\",\"1888\":\"128#五、java-nio-的非阻塞模式\",\"1889\":\"128#六、java-nio-实现网络通信的示例\",\"1890\":\"128#_1-nio-服务器\",\"1891\":\"128#_2-nio-客户端\",\"1892\":\"128#七、java-nio-与传统-io-的对比\",\"1893\":\"128#八、总结-3\",\"1894\":\"128#异常处理\",\"1895\":\"128#一、什么是异常\",\"1896\":\"128#二、异常的继承体系\",\"1897\":\"128#三、异常处理的关键字\",\"1898\":\"128#四、基本的异常处理机制\",\"1899\":\"128#输出\",\"1900\":\"128#五、异常处理的工作流程\",\"1901\":\"128#六、多个-catch-块\",\"1902\":\"128#输出-1\",\"1903\":\"128#七、使用-finally-块\",\"1904\":\"128#输出-2\",\"1905\":\"128#八、throw-和-throws\",\"1906\":\"128#使用-throw-抛出异常\",\"1907\":\"128#输出-3\",\"1908\":\"128#使用-throws-声明异常\",\"1909\":\"128#九、自定义异常\",\"1910\":\"128#十、最佳实践\",\"1911\":\"128#十一、总结\",\"1912\":\"128#日志\",\"1913\":\"128#一、java-日志的重要性\",\"1914\":\"128#二、java-常用的日志框架\",\"1915\":\"128#三、java-内置日志框架-java-util-logging\",\"1916\":\"128#_1-logger-类\",\"1917\":\"128#_2-日志级别\",\"1918\":\"128#_3-创建-logger-示例\",\"1919\":\"128#四、log4j-2\",\"1920\":\"128#_1-引入依赖\",\"1921\":\"128#_2-配置文件\",\"1922\":\"128#_3-使用-log4j-2-记录日志\",\"1923\":\"128#五、slf4j-和-logback\",\"1924\":\"128#_1-引入依赖-1\",\"1925\":\"128#_2-配置文件-1\",\"1926\":\"128#_3-使用-slf4j-和-logback-记录日志\",\"1927\":\"128#六、日志最佳实践\",\"1928\":\"128#七、总结-2\",\"1929\":\"128#网络编程\",\"1930\":\"128#一、java-网络编程的基本概念\",\"1931\":\"128#二、java-网络编程核心类和接口\",\"1932\":\"128#三、使用-inetaddress-类处理-ip-地址\",\"1933\":\"128#示例-获取主机的-ip-地址和主机名\",\"1934\":\"128#四、基于-tcp-的网络编程\",\"1935\":\"128#_1-实现-tcp-客户端\",\"1936\":\"128#_2-实现-tcp-服务器端\",\"1937\":\"128#五、基于-udp-的网络编程\",\"1938\":\"128#_1-实现-udp-客户端\",\"1939\":\"128#_2-实现-udp-服务器端\",\"1940\":\"128#六、使用-url-和-urlconnection-进行网络编程\",\"1941\":\"128#_1-使用-url-类\",\"1942\":\"128#_2-使用-urlconnection-类\",\"1943\":\"128#七、java-网络编程的高级特性\",\"1944\":\"128#八、总结-4\",\"1945\":\"128#正则表达式\",\"1946\":\"128#一、java-正则表达式的基础\",\"1947\":\"128#二、java-正则表达式的语法\",\"1948\":\"128#三、基本使用示例\",\"1949\":\"128#_1-匹配和查找\",\"1950\":\"128#_2-验证字符串格式\",\"1951\":\"128#四、使用-pattern-和-matcher-类的常用方法\",\"1952\":\"128#替换示例\",\"1953\":\"128#五、正则表达式的标志-flags\",\"1954\":\"128#示例-忽略大小写匹配\",\"1955\":\"128#六、分组与捕获\",\"1956\":\"128#示例-捕获组\",\"1957\":\"128#七、总结-3\",\"1958\":\"128#多线程\",\"1959\":\"128#一、什么是线程\",\"1960\":\"128#二、java-多线程的实现方式\",\"1961\":\"128#_1-继承-thread-类\",\"1962\":\"128#_2-实现-runnable-接口\",\"1963\":\"128#_3-使用-callable-和-future-接口\",\"1964\":\"128#三、线程的生命周期\",\"1965\":\"128#四、线程控制方法\",\"1966\":\"128#示例-使用-sleep-和-join-方法\",\"1967\":\"128#五、线程同步\",\"1968\":\"128#_1-使用-synchronized-关键字\",\"1969\":\"128#_2-使用-reentrantlock-类\",\"1970\":\"128#六、线程间通信\",\"1971\":\"128#七、java-并发工具类\",\"1972\":\"128#八、总结-5\",\"1973\":\"128#jdbc\",\"1974\":\"128#一、jdbc-简介\",\"1975\":\"128#二、jdbc-架构\",\"1976\":\"128#三、jdbc-的基本操作步骤\",\"1977\":\"128#四、jdbc-代码示例\",\"1978\":\"128#_1-加载数据库驱动程序\",\"1979\":\"128#_2-建立数据库连接\",\"1980\":\"128#_3-创建-sql-语句对象\",\"1981\":\"128#_4-执行-sql-语句\",\"1982\":\"128#_5-处理结果集\",\"1983\":\"128#_6-关闭连接\",\"1984\":\"128#五、使用-preparedstatement-进行查询和更新\",\"1985\":\"128#六、事务管理\",\"1986\":\"128#七、jdbc-驱动类型\",\"1987\":\"128#八、总结-6\",\"1988\":\"128#java8新特性\",\"1989\":\"128#_1-lambda-表达式\",\"1990\":\"128#_2-函数式接口\",\"1991\":\"128#_3-方法引用\",\"1992\":\"128#_4-stream-api\",\"1993\":\"128#_5-默认方法和静态方法\",\"1994\":\"128#_6-新的日期和时间-api-java-time\",\"1995\":\"128#_7-optional-类\",\"1996\":\"128#_8-nashorn-javascript-引擎\",\"1997\":\"128#_9-其它改进\",\"1998\":\"128#总结-1\",\"1999\":\"128#文档注释\",\"2000\":\"128#_1-什么是文档注释\",\"2001\":\"128#_2-常用的javadoc标签\",\"2002\":\"128#_3-使用javadoc工具生成文档\",\"2003\":\"128#_4-文档注释的最佳实践\",\"2004\":\"128#总结-2\",\"2005\":\"128#设计模式\",\"2006\":\"128#单例模式\",\"2007\":\"128#_1-单例模式的关键点\",\"2008\":\"128#_2-实现单例模式的几种方法\",\"2009\":\"128#_2-1-饿汉式-eager-initialization\",\"2010\":\"128#_2-2-懒汉式-lazy-initialization\",\"2011\":\"128#_2-3-线程安全的懒汉式-synchronized-method\",\"2012\":\"128#_2-4-双重检查锁-double-checked-locking\",\"2013\":\"128#_2-5-静态内部类-bill-pugh-singleton\",\"2014\":\"128#_2-6-枚举单例-enum-singleton\",\"2015\":\"128#_3-单例模式的优缺点\",\"2016\":\"128#_4-单例模式的应用场景\",\"2017\":\"128#总结-3\",\"2018\":\"128#gui\",\"2019\":\"128#一、java-gui-编程概述\",\"2020\":\"128#二、swing-编程基础\",\"2021\":\"128#_1-swing-的核心类\",\"2022\":\"128#_2-创建一个简单的-swing-应用程序\",\"2023\":\"128#代码说明\",\"2024\":\"128#三、swing-组件和布局管理器\",\"2025\":\"128#_1-常用-swing-组件\",\"2026\":\"128#_2-布局管理器\",\"2027\":\"128#布局管理示例-flowlayout\",\"2028\":\"128#布局管理示例-borderlayout\",\"2029\":\"128#四、事件处理\",\"2030\":\"128#_1-常见事件监听器接口\",\"2031\":\"128#_2-添加事件监听器\",\"2032\":\"128#五、javafx-java-的现代-gui-框架\",\"2033\":\"128#示例-javafx-简单应用\",\"2034\":\"128#六、总结-1\",\"2035\":\"128#java-常用类和api\",\"2036\":\"128#一、java-核心类库\",\"2037\":\"128#_1-java-lang-包\",\"2038\":\"128#_2-java-util-包\",\"2039\":\"128#_3-java-io-包\",\"2040\":\"128#_4-java-net-包\",\"2041\":\"128#_5-java-time-包\",\"2042\":\"128#二、java-常用工具类和-api\",\"2043\":\"128#_1-java-util-regex-包\",\"2044\":\"128#_2-java-util-concurrent-包\",\"2045\":\"128#_3-java-security-包\",\"2046\":\"128#三、示例代码\",\"2047\":\"128#示例-使用-localdate-和-localdatetime\",\"2048\":\"128#示例-使用-pattern-和-matcher-进行正则表达式匹配\",\"2049\":\"128#四、总结-1\",\"2050\":\"128@0\",\"2051\":\"128@1\",\"2052\":\"129\",\"2053\":\"129#下载安装\",\"2054\":\"129#配置环境\",\"2055\":\"129#快捷键\",\"2056\":\"129#项目管理\",\"2057\":\"129#调试程序\",\"2058\":\"129@0\",\"2059\":\"129@1\",\"2060\":\"130\",\"2061\":\"130@0\",\"2062\":\"130@1\",\"2063\":\"131\",\"2064\":\"131@0\",\"2065\":\"131@1\",\"2066\":\"132\",\"2067\":\"132#线性表\",\"2068\":\"132#队列\",\"2069\":\"132#栈\",\"2070\":\"132#树\",\"2071\":\"132#图\",\"2072\":\"132#查找\",\"2073\":\"132#排序\",\"2074\":\"132@0\",\"2075\":\"132@1\",\"2076\":\"133\",\"2077\":\"133#设计原则\",\"2078\":\"133#设计模式\",\"2079\":\"133@0\",\"2080\":\"133@1\",\"2081\":\"134\",\"2082\":\"134@0\",\"2083\":\"134@1\",\"2084\":\"135\",\"2085\":\"135@0\",\"2086\":\"135@1\",\"2087\":\"136\",\"2088\":\"136@0\",\"2089\":\"136@1\",\"2090\":\"137\",\"2091\":\"137@0\",\"2092\":\"137@1\",\"2093\":\"138\",\"2094\":\"138@0\",\"2095\":\"138@1\",\"2096\":\"139\",\"2097\":\"139@0\",\"2098\":\"139@1\",\"2099\":\"140\",\"2100\":\"140@0\",\"2101\":\"140@1\",\"2102\":\"141\",\"2103\":\"141@0\",\"2104\":\"141@1\",\"2105\":\"142\",\"2106\":\"142@0\",\"2107\":\"142@1\",\"2108\":\"143\",\"2109\":\"143@0\",\"2110\":\"143@1\",\"2111\":\"144\",\"2112\":\"144@0\",\"2113\":\"144@1\",\"2114\":\"145\",\"2115\":\"145@0\",\"2116\":\"145@1\",\"2117\":\"156\",\"2118\":\"156@0\",\"2119\":\"156@1\",\"2120\":\"157\",\"2121\":\"157@0\",\"2122\":\"157@1\",\"2123\":\"158\",\"2124\":\"158#numpy\",\"2125\":\"158@0\",\"2126\":\"158@1\",\"2127\":\"159\",\"2128\":\"159@0\",\"2129\":\"159@1\",\"2130\":\"160\",\"2131\":\"160#设想\",\"2132\":\"160#功能\",\"2133\":\"160#模块\",\"2134\":\"160#界面\",\"2135\":\"160#核心\",\"2136\":\"160@0\",\"2137\":\"160@1\",\"2138\":\"161\",\"2139\":\"161@0\",\"2140\":\"161@1\",\"2141\":\"162\",\"2142\":\"162@0\",\"2143\":\"162@1\",\"2144\":\"165\",\"2145\":\"165@0\",\"2146\":\"165@1\",\"2147\":\"166\",\"2148\":\"166@0\",\"2149\":\"166@1\",\"2150\":\"167\",\"2151\":\"167#_1-数据结构\",\"2152\":\"167#_1-1数据结构是什么\",\"2153\":\"167#_1-2数据结构的分类\",\"2154\":\"167#_1-3数字编码格式\",\"2155\":\"167#_2-算法\",\"2156\":\"167#_2-1算法是什么\",\"2157\":\"167#_2-2算法效率的评估\",\"2158\":\"167#_2-3算法中的迭代与递归\",\"2159\":\"167#_2-3-1迭代\",\"2160\":\"167#_2-3-2递归\",\"2161\":\"167#_2-3-3选择迭代还是递归\",\"2162\":\"167#_2-4时间复杂度\",\"2163\":\"167#_2-5空间复杂度\",\"2164\":\"167#空间复杂度的考虑因素\",\"2165\":\"167#典型例子\",\"2166\":\"167#线性表\",\"2167\":\"167#数组\",\"2168\":\"167#链表\",\"2169\":\"167#栈和队列\",\"2170\":\"167#哈希表\",\"2171\":\"167#树\",\"2172\":\"167#堆\",\"2173\":\"167#图\",\"2174\":\"167#搜索\",\"2175\":\"167#排序\",\"2176\":\"167#递归\",\"2177\":\"167#分治\",\"2178\":\"167#回溯\",\"2179\":\"167#动态规划\",\"2180\":\"167#贪心\",\"2181\":\"167@0\",\"2182\":\"167@1\",\"2183\":\"168\",\"2184\":\"168@0\",\"2185\":\"168@1\",\"2186\":\"169\",\"2187\":\"169#操作系统导论\",\"2188\":\"169#操作系统是什么\",\"2189\":\"169#操作系统的作用\",\"2190\":\"169#操作系统的历史\",\"2191\":\"169#操作系统的特性\",\"2192\":\"169#操作系统的功能\",\"2193\":\"169#进程\",\"2194\":\"169#处理机\",\"2195\":\"169#存储器\",\"2196\":\"169#虚拟存储器\",\"2197\":\"169#io\",\"2198\":\"169#文件系统\",\"2199\":\"169#持久化\",\"2200\":\"169#系统接口\",\"2201\":\"169#多处理机\",\"2202\":\"169#多媒体系统\",\"2203\":\"169#安全\",\"2204\":\"169@0\",\"2205\":\"169@1\",\"2206\":\"170\",\"2207\":\"170#_1-计算机科学基础\",\"2208\":\"170#_2-算法与数据结构\",\"2209\":\"170#_3-编程基础\",\"2210\":\"170#_4-计算理论\",\"2211\":\"170#_5-操作系统与系统编程\",\"2212\":\"170#_6-网络与通信\",\"2213\":\"170#_7-数据库\",\"2214\":\"170#_8-人工智能与机器学习\",\"2215\":\"170#_9-人机交互\",\"2216\":\"170#_10-计算机伦理与社会影响\",\"2217\":\"170#学习计算机科学导论的建议\",\"2218\":\"170@0\",\"2219\":\"170@1\",\"2220\":\"171\",\"2221\":\"171@0\",\"2222\":\"171@1\",\"2223\":\"172\",\"2224\":\"172@0\",\"2225\":\"172@1\",\"2226\":\"173\",\"2227\":\"173@0\",\"2228\":\"173@1\",\"2229\":\"174\",\"2230\":\"174@0\",\"2231\":\"174@1\",\"2232\":\"175\",\"2233\":\"175@0\",\"2234\":\"175@1\",\"2235\":\"176\",\"2236\":\"176@0\",\"2237\":\"176@1\",\"2238\":\"177\",\"2239\":\"177@0\",\"2240\":\"177@1\",\"2241\":\"178\",\"2242\":\"178@0\",\"2243\":\"178@1\",\"2244\":\"179\",\"2245\":\"179#导数\",\"2246\":\"179#微分\",\"2247\":\"179#积分\",\"2248\":\"179#导数和微分\",\"2249\":\"179#导数和积分\",\"2250\":\"179#微分和积分\",\"2251\":\"179@0\",\"2252\":\"179@1\",\"2253\":\"180\",\"2254\":\"180@0\",\"2255\":\"181\",\"2256\":\"181#标题-2\",\"2257\":\"181#标题-3\",\"2258\":\"181@0\",\"2259\":\"181@1\",\"2260\":\"182\",\"2261\":\"182@0\",\"2262\":\"182@1\",\"2263\":\"183\",\"2264\":\"183@0\",\"2265\":\"183@1\",\"2266\":\"184\",\"2267\":\"184@0\",\"2268\":\"184@1\",\"2269\":\"185\",\"2270\":\"185@0\",\"2271\":\"185@1\",\"2272\":\"186\",\"2273\":\"186@0\",\"2274\":\"186@1\",\"2275\":\"188\",\"2276\":\"188@0\",\"2277\":\"188@1\",\"2278\":\"189\",\"2279\":\"189@0\",\"2280\":\"189@1\",\"2281\":\"190\",\"2282\":\"190@0\",\"2283\":\"190@1\",\"2284\":\"191\",\"2285\":\"192\",\"2286\":\"193\",\"2287\":\"194\",\"2288\":\"195\",\"2289\":\"196\",\"2290\":\"197\",\"2291\":\"198\",\"2292\":\"199\",\"2293\":\"200\",\"2294\":\"201\",\"2295\":\"202\",\"2296\":\"203\",\"2297\":\"204\",\"2298\":\"205\",\"2299\":\"206\",\"2300\":\"207\",\"2301\":\"208\",\"2302\":\"209\",\"2303\":\"210\",\"2304\":\"211\",\"2305\":\"212\",\"2306\":\"213\",\"2307\":\"214\",\"2308\":\"215\",\"2309\":\"216\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[1],\"2\":[null,null,1],\"3\":[null,null,2],\"4\":[1],\"5\":[1],\"6\":[1],\"7\":[null,null,1],\"8\":[1],\"9\":[1,173],\"10\":[1,93],\"11\":[1,255],\"12\":[1,187],\"13\":[1,113],\"14\":[null,null,1],\"15\":[null,null,2],\"16\":[1,7],\"17\":[2,9],\"18\":[2,5],\"19\":[2,7],\"20\":[2],\"21\":[1,8],\"22\":[1,7],\"23\":[2,10],\"24\":[2,13],\"25\":[2,7],\"26\":[2],\"27\":[1,7],\"28\":[1,19],\"29\":[2,13],\"30\":[2,6],\"31\":[2,8],\"32\":[2,6],\"33\":[2,4],\"34\":[2,6],\"35\":[2,9],\"36\":[null,null,1],\"37\":[null,null,2],\"38\":[1],\"39\":[null,null,1],\"40\":[null,null,2],\"41\":[1],\"42\":[null,null,1],\"43\":[1],\"44\":[null,null,1],\"45\":[1],\"46\":[2,2],\"47\":[2,2],\"48\":[null,null,1],\"49\":[null,null,2],\"50\":[1],\"51\":[2,2],\"52\":[2,2],\"53\":[null,null,1],\"54\":[null,null,2],\"55\":[1],\"56\":[null,null,1],\"57\":[3,1],\"58\":[null,null,1],\"59\":[null,null,1],\"60\":[1],\"61\":[null,null,2],\"62\":[1],\"63\":[5,3],\"64\":[null,null,1],\"65\":[null,null,4],\"66\":[1],\"67\":[null,null,1],\"68\":[null,null,2],\"69\":[1,9],\"70\":[null,null,1],\"71\":[null,null,1],\"72\":[1],\"73\":[2],\"74\":[3],\"75\":[null,null,1],\"76\":[null,null,1],\"77\":[1,8],\"78\":[null,null,1],\"79\":[null,null,1],\"80\":[1],\"81\":[null,null,1],\"82\":[1],\"83\":[null,null,1],\"84\":[3],\"85\":[null,null,1],\"86\":[null,null,3],\"87\":[1],\"88\":[null,null,1],\"89\":[null,null,3],\"90\":[1],\"91\":[1],\"92\":[1],\"93\":[null,null,1],\"94\":[1],\"95\":[null,null,1],\"96\":[1],\"97\":[null,null,1],\"98\":[1],\"99\":[2],\"100\":[1,10],\"101\":[1],\"102\":[1],\"103\":[null,null,1],\"104\":[null,null,2],\"105\":[1],\"106\":[null,null,1],\"107\":[null,null,2],\"108\":[1],\"109\":[null,null,1],\"110\":[null,null,2],\"111\":[1],\"112\":[null,null,1],\"113\":[null,null,2],\"114\":[1],\"115\":[null,null,1],\"116\":[null,null,2],\"117\":[1],\"118\":[null,null,1],\"119\":[null,null,2],\"120\":[1],\"121\":[null,null,1],\"122\":[null,null,1],\"123\":[1],\"124\":[null,null,1],\"125\":[null,null,2],\"126\":[1],\"127\":[1,1],\"128\":[1],\"129\":[1],\"130\":[1,11],\"131\":[1,13],\"132\":[1,3],\"133\":[1,43],\"134\":[1,10],\"135\":[1,12],\"136\":[1,15],\"137\":[3,40],\"138\":[3,17],\"139\":[3,53],\"140\":[3,13],\"141\":[1,19],\"142\":[1,19],\"143\":[1,11],\"144\":[1,15],\"145\":[1,14],\"146\":[1,19],\"147\":[1,17],\"148\":[1,30],\"149\":[3,12],\"150\":[1,26],\"151\":[1,19],\"152\":[1,14],\"153\":[1,21],\"154\":[1,17],\"155\":[1,19],\"156\":[1,11],\"157\":[2,14],\"158\":[3,13],\"159\":[1,26],\"160\":[1,24],\"161\":[1,24],\"162\":[1,21],\"163\":[1,19],\"164\":[2],\"165\":[1,13],\"166\":[1,24],\"167\":[3,13],\"168\":[1,23],\"169\":[1,17],\"170\":[1,14],\"171\":[1,22],\"172\":[1,23],\"173\":[1,20],\"174\":[1,22],\"175\":[2],\"176\":[1,18],\"177\":[1,25],\"178\":[1,3],\"179\":[1,5],\"180\":[2,14],\"181\":[1,5],\"182\":[2,26],\"183\":[1,15],\"184\":[1,10],\"185\":[2,20],\"186\":[2,16],\"187\":[2,16],\"188\":[2,24],\"189\":[2,24],\"190\":[2,24],\"191\":[2,18],\"192\":[1,7],\"193\":[2,18],\"194\":[2,20],\"195\":[2,13],\"196\":[2,23],\"197\":[2,34],\"198\":[2,10],\"199\":[2,16],\"200\":[1,4],\"201\":[2,15],\"202\":[2,33],\"203\":[2,10],\"204\":[2,21],\"205\":[1,7],\"206\":[2,12],\"207\":[2,17],\"208\":[2,22],\"209\":[2,5],\"210\":[1,15],\"211\":[1,40],\"212\":[1,25],\"213\":[1,16],\"214\":[1,29],\"215\":[1,18],\"216\":[1,20],\"217\":[1,25],\"218\":[1],\"219\":[1,32],\"220\":[1,6],\"221\":[1,22],\"222\":[1,23],\"223\":[1,30],\"224\":[1,37],\"225\":[1,20],\"226\":[1,27],\"227\":[1,3],\"228\":[1,5],\"229\":[1,16],\"230\":[1,12],\"231\":[1,3],\"232\":[1,15],\"233\":[1,9],\"234\":[1,16],\"235\":[1,17],\"236\":[1,3],\"237\":[1,15],\"238\":[1,16],\"239\":[1,23],\"240\":[1,28],\"241\":[1,11],\"242\":[1,63],\"243\":[1,36],\"244\":[2,4],\"245\":[1,33],\"246\":[1,33],\"247\":[1,44],\"248\":[2,43],\"249\":[1,8],\"250\":[1],\"251\":[1,26],\"252\":[1,24],\"253\":[1,23],\"254\":[1,12],\"255\":[1,17],\"256\":[1,20],\"257\":[1,28],\"258\":[1,25],\"259\":[1,43],\"260\":[1],\"261\":[1,26],\"262\":[1,21],\"263\":[null,null,1],\"264\":[null,null,3],\"265\":[1],\"266\":[1],\"267\":[1],\"268\":[1],\"269\":[1],\"270\":[1],\"271\":[1],\"272\":[1],\"273\":[1],\"274\":[1],\"275\":[1],\"276\":[1],\"277\":[null,null,1],\"278\":[null,null,3],\"279\":[1],\"280\":[1],\"281\":[1],\"282\":[1],\"283\":[1],\"284\":[1],\"285\":[1],\"286\":[1],\"287\":[null,null,1],\"288\":[null,null,3],\"289\":[1],\"290\":[1],\"291\":[1],\"292\":[1],\"293\":[3],\"294\":[null,null,1],\"295\":[null,null,3],\"296\":[1],\"297\":[null,null,1],\"298\":[null,null,1],\"299\":[1],\"300\":[null,null,1],\"301\":[null,null,1],\"302\":[1],\"303\":[null,null,1],\"304\":[1],\"305\":[null,null,1],\"306\":[null,null,1],\"307\":[1],\"308\":[1],\"309\":[1],\"310\":[1],\"311\":[null,null,1],\"312\":[null,null,2],\"313\":[1],\"314\":[null,null,1],\"315\":[null,null,3],\"316\":[1],\"317\":[null,null,1],\"318\":[null,null,2],\"319\":[1],\"320\":[null,null,1],\"321\":[null,null,2],\"322\":[1],\"323\":[null,null,1],\"324\":[null,null,2],\"325\":[1],\"326\":[null,null,1],\"327\":[null,null,3],\"328\":[1],\"329\":[null,null,1],\"330\":[null,null,3],\"331\":[1],\"332\":[null,null,1],\"333\":[null,null,2],\"334\":[1],\"335\":[1],\"336\":[1,46],\"337\":[1],\"338\":[null,null,1],\"339\":[null,null,2],\"340\":[1],\"341\":[null,null,1],\"342\":[1],\"343\":[null,null,1],\"344\":[null,null,3],\"345\":[1],\"346\":[null,null,1],\"347\":[1],\"348\":[null,null,1],\"349\":[1],\"350\":[1],\"351\":[1],\"352\":[1],\"353\":[1],\"354\":[null,null,1],\"355\":[null,null,1],\"356\":[1],\"357\":[2],\"358\":[1],\"359\":[1],\"360\":[1],\"361\":[null,null,1],\"362\":[null,null,2],\"363\":[1],\"364\":[null,null,1],\"365\":[1],\"366\":[1],\"367\":[1,12],\"368\":[1,10],\"369\":[1,8],\"370\":[1,7],\"371\":[2],\"372\":[1],\"373\":[null,null,1],\"374\":[null,null,2],\"375\":[1],\"376\":[null,null,1],\"377\":[1],\"378\":[1,109],\"379\":[1,9],\"380\":[1,4],\"381\":[1,24],\"382\":[1,45],\"383\":[1,20],\"384\":[2,55],\"385\":[null,null,1],\"386\":[null,null,1],\"387\":[1],\"388\":[1,14],\"389\":[1,57],\"390\":[1,42],\"391\":[1,32],\"392\":[1,36],\"393\":[1,35],\"394\":[1,35],\"395\":[1,10],\"396\":[1,39],\"397\":[1,21],\"398\":[2,83],\"399\":[2,74],\"400\":[1,8],\"401\":[2,5],\"402\":[2,2],\"403\":[3,14],\"404\":[2,11],\"405\":[6,15],\"406\":[2,16],\"407\":[2,13],\"408\":[1,79],\"409\":[1,146],\"410\":[1,108],\"411\":[null,null,1],\"412\":[null,null,2],\"413\":[1],\"414\":[1,9],\"415\":[2,30],\"416\":[2,15],\"417\":[2,9],\"418\":[2,5],\"419\":[1,19],\"420\":[1,49],\"421\":[1,15],\"422\":[2,26],\"423\":[2,32],\"424\":[2,21],\"425\":[2,13],\"426\":[2,15],\"427\":[1,9],\"428\":[1,84],\"429\":[1,30],\"430\":[1,4],\"431\":[1,15],\"432\":[2,43],\"433\":[2,21],\"434\":[2,94],\"435\":[1,41],\"436\":[1,7],\"437\":[1,18],\"438\":[1,7],\"439\":[3,16],\"440\":[3,36],\"441\":[3,31],\"442\":[3,10],\"443\":[1],\"444\":[2,4],\"445\":[2,11],\"446\":[2,24],\"447\":[2,45],\"448\":[2,20],\"449\":[1,58],\"450\":[1,10],\"451\":[null,null,1],\"452\":[null,null,1],\"453\":[1],\"454\":[null,null,1],\"455\":[null,null,1],\"456\":[1,12],\"457\":[3,43],\"458\":[3,54],\"459\":[5,61],\"460\":[3,66],\"461\":[null,null,1],\"462\":[null,null,1],\"463\":[1],\"464\":[1,11],\"465\":[2,10],\"466\":[2,8],\"467\":[2,9],\"468\":[2,4],\"469\":[2,5],\"470\":[2,7],\"471\":[2,7],\"472\":[2,5],\"473\":[2,5],\"474\":[2,6],\"475\":[2,5],\"476\":[2,8],\"477\":[1,13],\"478\":[2,25],\"479\":[2,29],\"480\":[2,33],\"481\":[2,32],\"482\":[2,24],\"483\":[4,32],\"484\":[2,38],\"485\":[2,33],\"486\":[2,32],\"487\":[2,33],\"488\":[2,35],\"489\":[2,27],\"490\":[1,4],\"491\":[5,21],\"492\":[5,18],\"493\":[4,10],\"494\":[4,21],\"495\":[5,27],\"496\":[1,11],\"497\":[5,51],\"498\":[5,41],\"499\":[5,42],\"500\":[6,47],\"501\":[5,51],\"502\":[7,42],\"503\":[6,39],\"504\":[1,24],\"505\":[null,null,1],\"506\":[null,null,1],\"507\":[1],\"508\":[1,8],\"509\":[2,14],\"510\":[2],\"511\":[5,24],\"512\":[5,18],\"513\":[4,12],\"514\":[4,10],\"515\":[2,18],\"516\":[2,12],\"517\":[7,49],\"518\":[1,11],\"519\":[2],\"520\":[7,17],\"521\":[7,11],\"522\":[6,10],\"523\":[2,8],\"524\":[5,48],\"525\":[5,20],\"526\":[2,14],\"527\":[1,6],\"528\":[2,26],\"529\":[2],\"530\":[4,41],\"531\":[4,31],\"532\":[2,27],\"533\":[2,21],\"534\":[2,18],\"535\":[2,49],\"536\":[2,17],\"537\":[1,10],\"538\":[2,14],\"539\":[2],\"540\":[4,40],\"541\":[5,36],\"542\":[2,17],\"543\":[2,56],\"544\":[2],\"545\":[1,11],\"546\":[1,10],\"547\":[2,10],\"548\":[1,9],\"549\":[3,51],\"550\":[5,56],\"551\":[2,46],\"552\":[6,43],\"553\":[2,13],\"554\":[1,7],\"555\":[3,47],\"556\":[5,46],\"557\":[2,47],\"558\":[6,50],\"559\":[1,12],\"560\":[1,5],\"561\":[5,24],\"562\":[5,20],\"563\":[2,16],\"564\":[2,17],\"565\":[2,29],\"566\":[2,7],\"567\":[1,16],\"568\":[4,3],\"569\":[2,72],\"570\":[4,4],\"571\":[2,46],\"572\":[2,7],\"573\":[2,14],\"574\":[1,7],\"575\":[1,15],\"576\":[1,3],\"577\":[5,53],\"578\":[4,53],\"579\":[5,53],\"580\":[5,52],\"581\":[7,54],\"582\":[1,17],\"583\":[1,8],\"584\":[1,11],\"585\":[1,13],\"586\":[1,47],\"587\":[2,2],\"588\":[4,45],\"589\":[4,63],\"590\":[4,50],\"591\":[1,18],\"592\":[1,5],\"593\":[2,56],\"594\":[2,52],\"595\":[2,15],\"596\":[2,27],\"597\":[2,22],\"598\":[2,35],\"599\":[2,20],\"600\":[1,11],\"601\":[5,48],\"602\":[4,48],\"603\":[5,48],\"604\":[5,47],\"605\":[7,49],\"606\":[5,48],\"607\":[5,45],\"608\":[5,105],\"609\":[7,61],\"610\":[7,78],\"611\":[null,null,1],\"612\":[null,null,1],\"613\":[1],\"614\":[1,52],\"615\":[1,12],\"616\":[2,28],\"617\":[2,13],\"618\":[1,14],\"619\":[4,48],\"620\":[1,18],\"621\":[1,7],\"622\":[2,19],\"623\":[2,34],\"624\":[2,60],\"625\":[2,28],\"626\":[1,18],\"627\":[2],\"628\":[null,null,1],\"629\":[null,null,1],\"630\":[1],\"631\":[1,53],\"632\":[1,12],\"633\":[2,18],\"634\":[2,54],\"635\":[2,15],\"636\":[2,15],\"637\":[2,8],\"638\":[2,8],\"639\":[1,5],\"640\":[2,7],\"641\":[4,44],\"642\":[2,41],\"643\":[2,53],\"644\":[2,8],\"645\":[1,13],\"646\":[2,17],\"647\":[2,8],\"648\":[2,3],\"649\":[2,58],\"650\":[2,20],\"651\":[2,6],\"652\":[2,7],\"653\":[1,23],\"654\":[7,6],\"655\":[7,6],\"656\":[8,5],\"657\":[2,5],\"658\":[2,20],\"659\":[2,58],\"660\":[2,33],\"661\":[2,42],\"662\":[2,12],\"663\":[2,8],\"664\":[null,null,1],\"665\":[null,null,1],\"666\":[1],\"667\":[null,null,1],\"668\":[null,null,1],\"669\":[1],\"670\":[1,10],\"671\":[2,31],\"672\":[2,26],\"673\":[2,18],\"674\":[2,13],\"675\":[2,16],\"676\":[2,21],\"677\":[2,20],\"678\":[1,15],\"679\":[1,26],\"680\":[1,102],\"681\":[2,24],\"682\":[2,7],\"683\":[1,22],\"684\":[1,11],\"685\":[1,9],\"686\":[2,19],\"687\":[2,4],\"688\":[2,63],\"689\":[2,19],\"690\":[2,12],\"691\":[2,15],\"692\":[1,11],\"693\":[2,10],\"694\":[2,18],\"695\":[2,12],\"696\":[2,3],\"697\":[3,5],\"698\":[3,8],\"699\":[3,22],\"700\":[2,59],\"701\":[2,16],\"702\":[null,null,1],\"703\":[null,null,1],\"704\":[1],\"705\":[1,10],\"706\":[6,17],\"707\":[6,18],\"708\":[6,12],\"709\":[6,13],\"710\":[7,15],\"711\":[8,16],\"712\":[5,13],\"713\":[1],\"714\":[1,7],\"715\":[1,43],\"716\":[1,45],\"717\":[1,30],\"718\":[1,11],\"719\":[1],\"720\":[1,16],\"721\":[1,17],\"722\":[1,53],\"723\":[1,13],\"724\":[1],\"725\":[3,21],\"726\":[2,42],\"727\":[1,15],\"728\":[1,31],\"729\":[2,11],\"730\":[1,21],\"731\":[2,21],\"732\":[2,46],\"733\":[1,17],\"734\":[1,29],\"735\":[1,16],\"736\":[2,7],\"737\":[1,43],\"738\":[2,70],\"739\":[1,19],\"740\":[1,30],\"741\":[null,null,1],\"742\":[null,null,1],\"743\":[1],\"744\":[1,9],\"745\":[1,20],\"746\":[1,28],\"747\":[1,13],\"748\":[1,7],\"749\":[null,null,1],\"750\":[null,null,1],\"751\":[1],\"752\":[1,15],\"753\":[1,25],\"754\":[1,67],\"755\":[1,17],\"756\":[1,5],\"757\":[1,50],\"758\":[1,16],\"759\":[1,18],\"760\":[1,16],\"761\":[1,31],\"762\":[1,10],\"763\":[1,88],\"764\":[1,23],\"765\":[1,5],\"766\":[2,20],\"767\":[2,19],\"768\":[2,15],\"769\":[2,16],\"770\":[2,15],\"771\":[2,17],\"772\":[2,16],\"773\":[2,16],\"774\":[2,16],\"775\":[2,20],\"776\":[null,null,1],\"777\":[null,null,1],\"778\":[1],\"779\":[1],\"780\":[1,24],\"781\":[null,null,1],\"782\":[null,null,1],\"783\":[1],\"784\":[1,4],\"785\":[2,14],\"786\":[2,10],\"787\":[2,10],\"788\":[2,13],\"789\":[2,8],\"790\":[2,11],\"791\":[2,9],\"792\":[2,10],\"793\":[1,4],\"794\":[2,35],\"795\":[2,15],\"796\":[2,15],\"797\":[2,20],\"798\":[2,11],\"799\":[1,6],\"800\":[2,34],\"801\":[2,32],\"802\":[2,35],\"803\":[2,31],\"804\":[2,29],\"805\":[2,44],\"806\":[1,11],\"807\":[2,13],\"808\":[2,12],\"809\":[2,18],\"810\":[2,16],\"811\":[2,22],\"812\":[2,23],\"813\":[2,20],\"814\":[2,18],\"815\":[2,19],\"816\":[2,16],\"817\":[1,6],\"818\":[3,16],\"819\":[3,17],\"820\":[5,21],\"821\":[3,17],\"822\":[3,18],\"823\":[3,19],\"824\":[5,23],\"825\":[5,32],\"826\":[5,34],\"827\":[3,49],\"828\":[null,null,1],\"829\":[null,null,1],\"830\":[1],\"831\":[1,11],\"832\":[2,22],\"833\":[2,14],\"834\":[2,19],\"835\":[2],\"836\":[3,22],\"837\":[3,16],\"838\":[2,13],\"839\":[1,12],\"840\":[1,20],\"841\":[1,23],\"842\":[1,24],\"843\":[1,7],\"844\":[1,14],\"845\":[null,null,1],\"846\":[null,null,1],\"847\":[1],\"848\":[1,9],\"849\":[1,19],\"850\":[1,22],\"851\":[2,28],\"852\":[1,75],\"853\":[1,36],\"854\":[2,22],\"855\":[1,23],\"856\":[1,111],\"857\":[1,21],\"858\":[1,8],\"859\":[null,null,1],\"860\":[null,null,1],\"861\":[1],\"862\":[1,11],\"863\":[1,16],\"864\":[1,16],\"865\":[1,13],\"866\":[1,44],\"867\":[1,12],\"868\":[1,9],\"869\":[2,16],\"870\":[2,16],\"871\":[2,23],\"872\":[2,14],\"873\":[2,14],\"874\":[1,10],\"875\":[2,18],\"876\":[null,null,1],\"877\":[null,null,1],\"878\":[1],\"879\":[1,14],\"880\":[1,26],\"881\":[1,20],\"882\":[1,8],\"883\":[1,18],\"884\":[1,47],\"885\":[1,16],\"886\":[1,7],\"887\":[1,17],\"888\":[1,10],\"889\":[1,68],\"890\":[1,26],\"891\":[1,11],\"892\":[1,12],\"893\":[1,8],\"894\":[1,11],\"895\":[1,82],\"896\":[1,20],\"897\":[1,11],\"898\":[1,17],\"899\":[1],\"900\":[2,5],\"901\":[2,6],\"902\":[1,7],\"903\":[1,69],\"904\":[1,34],\"905\":[1,12],\"906\":[1,16],\"907\":[1],\"908\":[2,7],\"909\":[2,5],\"910\":[1,7],\"911\":[1,70],\"912\":[1,41],\"913\":[1,13],\"914\":[2,6],\"915\":[1,4],\"916\":[2,9],\"917\":[2,18],\"918\":[2,16],\"919\":[2,16],\"920\":[2,16],\"921\":[2,27],\"922\":[1],\"923\":[2,23],\"924\":[2,16],\"925\":[2,21],\"926\":[1,22],\"927\":[4,86],\"928\":[1,45],\"929\":[null,null,1],\"930\":[null,null,1],\"931\":[1],\"932\":[1,10],\"933\":[1,52],\"934\":[1,3],\"935\":[1,43],\"936\":[1,43],\"937\":[1,42],\"938\":[1,12],\"939\":[1,52],\"940\":[1,3],\"941\":[1,47],\"942\":[1,44],\"943\":[1,54],\"944\":[1,42],\"945\":[1],\"946\":[2,7],\"947\":[1,64],\"948\":[1,85],\"949\":[null,null,1],\"950\":[null,null,1],\"951\":[2],\"952\":[1,11],\"953\":[1,35],\"954\":[1,25],\"955\":[1,49],\"956\":[1,6],\"957\":[1,16],\"958\":[1,61],\"959\":[2,54],\"960\":[2,45],\"961\":[1,10],\"962\":[1,15],\"963\":[1,11],\"964\":[1,71],\"965\":[1,59],\"966\":[null,null,1],\"967\":[null,null,2],\"968\":[1],\"969\":[null,null,1],\"970\":[null,null,1],\"971\":[1],\"972\":[null,null,1],\"973\":[1],\"974\":[null,null,1],\"975\":[1],\"976\":[null,null,1],\"977\":[1],\"978\":[null,null,1],\"979\":[1],\"980\":[null,null,1],\"981\":[1,8],\"982\":[null,null,1],\"983\":[null,null,1],\"984\":[1],\"985\":[1,1],\"986\":[2],\"987\":[2],\"988\":[2],\"989\":[2],\"990\":[2],\"991\":[2],\"992\":[4,15],\"993\":[null,null,1],\"994\":[null,null,1],\"995\":[1],\"996\":[null,null,1],\"997\":[1],\"998\":[1,11],\"999\":[1],\"1000\":[1],\"1001\":[1],\"1002\":[1],\"1003\":[1],\"1004\":[null,null,1],\"1005\":[null,null,2],\"1006\":[1],\"1007\":[null,null,1],\"1008\":[null,null,2],\"1009\":[1],\"1010\":[null,null,1],\"1011\":[1],\"1012\":[null,null,1],\"1013\":[1],\"1014\":[null,null,1],\"1015\":[null,null,2],\"1016\":[1],\"1017\":[null,null,1],\"1018\":[null,null,2],\"1019\":[1],\"1020\":[null,null,1],\"1021\":[null,null,2],\"1022\":[2,1],\"1023\":[2],\"1024\":[3,12],\"1025\":[3,41],\"1026\":[2,13],\"1027\":[2,7],\"1028\":[2,18],\"1029\":[2],\"1030\":[3,9],\"1031\":[3,8],\"1032\":[3,12],\"1033\":[2],\"1034\":[3,15],\"1035\":[3,26],\"1036\":[3,3],\"1037\":[3,15],\"1038\":[2,63],\"1039\":[3,9],\"1040\":[2,187],\"1041\":[1],\"1042\":[null,null,1],\"1043\":[null,null,2],\"1044\":[1],\"1045\":[null,null,1],\"1046\":[null,null,2],\"1047\":[1],\"1048\":[null,null,1],\"1049\":[null,null,2],\"1050\":[1],\"1051\":[1,18],\"1052\":[1,18],\"1053\":[1,22],\"1054\":[1],\"1055\":[null,null,1],\"1056\":[null,null,2],\"1057\":[1],\"1058\":[2],\"1059\":[4],\"1060\":[4],\"1061\":[4],\"1062\":[3],\"1063\":[2],\"1064\":[null,null,1],\"1065\":[null,null,1],\"1066\":[1],\"1067\":[1],\"1068\":[1,1],\"1069\":[1],\"1070\":[1],\"1071\":[1],\"1072\":[null,null,1],\"1073\":[null,null,1],\"1074\":[1],\"1075\":[1],\"1076\":[1,4],\"1077\":[1,5],\"1078\":[1,5],\"1079\":[1,5],\"1080\":[2,4],\"1081\":[1],\"1082\":[1,6],\"1083\":[1,5],\"1084\":[2],\"1085\":[2],\"1086\":[2],\"1087\":[2],\"1088\":[2],\"1089\":[2],\"1090\":[null,null,1],\"1091\":[null,null,1],\"1092\":[1],\"1093\":[null,null,1],\"1094\":[null,null,1],\"1095\":[1],\"1096\":[null,null,1],\"1097\":[null,null,1],\"1098\":[1],\"1099\":[1],\"1100\":[1,41],\"1101\":[1,26],\"1102\":[1,35],\"1103\":[1,10],\"1104\":[1,4],\"1105\":[1],\"1106\":[1,22],\"1107\":[1,19],\"1108\":[1,14],\"1109\":[1,28],\"1110\":[1,42],\"1111\":[1],\"1112\":[null,null,1],\"1113\":[null,null,3],\"1114\":[1],\"1115\":[1,1],\"1116\":[1,22],\"1117\":[1,28],\"1118\":[2,10],\"1119\":[2,9],\"1120\":[2,12],\"1121\":[2,5],\"1122\":[2,4],\"1123\":[1],\"1124\":[1],\"1125\":[1,19],\"1126\":[1,27],\"1127\":[1,49],\"1128\":[1,15],\"1129\":[2],\"1130\":[2,14],\"1131\":[3,19],\"1132\":[2],\"1133\":[3,15],\"1134\":[2,13],\"1135\":[3,11],\"1136\":[3,10],\"1137\":[2],\"1138\":[3,19],\"1139\":[3,19],\"1140\":[2],\"1141\":[3,13],\"1142\":[3,21],\"1143\":[3,13],\"1144\":[1,57],\"1145\":[1,11],\"1146\":[2,19],\"1147\":[2,18],\"1148\":[2,13],\"1149\":[2,19],\"1150\":[2,19],\"1151\":[2,21],\"1152\":[3,74],\"1153\":[1,4],\"1154\":[1,39],\"1155\":[1,36],\"1156\":[1,41],\"1157\":[1],\"1158\":[1,8],\"1159\":[2,16],\"1160\":[2,21],\"1161\":[2,26],\"1162\":[2,25],\"1163\":[2,29],\"1164\":[1,8],\"1165\":[2,25],\"1166\":[2,22],\"1167\":[2,22],\"1168\":[2,21],\"1169\":[2,16],\"1170\":[2,31],\"1171\":[1,10],\"1172\":[2,32],\"1173\":[2,29],\"1174\":[2,19],\"1175\":[2,25],\"1176\":[2,16],\"1177\":[2,11],\"1178\":[2,27],\"1179\":[2,27],\"1180\":[1,11],\"1181\":[2,37],\"1182\":[2,29],\"1183\":[2,28],\"1184\":[2,9],\"1185\":[2,30],\"1186\":[2,13],\"1187\":[2,14],\"1188\":[2,17],\"1189\":[1,6],\"1190\":[2],\"1191\":[2,13],\"1192\":[3,33],\"1193\":[2],\"1194\":[3,12],\"1195\":[2,31],\"1196\":[2,25],\"1197\":[1,1],\"1198\":[1,1],\"1199\":[1,9],\"1200\":[2],\"1201\":[1,24],\"1202\":[2,16],\"1203\":[2,23],\"1204\":[2,12],\"1205\":[2],\"1206\":[2,22],\"1207\":[1,27],\"1208\":[2],\"1209\":[2,20],\"1210\":[2,30],\"1211\":[2,13],\"1212\":[2,13],\"1213\":[1,1],\"1214\":[1,9],\"1215\":[2],\"1216\":[2,20],\"1217\":[3,10],\"1218\":[3,21],\"1219\":[3,16],\"1220\":[2],\"1221\":[3,26],\"1222\":[2,39],\"1223\":[2],\"1224\":[3,10],\"1225\":[3,8],\"1226\":[2,12],\"1227\":[3,13],\"1228\":[2],\"1229\":[3,18],\"1230\":[3,25],\"1231\":[2],\"1232\":[3,13],\"1233\":[3,8],\"1234\":[1,1],\"1235\":[1],\"1236\":[1],\"1237\":[1],\"1238\":[1],\"1239\":[1],\"1240\":[1],\"1241\":[1],\"1242\":[1],\"1243\":[1],\"1244\":[null,null,1],\"1245\":[null,null,3],\"1246\":[1],\"1247\":[1],\"1248\":[null,null,1],\"1249\":[null,null,3],\"1250\":[1],\"1251\":[null,null,1],\"1252\":[null,null,3],\"1253\":[1],\"1254\":[null,null,1],\"1255\":[null,null,2],\"1256\":[1],\"1257\":[1],\"1258\":[1,56],\"1259\":[1,153],\"1260\":[1],\"1261\":[1,27],\"1262\":[1],\"1263\":[1,13],\"1264\":[2,11],\"1265\":[2,37],\"1266\":[2,16],\"1267\":[2,31],\"1268\":[2,11],\"1269\":[2,17],\"1270\":[1],\"1271\":[1],\"1272\":[1,1],\"1273\":[1,31],\"1274\":[2,17],\"1275\":[1,38],\"1276\":[1,30],\"1277\":[1,13],\"1278\":[1,8],\"1279\":[1],\"1280\":[1,5],\"1281\":[1,8],\"1282\":[1,11],\"1283\":[1,30],\"1284\":[1],\"1285\":[1,7],\"1286\":[5,25],\"1287\":[6,9],\"1288\":[5,15],\"1289\":[5,7],\"1290\":[1],\"1291\":[1,23],\"1292\":[1,93],\"1293\":[1,8],\"1294\":[5,25],\"1295\":[5,28],\"1296\":[2],\"1297\":[1,16],\"1298\":[1,28],\"1299\":[2,21],\"1300\":[1,15],\"1301\":[5,22],\"1302\":[5,37],\"1303\":[5,27],\"1304\":[1,14],\"1305\":[1,20],\"1306\":[1,11],\"1307\":[5,32],\"1308\":[6,80],\"1309\":[1,35],\"1310\":[1,6],\"1311\":[5,29],\"1312\":[5,16],\"1313\":[5,20],\"1314\":[5,20],\"1315\":[5,44],\"1316\":[5,14],\"1317\":[2,7],\"1318\":[2,9],\"1319\":[1,4],\"1320\":[2,5],\"1321\":[2,25],\"1322\":[3,23],\"1323\":[2,6],\"1324\":[3,24],\"1325\":[6,15],\"1326\":[3,18],\"1327\":[3,21],\"1328\":[2,2],\"1329\":[2,18],\"1330\":[2,19],\"1331\":[2,21],\"1332\":[2,19],\"1333\":[3,9],\"1334\":[2],\"1335\":[2,38],\"1336\":[3,30],\"1337\":[2,4],\"1338\":[3,16],\"1339\":[2,15],\"1340\":[2,3],\"1341\":[3,7],\"1342\":[3,8],\"1343\":[2,20],\"1344\":[2,19],\"1345\":[2,13],\"1346\":[2,13],\"1347\":[2,13],\"1348\":[2,9],\"1349\":[1,6],\"1350\":[2,2],\"1351\":[2,10],\"1352\":[3,9],\"1353\":[2,17],\"1354\":[2,12],\"1355\":[2,3],\"1356\":[4,18],\"1357\":[4,14],\"1358\":[2,3],\"1359\":[3,17],\"1360\":[3,26],\"1361\":[2],\"1362\":[3,16],\"1363\":[3,17],\"1364\":[3,15],\"1365\":[2,20],\"1366\":[2,9],\"1367\":[1,10],\"1368\":[2],\"1369\":[2,11],\"1370\":[3,45],\"1371\":[2],\"1372\":[3,9],\"1373\":[2,35],\"1374\":[2],\"1375\":[3,12],\"1376\":[3,38],\"1377\":[2,13],\"1378\":[2,8],\"1379\":[2,4],\"1380\":[1,14],\"1381\":[2,6],\"1382\":[2,17],\"1383\":[2,16],\"1384\":[2,40],\"1385\":[2,19],\"1386\":[2,10],\"1387\":[2,11],\"1388\":[1,7],\"1389\":[2],\"1390\":[2,10],\"1391\":[2],\"1392\":[3,43],\"1393\":[2,38],\"1394\":[3,42],\"1395\":[3,23],\"1396\":[2,20],\"1397\":[2,14],\"1398\":[2,10],\"1399\":[1,11],\"1400\":[2],\"1401\":[2,59],\"1402\":[3,54],\"1403\":[2,10],\"1404\":[3,48],\"1405\":[1,33],\"1406\":[3,47],\"1407\":[2,47],\"1408\":[2,26],\"1409\":[1,11],\"1410\":[2,12],\"1411\":[2],\"1412\":[3,41],\"1413\":[2,10],\"1414\":[4],\"1415\":[3,12],\"1416\":[3,55],\"1417\":[2,8],\"1418\":[3,42],\"1419\":[2,12],\"1420\":[1,10],\"1421\":[3,9],\"1422\":[2,46],\"1423\":[3,12],\"1424\":[3,12],\"1425\":[3,32],\"1426\":[2,10],\"1427\":[3,46],\"1428\":[2,53],\"1429\":[2,15],\"1430\":[1,9],\"1431\":[4,9],\"1432\":[2],\"1433\":[3,42],\"1434\":[2,44],\"1435\":[2],\"1436\":[3,44],\"1437\":[3,48],\"1438\":[2],\"1439\":[3,56],\"1440\":[6,50],\"1441\":[2,28],\"1442\":[1,10],\"1443\":[2,14],\"1444\":[2],\"1445\":[3,30],\"1446\":[2,36],\"1447\":[3,36],\"1448\":[3,36],\"1449\":[2],\"1450\":[6,6],\"1451\":[6,6],\"1452\":[2,15],\"1453\":[2,15],\"1454\":[null,null,1],\"1455\":[null,null,1],\"1456\":[1],\"1457\":[1,34],\"1458\":[1,4],\"1459\":[1,4],\"1460\":[1,25],\"1461\":[1],\"1462\":[1],\"1463\":[1],\"1464\":[null,null,1],\"1465\":[null,null,1],\"1466\":[1],\"1467\":[1,9],\"1468\":[4,31],\"1469\":[4,18],\"1470\":[4,25],\"1471\":[4,32],\"1472\":[4,30],\"1473\":[4,25],\"1474\":[4,25],\"1475\":[4,14],\"1476\":[4,22],\"1477\":[1,28],\"1478\":[1,13],\"1479\":[2,5],\"1480\":[1,15],\"1481\":[2,16],\"1482\":[2,14],\"1483\":[2,15],\"1484\":[2,2],\"1485\":[2,12],\"1486\":[1,20],\"1487\":[2,2],\"1488\":[2,14],\"1489\":[2,12],\"1490\":[1,10],\"1491\":[2,10],\"1492\":[2,15],\"1493\":[2,2],\"1494\":[2,16],\"1495\":[2,16],\"1496\":[1,11],\"1497\":[2,24],\"1498\":[2,15],\"1499\":[2,23],\"1500\":[2,22],\"1501\":[2,19],\"1502\":[2,26],\"1503\":[2,29],\"1504\":[2,26],\"1505\":[2,18],\"1506\":[2,38],\"1507\":[1,13],\"1508\":[2,10],\"1509\":[2,26],\"1510\":[2],\"1511\":[2,28],\"1512\":[2,26],\"1513\":[1,27],\"1514\":[2,27],\"1515\":[2,23],\"1516\":[2,29],\"1517\":[1,12],\"1518\":[2,4],\"1519\":[1,18],\"1520\":[2,29],\"1521\":[2,4],\"1522\":[2,9],\"1523\":[1,38],\"1524\":[1,11],\"1525\":[1,12],\"1526\":[2,10],\"1527\":[2,7],\"1528\":[2,27],\"1529\":[2,5],\"1530\":[2,37],\"1531\":[2,10],\"1532\":[2,5],\"1533\":[2,36],\"1534\":[2,11],\"1535\":[1,7],\"1536\":[2,44],\"1537\":[2],\"1538\":[3,25],\"1539\":[2,17],\"1540\":[2],\"1541\":[3,38],\"1542\":[3,30],\"1543\":[1,11],\"1544\":[1,14],\"1545\":[2,27],\"1546\":[4,34],\"1547\":[2,32],\"1548\":[2,57],\"1549\":[2,14],\"1550\":[1,15],\"1551\":[1,9],\"1552\":[2,5],\"1553\":[1,7],\"1554\":[2,38],\"1555\":[2,7],\"1556\":[2,9],\"1557\":[1,34],\"1558\":[2,22],\"1559\":[2,9],\"1560\":[2,10],\"1561\":[2,36],\"1562\":[1,7],\"1563\":[1,16],\"1564\":[2,19],\"1565\":[2],\"1566\":[2,4],\"1567\":[1,9],\"1568\":[2,48],\"1569\":[2,17],\"1570\":[2,9],\"1571\":[2,19],\"1572\":[1,13],\"1573\":[2,9],\"1574\":[1,12],\"1575\":[2,6],\"1576\":[2,5],\"1577\":[2,23],\"1578\":[2,11],\"1579\":[2,32],\"1580\":[2,4],\"1581\":[2,23],\"1582\":[2,4],\"1583\":[2,28],\"1584\":[2,14],\"1585\":[2,8],\"1586\":[1,14],\"1587\":[4,5],\"1588\":[2,32],\"1589\":[3,12],\"1590\":[4,4],\"1591\":[3,34],\"1592\":[2,9],\"1593\":[2,3],\"1594\":[3,32],\"1595\":[3,7],\"1596\":[2,5],\"1597\":[3,25],\"1598\":[3,5],\"1599\":[2,11],\"1600\":[2,13],\"1601\":[1,5],\"1602\":[1,12],\"1603\":[2,10],\"1604\":[1,10],\"1605\":[2,4],\"1606\":[2,31],\"1607\":[2,4],\"1608\":[2,36],\"1609\":[2,13],\"1610\":[2,28],\"1611\":[2,4],\"1612\":[2,40],\"1613\":[2,9],\"1614\":[2,7],\"1615\":[1,5],\"1616\":[1,10],\"1617\":[2,12],\"1618\":[2,9],\"1619\":[2,16],\"1620\":[2,6],\"1621\":[2,18],\"1622\":[2,18],\"1623\":[2,11],\"1624\":[2,29],\"1625\":[2,8],\"1626\":[2,9],\"1627\":[2,10],\"1628\":[2,16],\"1629\":[2,12],\"1630\":[2,25],\"1631\":[2,14],\"1632\":[1,10],\"1633\":[1,16],\"1634\":[2,19],\"1635\":[2,4],\"1636\":[2,10],\"1637\":[1,7],\"1638\":[2,9],\"1639\":[2,16],\"1640\":[2,2],\"1641\":[2,11],\"1642\":[2,11],\"1643\":[2,2],\"1644\":[2,13],\"1645\":[2,9],\"1646\":[2,2],\"1647\":[2,11],\"1648\":[2,7],\"1649\":[2,17],\"1650\":[2,11],\"1651\":[2,61],\"1652\":[1,11],\"1653\":[1,15],\"1654\":[2,59],\"1655\":[2,72],\"1656\":[2],\"1657\":[2,8],\"1658\":[2,7],\"1659\":[1,35],\"1660\":[1,8],\"1661\":[1,115],\"1662\":[1,23],\"1663\":[1,39],\"1664\":[2,24],\"1665\":[2,19],\"1666\":[2],\"1667\":[2,47],\"1668\":[1,50],\"1669\":[2,32],\"1670\":[2,35],\"1671\":[2,56],\"1672\":[2,29],\"1673\":[2,48],\"1674\":[2,5],\"1675\":[2,25],\"1676\":[2,68],\"1677\":[2,74],\"1678\":[2,43],\"1679\":[2,19],\"1680\":[3,50],\"1681\":[3,44],\"1682\":[3,59],\"1683\":[1,14],\"1684\":[1,11],\"1685\":[2,26],\"1686\":[2,24],\"1687\":[2],\"1688\":[4,16],\"1689\":[4,23],\"1690\":[5,22],\"1691\":[2,34],\"1692\":[2,35],\"1693\":[2,17],\"1694\":[1,16],\"1695\":[1,15],\"1696\":[3,23],\"1697\":[2,17],\"1698\":[2,13],\"1699\":[4,17],\"1700\":[4,17],\"1701\":[2,10],\"1702\":[2,8],\"1703\":[2,9],\"1704\":[2,30],\"1705\":[2,50],\"1706\":[2,10],\"1707\":[1,22],\"1708\":[2],\"1709\":[2,127],\"1710\":[2,24],\"1711\":[4,26],\"1712\":[2,14],\"1713\":[2,21],\"1714\":[2,23],\"1715\":[2,11],\"1716\":[2,17],\"1717\":[null,null,1],\"1718\":[null,null,1],\"1719\":[1],\"1720\":[1,10],\"1721\":[1],\"1722\":[2,21],\"1723\":[2,23],\"1724\":[1],\"1725\":[2,28],\"1726\":[2,31],\"1727\":[2,31],\"1728\":[2,40],\"1729\":[1],\"1730\":[2,17],\"1731\":[2,13],\"1732\":[2,19],\"1733\":[1,10],\"1734\":[1,15],\"1735\":[1,36],\"1736\":[1],\"1737\":[2,38],\"1738\":[2,36],\"1739\":[2,25],\"1740\":[2,39],\"1741\":[1,23],\"1742\":[1,28],\"1743\":[1,17],\"1744\":[2,16],\"1745\":[2,33],\"1746\":[2,11],\"1747\":[2,13],\"1748\":[3,57],\"1749\":[2,9],\"1750\":[2,20],\"1751\":[3,57],\"1752\":[3,27],\"1753\":[2,13],\"1754\":[2,36],\"1755\":[2,21],\"1756\":[1,20],\"1757\":[2,8],\"1758\":[2,16],\"1759\":[2,21],\"1760\":[2,25],\"1761\":[3,9],\"1762\":[3,43],\"1763\":[2,7],\"1764\":[2,37],\"1765\":[2,10],\"1766\":[3,41],\"1767\":[2,22],\"1768\":[2,42],\"1769\":[2,27],\"1770\":[1,22],\"1771\":[2,8],\"1772\":[2,12],\"1773\":[2,24],\"1774\":[2,48],\"1775\":[2,12],\"1776\":[2,22],\"1777\":[3,44],\"1778\":[3,26],\"1779\":[2,15],\"1780\":[1,17],\"1781\":[2,13],\"1782\":[2,19],\"1783\":[2,29],\"1784\":[2,24],\"1785\":[2,18],\"1786\":[2,41],\"1787\":[2,8],\"1788\":[2,34],\"1789\":[2,15],\"1790\":[2,40],\"1791\":[2,6],\"1792\":[2,37],\"1793\":[2,14],\"1794\":[2,18],\"1795\":[1,18],\"1796\":[2,16],\"1797\":[2,26],\"1798\":[2,36],\"1799\":[2,30],\"1800\":[2,19],\"1801\":[2,54],\"1802\":[2,9],\"1803\":[2,42],\"1804\":[2,15],\"1805\":[2,43],\"1806\":[2,13],\"1807\":[2,41],\"1808\":[2,11],\"1809\":[2,42],\"1810\":[2,18],\"1811\":[1,16],\"1812\":[5,23],\"1813\":[2,17],\"1814\":[4,46],\"1815\":[2,19],\"1816\":[5,17],\"1817\":[3,6],\"1818\":[2,52],\"1819\":[4,11],\"1820\":[3,36],\"1821\":[2,9],\"1822\":[2,21],\"1823\":[4,41],\"1824\":[2,26],\"1825\":[1,13],\"1826\":[1,19],\"1827\":[2,24],\"1828\":[1,21],\"1829\":[1,23],\"1830\":[1,20],\"1831\":[2,50],\"1832\":[1,24],\"1833\":[1,10],\"1834\":[1,8],\"1835\":[1,12],\"1836\":[1,33],\"1837\":[1,15],\"1838\":[1,19],\"1839\":[1,29],\"1840\":[1,20],\"1841\":[1,9],\"1842\":[1,13],\"1843\":[1,42],\"1844\":[1,27],\"1845\":[1,36],\"1846\":[1,33],\"1847\":[1,19],\"1848\":[1,5],\"1849\":[2,11],\"1850\":[3,3],\"1851\":[3,30],\"1852\":[2,4],\"1853\":[3,34],\"1854\":[3,11],\"1855\":[2,49],\"1856\":[4,40],\"1857\":[2,31],\"1858\":[3,54],\"1859\":[1,11],\"1860\":[1,10],\"1861\":[1,10],\"1862\":[1,34],\"1863\":[1,60],\"1864\":[1,27],\"1865\":[1,43],\"1866\":[1,23],\"1867\":[1,16],\"1868\":[4,47],\"1869\":[5,10],\"1870\":[4,46],\"1871\":[4,40],\"1872\":[5,11],\"1873\":[4,44],\"1874\":[4,43],\"1875\":[4,32],\"1876\":[2,67],\"1877\":[2,10],\"1878\":[6,22],\"1879\":[2,12],\"1880\":[2,26],\"1881\":[4,16],\"1882\":[4,30],\"1883\":[2,52],\"1884\":[4,27],\"1885\":[2,25],\"1886\":[4,17],\"1887\":[2,49],\"1888\":[4,19],\"1889\":[4,5],\"1890\":[3,61],\"1891\":[3,44],\"1892\":[6,31],\"1893\":[2,20],\"1894\":[1,6],\"1895\":[3,36],\"1896\":[2,17],\"1897\":[2,18],\"1898\":[2,38],\"1899\":[2,6],\"1900\":[2,25],\"1901\":[3,43],\"1902\":[2,3],\"1903\":[3,36],\"1904\":[2,5],\"1905\":[2,8],\"1906\":[2,29],\"1907\":[2,2],\"1908\":[2,27],\"1909\":[2,35],\"1910\":[2,24],\"1911\":[2,15],\"1912\":[1,8],\"1913\":[3,12],\"1914\":[3,40],\"1915\":[4,12],\"1916\":[2,9],\"1917\":[2,20],\"1918\":[3,43],\"1919\":[3,9],\"1920\":[2,27],\"1921\":[2,55],\"1922\":[5,44],\"1923\":[4,17],\"1924\":[2,28],\"1925\":[2,48],\"1926\":[6,34],\"1927\":[2,32],\"1928\":[2,15],\"1929\":[1,16],\"1930\":[3,28],\"1931\":[3,26],\"1932\":[5,11],\"1933\":[4,46],\"1934\":[4,13],\"1935\":[4,53],\"1936\":[4,60],\"1937\":[4,13],\"1938\":[4,59],\"1939\":[4,59],\"1940\":[6,15],\"1941\":[3,51],\"1942\":[3,51],\"1943\":[3,18],\"1944\":[2,17],\"1945\":[1,8],\"1946\":[3,19],\"1947\":[3,52],\"1948\":[2],\"1949\":[2,48],\"1950\":[2,32],\"1951\":[4,27],\"1952\":[1,24],\"1953\":[4,24],\"1954\":[2,37],\"1955\":[2,4],\"1956\":[2,37],\"1957\":[2,17],\"1958\":[1,16],\"1959\":[3,12],\"1960\":[3,16],\"1961\":[3,39],\"1962\":[3,41],\"1963\":[4,73],\"1964\":[2,26],\"1965\":[2,31],\"1966\":[4,46],\"1967\":[2,4],\"1968\":[3,24],\"1969\":[3,33],\"1970\":[2,54],\"1971\":[3,19],\"1972\":[2,10],\"1973\":[1,10],\"1974\":[3,27],\"1975\":[3,12],\"1976\":[3,14],\"1977\":[3,6],\"1978\":[2,28],\"1979\":[2,35],\"1980\":[4,21],\"1981\":[4,46],\"1982\":[2,37],\"1983\":[2,23],\"1984\":[4,39],\"1985\":[2,41],\"1986\":[3,30],\"1987\":[2,17],\"1988\":[1,10],\"1989\":[3,28],\"1990\":[2,28],\"1991\":[2,25],\"1992\":[3,40],\"1993\":[2,37],\"1994\":[6,33],\"1995\":[3,25],\"1996\":[4,30],\"1997\":[2,14],\"1998\":[1,13],\"1999\":[1,9],\"2000\":[2,72],\"2001\":[2,53],\"2002\":[3,15],\"2003\":[2,19],\"2004\":[1,6],\"2005\":[1],\"2006\":[1,12],\"2007\":[2,7],\"2008\":[2,3],\"2009\":[6,27],\"2010\":[5,27],\"2011\":[6,26],\"2012\":[7,25],\"2013\":[7,28],\"2014\":[6,18],\"2015\":[2,18],\"2016\":[2,9],\"2017\":[1,9],\"2018\":[1,15],\"2019\":[4,28],\"2020\":[3,15],\"2021\":[3,19],\"2022\":[4,63],\"2023\":[2,14],\"2024\":[3,6],\"2025\":[4,24],\"2026\":[2,23],\"2027\":[2,39],\"2028\":[2,45],\"2029\":[2,7],\"2030\":[2,14],\"2031\":[2,23],\"2032\":[6,17],\"2033\":[3,47],\"2034\":[2,15],\"2035\":[2,18],\"2036\":[3,11],\"2037\":[2,59],\"2038\":[2,52],\"2039\":[2,45],\"2040\":[2,26],\"2041\":[2,27],\"2042\":[4],\"2043\":[2,14],\"2044\":[2,27],\"2045\":[2,22],\"2046\":[2],\"2047\":[3,40],\"2048\":[4,44],\"2049\":[2,11],\"2050\":[null,null,1],\"2051\":[null,null,1],\"2052\":[1],\"2053\":[1],\"2054\":[1],\"2055\":[1],\"2056\":[1],\"2057\":[1],\"2058\":[null,null,1],\"2059\":[null,null,2],\"2060\":[1],\"2061\":[null,null,1],\"2062\":[null,null,2],\"2063\":[1],\"2064\":[null,null,1],\"2065\":[null,null,2],\"2066\":[1],\"2067\":[1],\"2068\":[1],\"2069\":[1],\"2070\":[1],\"2071\":[1],\"2072\":[1],\"2073\":[1],\"2074\":[null,null,1],\"2075\":[null,null,1],\"2076\":[1],\"2077\":[1],\"2078\":[1],\"2079\":[null,null,1],\"2080\":[null,null,1],\"2081\":[1],\"2082\":[null,null,1],\"2083\":[null,null,1],\"2084\":[2],\"2085\":[null,null,1],\"2086\":[null,null,2],\"2087\":[2],\"2088\":[null,null,1],\"2089\":[null,null,2],\"2090\":[1],\"2091\":[null,null,1],\"2092\":[null,null,1],\"2093\":[1],\"2094\":[null,null,1],\"2095\":[null,null,1],\"2096\":[1],\"2097\":[null,null,1],\"2098\":[null,null,2],\"2099\":[1],\"2100\":[null,null,1],\"2101\":[null,null,1],\"2102\":[1],\"2103\":[null,null,1],\"2104\":[null,null,2],\"2105\":[1],\"2106\":[null,null,1],\"2107\":[null,null,2],\"2108\":[1],\"2109\":[null,null,1],\"2110\":[null,null,2],\"2111\":[1],\"2112\":[null,null,1],\"2113\":[null,null,1],\"2114\":[1],\"2115\":[null,null,1],\"2116\":[null,null,2],\"2117\":[2],\"2118\":[null,null,1],\"2119\":[null,null,2],\"2120\":[1],\"2121\":[null,null,1],\"2122\":[null,null,3],\"2123\":[1],\"2124\":[1],\"2125\":[null,null,1],\"2126\":[null,null,3],\"2127\":[1],\"2128\":[null,null,1],\"2129\":[null,null,3],\"2130\":[1],\"2131\":[1],\"2132\":[1],\"2133\":[1],\"2134\":[1],\"2135\":[1],\"2136\":[null,null,1],\"2137\":[null,null,2],\"2138\":[1],\"2139\":[null,null,1],\"2140\":[null,null,2],\"2141\":[1],\"2142\":[null,null,1],\"2143\":[null,null,3],\"2144\":[1],\"2145\":[null,null,1],\"2146\":[null,null,2],\"2147\":[1],\"2148\":[null,null,1],\"2149\":[null,null,1],\"2150\":[1],\"2151\":[2],\"2152\":[2,27],\"2153\":[2,21],\"2154\":[2,53],\"2155\":[2],\"2156\":[2,20],\"2157\":[2,27],\"2158\":[2,10],\"2159\":[3,8],\"2160\":[3,26],\"2161\":[3,10],\"2162\":[2,42],\"2163\":[2,31],\"2164\":[1,10],\"2165\":[1,13],\"2166\":[1],\"2167\":[1],\"2168\":[1],\"2169\":[1],\"2170\":[1],\"2171\":[1],\"2172\":[1],\"2173\":[1],\"2174\":[1],\"2175\":[1],\"2176\":[1],\"2177\":[1],\"2178\":[1],\"2179\":[1],\"2180\":[1],\"2181\":[null,null,1],\"2182\":[null,null,3],\"2183\":[1],\"2184\":[null,null,1],\"2185\":[null,null,1],\"2186\":[1],\"2187\":[1],\"2188\":[1,16],\"2189\":[1,38],\"2190\":[1,43],\"2191\":[1,19],\"2192\":[1,28],\"2193\":[1],\"2194\":[1],\"2195\":[1],\"2196\":[1],\"2197\":[1],\"2198\":[1],\"2199\":[1],\"2200\":[1],\"2201\":[1],\"2202\":[1],\"2203\":[1],\"2204\":[null,null,1],\"2205\":[null,null,2],\"2206\":[1,10],\"2207\":[2,22],\"2208\":[2,18],\"2209\":[2,20],\"2210\":[2,11],\"2211\":[2,12],\"2212\":[2,18],\"2213\":[2,15],\"2214\":[2,13],\"2215\":[2,8],\"2216\":[2,11],\"2217\":[1,16],\"2218\":[null,null,1],\"2219\":[null,null,1],\"2220\":[1],\"2221\":[null,null,1],\"2222\":[null,null,2],\"2223\":[1],\"2224\":[null,null,1],\"2225\":[null,null,2],\"2226\":[1],\"2227\":[null,null,1],\"2228\":[null,null,2],\"2229\":[1],\"2230\":[null,null,1],\"2231\":[null,null,2],\"2232\":[2],\"2233\":[null,null,1],\"2234\":[null,null,2],\"2235\":[1],\"2236\":[null,null,1],\"2237\":[null,null,3],\"2238\":[1],\"2239\":[null,null,1],\"2240\":[null,null,1],\"2241\":[1],\"2242\":[null,null,1],\"2243\":[null,null,1],\"2244\":[1],\"2245\":[1],\"2246\":[1],\"2247\":[1],\"2248\":[1],\"2249\":[1],\"2250\":[1],\"2251\":[null,null,1],\"2252\":[null,null,1],\"2253\":[1],\"2254\":[null,null,1],\"2255\":[4],\"2256\":[2,2],\"2257\":[2,2],\"2258\":[null,null,1],\"2259\":[null,null,2],\"2260\":[1],\"2261\":[null,null,1],\"2262\":[null,null,1],\"2263\":[1],\"2264\":[null,null,1],\"2265\":[null,null,1],\"2266\":[1],\"2267\":[null,null,1],\"2268\":[null,null,1],\"2269\":[1],\"2270\":[null,null,1],\"2271\":[null,null,1],\"2272\":[1],\"2273\":[null,null,1],\"2274\":[null,null,1],\"2275\":[1],\"2276\":[null,null,1],\"2277\":[null,null,1],\"2278\":[1],\"2279\":[null,null,1],\"2280\":[null,null,1],\"2281\":[1],\"2282\":[null,null,1],\"2283\":[null,null,1],\"2284\":[1,3],\"2285\":[2],\"2286\":[1],\"2287\":[1],\"2288\":[1],\"2289\":[1],\"2290\":[1],\"2291\":[1],\"2292\":[1],\"2293\":[1],\"2294\":[2],\"2295\":[1],\"2296\":[1],\"2297\":[1],\"2298\":[2],\"2299\":[1],\"2300\":[1],\"2301\":[1],\"2302\":[1],\"2303\":[1],\"2304\":[1],\"2305\":[1],\"2306\":[1],\"2307\":[1],\"2308\":[1],\"2309\":[1]},\"averageFieldLength\":[1.88608678473645,23.691708894041067,1.1918126809522571],\"storedFields\":{\"0\":{\"h\":\"Jianghu profile\"},\"1\":{\"h\":\"个人简介\"},\"2\":{\"c\":[\"个人信息\"]},\"3\":{\"c\":[\"写作模板\",\"定义标签\"]},\"4\":{\"h\":\"Site导航\"},\"5\":{\"h\":\"主页\"},\"6\":{\"h\":\"开发\"},\"7\":{\"c\":[\"develop\"]},\"8\":{\"h\":\"emoji资源列表\"},\"9\":{\"h\":\"人物😄\",\"t\":[\"😄 😄 😆 😆 😊 😊 😃 😃 😏 😏 😍 😍 😘 😘 😚 😚 😳 😳 😌 😌 😆 😆 😁 😁 😉 😉 😜 😜 😝 😝 😀 😀 😗 😗 😙 😙 😛 😛 😴 😴 😟 😟 😦 😦 😧 😧 😮 😮 😬 😬 😕 😕 😯 😯 😑 😑 😒 😒 😅 😅 😓 😓 😥 😥 😩 😩 😔 😔 😞 😞 😖 😖 😨 😨 😰 😰 😣 😣 😢 😢 😭 😭 😂 😂 😲 😲 😱 😱 😫 😫 😠 😠 😡 😡 😤 😤 😪 😪 😋 😋 😷 😷 😎 😎 😵 😵 👿 👿 😈 😈 😐 😐 😶 😶 😇 😇 👽 👽 💛 💛 💙 💙 💜 💜 ❤️ ❤️ 💚 💚 💔 💔 💓 💓 💗 💗 💕 💕 💞 💞 💘 💘 💖 💖 ✨ ✨ ⭐ ⭐ 🌟 🌟 💫 💫 💥 💥 💥 💥 💢 💢 ❗ ❗ ❓ ❓ ❕ ❕ ❔ ❔ 💤 💤 💨 💨 💦 💦 🎶 🎶 🎵 🎵 🔥 🔥 💩 💩 💩 💩 💩 💩 👍 👍 👍 👍 👎 👎 👎 👎 👌 👌 👊 👊 👊 👊 ✊ ✊ ✌️ ✌️ 👋 👋 ✋ ✋ ✋ ✋ 👐 👐 ☝️ ☝️ 👇 👇 👈 👈 👉 👉 🙌 🙌 🙏 🙏 👆 👆 👏 👏 💪 💪 🤘 🤘 🖕 🖕 🏃 🏃 🏃 🏃 👫 👫 👪 👪 👬 👬 👭 👭 💃 💃 👯 👯 🙆‍♀️ 🙆‍♀️ 🙅 🙅 💁 💁 🙋 🙋 👰‍♀️ 👰‍♀️ :person_with_pouting_face: :person_with_pouting_face: :person_frowning: :person_frowning: 🙇 🙇 💑 💑 💆 💆 💇 💇 💅 💅 👦 👦 👧 👧 👩 👩 👨 👨 👶 👶 👵 👵 👴 👴 :person_with_blond_hair: :person_with_blond_hair: 👲 👲 👳‍♂️ 👳‍♂️ 👷 👷 👮 👮 👼 👼 👸 👸 😺 😺 😸 😸 😻 😻 😽 😽 😼 😼 🙀 🙀 😿 😿 😹 😹 😾 😾 👹 👹 👺 👺 🙈 🙈 🙉 🙉 🙊 🙊 💂‍♂️ 💂‍♂️ 💀 💀 🐾 🐾 👄 👄 💋 💋 💧 💧 👂 👂 👀 👀 👃 👃 👅 👅 💌 💌 👤 👤 👥 👥 💬 💬 💭 💭\"]},\"10\":{\"h\":\"地点🏠\",\"t\":[\"🏠 🏠 🏡 🏡 🏫 🏫 🏢 🏢 🏣 🏣 🏥 🏥 🏦 🏦 🏪 🏪 🏩 🏩 🏨 🏨 💒 💒 ⛪ ⛪ 🏬 🏬 🏤 🏤 🌇 🌇 🌆 🌆 🏯 🏯 🏰 🏰 ⛺ ⛺ 🏭 🏭 🗼 🗼 🗾 🗾 🗻 🗻 🌄 🌄 🌅 🌅 🌠 🌠 🗽 🗽 🌉 🌉 🎠 🎠 🌈 🌈 🎡 🎡 ⛲ ⛲ 🎢 🎢 🚢 🚢 🚤 🚤 ⛵ ⛵ ⛵ ⛵ 🚣 🚣 ⚓ ⚓ 🚀 🚀 ✈️ ✈️ 🚁 🚁 🚂 🚂 🚊 🚊 🚞 🚞 🚲 🚲 🚡 🚡 🚟 🚟 🚠 🚠 🚜 🚜 🚙 🚙 🚘 🚘 🚗 🚗 🚗 🚗 🚕 🚕 🚖 🚖 🚛 🚛 🚌 🚌 🚍 🚍 🚨 🚨 🚓 🚓 🚔 🚔 🚒 🚒 🚑 🚑 🚐 🚐 🚚 🚚 🚋 🚋 🚉 🚉 🚆 🚆 🚅 🚅 🚄 🚄 🚈 🚈 🚝 🚝 🚃 🚃 🚎 🚎 🎫 🎫 ⛽ ⛽ 🚦 🚦 🚥 🚥 ⚠️ ⚠️ 🚧 🚧 🔰 🔰 🏧 🏧 🎰 🎰 🚏 🚏 💈 💈 ♨️ ♨️ 🏁 🏁 🎌 🎌 🏮 🏮 🗿 🗿 🎪 🎪 🎭 🎭 📍 📍 🚩 🚩\"]},\"11\":{\"h\":\"对象🎍\",\"t\":[\"🎍 🎍 💝 💝 🎎 🎎 🎒 🎒 🎓 🎓 🎏 🎏 🎆 🎆 🎇 🎇 🎐 🎐 🎑 🎑 🎃 🎃 👻 👻 🎅 🎅 🎄 🎄 🎁 🎁 🔔 🔔 🔕 🔕 🎋 🎋 🎉 🎉 🎊 🎊 🎈 🎈 🔮 🔮 💿 💿 📀 📀 💾 💾 📷 📷 📹 📹 🎥 🎥 💻 💻 📺 📺 📱 📱 ☎️ ☎️ ☎️ ☎️ 📞 📞 📟 📟 📠 📠 💽 💽 📼 📼 🔉 🔉 🔈 🔈 🔇 🔇 📢 📢 📣 📣 ⌛ ⌛ ⏳ ⏳ ⏰ ⏰ ⌚ ⌚ 📻 📻 📡 📡 ➿ ➿ 🔍 🔍 🔎 🔎 🔓 🔓 🔒 🔒 🔏 🔏 🔐 🔐 🔑 🔑 💡 💡 🔦 🔦 🔆 🔆 🔅 🔅 🔌 🔌 🔋 🔋 📲 📲 📧 📧 📫 📫 📮 📮 🛀 🛀 🛁 🛁 🚿 🚿 🚽 🚽 🔧 🔧 🔩 🔩 🔨 🔨 💺 💺 💰 💰 💴 💴 💵 💵 💷 💷 💶 💶 💳 💳 💸 💸 📧 📧 📥 📥 📤 📤 ✉️ ✉️ 📨 📨 📯 📯 📪 📪 📬 📬 📭 📭 📦 📦 🚪 🚪 🚬 🚬 💣 💣 🔫 🔫 🔪 🔪 💊 💊 💉 💉 📄 📄 📃 📃 📑 📑 📊 📊 📈 📈 📉 📉 📜 📜 📋 📋 📆 📆 📅 📅 📇 📇 📁 📁 📂 📂 ✂️ ✂️ 📌 📌 📎 📎 ✒️ ✒️ ✏️ ✏️ 📏 📏 📐 📐 📕 📕 📗 📗 📘 📘 📙 📙 📓 📓 📔 📔 📒 📒 📚 📚 🔖 🔖 📛 📛 🔬 🔬 🔭 🔭 📰 📰 🏈 🏈 🏀 🏀 ⚽ ⚽ ⚾ ⚾ 🎾 🎾 🎱 🎱 🏉 🏉 🎳 🎳 ⛳ ⛳ 🚵 🚵 🚴 🚴 🏇 🏇 🏂 🏂 🏊 🏊 🏄 🏄 🎿 🎿 ♠️ ♠️ ♥️ ♥️ ♣️ ♣️ ♦️ ♦️ 💎 💎 💍 💍 🏆 🏆 🎼 🎼 🎹 🎹 🎻 🎻 👾 👾 🎮 🎮 🃏 🃏 🎴 🎴 🎲 🎲 🎯 🎯 🀄 🀄 🎬 🎬 📝 📝 📝 📝 📖 📖 🎨 🎨 🎤 🎤 🎧 🎧 🎺 🎺 🎷 🎷 🎸 🎸 👞 👞 👡 👡 👠 👠 💄 💄 👢 👢 👕 👕 👕 👕 👔 👔 👚 👚 👗 👗 🎽 🎽 👖 👖 👘 👘 👙 👙 🎀 🎀 🎩 🎩 👑 👑 👒 👒 👞 👞 🌂 🌂 💼 💼 👜 👜 👝 👝 👛 👛 👓 👓 🎣 🎣 ☕ ☕ 🍵 🍵 🍶 🍶 🍼 🍼 🍺 🍺 🍻 🍻 🍸 🍸 🍹 🍹 🍷 🍷 🍴 🍴 🍕 🍕 🍔 🍔 🍟 🍟 🍗 🍗 🍖 🍖 🍝 🍝 🍛 🍛 🍤 🍤 🍱 🍱 🍣 🍣 🍥 🍥 🍙 🍙 🍘 🍘 🍚 🍚 🍜 🍜 🍲 🍲 🍢 🍢 🍡 🍡 🥚 🥚 🍞 🍞 🍩 🍩 🍮 🍮 🍦 🍦 🍨 🍨 🍧 🍧 🎂 🎂 🍰 🍰 🍪 🍪 🍫 🍫 🍬 🍬 🍭 🍭 🍯 🍯 🍎 🍎 🍏 🍏 🍊 🍊 🍋 🍋 🍒 🍒 🍇 🍇 🍉 🍉 🍓 🍓 🍑 🍑 🍈 🍈 🍌 🍌 🍐 🍐 🍍 🍍 🍠 🍠 🍆 🍆 🍅 🍅 🌽 🌽\"]},\"12\":{\"h\":\"符号1️⃣\",\"t\":[\"1️⃣ 1️⃣ 2️⃣ 2️⃣ 3️⃣ 3️⃣ 4️⃣ 4️⃣ 5️⃣ 5️⃣ 6️⃣ 6️⃣ 7️⃣ 7️⃣ 8️⃣ 8️⃣ 9️⃣ 9️⃣ 🔟 🔟 🔢 🔢 0️⃣ 0️⃣ #️⃣ #️⃣ 🔣 🔣 ◀️ ◀️ ⬇️ ⬇️ ▶️ ▶️ ⬅️ ⬅️ 🔠 🔠 🔡 🔡 🔤 🔤 ↙️ ↙️ ↘️ ↘️ ➡️ ➡️ ⬆️ ⬆️ ↖️ ↖️ ↗️ ↗️ ⏬ ⏬ ⏫ ⏫ 🔽 🔽 ⤵️ ⤵️ ⤴️ ⤴️ ↩️ ↩️ ↪️ ↪️ ↔️ ↔️ ↕️ ↕️ 🔼 🔼 🔃 🔃 🔄 🔄 ⏪ ⏪ ⏩ ⏩ ℹ️ ℹ️ 🆗 🆗 🔀 🔀 🔁 🔁 🔂 🔂 🆕 🆕 🔝 🔝 🆙 🆙 🆒 🆒 🆓 🆓 🆖 🆖 🎦 🎦 🈁 🈁 📶 📶 🈂️ 🈂️ 🚻 🚻 🚹 🚹 🚺 🚺 🚼 🚼 🚭 🚭 🅿️ 🅿️ ♿ ♿ 🚇 🚇 🛄 🛄 🉑 🉑 🚾 🚾 🚰 🚰 🚮 🚮 ㊙️ ㊙️ ㊗️ ㊗️ Ⓜ️ Ⓜ️ 🛂 🛂 🛅 🛅 🛃 🛃 🉐 🉐 🆑 🆑 🆘 🆘 🆔 🆔 🚫 🚫 🔞 🔞 📵 📵 🚯 🚯 🚱 🚱 🚳 🚳 🚷 🚷 🚸 🚸 ⛔ ⛔ ✳️ ✳️ ❇️ ❇️ ✴️ ✴️ 💟 💟 🆚 🆚 📳 📳 📴 📴 💹 💹 💱 💱 ♈ ♈ ♉ ♉ ♊ ♊ ♋ ♋ ♌ ♌ ♍ ♍ ♎ ♎ ♏ ♏ ♐ ♐ ♑ ♑ ♒ ♒ ♓ ♓ ⛎ ⛎ 🔯 🔯 ❎ ❎ 🅰️ 🅰️ 🅱️ 🅱️ 🆎 🆎 🅾️ 🅾️ 💠 💠 ♻️ ♻️ 🔚 🔚 🔙 🔙 🔛 🔛 🔜 🔜 🕐 🕐 🕜 🕜 🕙 🕙 🕥 🕥 🕚 🕚 🕦 🕦 🕛 🕛 🕧 🕧 🕑 🕑 🕝 🕝 🕒 🕒 🕞 🕞 🕓 🕓 🕟 🕟 🕔 🕔 🕠 🕠 🕕 🕕 🕡 🕡 🕖 🕖 🕢 🕢 🕗 🕗 🕣 🕣 🕘 🕘 🕤 🕤 💲 💲 ©️ ©️ ®️ ®️ ™️ ™️ ❌ ❌ ❗ ❗ ‼️ ‼️ ⁉️ ⁉️ ⭕ ⭕ ✖️ ✖️ ➕ ➕ ➖ ➖ ➗ ➗ 💮 💮 💯 💯 ✔️ ✔️ ☑️ ☑️ 🔘 🔘 🔗 🔗 ➰ ➰ 〰️ 〰️ 〽️ 〽️ 🔱 🔱 ▪️ ▪️ ▫️ ▫️ ◾ ◾ ◽ ◽ ◼️ ◼️ ◻️ ◻️ ⬛ ⬛ ⬜ ⬜ ✅ ✅ 🔲 🔲 🔳 🔳 ⚫ ⚫ ⚪ ⚪ 🔴 🔴 🔵 🔵 🔷 🔷 🔶 🔶 🔹 🔹 🔸 🔸 🔺 🔺 🔻 🔻\"]},\"13\":{\"h\":\"自然☀️\",\"t\":[\"☀️ ☀️ ☔ ☔ ☁️ ☁️ ❄️ ❄️ ⛄ ⛄ ⚡ ⚡ 🌀 🌀 🌁 🌁 🌊 🌊 🐱 🐱 🐶 🐶 🐭 🐭 🐹 🐹 🐰 🐰 🐺 🐺 🐸 🐸 🐯 🐯 🐨 🐨 🐻 🐻 🐷 🐷 🐽 🐽 🐮 🐮 🐗 🐗 🐵 🐵 🐒 🐒 🐴 🐴 🐎 🐎 🐫 🐫 🐑 🐑 🐘 🐘 🐼 🐼 🐍 🐍 🐦 🐦 🐤 🐤 🐥 🐥 🐣 🐣 🐔 🐔 🐧 🐧 🐢 🐢 🐛 🐛 🐝 🐝 🐜 🐜 🪲 🪲 🐌 🐌 🐙 🐙 🐠 🐠 🐟 🐟 🐳 🐳 🐋 🐋 🐬 🐬 🐄 🐄 🐏 🐏 🐀 🐀 🐃 🐃 🐅 🐅 🐇 🐇 🐉 🐉 🐐 🐐 🐓 🐓 🐕 🐕 🐖 🐖 🐁 🐁 🐂 🐂 🐲 🐲 🐡 🐡 🐊 🐊 🐪 🐪 🐆 🐆 🐈 🐈 🐩 🐩 🐾 🐾 💐 💐 🌸 🌸 🌷 🌷 🍀 🍀 🌹 🌹 🌻 🌻 🌺 🌺 🍁 🍁 🍃 🍃 🍂 🍂 🌿 🌿 🍄 🍄 🌵 🌵 🌴 🌴 🌲 🌲 🌳 🌳 🌰 🌰 🌱 🌱 🌼 🌼 🌾 🌾 🐚 🐚 🌐 🌐 🌞 🌞 🌝 🌝 🌚 🌚 🌑 🌑 🌒 🌒 🌓 🌓 🌔 🌔 🌕 🌕 🌖 🌖 🌗 🌗 🌘 🌘 🌜 🌜 🌛 🌛 🌙 🌙 🌍 🌍 🌎 🌎 🌏 🌏 🌋 🌋 🌌 🌌 ⛅ ⛅\"]},\"14\":{\"c\":[\"blog\"]},\"15\":{\"c\":[\"写作资源\",\"emoji\"]},\"16\":{\"h\":\"Markdown写作手册\",\"t\":[\"Markdown 是一种轻量级标记语言，能够使用纯文本格式编写文档，并且能够转换为多种格式，如HTML。以下是Markdown的基础用法及示例。\"]},\"17\":{\"h\":\"1. 标题\",\"t\":[\"使用 # 号来表示标题，# 的数量决定标题的层级。\",\"# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题\"]},\"18\":{\"h\":\"2. 段落\",\"t\":[\"直接输入文字就是一个段落。段落之间需要空一行。\",\"这是一个段落。 这是另一个段落。\"]},\"19\":{\"h\":\"3. 强调\",\"t\":[\"使用 * 或 _ 包围文本可以实现斜体，使用 ** 或 __ 包围文本可以实现加粗。\",\"*斜体* 或 _斜体_ **加粗** 或 __加粗__\"]},\"20\":{\"h\":\"4. 列表\"},\"21\":{\"h\":\"无序列表\",\"t\":[\"使用 *、+ 或 - 表示无序列表项。\",\"* 项目1 * 项目2 * 子项目1 * 子项目2 + 项目1 + 项目2 - 项目1 - 项目2\"]},\"22\":{\"h\":\"有序列表\",\"t\":[\"使用数字加点表示有序列表项。\",\"1. 第一项 2. 第二项 1. 子项1 2. 子项2\"]},\"23\":{\"h\":\"5. 链接\",\"t\":[\"使用 [显示文本](链接地址) 格式来添加链接。\",\"[百度](https://www.baidu.com)\"]},\"24\":{\"h\":\"6. 图片\",\"t\":[\"使用 ![替代文本](图片地址) 格式来添加图片。\",\"![Alt text](https://www.example.com/image.jpg)\"]},\"25\":{\"h\":\"7. 引用\",\"t\":[\"使用 > 表示引用。\",\"> 这是一个引用。 >> 这是一个嵌套引用。\"]},\"26\":{\"h\":\"8. 代码\"},\"27\":{\"h\":\"行内代码\",\"t\":[\"使用 `代码` 表示行内代码。\",\"这是 `行内代码` 示例。\"]},\"28\":{\"h\":\"代码块\",\"t\":[\"使用三个反引号 ``` 表示代码块。\",\"```语言\",\"代码内容\",\"```\",\"```python def hello_world(): print(\\\"Hello, world!\\\")\",\" ## 9. 水平线 使用三个或更多的 `-`、`*` 或 `_` 表示水平线。 ```markdown --- *** ___\"]},\"29\":{\"h\":\"10. 表格\",\"t\":[\"使用 | 分隔单元格，使用 - 分隔表头和其他行。\",\"| 标题1 | 标题2 | 标题3 | | ----- | ----- | ----- | | 内容1 | 内容2 | 内容3 | | 内容4 | 内容5 | 内容6 |\"]},\"30\":{\"h\":\"11. 任务列表\",\"t\":[\"使用 - [ ] 表示未完成的任务，使用 - [x] 表示已完成的任务。\",\"- [ ] 任务1 - [x] 任务2\"]},\"31\":{\"h\":\"12. 注脚\",\"t\":[\"使用 [^注脚] 在文本中添加注脚，并在文档底部定义注脚内容。\",\"这是一个注脚示例[^1]。 [^1]: 这是注脚内容。\"]},\"32\":{\"h\":\"13. 表情符号\",\"t\":[\"使用 : 包围表情符号的名字来添加表情。\",\":smile: :thumbsup: :heart:\"]},\"33\":{\"h\":\"14. 转义字符\",\"t\":[\"使用 \\\\ 进行转义。\",\"\\\\* 斜体 \\\\*\"]},\"34\":{\"h\":\"15. 公式\",\"t\":[\"使用两个美元符号 $$ 包围公式内容。\",\"$$ E = mc^2 $$\"]},\"35\":{\"h\":\"16. 定义列表\",\"t\":[\"使用冒号和缩进表示定义列表。\",\"项目1 : 定义1 项目2 : 定义2 : 子定义\",\"以上是Markdown的基本语法和使用示例，掌握这些内容可以帮助你高效地编写和格式化文档。\"]},\"36\":{\"c\":[\"Blog\"]},\"37\":{\"c\":[\"写作\",\"Markdown\"]},\"38\":{\"h\":\"Markdown扩展语法\"},\"39\":{\"c\":[\"Blog\"]},\"40\":{\"c\":[\"markdown\",\"写作\"]},\"41\":{\"h\":\"Blog\"},\"42\":{\"c\":[\"Blog\"]},\"43\":{\"h\":\"文档\"},\"44\":{\"c\":[\"Study\"]},\"45\":{\"h\":\"关于江湖\"},\"46\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"47\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"48\":{\"c\":[\"Study\"]},\"49\":{\"c\":[\"福建农林大学\",\"农业工程\"]},\"50\":{\"h\":\"常用链接\"},\"51\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"52\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"53\":{\"c\":[\"Study\"]},\"54\":{\"c\":[\"福建农林大学\",\"农业工程\"]},\"55\":{\"h\":\"其他\"},\"56\":{\"c\":[\"Study\"]},\"57\":{\"h\":\"Light it up\",\"t\":[\"image\"]},\"58\":{\"c\":[\"图片\"]},\"59\":{\"c\":[\"音乐\"]},\"60\":{\"h\":\"图片收藏\"},\"61\":{\"c\":[\"图像\",\"相册\"]},\"62\":{\"h\":\"川建国同志\"},\"63\":{\"h\":\"2024年7月13日 Donald John Trump 遇刺\",\"t\":[\"Donald John Trump\",\"Donald John Trump\"]},\"64\":{\"c\":[\"图片\"]},\"65\":{\"c\":[\"Donald John Trump\",\"特朗普\"]},\"66\":{\"h\":\"一直游到海水变蓝\"},\"67\":{\"c\":[\"图片\"]},\"68\":{\"c\":[\"大海\",\"蓝色海洋\"]},\"69\":{\"h\":\"在北方\",\"t\":[\"image\",\"拍摄信息\",\"时间：2024-07-29 设备：oppo findX7\"]},\"70\":{\"c\":[\"图片\"]},\"71\":{\"c\":[\"摄影\"]},\"72\":{\"h\":\"心之火焰\"},\"73\":{\"h\":\"MUSIC-心之火\"},\"74\":{\"h\":\"Fire Of Heart\"},\"75\":{\"c\":[\"音乐\"]},\"76\":{\"c\":[\"心之火\"]},\"77\":{\"h\":\"无尽的远方\",\"t\":[\"拍摄信息\",\"时间：2024-07-20 设备：oppo findX7\"]},\"78\":{\"c\":[\"图片\"]},\"79\":{\"c\":[\"摄影\"]},\"80\":{\"h\":\"随笔\"},\"81\":{\"c\":[\"Study\"]},\"82\":{\"h\":\"阅读记录\"},\"83\":{\"c\":[\"Study\"]},\"84\":{\"h\":\"《枪炮、病菌与钢铁》\"},\"85\":{\"c\":[\"阅读\"]},\"86\":{\"c\":[\"枪炮、病菌与钢铁\",\"社会学\"]},\"87\":{\"h\":\"毛泽东选集\"},\"88\":{\"c\":[\"阅读\"]},\"89\":{\"c\":[\"毛泽东选集\",\"文学\",\"红色革命\"]},\"90\":{\"h\":\"科研导航\"},\"91\":{\"h\":\"常用链接\"},\"92\":{\"h\":\"科研\"},\"93\":{\"c\":[\"research\"]},\"94\":{\"h\":\"资源\"},\"95\":{\"c\":[\"资源\"]},\"96\":{\"h\":\"工具\"},\"97\":{\"c\":[\"工具\"]},\"98\":{\"h\":\"Windows系统装机\"},\"99\":{\"h\":\"Windows 10系统\"},\"100\":{\"h\":\"装机流程\",\"t\":[\"准备一台电脑，可以是目标PC\",\"准备系统镜像\",\"初始化一个启动U盘（不小于16G）\",\"插入目标PC\",\"开机，进入BIOS系统\",\"更改引导介质\",\"配置系统\"]},\"101\":{\"h\":\"下载系统镜像\"},\"102\":{\"h\":\"启动盘制作\"},\"103\":{\"c\":[\"工具\"]},\"104\":{\"c\":[\"Windows\",\"装机\"]},\"105\":{\"h\":\"C++\"},\"106\":{\"c\":[\"C++\"]},\"107\":{\"c\":[\"C++\",\"后端开发\"]},\"108\":{\"h\":\"Java\"},\"109\":{\"c\":[\"Java\"]},\"110\":{\"c\":[\"Java\",\"后端开发\"]},\"111\":{\"h\":\"Linux命令\"},\"112\":{\"c\":[\"Linux\"]},\"113\":{\"c\":[\"Linux\",\"命令\"]},\"114\":{\"h\":\"Linux学习手册\"},\"115\":{\"c\":[\"Linux\"]},\"116\":{\"c\":[\"Linux\",\"学习手册\"]},\"117\":{\"h\":\"Linux相关工具\"},\"118\":{\"c\":[\"Linux\"]},\"119\":{\"c\":[\"Linux\",\"工具\"]},\"120\":{\"h\":\"Linux\"},\"121\":{\"c\":[\"Linux\"]},\"122\":{\"c\":[\"Linux\"]},\"123\":{\"h\":\"Shell脚本编程\"},\"124\":{\"c\":[\"Linux\"]},\"125\":{\"c\":[\"shell\",\"脚本\"]},\"126\":{\"h\":\"Python学习手册1\"},\"127\":{\"h\":\"Python\",\"t\":[\"Python\"]},\"128\":{\"h\":\"Python基础\"},\"129\":{\"h\":\"Python基础语法\"},\"130\":{\"h\":\"编码\",\"t\":[\"默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。\"]},\"131\":{\"h\":\"标识符\",\"t\":[\"第一个字符必须是字母表中字母或下划线 _ 。\",\"标识符的其他的部分由字母、数字和下划线组成。\",\"标识符对大小写敏感。 在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。\"]},\"132\":{\"h\":\"注释\",\"t\":[\" #单行注释 ''' 多行注释 '''\"]},\"133\":{\"h\":\"python保留字\",\"t\":[\"保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：\",\" >>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\"]},\"134\":{\"h\":\"行与缩进\",\"t\":[\"python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。\",\"Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \\\\ 来实现多行语句\",\"Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割\"]},\"135\":{\"h\":\"Python基本数据类型\",\"t\":[\"Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 在 Python 中，变量就是变量，它没有类型，我们所说的\\\"类型\\\"是变量所指的内存中对象的类型。\"]},\"136\":{\"h\":\"标准数据类型\",\"t\":[\"Number（数字）\",\"String（字符串）\",\"bool（布尔类型）\",\"List（列表）\",\"Tuple（元组）\",\"Set（集合）\",\"Dictionary（字典）\"]},\"137\":{\"h\":\"Number(数字)\",\"t\":[\"Python 数字数据类型用于存储数值。 Python 支持三种不同的数值类型：\",\"整型(int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。布尔(bool)是整型的子类型。\",\"浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示 （2.5e2=2.5x102=250）\",\"复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\"]},\"138\":{\"h\":\"String（字符串）\",\"t\":[\"字符串是 Python 中最常用的数据类型。使用引号( ' 或 \\\" )来创建字符串。 Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。 Python 访问子字符串，可以使用方括号 [] 来截取字符串，字符串的截取的语法格式如下：\",\"变量[头下标:尾下标]\"]},\"139\":{\"h\":\"bool（布尔类型）\",\"t\":[\"布尔类型即 True 或 False。 在 Python 中，True 和 False 都是关键字，表示布尔值。 布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。 布尔类型特点：\",\"布尔类型只有两个值：True 和 False。\",\"bool 是 int 的子类，因此布尔值可以被看作整数来使用，其中 True 等价于 1。\",\"布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。\",\"布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。\",\"布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。\",\"可以使用 bool() 函数将其他类型的值转换为布尔值。以下值在转换为布尔值时为 False：None、False、零 (0、0.0、0j)、空序列（如 ''、()、[]）和空映射（如 {}）。其他所有值转换为布尔值时均为 True。\"]},\"140\":{\"h\":\"List（列表）\",\"t\":[\"Python 中的 list（列表）是一种有序的可变数据类型，用于存储一组有序的项目。列表中的元素可以是任意类型，包括数字、字符串、列表，甚至是其他复杂对象。以下是关于 Python 列表的一些基本操作和用法：\"]},\"141\":{\"h\":\"创建列表\",\"t\":[\"# 创建空列表 empty_list = [] # 创建包含元素的列表 numbers = [1, 2, 3, 4, 5] strings = [\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"] mixed = [1, \\\"apple\\\", 3.14, [2, 4, 6]]\"]},\"142\":{\"h\":\"访问列表元素\",\"t\":[\"# 访问列表中的第一个元素（索引从 0 开始） first_number = numbers[0] # 1 # 访问列表中的最后一个元素 last_number = numbers[-1] # 5 # 访问嵌套列表中的元素 nested_element = mixed[3][1] # 4\"]},\"143\":{\"h\":\"修改列表元素\",\"t\":[\"# 修改列表中的元素 numbers[0] = 10 # numbers 现在是 [10, 2, 3, 4, 5]\"]},\"144\":{\"h\":\"列表切片\",\"t\":[\"# 获取列表的一部分（切片） sub_list = numbers[1:4] # [2, 3, 4] # 切片的步长 stepped_list = numbers[::2] # [10, 3, 5]\"]},\"145\":{\"h\":\"添加元素\",\"t\":[\"# 在列表末尾添加元素 numbers.append(6) # [10, 2, 3, 4, 5, 6] # 在指定位置插入元素 numbers.insert(1, 15) # [10, 15, 2, 3, 4, 5, 6]\"]},\"146\":{\"h\":\"删除元素\",\"t\":[\"# 删除指定位置的元素 del numbers[1] # [10, 2, 3, 4, 5, 6] # 删除并返回最后一个元素 last_element = numbers.pop() # 6, numbers 现在是 [10, 2, 3, 4, 5] # 删除指定值的元素 numbers.remove(2) # [10, 3, 4, 5]\"]},\"147\":{\"h\":\"其他常用方法\",\"t\":[\"# 获取列表长度 length = len(numbers) # 4 # 统计某个元素在列表中出现的次数 count = numbers.count(3) # 1 # 反转列表 numbers.reverse() # [5, 4, 3, 10] # 排序列表 numbers.sort() # [3, 4, 5, 10]\"]},\"148\":{\"h\":\"列表的高级操作\",\"t\":[\"# 列表推导式（列表解析） squares = [x**2 for x in range(1, 6)] # [1, 4, 9, 16, 25] # 列表的合并 combined = numbers + squares # [3, 4, 5, 10, 1, 4, 9, 16, 25] # 列表的重复 repeated = numbers * 2 # [3, 4, 5, 10, 3, 4, 5, 10]\",\"这些操作展示了 Python 列表的基本用法和功能。列表是一种非常灵活和强大的数据结构，适用于各种编程任务。\"]},\"149\":{\"h\":\"Tuple（元组）\",\"t\":[\"Python 中的 tuple（元组）是一种有序的不可变数据类型，用于存储一组有序的项目。元组与列表非常相似，但元组一旦创建，其内容不能更改。以下是关于 Python 元组的一些基本操作和用法：\"]},\"150\":{\"h\":\"创建元组\",\"t\":[\"# 创建空元组 empty_tuple = () # 创建包含元素的元组 numbers = (1, 2, 3, 4, 5) strings = (\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\") mixed = (1, \\\"apple\\\", 3.14, (2, 4, 6)) # 不带括号的元组 no_parentheses_tuple = 1, 2, 3, 4, 5 # 创建单个元素的元组（注意逗号） single_element_tuple = (1,)\"]},\"151\":{\"h\":\"访问元组元素\",\"t\":[\"# 访问元组中的第一个元素（索引从 0 开始） first_number = numbers[0] # 1 # 访问元组中的最后一个元素 last_number = numbers[-1] # 5 # 访问嵌套元组中的元素 nested_element = mixed[3][1] # 4\"]},\"152\":{\"h\":\"元组切片\",\"t\":[\"# 获取元组的一部分（切片） sub_tuple = numbers[1:4] # (2, 3, 4) # 切片的步长 stepped_tuple = numbers[::2] # (1, 3, 5)\"]},\"153\":{\"h\":\"解包元组\",\"t\":[\"# 解包元组中的元素 a, b, c, d, e = numbers # a = 1, b = 2, c = 3, d = 4, e = 5 # 解包部分元素 first, *rest = numbers # first = 1, rest = [2, 3, 4, 5] # 使用 \\\"_\\\" 占位符忽略某些元素 _, second, _, fourth, _ = numbers # second = 2, fourth = 4\"]},\"154\":{\"h\":\"合并与重复元组\",\"t\":[\"# 合并元组 combined = numbers + strings # (1, 2, 3, 4, 5, 'apple', 'banana', 'cherry') # 重复元组 repeated = numbers * 2 # (1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\"]},\"155\":{\"h\":\"其他常用操作\",\"t\":[\"# 获取元组长度 length = len(numbers) # 5 # 检查元素是否存在于元组中 exists = 3 in numbers # True # 获取元素的索引 index = numbers.index(4) # 3 # 统计某个元素在元组中出现的次数 count = numbers.count(2) # 1\"]},\"156\":{\"h\":\"元组的使用场景\",\"t\":[\"不可变性：因为元组是不可变的，所以可以用作字典的键，或者用在需要保证数据不变的场景中。\",\"解包：元组非常适合用于多变量赋值和解包操作。\",\"内存优化：元组的内存占用比列表更少，因此在需要大量存储数据且不修改数据时，使用元组可以提高效率。\"]},\"157\":{\"h\":\"示例：函数返回多个值\",\"t\":[\"def get_name_and_age(): return \\\"Alice\\\", 30 name, age = get_name_and_age() # name = \\\"Alice\\\", age = 30\",\"元组在 Python 中提供了一种简洁、高效的方式来处理不可变的有序数据。\"]},\"158\":{\"h\":\"Set（集合）\",\"t\":[\"Python 中的 set（集合）是一种无序的、元素唯一的数据类型。集合主要用于存储不重复的元素，并提供高效的成员检测和基本的集合操作，如并集、交集和差集。以下是关于 Python 集合的一些基本操作和用法：\"]},\"159\":{\"h\":\"创建集合\",\"t\":[\"# 创建空集合 empty_set = set() # 创建包含元素的集合 numbers = {1, 2, 3, 4, 5} mixed = {1, \\\"apple\\\", 3.14, (2, 4, 6)} # 使用 set() 函数将其他可迭代对象转换为集合 list_to_set = set([1, 2, 3, 2, 1]) # {1, 2, 3} string_to_set = set(\\\"hello\\\") # {'h', 'e', 'l', 'o'}\"]},\"160\":{\"h\":\"添加与删除元素\",\"t\":[\"# 添加元素 numbers.add(6) # {1, 2, 3, 4, 5, 6} # 删除元素（如果元素不存在会引发 KeyError） numbers.remove(3) # {1, 2, 4, 5, 6} # 使用 discard 删除元素（如果元素不存在不会引发错误） numbers.discard(10) # {1, 2, 4, 5, 6} # 随机删除并返回一个元素 removed_element = numbers.pop() # 可能是任意一个元素\"]},\"161\":{\"h\":\"集合操作\",\"t\":[\"set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} # 并集 union_set = set1 | set2 # {1, 2, 3, 4, 5, 6} # 或者使用 union 方法 union_set = set1.union(set2) # 交集 intersection_set = set1 & set2 # {3, 4} # 或者使用 intersection 方法 intersection_set = set1.intersection(set2) # 差集 difference_set = set1 - set2 # {1, 2} # 或者使用 difference 方法 difference_set = set1.difference(set2) # 对称差集（即非公共部分的并集） symmetric_difference_set = set1 ^ set2 # {1, 2, 5, 6} # 或者使用 symmetric_difference 方法 symmetric_difference_set = set1.symmetric_difference(set2)\"]},\"162\":{\"h\":\"集合的其他常用方法\",\"t\":[\"# 检查元素是否在集合中 exists = 2 in numbers # True # 获取集合长度 length = len(numbers) # 5 # 清空集合 numbers.clear() # set() # 复制集合 copied_set = numbers.copy() # {1, 2, 4, 5, 6}\"]},\"163\":{\"h\":\"集合推导式\",\"t\":[\"# 创建一个集合，包含 1 到 5 的平方数 squares = {x**2 for x in range(1, 6)} # {1, 4, 9, 16, 25}\"]},\"164\":{\"h\":\"示例：集合的应用场景\"},\"165\":{\"h\":\"去重\",\"t\":[\"# 从列表中去除重复元素 original_list = [1, 2, 2, 3, 4, 4, 5] unique_elements = list(set(original_list)) # [1, 2, 3, 4, 5]\"]},\"166\":{\"h\":\"检测集合之间的关系\",\"t\":[\"set1 = {1, 2, 3} set2 = {1, 2, 3, 4, 5} # 子集 is_subset = set1 <= set2 # True # 或者使用 issubset 方法 is_subset = set1.issubset(set2) # 超集 is_superset = set2 >= set1 # True # 或者使用 issuperset 方法 is_superset = set2.issuperset(set1)\",\"集合在需要处理唯一元素集合、高效成员检测和基本集合操作的场景中非常有用。集合操作是许多算法和数据处理任务的重要组成部分。\"]},\"167\":{\"h\":\"Dictionary（字典）\",\"t\":[\"Python 中的 dictionary（字典）是一种无序的、可变的、元素成对存储的集合。字典中的每个元素由键和值组成，键必须是唯一的。字典主要用于通过键快速查找对应的值。以下是关于 Python 字典的一些基本操作和用法：\"]},\"168\":{\"h\":\"创建字典\",\"t\":[\"# 创建空字典 empty_dict = {} # 创建包含元素的字典 person = {\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30, \\\"city\\\": \\\"New York\\\"} # 使用 dict() 函数创建字典 person2 = dict(name=\\\"Bob\\\", age=25, city=\\\"Los Angeles\\\")\"]},\"169\":{\"h\":\"访问字典元素\",\"t\":[\"# 通过键访问值 name = person[\\\"name\\\"] # \\\"Alice\\\" # 使用 get() 方法访问值（如果键不存在，则返回 None 或指定的默认值） age = person.get(\\\"age\\\") # 30 country = person.get(\\\"country\\\", \\\"Unknown\\\") # \\\"Unknown\\\"\"]},\"170\":{\"h\":\"修改字典元素\",\"t\":[\"# 修改现有键的值 person[\\\"age\\\"] = 31 # {\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 31, \\\"city\\\": \\\"New York\\\"} # 添加新键值对 person[\\\"country\\\"] = \\\"USA\\\" # {\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 31, \\\"city\\\": \\\"New York\\\", \\\"country\\\": \\\"USA\\\"}\"]},\"171\":{\"h\":\"删除字典元素\",\"t\":[\"# 删除指定键值对 del person[\\\"city\\\"] # {\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 31, \\\"country\\\": \\\"USA\\\"} # 使用 pop() 方法删除并返回指定键的值 age = person.pop(\\\"age\\\") # 31, person 现在是 {\\\"name\\\": \\\"Alice\\\", \\\"country\\\": \\\"USA\\\"} # 使用 popitem() 方法随机删除并返回一个键值对 item = person.popitem() # 例如 (\\\"country\\\", \\\"USA\\\"), person 现在是 {\\\"name\\\": \\\"Alice\\\"} # 清空字典 person.clear() # {}\"]},\"172\":{\"h\":\"字典的其他常用操作\",\"t\":[\"# 获取字典的所有键 keys = person.keys() # dict_keys([\\\"name\\\"]) # 获取字典的所有值 values = person.values() # dict_values([\\\"Alice\\\"]) # 获取字典的所有键值对 items = person.items() # dict_items([(\\\"name\\\", \\\"Alice\\\")]) # 检查键是否在字典中 exists = \\\"name\\\" in person # True not_exists = \\\"age\\\" in person # False # 字典的长度 length = len(person) # 1\"]},\"173\":{\"h\":\"字典推导式\",\"t\":[\"# 创建一个字典，键是 1 到 5，值是它们的平方 squares = {x: x**2 for x in range(1, 6)} # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\"]},\"174\":{\"h\":\"字典的合并与更新\",\"t\":[\"dict1 = {\\\"a\\\": 1, \\\"b\\\": 2} dict2 = {\\\"b\\\": 3, \\\"c\\\": 4} # 使用 update() 方法合并字典 dict1.update(dict2) # dict1 现在是 {\\\"a\\\": 1, \\\"b\\\": 3, \\\"c\\\": 4} # 使用 ** 运算符合并字典（适用于 Python 3.5 及以上） merged_dict = {**dict1, **dict2} # {\\\"a\\\": 1, \\\"b\\\": 3, \\\"c\\\": 4}\"]},\"175\":{\"h\":\"示例：字典的实际应用\"},\"176\":{\"h\":\"统计单词出现的次数\",\"t\":[\"text = \\\"apple banana apple cherry banana apple\\\" word_counts = {} for word in text.split(): if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 # word_counts 现在是 {\\\"apple\\\": 3, \\\"banana\\\": 2, \\\"cherry\\\": 1}\"]},\"177\":{\"h\":\"记录学生成绩\",\"t\":[\"grades = { \\\"Alice\\\": {\\\"math\\\": 90, \\\"science\\\": 85}, \\\"Bob\\\": {\\\"math\\\": 78, \\\"science\\\": 82}, } # 访问 Alice 的数学成绩 alice_math_grade = grades[\\\"Alice\\\"][\\\"math\\\"] # 90 # 添加一个新学生的成绩 grades[\\\"Charlie\\\"] = {\\\"math\\\": 95, \\\"science\\\": 88}\",\"字典在需要快速查找、插入和删除操作的场景中非常有用。字典是 Python 中处理键值对数据的首选数据结构，广泛应用于各种编程任务。\"]},\"178\":{\"h\":\"Python变量和常量\",\"t\":[\"在Python中，变量和常量是存储数据的两种方式。\"]},\"179\":{\"h\":\"变量\",\"t\":[\"变量是可以在程序的执行过程中改变其值的存储单元。在Python中，变量不需要声明类型，类型会根据赋值自动确定。\"]},\"180\":{\"h\":\"变量的定义和使用：\",\"t\":[\"# 定义变量并赋值 x = 10 y = 20 # 使用变量 print(x + y) # 输出30 # 修改变量的值 x = 15 print(x + y) # 输出35\"]},\"181\":{\"h\":\"常量\",\"t\":[\"常量是其值在程序的执行过程中不能改变的存储单元。Python没有内置的常量类型，通常使用全大写字母的变量名来表示常量，约定俗成地提醒程序员该值不应被修改。\"]},\"182\":{\"h\":\"常量的定义和使用：\",\"t\":[\"# 定义常量 PI = 3.14159 GRAVITY = 9.81 # 使用常量 print(\\\"圆的面积：\\\", PI * 5 * 5) # 输出圆的面积：78.53975 print(\\\"物体的重量：\\\", 70 * GRAVITY) # 输出物体的重量：686.7 # 尽管可以重新赋值，但不建议这么做 PI = 3.14 # 重新赋值，这不是一个好习惯 print(\\\"圆的面积：\\\", PI * 5 * 5) # 输出圆的面积：78.5\"]},\"183\":{\"h\":\"变量与常量的区别\",\"t\":[\"值的可变性：\",\"变量：值可以在程序执行过程中更改。\",\"常量：值在程序执行过程中不应更改。\",\"命名约定：\",\"变量：通常使用小写字母和下划线的组合，如my_variable。\",\"常量：通常使用全大写字母和下划线的组合，如MY_CONSTANT。\",\"通过正确使用变量和常量，可以提高代码的可读性和维护性。\"]},\"184\":{\"h\":\"Python数据类型转换\",\"t\":[\"在Python中，不同的数据类型之间可以进行转换。常见的数据类型转换包括整数、浮点数、字符串、列表、元组、集合和字典。以下是一些常用的数据类型转换方法：\"]},\"185\":{\"h\":\"1. 转换为整数\",\"t\":[\"使用 int() 函数将其他数据类型转换为整数。\",\"# 浮点数转换为整数 float_number = 3.14 int_number = int(float_number) print(int_number) # 输出3 # 字符串转换为整数 string_number = \\\"42\\\" int_number = int(string_number) print(int_number) # 输出42 # 布尔值转换为整数 boolean_value = True int_number = int(boolean_value) print(int_number) # 输出1\"]},\"186\":{\"h\":\"2. 转换为浮点数\",\"t\":[\"使用 float() 函数将其他数据类型转换为浮点数。\",\"# 整数转换为浮点数 int_number = 42 float_number = float(int_number) print(float_number) # 输出42.0 # 字符串转换为浮点数 string_number = \\\"3.14\\\" float_number = float(string_number) print(float_number) # 输出3.14\"]},\"187\":{\"h\":\"3. 转换为字符串\",\"t\":[\"使用 str() 函数将其他数据类型转换为字符串。\",\"# 整数转换为字符串 int_number = 42 string_number = str(int_number) print(string_number) # 输出\\\"42\\\" # 浮点数转换为字符串 float_number = 3.14 string_number = str(float_number) print(string_number) # 输出\\\"3.14\\\"\"]},\"188\":{\"h\":\"4. 转换为列表\",\"t\":[\"使用 list() 函数将其他可迭代对象（如字符串、元组、集合）转换为列表。\",\"# 字符串转换为列表 string_value = \\\"hello\\\" list_value = list(string_value) print(list_value) # 输出['h', 'e', 'l', 'l', 'o'] # 元组转换为列表 tuple_value = (1, 2, 3) list_value = list(tuple_value) print(list_value) # 输出[1, 2, 3]\"]},\"189\":{\"h\":\"5. 转换为元组\",\"t\":[\"使用 tuple() 函数将其他可迭代对象（如字符串、列表、集合）转换为元组。\",\"# 列表转换为元组 list_value = [1, 2, 3] tuple_value = tuple(list_value) print(tuple_value) # 输出(1, 2, 3) # 字符串转换为元组 string_value = \\\"hello\\\" tuple_value = tuple(string_value) print(tuple_value) # 输出('h', 'e', 'l', 'l', 'o')\"]},\"190\":{\"h\":\"6. 转换为集合\",\"t\":[\"使用 set() 函数将其他可迭代对象（如字符串、列表、元组）转换为集合。\",\"# 列表转换为集合 list_value = [1, 2, 3, 1, 2] set_value = set(list_value) print(set_value) # 输出{1, 2, 3} # 字符串转换为集合 string_value = \\\"hello\\\" set_value = set(string_value) print(set_value) # 输出{'h', 'e', 'l', 'o'}\"]},\"191\":{\"h\":\"7. 转换为字典\",\"t\":[\"使用 dict() 函数将其他数据类型转换为字典。通常用于包含键值对的可迭代对象。\",\"# 列表的键值对转换为字典 list_value = [(\\\"name\\\", \\\"Alice\\\"), (\\\"age\\\", 25)] dict_value = dict(list_value) print(dict_value) # 输出{'name': 'Alice', 'age': 25}\",\"通过这些转换函数，Python提供了灵活的数据类型转换方式，便于在程序中进行各种数据处理和操作。\"]},\"192\":{\"h\":\"Python运算符\",\"t\":[\"在Python中，运算符用于执行各种操作，如算术运算、比较运算、逻辑运算等。以下是Python中的常见运算符及其用法：\"]},\"193\":{\"h\":\"1. 算术运算符\",\"t\":[\"这些运算符用于执行基本的算术运算。\",\"# 加法 result = 3 + 2 # 结果为5 # 减法 result = 3 - 2 # 结果为1 # 乘法 result = 3 * 2 # 结果为6 # 除法 result = 3 / 2 # 结果为1.5 # 取整除 result = 3 // 2 # 结果为1 # 取余 result = 3 % 2 # 结果为1 # 指数 result = 3 ** 2 # 结果为9\"]},\"194\":{\"h\":\"2. 比较运算符\",\"t\":[\"这些运算符用于比较两个值，并返回布尔值（True或False）。\",\"# 等于 result = (3 == 2) # 结果为False # 不等于 result = (3 != 2) # 结果为True # 大于 result = (3 > 2) # 结果为True # 小于 result = (3 < 2) # 结果为False # 大于等于 result = (3 >= 2) # 结果为True # 小于等于 result = (3 <= 2) # 结果为False\"]},\"195\":{\"h\":\"3. 逻辑运算符\",\"t\":[\"这些运算符用于执行逻辑运算。\",\"# 与 result = (True and False) # 结果为False # 或 result = (True or False) # 结果为True # 非 result = not True # 结果为False\"]},\"196\":{\"h\":\"4. 位运算符\",\"t\":[\"这些运算符用于按位操作整数。\",\"# 按位与 result = 3 & 2 # 结果为2 # 按位或 result = 3 | 2 # 结果为3 # 按位异或 result = 3 ^ 2 # 结果为1 # 按位取反 result = ~3 # 结果为-4 # 左移 result = 3 << 1 # 结果为6 # 右移 result = 3 >> 1 # 结果为1\"]},\"197\":{\"h\":\"5. 赋值运算符\",\"t\":[\"这些运算符用于将值赋给变量。\",\"# 简单赋值 x = 3 # 加法赋值 x += 2 # 相当于x = x + 2，结果为5 # 减法赋值 x -= 2 # 相当于x = x - 2，结果为1 # 乘法赋值 x *= 2 # 相当于x = x * 2，结果为6 # 除法赋值 x /= 2 # 相当于x = x / 2，结果为1.5 # 取整除赋值 x //= 2 # 相当于x = x // 2，结果为1 # 取余赋值 x %= 2 # 相当于x = x % 2，结果为1 # 指数赋值 x **= 2 # 相当于x = x ** 2，结果为9 # 按位与赋值 x &= 2 # 相当于x = x & 2 # 按位或赋值 x |= 2 # 相当于x = x | 2 # 按位异或赋值 x ^= 2 # 相当于x = x ^ 2 # 左移赋值 x <<= 2 # 相当于x = x << 2 # 右移赋值 x >>= 2 # 相当于x = x >> 2\"]},\"198\":{\"h\":\"6. 成员运算符\",\"t\":[\"这些运算符用于测试序列中的成员资格。\",\"# in 运算符 result = 'a' in 'apple' # 结果为True # not in 运算符 result = 'b' not in 'apple' # 结果为True\"]},\"199\":{\"h\":\"7. 身份运算符\",\"t\":[\"这些运算符用于比较对象的内存位置。\",\"# is 运算符 x = [1, 2, 3] y = x result = x is y # 结果为True # is not 运算符 y = [1, 2, 3] result = x is not y # 结果为True\",\"通过理解和使用这些运算符，您可以在Python中执行各种类型的操作，从而实现丰富的功能。\"]},\"200\":{\"h\":\"Python循环与流程控制\",\"t\":[\"在Python中，循环与流程控制是编写程序逻辑的基础。以下是一些常见的控制结构和循环结构：\"]},\"201\":{\"h\":\"if 条件分支\",\"t\":[\"if 语句用于根据条件执行不同的代码块。\",\"x = 10 if x > 0: print(\\\"x 是正数\\\") elif x == 0: print(\\\"x 是零\\\") else: print(\\\"x 是负数\\\")\"]},\"202\":{\"h\":\"match 判断\",\"t\":[\"从Python 3.10开始，match语句被引入，用于模式匹配，这类似于其他语言中的switch语句。\",\"def http_error(status): match status: case 400: return \\\"Bad request\\\" case 404: return \\\"Not found\\\" case 418: return \\\"I'm a teapot\\\" case _: return \\\"Something's wrong with the internet\\\" print(http_error(404)) # 输出 \\\"Not found\\\"\"]},\"203\":{\"h\":\"while 循环\",\"t\":[\"while 循环在条件为真时反复执行代码块。\",\"count = 0 while count < 5: print(count) count += 1\"]},\"204\":{\"h\":\"for 循环\",\"t\":[\"for 循环用于遍历序列（如列表、元组、字符串）中的元素。\",\"# 遍历列表 numbers = [1, 2, 3, 4, 5] for num in numbers: print(num) # 遍历字符串 for char in \\\"hello\\\": print(char)\"]},\"205\":{\"h\":\"中断语句\",\"t\":[\"中断语句用于控制循环的执行，包括 break、continue 和 else。\"]},\"206\":{\"h\":\"break 语句\",\"t\":[\"break 语句用于提前退出循环。\",\"for num in range(10): if num == 5: break print(num) # 输出0到4\"]},\"207\":{\"h\":\"continue 语句\",\"t\":[\"continue 语句用于跳过当前迭代并继续下一次迭代。\",\"for num in range(10): if num % 2 == 0: continue print(num) # 输出1, 3, 5, 7, 9\"]},\"208\":{\"h\":\"else 子句\",\"t\":[\"else 子句在循环正常结束时执行，而不是在 break 中断时执行。\",\"for num in range(5): print(num) else: print(\\\"循环正常结束\\\") # 输出0到4，然后输出 \\\"循环正常结束\\\" # 如果在循环中使用break，else子句不会执行 for num in range(5): if num == 3: break print(num) else: print(\\\"循环正常结束\\\") # 输出0, 1, 2\"]},\"209\":{\"h\":\"Python 函数编程\",\"t\":[\"函数是Python编程中的核心组成部分，它们帮助你组织代码、实现复用和提高可读性。以下是Python函数编程的一些关键概念和技术：\"]},\"210\":{\"h\":\"函数声明和调用\",\"t\":[\"函数声明用于定义一个函数，包括函数名、参数和函数体。函数调用用于执行函数中的代码。\",\"# 函数声明 def greet(name): print(f\\\"Hello, {name}!\\\") # 函数调用 greet(\\\"Alice\\\") # 输出: Hello, Alice!\"]},\"211\":{\"h\":\"函数的参数\",\"t\":[\"函数可以接受不同类型的参数，包括位置参数、默认参数、关键字参数和可变参数。\",\"# 位置参数 def add(a, b): return a + b # 默认参数 def greet(name=\\\"Guest\\\"): print(f\\\"Hello, {name}!\\\") # 关键字参数 def describe_person(name, age): print(f\\\"{name} is {age} years old.\\\") # 可变参数 def sum_numbers(*numbers): return sum(numbers) # 调用示例 print(add(2, 3)) # 输出: 5 greet() # 输出: Hello, Guest! greet(\\\"Bob\\\") # 输出: Hello, Bob! describe_person(age=30, name=\\\"Alice\\\") # 输出: Alice is 30 years old. print(sum_numbers(1, 2, 3, 4)) # 输出: 10\"]},\"212\":{\"h\":\"匿名函数\",\"t\":[\"匿名函数（lambda函数）是没有名称的函数，用于简短的函数定义。\",\"# lambda函数 add = lambda x, y: x + y print(add(2, 3)) # 输出: 5 # 在函数中使用lambda numbers = [1, 2, 3, 4] squared = list(map(lambda x: x**2, numbers)) print(squared) # 输出: [1, 4, 9, 16]\"]},\"213\":{\"h\":\"递归\",\"t\":[\"递归是指函数在其定义中调用自身。递归函数必须有一个基本条件以防止无限递归。\",\"# 计算阶乘的递归函数 def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1) print(factorial(5)) # 输出: 120\"]},\"214\":{\"h\":\"高阶函数\",\"t\":[\"高阶函数是接受函数作为参数或返回函数的函数。\",\"# 使用高阶函数map numbers = [1, 2, 3, 4] squared = list(map(lambda x: x**2, numbers)) print(squared) # 输出: [1, 4, 9, 16] # 高阶函数返回函数 def outer_function(x): def inner_function(y): return x + y return inner_function add_five = outer_function(5) print(add_five(3)) # 输出: 8\"]},\"215\":{\"h\":\"返回函数和闭包\",\"t\":[\"闭包是指一个函数返回另一个函数，且内部函数可以访问外部函数的局部变量。\",\"# 闭包示例 def make_multiplier(factor): def multiplier(number): return number * factor return multiplier # 创建闭包 times_three = make_multiplier(3) print(times_three(9)) # 输出: 27\"]},\"216\":{\"h\":\"函数装饰器\",\"t\":[\"装饰器是一种用于修改或增强函数的功能的设计模式。它是一个函数，接受另一个函数作为参数，并返回一个新的函数。\",\"def decorator_function(original_function): def wrapper_function(): print(\\\"Wrapper executed this before {}\\\".format(original_function.__name__)) return original_function() return wrapper_function @decorator_function def display(): return \\\"Display function executed\\\" print(display()) # 输出: Wrapper executed this before display # 输出: Display function executed\"]},\"217\":{\"h\":\"偏函数\",\"t\":[\"偏函数使用 functools.partial 创建，允许你固定函数的部分参数。\",\"from functools import partial # 偏函数 def power(base, exponent): return base ** exponent # 创建偏函数 square = partial(power, exponent=2) print(square(4)) # 输出: 16 cube = partial(power, exponent=3) print(cube(2)) # 输出: 8\"]},\"218\":{\"h\":\"高级特性\"},\"219\":{\"h\":\"切片\",\"t\":[\"切片（Slicing）允许你从序列（如列表、元组、字符串）中提取子集。切片操作使用 start:stop:step 语法。\",\"# 列表切片 numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(numbers[2:5]) # 输出: [2, 3, 4] print(numbers[:5]) # 输出: [0, 1, 2, 3, 4] print(numbers[5:]) # 输出: [5, 6, 7, 8, 9] print(numbers[::2]) # 输出: [0, 2, 4, 6, 8] print(numbers[::-1]) # 输出: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] # 字符串切片 text = \\\"Hello, World!\\\" print(text[7:12]) # 输出: World\"]},\"220\":{\"h\":\"推导式\",\"t\":[\"推导式（Comprehensions）是一种简洁的创建列表、集合、字典等的方式。\"]},\"221\":{\"h\":\"列表推导式\",\"t\":[\"# 创建一个包含1到10平方数的列表 squares = [x**2 for x in range(1, 11)] print(squares) # 输出: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\"]},\"222\":{\"h\":\"集合推导式\",\"t\":[\"# 创建一个包含1到10平方数的集合 squares_set = {x**2 for x in range(1, 11)} print(squares_set) # 输出: {64, 1, 4, 36, 9, 100, 16, 81, 49, 25}\"]},\"223\":{\"h\":\"字典推导式\",\"t\":[\"# 创建一个键为数字，值为该数字平方的字典 squares_dict = {x: x**2 for x in range(1, 11)} print(squares_dict) # 输出: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\"]},\"224\":{\"h\":\"迭代器\",\"t\":[\"迭代器（Iterator）是一个实现了 __iter__() 和 __next__() 方法的对象，允许你遍历容器中的所有元素。\",\"# 创建一个简单的迭代器 class MyIterator: def __init__(self, limit): self.limit = limit self.counter = 0 def __iter__(self): return self def __next__(self): if self.counter < self.limit: self.counter += 1 return self.counter else: raise StopIteration # 使用迭代器 iterator = MyIterator(5) for num in iterator: print(num) # 输出: 1 2 3 4 5\"]},\"225\":{\"h\":\"生成器\",\"t\":[\"生成器（Generator）是一种特殊的迭代器，用 yield 语句返回值，保持函数的状态以供下次迭代。\",\"# 创建一个生成器函数 def simple_generator(): yield 1 yield 2 yield 3 # 使用生成器 for value in simple_generator(): print(value) # 输出: 1 2 3\"]},\"226\":{\"h\":\"装饰器\",\"t\":[\"装饰器（Decorator）是一种用于修改或增强函数功能的设计模式。它是一个接受函数并返回一个新函数的函数。\",\"# 定义一个简单的装饰器 def my_decorator(func): def wrapper(): print(\\\"Something is happening before the function is called.\\\") result = func() print(\\\"Something is happening after the function is called.\\\") return result return wrapper @my_decorator def say_hello(): print(\\\"Hello!\\\") say_hello() # 输出: # Something is happening before the function is called. # Hello! # Something is happening after the function is called.\"]},\"227\":{\"h\":\"Python模块\",\"t\":[\"Python模块使你能够将代码分割成多个文件，以便更好地组织和复用代码。\"]},\"228\":{\"h\":\"使用模块\",\"t\":[\"模块是一个包含Python定义和语句的文件。模块可以包含函数、类和变量，还可以包含可执行的代码。\"]},\"229\":{\"h\":\"导入模块\",\"t\":[\"使用 import 语句导入模块。\",\"# 导入整个模块 import math print(math.sqrt(16)) # 输出: 4.0 # 导入模块中的特定函数 from math import sqrt print(sqrt(16)) # 输出: 4.0 # 导入模块并给它起一个别名 import math as m print(m.sqrt(16)) # 输出: 4.0\"]},\"230\":{\"h\":\"安装模块\",\"t\":[\"使用 pip 工具从Python包索引（PyPI）安装第三方模块。\",\"# 安装一个模块 pip install requests # 卸载一个模块 pip uninstall requests # 查看已安装的模块列表 pip list\"]},\"231\":{\"h\":\"内置模块\",\"t\":[\"Python自带了一些非常有用的内置模块，以下是一些常见的内置模块：\"]},\"232\":{\"h\":\"模块\",\"t\":[\"提供了一种便携的方式使用操作系统功能。\",\"import os # 获取当前工作目录 print(os.getcwd()) # 列出当前目录下的文件和目录 print(os.listdir()) # 创建新目录 os.mkdir('new_directory') # 删除目录 os.rmdir('new_directory')\"]},\"233\":{\"h\":\"模块\",\"t\":[\"提供了对解释器使用或维护的一些变量和函数的访问。\",\"import sys # 获取命令行参数 print(sys.argv) # 退出程序 sys.exit()\"]},\"234\":{\"h\":\"模块\",\"t\":[\"用于处理日期和时间。\",\"import datetime # 获取当前日期和时间 now = datetime.datetime.now() print(now) # 创建一个特定日期 date = datetime.date(2023, 1, 1) print(date) # 计算两个日期之间的差异 delta = datetime.date(2023, 1, 1) - datetime.date(2022, 1, 1) print(delta.days)\"]},\"235\":{\"h\":\"模块\",\"t\":[\"用于生成随机数。\",\"import random # 生成一个0到1之间的随机浮点数 print(random.random()) # 生成一个指定范围内的随机整数 print(random.randint(1, 10)) # 从列表中随机选择一个元素 choices = ['apple', 'banana', 'cherry'] print(random.choice(choices))\"]},\"236\":{\"h\":\"常用模块\",\"t\":[\"除了内置模块，还有一些常用的第三方模块：\"]},\"237\":{\"h\":\"模块\",\"t\":[\"用于发送HTTP请求。\",\"import requests response = requests.get('https://api.github.com') print(response.status_code) print(response.json())\"]},\"238\":{\"h\":\"模块\",\"t\":[\"用于科学计算。\",\"import numpy as np # 创建一个数组 array = np.array([1, 2, 3, 4]) print(array) # 创建一个二维数组 matrix = np.array([[1, 2], [3, 4]]) print(matrix)\"]},\"239\":{\"h\":\"模块\",\"t\":[\"用于数据分析和处理。\",\"import pandas as pd # 创建一个数据框 data = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35]} df = pd.DataFrame(data) print(df) # 从CSV文件读取数据 df = pd.read_csv('data.csv') print(df)\"]},\"240\":{\"h\":\"模块\",\"t\":[\"用于绘制图形和可视化数据。\",\"import matplotlib.pyplot as plt # 创建简单的折线图 x = [1, 2, 3, 4] y = [1, 4, 9, 16] plt.plot(x, y) plt.xlabel('X-axis') plt.ylabel('Y-axis') plt.title('Simple Line Plot') plt.show()\"]},\"241\":{\"h\":\"Python面向对象编程\",\"t\":[\"面向对象编程（OOP）是一种编程范式，它将程序结构化为对象的集合，每个对象包含数据和操作这些数据的方法。在Python中，面向对象编程的核心概念包括类、对象、继承、封装和多态。\"]},\"242\":{\"h\":\"核心概念\",\"t\":[\"类（Class）: 类是对象的蓝图或模板。它定义了一组属性和方法，这些属性和方法将被用于创建对象。\",\"class Dog: def __init__(self, name, age): self.name = name self.age = age def bark(self): print(f\\\"{self.name} is barking!\\\")\",\"对象（Object）: 对象是类的实例。创建对象的过程称为实例化。\",\"my_dog = Dog(\\\"Buddy\\\", 3) my_dog.bark() # 输出: Buddy is barking!\",\"继承（Inheritance）: 继承是一种创建新类的方式，新类继承自现有类，可以重用、扩展和修改父类的行为。\",\"class Animal: def __init__(self, name): self.name = name def speak(self): pass class Dog(Animal): def speak(self): return f\\\"{self.name} says Woof!\\\" my_dog = Dog(\\\"Buddy\\\") print(my_dog.speak()) # 输出: Buddy says Woof!\",\"封装（Encapsulation）: 封装是一种将数据和方法捆绑在一起，并隐藏对象的内部实现细节的方式。通过使用私有属性（以双下划线开头），可以实现封装。\",\"class Person: def __init__(self, name, age): self.__name = name self.__age = age def get_name(self): return self.__name def get_age(self): return self.__age person = Person(\\\"Alice\\\", 30) print(person.get_name()) # 输出: Alice\",\"多态（Polymorphism）: 多态是指不同类的对象可以通过相同的接口调用方法，尽管这些方法的具体实现可能不同。\",\"class Cat(Animal): def speak(self): return f\\\"{self.name} says Meow!\\\" animals = [Dog(\\\"Buddy\\\"), Cat(\\\"Kitty\\\")] for animal in animals: print(animal.speak()) # 输出: Buddy says Woof! # Kitty says Meow!\"]},\"243\":{\"h\":\"示例\",\"t\":[\"以下是一个简单的Python面向对象编程示例，展示了类、对象、继承、封装和多态的使用：\",\"class Animal: def __init__(self, name): self.__name = name def speak(self): raise NotImplementedError(\\\"Subclass must implement abstract method\\\") def get_name(self): return self.__name class Dog(Animal): def speak(self): return f\\\"{self.get_name()} says Woof!\\\" class Cat(Animal): def speak(self): return f\\\"{self.get_name()} says Meow!\\\" animals = [Dog(\\\"Buddy\\\"), Cat(\\\"Kitty\\\")] for animal in animals: print(animal.speak())\"]},\"244\":{\"h\":\"错误、调试和测试\",\"t\":[\"在编程过程中，错误、调试和测试是确保代码质量和正确性的关键步骤。\"]},\"245\":{\"h\":\"常见的错误类型\",\"t\":[\"语法错误（Syntax Error）: 代码的语法不符合Python的语法规则，导致代码无法运行。\",\"if True print(\\\"Hello, world!\\\") # 缺少冒号(:)\",\"运行时错误（Runtime Error）: 代码在运行时发生错误，如除零错误、索引越界等。\",\"result = 10 / 0 # 除零错误\",\"逻辑错误（Logic Error）: 代码没有按预期工作，但不会抛出错误。这类错误通常需要通过调试和测试来发现。\",\"def add(a, b): return a - b # 逻辑错误，应该是 a + b\"]},\"246\":{\"h\":\"调试技巧\",\"t\":[\"使用print语句: 在关键位置插入print语句，查看变量的值和程序的执行流程。\",\"def add(a, b): print(f\\\"a: {a}, b: {b}\\\") return a + b result = add(2, 3) print(result)\",\"使用断点和调试器: 使用集成开发环境（IDE）中的调试工具，如PyCharm、VS Code等，设置断点并逐步执行代码。\",\"使用pdb模块: Python内置的调试器，可以在代码中插入断点，交互式调试。\",\"import pdb def add(a, b): pdb.set_trace() # 插入断点 return a + b result = add(2, 3) print(result)\"]},\"247\":{\"h\":\"测试方法\",\"t\":[\"单元测试（Unit Testing）: 测试代码中的独立单元，如函数或类方法，确保它们按预期工作。Python中的unittest模块是一个常用的单元测试框架。\",\"import unittest def add(a, b): return a + b class TestMathFunctions(unittest.TestCase): def test_add(self): self.assertEqual(add(2, 3), 5) self.assertEqual(add(-1, 1), 0) self.assertEqual(add(0, 0), 0) if __name__ == \\\"__main__\\\": unittest.main()\",\"测试驱动开发（TDD）: 先编写测试用例，再编写实现代码。通过不断运行测试来驱动代码的开发。\",\"集成测试（Integration Testing）: 测试多个组件或模块之间的交互，确保它们能够协同工作。\",\"功能测试（Functional Testing）: 测试系统的功能是否符合需求，通过模拟用户操作来验证系统行为。\"]},\"248\":{\"h\":\"示例：调试和测试\",\"t\":[\"假设你有一个简单的类，用于表示一个人的信息，并实现一个方法来获取其全名：\",\"class Person: def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name def get_full_name(self): return f\\\"{self.first_name} {self.last_name}\\\" import unittest class TestPerson(unittest.TestCase): def test_get_full_name(self): person = Person(\\\"John\\\", \\\"Doe\\\") self.assertEqual(person.get_full_name(), \\\"John Doe\\\") if __name__ == \\\"__main__\\\": unittest.main()\",\"在调试时，你可以在get_full_name方法中加入print语句查看first_name和last_name的值：\",\"class Person: def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name def get_full_name(self): print(f\\\"First Name: {self.first_name}, Last Name: {self.last_name}\\\") return f\\\"{self.first_name} {self.last_name}\\\"\",\"通过单元测试确保get_full_name方法的正确性，并使用调试技巧找到并修复潜在的错误。这种方法可以帮助你在研究中编写更可靠、更高效的代码。\"]},\"249\":{\"h\":\"文件与IO\",\"t\":[\"在Python中，文件和输入输出（IO）操作是处理数据的基本功能。了解如何读取和写入文件、处理各种文件格式，以及如何有效地进行文件操作是非常重要的。\"]},\"250\":{\"h\":\"文件操作基础\"},\"251\":{\"h\":\"打开文件\",\"t\":[\"在Python中，使用open()函数打开文件。该函数返回一个文件对象，可以用来读写文件。常见的模式包括：\",\"'r'：只读（默认）\",\"'w'：写入（会截断文件）\",\"'a'：追加\",\"'b'：二进制模式\",\"'t'：文本模式（默认）\",\"# 打开文件进行读取 file = open('example.txt', 'r') # 打开文件进行写入 file = open('example.txt', 'w')\"]},\"252\":{\"h\":\"读取文件\",\"t\":[\"可以使用多种方法读取文件内容：\",\"read(size)：读取整个文件或指定大小的字节数\",\"readline()：读取一行\",\"readlines()：读取所有行并返回列表\",\"with open('example.txt', 'r') as file: content = file.read() print(content) with open('example.txt', 'r') as file: lines = file.readlines() for line in lines: print(line.strip())\"]},\"253\":{\"h\":\"写入文件\",\"t\":[\"可以使用write()和writelines()方法将数据写入文件。\",\"with open('example.txt', 'w') as file: file.write(\\\"Hello, World!\\\\n\\\") with open('example.txt', 'a') as file: lines = [\\\"Line 1\\\\n\\\", \\\"Line 2\\\\n\\\", \\\"Line 3\\\\n\\\"] file.writelines(lines)\"]},\"254\":{\"h\":\"关闭文件\",\"t\":[\"虽然使用with语句可以自动关闭文件，但也可以手动关闭文件。\",\"file = open('example.txt', 'r') content = file.read() file.close()\"]},\"255\":{\"h\":\"文件路径\",\"t\":[\"使用os模块处理文件路径，使代码更具可移植性。\",\"import os # 获取当前工作目录 current_dir = os.getcwd() print(current_dir) # 连接路径 file_path = os.path.join(current_dir, 'example.txt') print(file_path)\"]},\"256\":{\"h\":\"文件和目录操作\",\"t\":[\"使用os模块可以执行各种文件和目录操作，如重命名、删除和创建目录。\",\"import os # 重命名文件 os.rename('old_name.txt', 'new_name.txt') # 删除文件 os.remove('example.txt') # 创建目录 os.mkdir('new_directory') # 删除目录 os.rmdir('new_directory')\"]},\"257\":{\"h\":\"处理CSV文件\",\"t\":[\"使用csv模块读写CSV文件。\",\"import csv # 写入CSV文件 with open('example.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile) writer.writerow(['Name', 'Age']) writer.writerow(['Alice', 30]) writer.writerow(['Bob', 25]) # 读取CSV文件 with open('example.csv', 'r') as csvfile: reader = csv.reader(csvfile) for row in reader: print(row)\"]},\"258\":{\"h\":\"处理JSON文件\",\"t\":[\"使用json模块读写JSON文件。\",\"import json data = { 'name': 'Alice', 'age': 30, 'city': 'New York' } # 写入JSON文件 with open('example.json', 'w') as jsonfile: json.dump(data, jsonfile) # 读取JSON文件 with open('example.json', 'r') as jsonfile: data = json.load(jsonfile) print(data)\"]},\"259\":{\"h\":\"示例\",\"t\":[\"以下是一个综合示例，展示了如何读取文本文件内容，处理数据并写入到新的CSV文件中：\",\"import csv # 读取文本文件 with open('data.txt', 'r') as file: lines = file.readlines() # 处理数据 data = [line.strip().split() for line in lines] # 写入CSV文件 with open('output.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile) writer.writerow(['Column1', 'Column2', 'Column3']) writer.writerows(data)\",\"在Python中，输入和输出（I/O）操作是与用户进行交互、处理文件以及与其他程序通信的基本功能。以下是Python中常见的I/O操作，包括标准输入输出和文件I/O。\"]},\"260\":{\"h\":\"标准输入输出\"},\"261\":{\"h\":\"标准输出\",\"t\":[\"标准输出通常指将信息显示在屏幕上，使用print()函数实现。\",\"# 输出字符串 print(\\\"Hello, World!\\\") # 输出多个值 print(\\\"The answer is\\\", 42) # 使用格式化字符串 name = \\\"Alice\\\" age = 30 print(f\\\"My name is {name} and I am {age} years old.\\\")\"]},\"262\":{\"h\":\"标准输入\",\"t\":[\"标准输入通常指从用户获取输入，使用input()函数实现。input()函数总是返回一个字符串。\",\"# 获取用户输入 name = input(\\\"Enter your name: \\\") print(f\\\"Hello, {name}!\\\") # 获取数值输入 age = int(input(\\\"Enter your age: \\\")) print(f\\\"You are {age} years old.\\\")\"]},\"263\":{\"c\":[\"Python\"]},\"264\":{\"c\":[\"Python\",\"学习手册\",\"编程\"]},\"265\":{\"h\":\"Python学习手册2\"},\"266\":{\"h\":\"Python数据结构\"},\"267\":{\"h\":\"进程与线程\"},\"268\":{\"h\":\"GUI编程\"},\"269\":{\"h\":\"网络编程\"},\"270\":{\"h\":\"数据库编程\"},\"271\":{\"h\":\"Web开发\"},\"272\":{\"h\":\"异步的IO\"},\"273\":{\"h\":\"数据分析\"},\"274\":{\"h\":\"机器学习\"},\"275\":{\"h\":\"其他\"},\"276\":{\"h\":\"Python资源\"},\"277\":{\"c\":[\"Python\"]},\"278\":{\"c\":[\"Python\",\"学习手册\",\"编程\"]},\"279\":{\"h\":\"Python环境\"},\"280\":{\"h\":\"Python环境\"},\"281\":{\"h\":\"Windows环境\"},\"282\":{\"h\":\"Linux环境\"},\"283\":{\"h\":\"集成开发环境\"},\"284\":{\"h\":\"Python3\"},\"285\":{\"h\":\"科学计算环境\"},\"286\":{\"h\":\"虚拟环境\"},\"287\":{\"c\":[\"Python\"]},\"288\":{\"c\":[\"Python\",\"学习手册\",\"编程\"]},\"289\":{\"h\":\"Python编程库\"},\"290\":{\"h\":\"库和模块\"},\"291\":{\"h\":\"自建库\"},\"292\":{\"h\":\"内置库\"},\"293\":{\"h\":\"常用库(分类)\"},\"294\":{\"c\":[\"Python\"]},\"295\":{\"c\":[\"Python\",\"学习手册\",\"编程\"]},\"296\":{\"h\":\"Python网络爬虫\"},\"297\":{\"c\":[\"Python\"]},\"298\":{\"c\":[\"Python爬虫\"]},\"299\":{\"h\":\"Python进阶\"},\"300\":{\"c\":[\"Python\"]},\"301\":{\"c\":[\"Python进阶\"]},\"302\":{\"h\":\"Python\"},\"303\":{\"c\":[\"Study\"]},\"304\":{\"h\":\"Web\"},\"305\":{\"c\":[\"Web\"]},\"306\":{\"c\":[\"web开发\"]},\"307\":{\"h\":\"51单片机\"},\"308\":{\"h\":\"单片机及开发板\"},\"309\":{\"h\":\"实验手册\"},\"310\":{\"h\":\"小项目\"},\"311\":{\"c\":[\"51单片机\"]},\"312\":{\"c\":[\"51单片机\",\"学习手册\"]},\"313\":{\"h\":\"嵌入式\"},\"314\":{\"c\":[\"嵌入式\"]},\"315\":{\"c\":[\"单片机\",\"STEM32\",\"51单片机\"]},\"316\":{\"h\":\"Docker\"},\"317\":{\"c\":[\"Docker\"]},\"318\":{\"c\":[\"Docker\",\"容器\"]},\"319\":{\"h\":\"Git和Github学习\"},\"320\":{\"c\":[\"git\"]},\"321\":{\"c\":[\"git\",\"github\"]},\"322\":{\"h\":\"Postman\"},\"323\":{\"c\":[\"开发工具\"]},\"324\":{\"c\":[\"Postman\",\"API工具\"]},\"325\":{\"h\":\"开发工具\"},\"326\":{\"c\":[\"开发工具\"]},\"327\":{\"c\":[\"开发工具\",\"IDE\",\"TOOLS\"]},\"328\":{\"h\":\"数据库\"},\"329\":{\"c\":[\"数据库\"]},\"330\":{\"c\":[\"SQL\",\"DB\",\"MySQL\"]},\"331\":{\"h\":\"软件工程\"},\"332\":{\"c\":[\"软件工程\"]},\"333\":{\"c\":[\"软件工程\",\"设计模式\"]},\"334\":{\"h\":\"Markdown文章模板\"},\"335\":{\"h\":\"文章模板\"},\"336\":{\"h\":\"头信息\",\"t\":[\"#文章信息 #-------------------------------------------- cover: /assets/images/cover2.jpg #cover预览图 banner: /assets/images/cover2.jpg title: Markdown文章模板 #文章标题 shortTitle: 文章模板内容，用于写作 #短标题 date: 2024-07-11 #时间 description: 文章内容描述 icon: article author: #作者，不写为默认 isOriginal: true #原创说明 category: #分类 - 分类 tag: #标签 - 写作模板 - 定义标签 sticky: 1 #文章置顶排名 star: 1 #文章星标 article: true #文章列表包含 timeline: true #时间线包含 license: #--------------------------------------------\"]},\"337\":{\"h\":\"标题\"},\"338\":{\"c\":[\"分类\"]},\"339\":{\"c\":[\"写作模板\",\"定义标签\"]},\"340\":{\"h\":\"Markdown模板\"},\"341\":{\"c\":[\"template\"]},\"342\":{\"h\":\"计算机基础\"},\"343\":{\"c\":[\"计算机基础\"]},\"344\":{\"c\":[\"计算机基础\",\"操作系统\",\"计算机网络\"]},\"345\":{\"h\":\"人工智能\"},\"346\":{\"c\":[\"Life\"]},\"347\":{\"h\":\"数学\"},\"348\":{\"c\":[\"数学\"]},\"349\":{\"h\":\"数学之道\"},\"350\":{\"h\":\"为什么重新学数学\"},\"351\":{\"h\":\"享受数学的美\"},\"352\":{\"h\":\"数学的知识体系\"},\"353\":{\"h\":\"数学的意义\"},\"354\":{\"c\":[\"数学\"]},\"355\":{\"c\":[\"微积分\"]},\"356\":{\"h\":\"Python的数据分析\"},\"357\":{\"h\":\"Python：最佳的科学计算环境\"},\"358\":{\"h\":\"配置Python数据分析环境\"},\"359\":{\"h\":\"数据分析的任务\"},\"360\":{\"h\":\"Python科学计算库\"},\"361\":{\"c\":[\"数据分析\"]},\"362\":{\"c\":[\"python\",\"数据分析\"]},\"363\":{\"h\":\"数据分析\"},\"364\":{\"c\":[\"Life\"]},\"365\":{\"h\":\"Python机器学习基础\"},\"366\":{\"h\":\"前言\"},\"367\":{\"h\":\"机器学习\",\"t\":[\"机器学习（machine learning）是从数据中提取知识。它是统计学、人工智能和计算机科学交叉的研究领域，也被称为预测分析（predictive analytics）或统计学习（statistical learning）\"]},\"368\":{\"h\":\"监督学习\",\"t\":[\"最成功的机器学习算法是能够将决策过程自动化的那些算法，这些决策过程是从已知示例中泛化得出的。在这种叫作监督学习（supervised learning）的方法中，用户将成对的输入和预期输出提供给算法，算法会找到一种方法，根据给定输入给出预期输出。\"]},\"369\":{\"h\":\"无监督学习\",\"t\":[\"无监督学习算法（unsupervised learning algorithm）。在无监督学习中，只有输入数据是已知的，没有为算法提供输出数据。\"]},\"370\":{\"h\":\"机器学习的工具\",\"t\":[\"jupyter\",\"scikit-learn\",\"numpy\",\"scipy\",\"pandas\",\"matplotlib\"]},\"371\":{\"h\":\"机器学习的第一个应用-鸢尾花分类\"},\"372\":{\"h\":\"监督学习\"},\"373\":{\"c\":[\"机器学习\"]},\"374\":{\"c\":[\"Python\",\"机器学习\"]},\"375\":{\"h\":\"机器学习\"},\"376\":{\"c\":[\"Life\"]},\"377\":{\"h\":\"数学建模\"},\"378\":{\"h\":\"知识点\",\"t\":[\"001 数学建模竞赛介绍 7.29 A\",\"002 线性规划和整数规划模型 7.30 A\",\"003 非线性规划和多目标规范模型 7.31 A\",\"004 常微分方程 8.1 B\",\"005 差分方程 8.2 B\",\"006 偏微分方程 8.3 C\",\"007 Python 数学建模基础 8.4 D\",\"008 插值方法 8.5 C\",\"009 最短路问题、最小生成树问题 8.6 E\",\"010 最大流与最小费用问题 8.7 E\",\"011 背包问题、指派问题、旅行商问题 8.8 E\",\"012 智能优化算法 8.9 F\",\"013 Matlab 软件处理 1 8.10 G\",\"014 Matlab 软件处理 2 8.11 G\",\"015 数据处理方法（Python） 8.12 D\",\"016 统计分析方法 8.13 H\",\"017 回归模型与分析 8.14 H\",\"018 聚类分析方法与判别分析 8.15 F\",\"019 主成分分析方法（数据降维） 8.16 I\",\"020 预测方法 8.17 J\",\"021 SPSS 统计分析 8.18 A\",\"022 几何模型 8.19 B\",\"023 博弈模型 8.20 F\",\"024 综合评价方法 8.21 J\",\"025 数字图像处理 8.22 C\",\"026 数学建模竞赛论文写作 8.23 A\",\"027 数学建模竞赛(A 题)讲解 8.24 C\",\"028 数学建模竞赛(B 题)讲解 8.25 J\",\"029 数学建模竞赛(C 题)讲解 8.26 F\",\"030 数学建模竞赛(D 题)讲解 8.27 A\",\"031 数学建模竞赛(E 题)讲解 8.28 B\",\"032 数学建模竞赛(F 题)讲解 \"]},\"379\":{\"h\":\"中国研究生数学建模竞赛\",\"t\":[\"网址：https://cpipc.acge.org.cn/ 通知材料： 竞赛规则：\"]},\"380\":{\"h\":\"数学建模\",\"t\":[\"数学建模是将实际问题转化为数学问题，从而利用数学方法进行分析和解决的过程。以下是数学建模的基本步骤和常用方法：\"]},\"381\":{\"h\":\"数学建模的基本步骤\",\"t\":[\"问题描述：明确问题的背景、目标和约束条件。\",\"假设条件：简化和抽象问题，提出合理的假设。\",\"建立模型：根据问题和假设，选择合适的数学方法，建立数学模型。\",\"求解模型：利用数学工具和计算方法求解模型。\",\"模型验证：将求解结果与实际情况进行比较，验证模型的合理性。\",\"模型改进：根据验证结果，调整假设和模型，进行改进。\",\"结果分析与解释：对模型结果进行分析，解释其实际意义，并提出建议。\"]},\"382\":{\"h\":\"常用的数学建模方法\",\"t\":[\"优化模型：\",\"线性规划：用于求解线性目标函数的最优化问题，常用工具有Simplex方法。\",\"非线性规划：用于求解非线性目标函数的最优化问题，常用工具有Lagrange乘数法。\",\"整数规划：求解变量为整数的优化问题，常用于组合优化问题。\",\"动态规划：用于多阶段决策问题，常用来解决路径优化、资源分配等问题。\",\"统计模型：\",\"回归分析：建立变量之间的关系模型，常用于预测和因果分析。\",\"时间序列分析：分析时间序列数据的规律，常用于经济、金融领域的预测。\",\"假设检验：用于验证数据是否符合某种假设。\",\"微分方程模型：\",\"常微分方程：用于描述随时间变化的连续系统。\",\"偏微分方程：用于描述空间和时间变化的连续系统。\",\"仿真模型：\",\"蒙特卡罗模拟：通过随机抽样和统计分析解决复杂问题。\",\"离散事件模拟：模拟离散事件的发生过程，常用于排队论、生产系统等领域。\",\"图论模型：\",\"最短路径问题：求解图中两点之间的最短路径，常用算法有Dijkstra算法。\",\"最大流问题：求解网络中从源点到汇点的最大流量，常用算法有Ford-Fulkerson算法。\"]},\"383\":{\"h\":\"数学建模软件和工具\",\"t\":[\"MATLAB：强大的数值计算和建模工具，广泛应用于工程、科学等领域。\",\"Python：具有丰富的科学计算库，如NumPy、SciPy、Pandas等，非常适合数据分析和建模。\",\"R：专门用于统计分析和数据挖掘，拥有丰富的统计和图形工具。\",\"GAMS：高级建模系统，特别适用于优化问题。\",\"Excel：简单易用的表格工具，适合基础的数据处理和建模。\"]},\"384\":{\"h\":\"示例：简单的线性规划模型\",\"t\":[\"假设有一个生产问题，生产两种产品，每种产品的利润分别为 (P1​) 和 (P2​) ，生产需要消耗资源，资源总量有限。设生产的数量分别为 (x1​) 和 (x2​) ，资源限制条件为 (a1​x1​+a2​x2​≤b) 。目标是最大化利润。\",\"模型描述：\",\"目标函数：最大化 (P_1 x_1 + P_2 x_2)\",\"约束条件：(a_1 x_1 + a_2 x_2 \\\\leq b) 和 (x_1 \\\\geq 0), (x_2 \\\\geq 0)\",\"求解：\",\"from scipy.optimize import linprog c = [-P_1, -P_2] # 目标函数系数（取负号因为scipy是最小化问题） A = [[a_1, a_2]] # 约束系数矩阵 b = [b] # 约束条件 x_bounds = (0, None) res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, x_bounds]) print(f\\\"Optimal value: {-res.fun}\\\") print(f\\\"Optimal solution: x1 = {res.x[0]}, x2 = {res.x[1]}\\\")\"]},\"385\":{\"c\":[\"数学建模\"]},\"386\":{\"c\":[\"数学建模\"]},\"387\":{\"h\":\"图论相关算法\"},\"388\":{\"h\":\"图论\",\"t\":[\"图论是数学的一个分支，主要研究图（graph）的性质和应用。图由顶点（节点）和连接这些顶点的边（链接）组成，广泛应用于计算机科学、网络分析、交通规划等领域。以下是图论的一些基本概念和知识。\"]},\"389\":{\"h\":\"基本概念\",\"t\":[\"图 (Graph)：\",\"由顶点集合 ( V ) 和边集合 ( E ) 组成的二元组 ( G = (V, E) )。\",\"无向图 (Undirected Graph)：\",\"边没有方向，表示为无序对 ( e = {u, v} )，其中 ( u, v \\\\in V )。\",\"无向图的边是对称的。\",\"有向图 (Directed Graph)：\",\"边有方向，表示为有序对 ( e = (u, v) )，其中 ( u, v \\\\in V )。\",\"有向图的边是非对称的。\",\"度 (Degree)：\",\"无向图：顶点 ( v ) 的度是连接到 ( v ) 的边的数量，记为 ( \\\\deg(v) )。\",\"有向图：顶点 ( v ) 的入度是指向 ( v ) 的边的数量，记为 ( \\\\deg^-(v) )。出度是从 ( v ) 出发的边的数量，记为 ( \\\\deg^+(v) )。\",\"路径 (Path)：\",\"顶点和边的序列，其中每条边都连接前一个顶点和后一个顶点。\",\"路径的长度是所经过的边的数量。\",\"简单路径 (Simple Path)：\",\"不包含重复顶点的路径。\",\"环 (Cycle)：\",\"起点和终点相同的路径，且除起点和终点外不包含重复顶点。\",\"连通图 (Connected Graph)：\",\"无向图中任意两个顶点间都有路径。\",\"强连通图 (Strongly Connected Graph)：\",\"有向图中任意两个顶点 ( u ) 和 ( v ) 间都有路径。\"]},\"390\":{\"h\":\"图的表示方法\",\"t\":[\"邻接矩阵 (Adjacency Matrix)： \",\"对于一个有 ( n ) 个顶点的图 ( G )，邻接矩阵是一个 ( n \\\\times n ) 的矩阵 ( A )，其中： \",\"( A[i][j] = 1 ) 表示存在一条从顶点 ( i ) 到顶点 ( j ) 的边。\",\"无向图的邻接矩阵是对称的，有向图的邻接矩阵一般是非对称的。\",\"% 邻接矩阵示例 A = [0, 1, 0; 1, 0, 1; 0, 1, 0];\",\"邻接表 (Adjacency List)： \",\"使用列表（或数组）表示每个顶点的邻接顶点。\",\"更节省空间，适用于稀疏图。\",\"% 邻接表示例（使用cell数组） adjList = {[2], [1, 3], [2]};\",\"边列表 (Edge List)： \",\"使用边的集合来表示图，其中每条边是顶点对。\",\"% 边列表示例 edgeList = [1, 2; 1, 3; 2, 3];\"]},\"391\":{\"h\":\"图的类型\",\"t\":[\"平凡图 (Trivial Graph)：\",\"只有一个顶点且没有边的图。\",\"空图 (Empty Graph)：\",\"没有边的图。\",\"完全图 (Complete Graph)：\",\"任意两个顶点之间都有一条边的图。一个有 ( n ) 个顶点的完全图记为 ( K_n )。\",\"二分图 (Bipartite Graph)：\",\"顶点集 ( V ) 可以分为两个不相交的子集 ( U ) 和 ( W )，使得每条边都连接 ( U ) 和 ( W ) 中的一个顶点。\",\"树 (Tree)：\",\"无环的连通图。\",\"森林 (Forest)：\",\"无环的无向图（即多棵树的集合）。\"]},\"392\":{\"h\":\"图论中的重要算法\",\"t\":[\"深度优先搜索 (DFS)：\",\"遍历或搜索图的一种算法，尽可能深地搜索图的分支。\",\"广度优先搜索 (BFS)：\",\"遍历或搜索图的一种算法，按层次搜索图。\",\"最短路径算法：\",\"Dijkstra算法：用于边权重非负的图。\",\"Bellman-Ford算法：用于边权重可以为负的图。\",\"Floyd-Warshall算法：计算所有顶点对之间的最短路径。\",\"最小生成树算法：\",\"Kruskal算法：按边权重从小到大添加边。\",\"Prim算法：按顶点扩展最小生成树。\",\"拓扑排序 (Topological Sorting)：\",\"对有向无环图 (DAG) 的顶点进行排序，使得对于每条边 ( (u, v) )，顶点 ( u ) 在 ( v ) 之前。\",\"连通分量算法：\",\"查找图中的连通子图。\"]},\"393\":{\"h\":\"MATLAB中图论的应用\",\"t\":[\"MATLAB提供了丰富的函数库用于图论的研究和应用。以下是一些常用函数和示例：\",\"创建图：\",\"% 创建无向图 G = graph([1, 1, 2, 3], [2, 3, 3, 4]); % 创建有向图 DG = digraph([1, 2, 3], [2, 3, 1]);\",\"绘制图：\",\"% 绘制无向图 plot(G); % 绘制有向图 plot(DG);\",\"图的属性和操作：\",\"% 获取图的邻接矩阵 A = adjacency(G); % 计算最短路径 dist = distances(G, 1, 4); % 查找所有简单路径 allPaths = allpaths(G, 1, 4); % 查找最小生成树 mst = minspantree(G); % 计算连通分量 components = conncomp(G);\"]},\"394\":{\"h\":\"例子\",\"t\":[\"示例代码：\",\"创建一个无向图，并使用Dijkstra算法计算最短路径：\",\"% 定义邻接矩阵 adjMatrix = [0, 10, 6, 0, 0; 10, 0, 5, 15, 0; 6, 5, 0, 4, 7; 0, 15, 4, 0, 8; 0, 0, 7, 8, 0]; % 计算源点1到其他顶点的最短路径 [source] = 1; [dist, path] = dijkstra(adjMatrix, source); % 输出结果 disp('最短距离:'); disp(dist); disp('路径:'); disp(path);\",\"创建一个无向图，并使用Kruskal算法计算最小生成树：\",\"% 定义邻接矩阵 adjMatrix = [0, 10, 6, 0, 0; 10, 0, 5, 15, 0; 6, 5, 0, 4, 7; 0, 15, 4, 0, 8; 0, 0, 7, 8, 0]; % 计算最小生成树 [mstEdges, totalWeight] = kruskalMST(adjMatrix); % 输出结果 disp('最小生成树的边:'); disp(mstEdges); disp('最小生成树的总权重:'); disp(totalWeight);\",\"通过这些基本概念、算法和应用，图论为解决实际问题提供了强大的工具和方法。\"]},\"395\":{\"h\":\"最大流问题\",\"t\":[\"最大流问题（Maximum Flow Problem）是图论中的一个经典问题，旨在找到从源点到汇点的最大可能流量。这个问题在网络流、交通、供应链等领域有广泛应用。\"]},\"396\":{\"h\":\"最大流问题的基本概念\",\"t\":[\"流网络 (Flow Network)：\",\"一个有向图，其中每条边都有一个非负容量（capacity），表示该边可以传输的最大流量。\",\"源点 (Source)：\",\"图中一个特殊的顶点，记为 ( s )，是流的起点。\",\"汇点 (Sink)：\",\"图中一个特殊的顶点，记为 ( t )，是流的终点。\",\"流量 (Flow)：\",\"分配给每条边的数值，表示通过该边的实际流量，必须满足容量限制和流量守恒条件。\",\"容量限制 (Capacity Constraint)：\",\"对于每条边 ( (u, v) )，流量 ( f(u, v) ) 必须满足 ( 0 \\\\leq f(u, v) \\\\leq c(u, v) )，其中 ( c(u, v) ) 是边的容量。\",\"流量守恒 (Flow Conservation)：\",\"除源点和汇点外，每个顶点的流入等于流出。\"]},\"397\":{\"h\":\"最大流的算法\",\"t\":[\"Ford-Fulkerson算法：\",\"通过增广路径（augmenting path）不断增加流量，直到没有更多增广路径为止。\",\"增广路径可以通过深度优先搜索（DFS）或广度优先搜索（BFS）找到。\",\"Edmonds-Karp算法：\",\"Ford-Fulkerson算法的实现之一，使用广度优先搜索（BFS）寻找增广路径。\",\"时间复杂度为 ( O(VE^2) )。\"]},\"398\":{\"h\":\"Ford-Fulkerson算法\",\"t\":[\"算法步骤：\",\"初始化所有边的流量为0。\",\"使用BFS或DFS寻找从源点 ( s ) 到汇点 ( t ) 的增广路径。\",\"找到增广路径后，计算该路径的最小剩余容量（瓶颈容量）。\",\"沿增广路径增加流量，并更新残余网络。\",\"重复步骤2-4，直到没有增广路径。\",\"MATLAB实现：\",\"function max_flow = fordFulkerson(adjMatrix, source, sink) % adjMatrix: 邻接矩阵，表示边的容量 % source: 源点 % sink: 汇点 % max_flow: 最大流 % 初始化残余图 residualGraph = adjMatrix; numNodes = size(adjMatrix, 1); max_flow = 0; % BFS寻找增广路径 function [found, parent] = bfs(residualGraph, source, sink) visited = false(1, numNodes); parent = -1 * ones(1, numNodes); queue = [source]; visited(source) = true; while ~isempty(queue) u = queue(1); queue(1) = []; for v = 1:numNodes if ~visited(v) && residualGraph(u, v) > 0 queue(end + 1) = v; %#ok<AGROW> parent(v) = u; visited(v) = true; if v == sink found = true; return; end end end end found = false; end % Ford-Fulkerson算法 while true [found, parent] = bfs(residualGraph, source, sink); if ~found break; end % 找到增广路径的瓶颈容量 path_flow = inf; v = sink; while v ~= source u = parent(v); path_flow = min(path_flow, residualGraph(u, v)); v = u; end % 增加流量并更新残余图 v = sink; while v ~= source u = parent(v); residualGraph(u, v) = residualGraph(u, v) - path_flow; residualGraph(v, u) = residualGraph(v, u) + path_flow; v = u; end max_flow = max_flow + path_flow; end end\",\"使用示例：\",\"% 定义邻接矩阵 adjMatrix = [0, 16, 13, 0, 0, 0; 0, 0, 10, 12, 0, 0; 0, 4, 0, 0, 14, 0; 0, 0, 9, 0, 0, 20; 0, 0, 0, 7, 0, 4; 0, 0, 0, 0, 0, 0]; % 源点和汇点 source = 1; sink = 6; % 计算最大流 max_flow = fordFulkerson(adjMatrix, source, sink); % 输出结果 disp('最大流:'); disp(max_flow);\"]},\"399\":{\"h\":\"Edmonds-Karp算法\",\"t\":[\"Edmonds-Karp算法是Ford-Fulkerson算法的一个实现，使用广度优先搜索（BFS）来寻找增广路径。以下是MATLAB实现：\",\"function max_flow = edmondsKarp(adjMatrix, source, sink) % adjMatrix: 邻接矩阵，表示边的容量 % source: 源点 % sink: 汇点 % max_flow: 最大流 % 初始化残余图 residualGraph = adjMatrix; numNodes = size(adjMatrix, 1); max_flow = 0; % BFS寻找增广路径 function [found, parent] = bfs(residualGraph, source, sink) visited = false(1, numNodes); parent = -1 * ones(1, numNodes); queue = [source]; visited(source) = true; while ~isempty(queue) u = queue(1); queue(1) = []; for v = 1:numNodes if ~visited(v) && residualGraph(u, v) > 0 queue(end + 1) = v; %#ok<AGROW> parent(v) = u; visited(v) = true; if v == sink found = true; return; end end end end found = false; end % Edmonds-Karp算法 while true [found, parent] = bfs(residualGraph, source, sink); if ~found break; end % 找到增广路径的瓶颈容量 path_flow = inf; v = sink; while v ~= source u = parent(v); path_flow = min(path_flow, residualGraph(u, v)); v = u; end % 增加流量并更新残余图 v = sink; while v ~= source u = parent(v); residualGraph(u, v) = residualGraph(u, v) - path_flow; residualGraph(v, u) = residualGraph(v, u) + path_flow; v = u; end max_flow = max_flow + path_flow; end end\",\"使用示例：\",\"% 定义邻接矩阵 adjMatrix = [0, 16, 13, 0, 0, 0; 0, 0, 10, 12, 0, 0; 0, 4, 0, 0, 14, 0; 0, 0, 9, 0, 0, 20; 0, 0, 0, 7, 0, 4; 0, 0, 0, 0, 0, 0]; % 源点和汇点 source = 1; sink = 6; % 计算最大流 max_flow = edmondsKarp(adjMatrix, source, sink); % 输出结果 disp('最大流:'); disp(max_flow);\"]},\"400\":{\"h\":\"最小费用问题\",\"t\":[\"最小费用问题（Minimum Cost Problem）通常出现在网络流理论和图论中，是指在一个加权有向图中找到一条从源点到汇点的最小费用路径。这里的费用通常是指路径上的边权重的总和。\"]},\"401\":{\"h\":\"1. 最小费用最大流问题\",\"t\":[\"最小费用最大流问题是指在一个网络中找到一种流动方式，使得从源点到汇点的总流量最大且总费用最小。该问题常用于优化运输成本、网络流量管理等场景。\"]},\"402\":{\"h\":\"2. 主要算法\",\"t\":[\"解决最小费用问题的主要算法包括：\"]},\"403\":{\"h\":\"Bellman-Ford 算法\",\"t\":[\"Bellman-Ford 算法可以处理带有负权边的图，是一个较为经典的算法。其主要步骤如下：\",\"初始化源点的距离为0，其余点的距离为正无穷。\",\"对所有边进行 V-1 轮松弛操作，每轮尝试更新边的距离。\",\"检查是否存在负权回路。\"]},\"404\":{\"h\":\"Dijkstra 算法\",\"t\":[\"Dijkstra 算法用于非负权图的单源最短路径问题。主要步骤如下：\",\"初始化源点的距离为0，其余点的距离为正无穷。\",\"使用优先队列（如最小堆）选取当前距离最小的顶点进行扩展。\",\"更新相邻顶点的距离，重复直到所有顶点都被访问。\"]},\"405\":{\"h\":\"SPFA（Shortest Path Faster Algorithm）\",\"t\":[\"SPFA 算法是 Bellman-Ford 算法的改进版本，使用队列来优化松弛操作，平均情况下性能更好。\",\"初始化源点的距离为0，并将源点入队。\",\"从队列中取出顶点，松弛其所有相邻边，如果相邻顶点的距离被更新，则将该顶点入队。\",\"重复上述过程直到队列为空。\"]},\"406\":{\"h\":\"3. 复杂度\",\"t\":[\"Bellman-Ford 算法的时间复杂度为 (O(VE))。\",\"Dijkstra 算法使用最小堆实现时的时间复杂度为 (O(E + V \\\\log V))。\",\"SPFA 算法的时间复杂度在最坏情况下与 Bellman-Ford 相同，但通常在实际应用中更快。\"]},\"407\":{\"h\":\"4. 应用场景\",\"t\":[\"物流和运输：优化货物从供应商到消费者的运输路径，降低运输成本。\",\"网络路由：找到数据包在网络中传输的最优路径，减少延迟和费用。\",\"生产调度：在制造过程中优化资源的分配和使用，降低生产成本。\",\"如果你需要具体的代码示例或进一步的详细信息，可以告诉我你的需求，我会为你提供更多帮助。\"]},\"408\":{\"h\":\"背包问题\",\"t\":[\"背包问题是计算机科学和优化领域中的经典问题，广泛应用于资源分配、调度等问题。背包问题可以分为以下几种：\",\"0-1背包问题： \",\"问题描述：给定n种物品和一个容量为V的背包，物品i的重量是w[i]，其价值为v[i]。问应如何选择装入背包的物品，使得背包内物品的总价值最大，同时不超过背包的容量限制。\",\"特点：每种物品仅有一件，可以选择放入或不放入背包。\",\"完全背包问题： \",\"问题描述：与0-1背包问题类似，但每种物品有无限件可用。\",\"特点：因为物品数量无限，所以对于每种物品，可以重复选择多次。\",\"多重背包问题： \",\"问题描述：给定n种物品和一个容量为V的背包，物品i的重量是w[i]，其价值为v[i]，数量为n[i]。问应如何选择装入背包的物品，使得背包内物品的总价值最大，同时不超过背包的容量限制。\",\"特点：每种物品的件数是有限的。\",\"分组背包问题： \",\"问题描述：有N组物品和一个容量为V的背包，每组物品有若干个，同一组内的物品最多只能选一个，求解最大价值。\",\"特点：物品被划分为若干组，从每一组中选取物品。\",\"其它变种： \",\"还有许多背包问题的变种，如背包问题中加入物品之间的依赖关系等。 解决方法：\",\"动态规划：是解决背包问题的一种常见方法。以0-1背包问题为例，可以通过构建一个二维数组dp[i][j]，表示在前i件物品中选择，使得总重量不超过j的情况下，背包能够达到的最大价值。\",\"回溯法：也可以解决背包问题，但其时间复杂度较高，通常不用于解决大规模问题。\",\"分支限界法：适用于解的组合数量很大的情况，通过剪枝来减少搜索空间。 以下是一个0-1背包问题的简单动态规划算法伪代码：\",\"// N为物品数量，V为背包容量，w[]为物品重量数组，v[]为物品价值数组 for i = 1 to N for j = 1 to V if j >= w[i] dp[i][j] = max(dp[i-1][j], dp[i-1][j-w[i]] + v[i]) else dp[i][j] = dp[i-1][j]\",\"最终dp[N][V]的值即为背包能够达到的最大价值。根据需要，还可以通过dp数组来恢复出解的具体方案。\"]},\"409\":{\"h\":\"指派问题\",\"t\":[\"指派问题（Assignment Problem）是运筹学中的一个经典问题，它涉及到如何以最低成本或最高效率将一组资源（如人员、机器、任务等）分配给一组任务。指派问题通常可以描述为：有n个工人和n个任务，每个工人完成每个任务都有一个特定的成本，目标是找到一个指派方案，使得总成本最小。 以下是解决指派问题的一种常用方法——匈牙利算法（Hungarian Algorithm）的步骤：\",\"构建成本矩阵： \",\"假设有n个工人和n个任务，构建一个n×n的成本矩阵，矩阵的元素c[i][j]表示工人i完成任务j的成本。\",\"行减法： \",\"对成本矩阵的每一行元素减去该行的最小值。这样做的目的是使每行至少有一个零元素。\",\"列减法： \",\"对成本矩阵的每一列元素减去该列的最小值。这样做的目的是使每列至少有一个零元素。\",\"覆盖零元素： \",\"用最少的直线（水平线和垂直线）覆盖矩阵中的所有零元素。如果覆盖零元素的直线数量等于矩阵的阶数n，则算法结束，否则进入下一步。\",\"调整成本矩阵： \",\"找出未被直线覆盖的最小元素，记为m。对于每一行，如果该行有被直线覆盖的零元素，则将该行的每个元素减去m；对于每一列，如果该列有被直线覆盖的零元素，则将该列的每个元素加上m。未被直线覆盖的元素保持不变。\",\"重复步骤4和步骤5： \",\"重复步骤4和步骤5，直到找到一个最优解，即覆盖零元素的直线数量等于矩阵的阶数n。\",\"构建最优解： \",\"根据最终的成本矩阵，选择一个零元素作为指派，确保每个工人和每个任务只被指派一次。最终的指派方案即为最优解。 下面是使用Python实现的匈牙利算法来解决指派问题：\",\"import numpy as np def hungarian_algorithm(cost_matrix): n = len(cost_matrix) # 初始化标记数组 row_covered = [False] * n col_covered = [False] * n # 初始化潜在收益数组 u = [0] * n v = [0] * n # Step 1: 对于每行，减去该行的最小值 for i in range(n): cost_matrix[i] -= np.min(cost_matrix[i]) # Step 2: 对于每列，减去该列的最小值 for j in range(n): cost_matrix[:, j] -= np.min(cost_matrix[:, j]) # Step 3: 覆盖所有零元素 while True: # 初始化标记 marked_rows = [False] * n marked_cols = [False] * n marked_zeros = [(0, 0)] # 存储标记的零元素位置 for i in range(n): for j in range(n): if cost_matrix[i][j] == 0 and not row_covered[i] and not col_covered[j]: marked_rows[i] = True marked_cols[j] = True marked_zeros.append((i, j)) # 检查是否完成 if len(marked_zeros) >= n: break # Step 4: 调整潜在收益 while True: starred_zeros = [(i, j) for i, j in marked_zeros if not row_covered[i] and not col_covered[j]] if len(starred_zeros) > 0: i, j = starred_zeros[0] row_covered[i] = True col_covered[j] = True else: break # 更新潜在收益 for k, l in marked_zeros: if not row_covered[k] and not col_covered[l]: cost_matrix[k][l] += min(u[k] + v[l] - cost_matrix[k][l], 0) # 更新潜在收益 for i in range(n): if not row_covered[i]: u[i] += min(cost_matrix[i][j] for j in range(n) if not col_covered[j]) for j in range(n): if not col_covered[j]: v[j] -= min(cost_matrix[i][j] for i in range(n) if not row_covered[i]) # 构建最优解 assignment = [-1] * n for i in range(n): for j in range(n): if cost_matrix[i][j] == 0 and not row_covered[i] and not col_covered[j]: assignment[i] = j row_covered[i] = True col_covered[j] = True break return assignment # 示例成本矩阵 cost_matrix = np.array([ [40, 60, 15], [25, 30, 45], [55, 30, 25] ]) # 解决指派问题 assignment = hungarian_algorithm(cost_matrix) print(\\\"分配结果：\\\") for i, worker in enumerate(assignment): print(f\\\"工人 {i+1} 被分配给任务 {worker+1}\\\")\",\"这段代码首先通过行和列减法将成本矩阵转换为至少包含一个零元素的形式。然后，它通过覆盖零元素和调整潜在收益来寻找最优解。最后，它构建了一个分配结果，其中每个工人都被分配了一个任务。\"]},\"410\":{\"h\":\"旅行商问题\",\"t\":[\"旅行商问题（Traveling Salesman Problem, TSP）是一个经典的组合优化问题。问题描述如下： 给定一组城市和每两个城市之间的距离，求解一条最短的可能路径，使得从某一城市出发，访问每个城市恰好一次并返回出发城市。 旅行商问题是一个典型的NP-hard问题，这意味着随着城市数量的增加，问题的求解时间呈指数增长。以下是解决旅行商问题的几种方法：\",\"暴力法（Brute Force）： \",\"枚举所有可能的路径，并计算每条路径的长度，选择其中最短的一条。\",\"时间复杂度为O((n-1)!)，只适用于城市数量非常小的情况。\",\"动态规划（Dynamic Programming）： \",\"使用动态规划解决TSP的方法是 Held-Karp 算法。\",\"时间复杂度为O(n^2 * 2^n)，比暴力法更高效，但仍然只适用于较小的n。\",\"分支限界法（Branch and Bound）： \",\"通过系统地枚举候选解的集合，并剪枝掉不可能得到最优解的分支。\",\"时间复杂度比暴力法低，但仍然很高。\",\"遗传算法（Genetic Algorithm）： \",\"使用遗传算法的启发式搜索来寻找近似最优解。\",\"适用于大规模问题，但不保证找到最优解。\",\"蚁群算法（Ant Colony Optimization）： \",\"启发式搜索算法，模拟蚂蚁觅食行为来寻找路径。\",\"适用于大规模问题，通常能找到较好的解。\",\"模拟退火（Simulated Annealing）： \",\"基于物理退火过程的启发式算法。\",\"在一定时间内通常能找到较好的解，但不保证最优。 下面是一个简单的旅行商问题暴力法的Python实现：\",\"import itertools def calculate_distance(path, distances): total_distance = 0 for i in range(len(path) - 1): total_distance += distances[path[i]][path[i + 1]] total_distance += distances[path[-1]][path[0]] # 返回到起点 return total_distance def traveling_salesman_brute_force(distances): n = len(distances) cities = list(range(n)) shortest_path = None shortest_distance = float('inf') for path in itertools.permutations(cities): path_distance = calculate_distance(path, distances) if path_distance < shortest_distance: shortest_distance = path_distance shortest_path = path return shortest_path, shortest_distance # 示例距离矩阵 distances = [ [0, 20, 42, 25], [20, 0, 30, 34], [42, 30, 0, 10], [25, 34, 10, 0] ] shortest_path, shortest_distance = traveling_salesman_brute_force(distances) print(\\\"最短路径:\\\", shortest_path) print(\\\"最短距离:\\\", shortest_distance)\"]},\"411\":{\"c\":[\"数学建模\"]},\"412\":{\"c\":[\"数学建模\",\"图论\"]},\"413\":{\"h\":\"智能优化算法\"},\"414\":{\"h\":\"优化算法\",\"t\":[\"优化算法是指在给定的条件下，通过数学手段或计算方法寻找一个函数的最大值或最小值的过程。这些算法在许多领域都有广泛应用，包括工程设计、经济学、机器学习、物流等。\",\"优化算法可以大致分为以下几类：\"]},\"415\":{\"h\":\"1.\",\"t\":[\"这些算法在给定条件下总是能找到问题的最优解，适用于已知明确的数学模型。常见的确定性优化算法包括：\",\"线性规划（Linear Programming, LP）：用于优化线性目标函数，受线性约束条件的限制。\",\"二次规划（Quadratic Programming, QP）：优化二次目标函数，受线性约束条件的限制。\",\"动态规划（Dynamic Programming, DP）：通过将问题分解为子问题，逐步优化每个子问题，最终解决整个问题。\",\"整数规划（Integer Programming, IP）：用于优化目标函数，其解必须是整数。\",\"非线性规划（Nonlinear Programming, NLP）：用于优化非线性目标函数，可能受非线性约束条件的限制。\"]},\"416\":{\"h\":\"2.\",\"t\":[\"启发式算法利用经验法则或启发式信息来找到问题的近似解，适用于求解复杂的、难以精确求解的问题。常见的启发式算法包括：\",\"贪心算法（Greedy Algorithm）：通过逐步选择局部最优解来构建整体解，适用于某些特定问题。\",\"爬山算法（Hill Climbing）：通过逐步调整解的参数来寻找最优解，适合单峰问题。\"]},\"417\":{\"h\":\"3.\",\"t\":[\"智能优化算法（如前面提到的遗传算法、粒子群优化、蚁群优化等）基于模拟自然界或社会行为的过程，适合求解复杂、多模态、非凸的优化问题。\"]},\"418\":{\"h\":\"4.\",\"t\":[\"这些算法结合了多种优化技术的优点，以提高求解效率或准确性。例如，将遗传算法与模拟退火算法结合以改进搜索过程。\"]},\"419\":{\"h\":\"应用领域\",\"t\":[\"优化算法在许多领域都有应用，如：\",\"工程设计：优化结构设计、材料选择、能量效率等。\",\"经济学：优化投资组合、资源分配、生产计划等。\",\"机器学习：优化模型参数、特征选择、超参数调优等。\",\"物流与供应链：优化路线规划、库存管理、配送计划等。\"]},\"420\":{\"h\":\"智能优化算法\",\"t\":[\"智能优化算法是一类使用智能技术和启发式方法来寻找优化问题的近似解的算法。它们通常基于自然界或社会行为的模拟，如进化、群体行为、物理现象等。常见的智能优化算法包括：\",\"遗传算法（Genetic Algorithm, GA）：模拟自然选择和遗传学的过程，通过交叉、变异和选择来优化问题。\",\"粒子群优化算法（Particle Swarm Optimization, PSO）：模拟鸟群觅食行为，通过群体中个体的相互作用来寻找最优解。\",\"蚁群优化算法（Ant Colony Optimization, ACO）：模拟蚂蚁觅食行为，通过信息素的传播和更新来找到最优路径。\",\"人工鱼群算法（Artificial Fish Swarm Algorithm, AFSA）：模拟鱼群觅食行为，通过鱼群的合作和竞争来寻找最优解。\",\"模拟退火算法（Simulated Annealing, SA）：模拟金属退火过程，通过逐步降低温度来寻找问题的最优解。\",\"差分进化算法（Differential Evolution, DE）：通过差分运算和变异来优化问题。\",\"这些算法广泛应用于函数优化、路径规划、调度问题等领域。根据问题的不同特性，选择合适的智能优化算法可以提高效率并找到更好的解。\"]},\"421\":{\"h\":\"模拟退火算法\",\"t\":[\"模拟退火算法（Simulated Annealing, SA）是一种基于物理退火过程的优化算法，用于寻找全局最优解。它特别适用于复杂的、非凸的、具有多个局部最优解的优化问题。模拟退火算法通过在搜索过程中允许解的能量（或目标函数值）暂时上升，以避免陷入局部最优，从而逐步逼近全局最优解。\"]},\"422\":{\"h\":\"1.\",\"t\":[\"模拟退火算法来源于固体物理中的退火过程，退火是指将金属加热到高温后再缓慢冷却，使得金属晶体结构趋于稳定，达到最低能量状态。模拟退火算法将这一过程类比为在搜索空间中寻找最优解的过程。\",\"初始状态和初始温度：算法从一个初始解开始，并设置一个较高的“温度”（模拟退火过程中的温度）。\",\"邻域搜索：在当前解的邻域中随机选择一个新解。如果新解比当前解更优，则接受该解；如果新解较差，则以一定概率接受该解，概率随着温度的下降而降低。\",\"降温过程：温度逐步降低，搜索过程逐渐集中在局部区域，最终在低温下只接受更优解。\",\"终止条件：当温度降到某一阈值或搜索达到预定的迭代次数时，算法终止，返回最优解。\"]},\"423\":{\"h\":\"2.\",\"t\":[\"初始化：选择初始解 ( x_0 ) 和初始温度 ( T_0 )，设置降温速率和终止条件。\",\"迭代搜索： \",\"在当前温度 ( T ) 下，从当前解 ( x ) 的邻域中随机生成一个新解 ( x' )。\",\"计算目标函数值的变化 ( \\\\Delta E = f(x') - f(x) )。\",\"如果 ( \\\\Delta E \\\\leq 0 )，则接受新解 ( x' ) 作为当前解。\",\"如果 ( \\\\Delta E > 0 )，以概率 ( P = \\\\exp(-\\\\Delta E / T) ) 接受新解 ( x' )。\",\"降温：根据降温速率更新温度 ( T )。\",\"终止：当满足终止条件时，返回当前解作为最优解。\"]},\"424\":{\"h\":\"3.\",\"t\":[\"初始温度：较高的初始温度有助于算法在初期探索更广泛的搜索空间。\",\"降温速率：通常设置为 ( T_{k+1} = \\\\alpha T_k ) （其中 ( \\\\alpha ) 通常在 ( 0.8 ) 到 ( 0.99 ) 之间），较慢的降温速率可以增加找到全局最优解的概率。\",\"终止条件：可以是温度降低到某一阈值、迭代次数达到上限或在一定次数内没有解的改进。\"]},\"425\":{\"h\":\"4.\",\"t\":[\"优点：\",\"能够跳出局部最优，具有找到全局最优解的潜力。\",\"算法简单，易于实现。\",\"缺点：\",\"计算时间较长，尤其是降温过程较慢时。\",\"依赖于参数设置，如初始温度、降温速率等，不同问题可能需要不同的调优。\"]},\"426\":{\"h\":\"5.\",\"t\":[\"组合优化问题：如旅行商问题（TSP）、背包问题、调度问题等。\",\"机器学习：用于超参数调优、神经网络训练等。\",\"工程设计：优化结构设计、路径规划等。\",\"下面是一个简单的模拟退火算法的Python实现示例。这个算法将用于解决一个简单的函数优化问题，目标是找到使得目标函数值最小的解。\"]},\"427\":{\"h\":\"目标函数\",\"t\":[\"我们将优化一个简单的二次函数 ( f(x) = x^2 )，目标是找到使得 ( f(x) ) 最小的 ( x ) 值。\"]},\"428\":{\"h\":\"模拟退火算法的实现\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt # 定义目标函数 def objective_function(x): return x**2 # 定义模拟退火算法 def simulated_annealing(objective, bounds, initial_temp, alpha, max_iter): # 随机生成初始解 current_x = np.random.uniform(bounds[0], bounds[1]) current_f = objective(current_x) best_x, best_f = current_x, current_f temp = initial_temp # 记录解和目标函数值的历史 history = [] for i in range(max_iter): # 在当前解的邻域内生成新解 candidate_x = current_x + np.random.uniform(-1, 1) candidate_f = objective(candidate_x) # 如果新解更好，接受新解 if candidate_f < current_f: current_x, current_f = candidate_x, candidate_f else: # 如果新解更差，以一定概率接受新解 delta_f = candidate_f - current_f acceptance_prob = np.exp(-delta_f / temp) if np.random.rand() < acceptance_prob: current_x, current_f = candidate_x, candidate_f # 记录最佳解 if current_f < best_f: best_x, best_f = current_x, current_f # 记录当前解和目标函数值 history.append((current_x, current_f)) # 降温 temp *= alpha return best_x, best_f, history # 设置参数 bounds = [-10, 10] # 解的搜索范围 initial_temp = 1000 # 初始温度 alpha = 0.95 # 降温速率 max_iter = 1000 # 最大迭代次数 # 运行模拟退火算法 best_x, best_f, history = simulated_annealing(objective_function, bounds, initial_temp, alpha, max_iter) print(f\\\"最优解 x: {best_x}\\\") print(f\\\"目标函数值 f(x): {best_f}\\\") # 可视化结果 x_vals = [x for x, f in history] f_vals = [f for x, f in history] plt.plot(f_vals) plt.xlabel('Iteration') plt.ylabel('Objective Function Value') plt.title('Simulated Annealing Optimization') plt.show()\"]},\"429\":{\"h\":\"代码说明\",\"t\":[\"目标函数 objective_function(x)：定义了我们要最小化的目标函数 ( f(x) = x^2 )。\",\"模拟退火算法 simulated_annealing：该函数实现了模拟退火算法。它接受目标函数、解的搜索范围、初始温度、降温速率和最大迭代次数作为输入。\",\"初始解的生成：从搜索范围内随机生成一个初始解。\",\"邻域搜索：在当前解的邻域内随机生成新解，并根据能量变化和当前温度来决定是否接受该新解。\",\"降温过程：每次迭代后，温度根据降温速率下降。\",\"终止条件：达到最大迭代次数后，返回最佳解。\",\"结果可视化：通过绘制目标函数值随迭代次数的变化曲线来观察优化过程。\"]},\"430\":{\"h\":\"运行结果\",\"t\":[\"运行上述代码后，程序会输出找到的最优解及其对应的目标函数值，并显示目标函数值随迭代次数的变化曲线。\"]},\"431\":{\"h\":\"遗传算法\",\"t\":[\"遗传算法（Genetic Algorithm, GA）是一种基于自然选择和遗传学原理的优化算法。它通过模拟生物进化过程，包括选择、交叉（重组）和变异，来逐步逼近问题的最优解。遗传算法广泛应用于复杂的优化问题，特别是那些难以通过传统优化方法求解的高维、非线性问题。\"]},\"432\":{\"h\":\"1.\",\"t\":[\"种群（Population）：一组可能的解，称为个体（Individuals）。每个个体通常表示为一个字符串（如二进制字符串、实数向量等），称为染色体（Chromosome）。\",\"适应度函数（Fitness Function）：用于评估每个个体的优劣。适应度函数值越高的个体，其生存和繁衍的机会越大。\",\"选择（Selection）：根据适应度函数选择优良个体进行繁殖，常用的方法有轮盘赌选择、锦标赛选择等。\",\"交叉（Crossover）：模拟生物交配过程，将两个个体（父代）结合生成新的个体（子代）。常见的交叉方式有单点交叉、多点交叉、均匀交叉等。\",\"变异（Mutation）：模拟生物基因突变，随机改变个体中的一个或多个基因值，以增加种群的多样性，防止算法过早收敛。\",\"终止条件（Termination Condition）：算法达到某一预定条件后停止，例如达到最大代数或适应度函数值不再显著改善。\"]},\"433\":{\"h\":\"2.\",\"t\":[\"初始化种群：随机生成一组初始解（种群）。\",\"评估适应度：计算种群中每个个体的适应度。\",\"选择父代：根据适应度选择用于繁殖的个体。\",\"交叉操作：对选中的父代进行交叉操作，生成子代。\",\"变异操作：对子代进行变异操作。\",\"生成新种群：用新生成的子代替换种群中的老个体，形成新种群。\",\"检查终止条件：如果满足终止条件，则输出最佳解；否则，返回步骤2继续迭代。\"]},\"434\":{\"h\":\"3.\",\"t\":[\"以下是一个使用遗传算法优化简单目标函数的Python示例。目标是最小化函数 ( f(x) = x^2 )。\",\"import numpy as np # 定义目标函数 def objective_function(x): return x**2 # 初始化种群 def initialize_population(pop_size, bounds): population = np.random.uniform(bounds[0], bounds[1], pop_size) return population # 计算适应度函数 def evaluate_fitness(population): fitness = np.array([1 / (1 + objective_function(ind)) for ind in population]) return fitness # 选择操作：轮盘赌选择 def selection(population, fitness): probabilities = fitness / np.sum(fitness) selected_index = np.random.choice(len(population), size=len(population), p=probabilities) return population[selected_index] # 交叉操作：单点交叉 def crossover(parents, crossover_rate): offspring = np.empty(parents.shape) for i in range(0, len(parents), 2): if i+1 < len(parents) and np.random.rand() < crossover_rate: crossover_point = np.random.randint(1, parents.shape[1]) offspring[i, 0:crossover_point] = parents[i, 0:crossover_point] offspring[i, crossover_point:] = parents[i+1, crossover_point:] offspring[i+1, 0:crossover_point] = parents[i+1, 0:crossover_point] offspring[i+1, crossover_point:] = parents[i, crossover_point:] else: offspring[i] = parents[i] if i+1 < len(parents): offspring[i+1] = parents[i+1] return offspring # 变异操作：随机变异 def mutation(offspring, mutation_rate, bounds): for i in range(offspring.shape[0]): if np.random.rand() < mutation_rate: random_value = np.random.uniform(bounds[0], bounds[1]) offspring[i] = random_value return offspring # 遗传算法 def genetic_algorithm(objective, bounds, pop_size, generations, crossover_rate, mutation_rate): population = initialize_population(pop_size, bounds) best_solution = None best_fitness = -np.inf for generation in range(generations): fitness = evaluate_fitness(population) if np.max(fitness) > best_fitness: best_fitness = np.max(fitness) best_solution = population[np.argmax(fitness)] selected_parents = selection(population, fitness) offspring_crossover = crossover(selected_parents, crossover_rate) offspring_mutation = mutation(offspring_crossover, mutation_rate, bounds) population = offspring_mutation best_solution_fitness = 1 / (1 + objective_function(best_solution)) return best_solution, best_solution_fitness # 设置参数 bounds = [-10, 10] # 搜索空间 pop_size = 20 # 种群大小 generations = 100 # 迭代次数 crossover_rate = 0.8 # 交叉率 mutation_rate = 0.1 # 变异率 # 运行遗传算法 best_solution, best_solution_fitness = genetic_algorithm(objective_function, bounds, pop_size, generations, crossover_rate, mutation_rate) print(f\\\"最优解 x: {best_solution}\\\") print(f\\\"目标函数值 f(x): {objective_function(best_solution)}\\\")\"]},\"435\":{\"h\":\"代码说明\",\"t\":[\"目标函数 objective_function(x)：要最小化的目标函数，定义为 ( f(x) = x^2 )。\",\"种群初始化 initialize_population：随机生成初始种群，每个个体在给定的边界范围内。\",\"适应度评估 evaluate_fitness：计算每个个体的适应度，适应度越高表示个体的目标函数值越小。\",\"选择操作 selection：使用轮盘赌选择方法，根据适应度选择繁殖的父代。\",\"交叉操作 crossover：执行单点交叉操作，生成新的子代。\",\"变异操作 mutation：随机对子代进行变异，增加种群多样性。\",\"遗传算法 genetic_algorithm：主函数，执行遗传算法的主要流程，包括初始化、迭代选择、交叉、变异和结果输出。\"]},\"436\":{\"h\":\"运行结果\",\"t\":[\"运行上述代码后，程序会输出找到的最优解及其对应的目标函数值。你可以调整种群大小、迭代次数、交叉率和变异率等参数，观察其对结果的影响。\"]},\"437\":{\"h\":\"应用场景\",\"t\":[\"遗传算法广泛应用于：\",\"函数优化：如非线性函数优化、多目标优化等。\",\"组合优化问题：如旅行商问题（TSP）、作业调度问题等。\",\"机器学习：如特征选择、神经网络权重优化等。\",\"工程设计：如结构优化、参数调优等。\",\"遗传算法是一种强大的优化工具，特别适用于搜索空间复杂、解的质量难以通过解析方法直接求解的问题。\"]},\"438\":{\"h\":\"神经网络\",\"t\":[\"神经网络算法是一种受生物神经系统启发的计算模型，广泛应用于人工智能和机器学习领域。它的核心思想是通过构建多层的神经元（节点）网络来模拟人脑的学习和记忆过程，从而能够对复杂的模式进行识别和分类。\"]},\"439\":{\"h\":\"1. 神经网络的基本组成部分：\",\"t\":[\"输入层（Input Layer）：接收原始数据，每个节点代表输入数据的一个特征。\",\"隐藏层（Hidden Layer）：处理输入数据，通过权重和激活函数进行非线性变换。可以有多层，每层可以有不同数量的节点。\",\"输出层（Output Layer）：输出最终的预测结果，每个节点代表一个可能的输出类别或值。\"]},\"440\":{\"h\":\"2. 基本概念：\",\"t\":[\"权重（Weights）：连接神经元之间的参数，控制信号的传递强度。训练过程中通过反向传播算法不断调整权重，以最小化误差。\",\"偏置（Biases）：增加到每个神经元的额外参数，允许模型更好地拟合数据。\",\"激活函数（Activation Function）：用于引入非线性特性，使网络能够处理复杂问题。常见的激活函数有ReLU（Rectified Linear Unit）、Sigmoid、Tanh等。\",\"损失函数（Loss Function）：衡量模型预测与实际结果的差距，常见的有均方误差（MSE）、交叉熵（Cross-Entropy）等。\",\"反向传播（Backpropagation）：通过计算损失函数对权重的导数，使用梯度下降法更新权重，从而优化模型。\"]},\"441\":{\"h\":\"3. 常见的神经网络类型：\",\"t\":[\"前馈神经网络（Feedforward Neural Network, FNN）：最基础的神经网络结构，数据从输入层经过隐藏层直接到达输出层，没有循环结构。\",\"卷积神经网络（Convolutional Neural Network, CNN）：主要用于图像处理，利用卷积层和池化层提取空间特征。\",\"循环神经网络（Recurrent Neural Network, RNN）：适合处理序列数据，具有记忆功能。LSTM（长短期记忆）和GRU（门控循环单元）是其改进版本，解决了长时间依赖问题。\",\"生成对抗网络（Generative Adversarial Network, GAN）：由生成器和判别器组成，通过相互对抗训练生成高质量数据。\"]},\"442\":{\"h\":\"4. 应用领域：\",\"t\":[\"图像识别和处理\",\"自然语言处理\",\"时间序列预测\",\"自动驾驶\",\"游戏人工智能\",\"下面是一个简单的Python实现神经网络的例子，这个神经网络是一个前馈神经网络，用于解决一个基本的分类问题。我们将使用NumPy库进行矩阵运算。\"]},\"443\":{\"h\":\"实现一个简单的神经网络\"},\"444\":{\"h\":\"1. 导入必要的库\",\"t\":[\"import numpy as np\"]},\"445\":{\"h\":\"2. 定义激活函数和其导数\",\"t\":[\"我们使用Sigmoid激活函数。\",\"def sigmoid(x): return 1 / (1 + np.exp(-x)) def sigmoid_derivative(x): return x * (1 - x)\"]},\"446\":{\"h\":\"3. 初始化数据和权重\",\"t\":[\"# 输入数据 (4 samples, 3 features each) inputs = np.array([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]]) # 输出数据 (4 samples, 1 output each) outputs = np.array([[0], [1], [1], [0]]) # 设置随机种子以便复现结果 np.random.seed(1) # 初始化权重，范围在[-1, 1]之间 weights = 2 * np.random.random((3, 1)) - 1\"]},\"447\":{\"h\":\"4. 训练神经网络\",\"t\":[\"我们将进行多次迭代，每次迭代中通过前向传播计算输出，然后通过反向传播更新权重。\",\"# 学习率 learning_rate = 0.1 # 训练10000次 for epoch in range(10000): # 前向传播 input_layer = inputs predictions = sigmoid(np.dot(input_layer, weights)) # 计算误差 error = outputs - predictions # 反向传播，更新权重 adjustments = error * sigmoid_derivative(predictions) weights += np.dot(input_layer.T, adjustments) * learning_rate # 每1000次打印一次误差 if epoch % 1000 == 0: print(f\\\"Error after {epoch} iterations: {np.mean(np.abs(error))}\\\")\"]},\"448\":{\"h\":\"5. 测试神经网络\",\"t\":[\"print(\\\"Final weights after training:\\\") print(weights) # 测试 test_input = np.array([1, 0, 0]) prediction = sigmoid(np.dot(test_input, weights)) print(f\\\"Prediction for input {test_input}: {prediction}\\\")\"]},\"449\":{\"h\":\"完整代码\",\"t\":[\"import numpy as np def sigmoid(x): return 1 / (1 + np.exp(-x)) def sigmoid_derivative(x): return x * (1 - x) # 输入数据 inputs = np.array([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]]) # 输出数据 outputs = np.array([[0], [1], [1], [0]]) # 初始化权重 np.random.seed(1) weights = 2 * np.random.random((3, 1)) - 1 # 训练神经网络 learning_rate = 0.1 for epoch in range(10000): input_layer = inputs predictions = sigmoid(np.dot(input_layer, weights)) error = outputs - predictions adjustments = error * sigmoid_derivative(predictions) weights += np.dot(input_layer.T, adjustments) * learning_rate if epoch % 1000 == 0: print(f\\\"Error after {epoch} iterations: {np.mean(np.abs(error))}\\\") # 测试 print(\\\"Final weights after training:\\\") print(weights) test_input = np.array([1, 0, 0]) prediction = sigmoid(np.dot(test_input, weights)) print(f\\\"Prediction for input {test_input}: {prediction}\\\")\"]},\"450\":{\"h\":\"输出结果\",\"t\":[\"训练过程中，每隔1000次迭代打印误差，最终会看到误差不断减小。通过这个简单的神经网络，我们可以对输入数据进行基本的二分类预测。\",\"这个例子仅用于演示基本原理，实际应用中可以使用更复杂的模型和库，如TensorFlow或PyTorch，以应对复杂的任务和更大的数据集。\"]},\"451\":{\"c\":[\"数学建模\"]},\"452\":{\"c\":[\"数学建模\"]},\"453\":{\"h\":\"matlab建模\"},\"454\":{\"c\":[\"数学建模\"]},\"455\":{\"c\":[\"数学建模\"]},\"456\":{\"h\":\"python数据分析处理\",\"t\":[\"以下是 Python 数据分析处理的基础教程，涵盖了 NumPy、Pandas、Matplotlib、SciPy 和 Seaborn 等库的基本用法。\"]},\"457\":{\"h\":\"1. NumPy 基础\",\"t\":[\"NumPy 是 Python 中进行数值计算的核心库，提供了高效的多维数组对象。\",\"1.1. 导入 NumPy\",\"import numpy as np\",\"1.2. 创建数组\",\"# 创建一维数组 arr1 = np.array([1, 2, 3]) # 创建二维数组 arr2 = np.array([[1, 2, 3], [4, 5, 6]]) # 创建一个全零的数组 zeros = np.zeros((2, 3)) # 创建一个全一的数组 ones = np.ones((3, 3)) # 创建一个范围数组 range_arr = np.arange(0, 10, 2)\",\"1.3. 数组运算\",\"# 数组的加法运算 sum_arr = arr1 + arr1 # 数组的乘法运算 prod_arr = arr1 * 2 # 数组的点积 dot_product = np.dot(arr1, arr1)\"]},\"458\":{\"h\":\"2. Pandas 基础\",\"t\":[\"Pandas 是用于数据处理和分析的强大库，主要数据结构为 Series 和 DataFrame。\",\"2.1. 导入 Pandas\",\"import pandas as pd\",\"2.2. 创建 Series 和 DataFrame\",\"# 创建 Series series = pd.Series([1, 3, 5, np.nan, 6, 8]) # 创建 DataFrame data = {'A': [1, 2, 3, 4], 'B': [5, 6, 7, 8], 'C': [9, 10, 11, 12]} df = pd.DataFrame(data)\",\"2.3. 数据处理\",\"# 查看前几行数据 df.head() # 描述性统计 df.describe() # 数据选择 df['A'] # 选择一列 df.iloc[0:2, 1:3] # 按位置选择 # 数据清洗 df.dropna() # 删除空值 df.fillna(value=5) # 填充空值 # 数据分组 grouped = df.groupby('A').sum()\"]},\"459\":{\"h\":\"3. Matplotlib 和 Seaborn 基础\",\"t\":[\"Matplotlib 是 Python 中最常用的绘图库，而 Seaborn 是一个基于 Matplotlib 的高级绘图库，适用于统计图表的绘制。\",\"3.1. 导入 Matplotlib 和 Seaborn\",\"import matplotlib.pyplot as plt import seaborn as sns\",\"3.2. 绘制基本图形\",\"# 简单的折线图 plt.plot([1, 2, 3, 4]) plt.ylabel('some numbers') plt.show() # 带标题的散点图 x = np.linspace(0, 10, 100) y = np.sin(x) plt.scatter(x, y) plt.title(\\\"Scatter Plot\\\") plt.show()\",\"3.3. Seaborn 可视化\",\"# 数据准备 tips = sns.load_dataset(\\\"tips\\\") # 绘制柱状图 sns.barplot(x=\\\"day\\\", y=\\\"total_bill\\\", data=tips) plt.show() # 绘制热力图 corr = tips.corr() sns.heatmap(corr, annot=True) plt.show()\"]},\"460\":{\"h\":\"4. SciPy 基础\",\"t\":[\"SciPy 是一个用于科学计算的库，包含许多有用的工具，如优化、积分、插值、傅里叶变换和信号处理等。\",\"4.1. 导入 SciPy\",\"from scipy import stats, optimize, integrate\",\"4.2. 统计分析\",\"# 正态分布的概率密度函数 x = np.linspace(-5, 5, 100) pdf = stats.norm.pdf(x) plt.plot(x, pdf) plt.title(\\\"Normal Distribution PDF\\\") plt.show() # t检验 t_statistic, p_value = stats.ttest_1samp(a=sample_data, popmean=0)\",\"4.3. 优化与积分\",\"# 优化示例 def f(x): return x**2 + 10*np.sin(x) result = optimize.minimize(f, x0=0) print(result.x) # 积分示例 integral, error = integrate.quad(lambda x: np.exp(-x**2), 0, np.inf) print(integral)\"]},\"461\":{\"c\":[\"数学建模\"]},\"462\":{\"c\":[\"数学建模\"]},\"463\":{\"h\":\"统计分析方法\"},\"464\":{\"h\":\"统计分析\",\"t\":[\"统计分析方法是一系列用于收集、整理、分析和解释数据的系统过程，旨在揭示数据背后的模式、趋势和关系。这些方法广泛应用于社会科学、自然科学、商业管理、医疗健康等多个领域。以下是一些常见的统计分析方法：\"]},\"465\":{\"h\":\"1. 描述统计\",\"t\":[\"描述统计是统计分析的基础，它主要通过图表和统计量（如均值、中位数、众数、标准差等）来描述数据的特征。描述统计能够帮助研究者对数据有一个初步的了解，为后续的分析提供基础。\"]},\"466\":{\"h\":\"2. 假设检验\",\"t\":[\"假设检验是统计学中用于判断样本数据是否支持某个总体假设的方法。它通常包括设定假设、选择检验统计量、确定显著性水平和作出结论等步骤。常见的假设检验方法包括t检验、卡方检验、ANOVA等。\"]},\"467\":{\"h\":\"3. 信度分析\",\"t\":[\"信度分析用于评估测量工具的稳定性和可靠性。在心理学、教育学等领域，信度分析是评估问卷、量表等测量工具质量的重要手段。常用的信度系数包括Cronbach's Alpha系数等。\"]},\"468\":{\"h\":\"4. 列联表分析\",\"t\":[\"列联表分析是一种用于分析两个或多个分类变量之间关系的统计方法。它主要通过构建列联表来展示不同分类组合下的频数分布，并通过卡方检验等方法来判断这些分类变量之间是否存在关联。\"]},\"469\":{\"h\":\"5. 相关分析\",\"t\":[\"相关分析用于研究两个或多个变量之间关系的方向和强度。常用的相关系数包括皮尔逊相关系数、斯皮尔曼等级相关系数等。相关分析可以帮助研究者了解变量之间的线性或非线性关系。\"]},\"470\":{\"h\":\"6. 方差分析\",\"t\":[\"方差分析（ANOVA）是一种用于比较多个样本均数之间差异的统计方法。它通过将总变异分解为组内变异和组间变异来评估不同组之间是否存在显著差异。ANOVA在生物医学、社会科学等领域具有广泛应用。\"]},\"471\":{\"h\":\"7. 回归分析\",\"t\":[\"回归分析用于研究一个或多个自变量与一个因变量之间关系的统计方法。通过回归分析，可以建立自变量与因变量之间的数学模型，并预测因变量的未来值。常见的回归分析方法包括线性回归、逻辑回归等。\"]},\"472\":{\"h\":\"8. 聚类分析\",\"t\":[\"聚类分析是一种无监督学习方法，它根据数据之间的相似性将数据分为多个组或簇。聚类分析可以帮助研究者发现数据中的潜在结构和模式，为进一步的分析提供基础。\"]},\"473\":{\"h\":\"9. 判别分析\",\"t\":[\"判别分析是一种有监督学习方法，它根据已知的分类信息来预测新数据的分类。判别分析在医学诊断、信用评分等领域具有广泛应用。\"]},\"474\":{\"h\":\"10. 主成分分析和因子分析\",\"t\":[\"主成分分析和因子分析都是用于数据降维的统计方法。它们通过提取数据中的主要成分或因子来简化数据结构，同时尽可能保留原始数据的信息。这些方法在图像处理、市场分析等领域具有广泛应用。\"]},\"475\":{\"h\":\"11. 时间序列分析\",\"t\":[\"时间序列分析是一种专门用于分析时间序列数据的统计方法。它通过研究数据随时间变化的规律来预测未来的发展趋势。时间序列分析在经济学、金融学等领域具有广泛应用。\"]},\"476\":{\"h\":\"12. 生存分析\",\"t\":[\"生存分析是一种用于研究生存时间数据的统计方法。它主要关注于个体或群体在某个事件（如死亡、疾病复发等）发生之前的生存时间。生存分析在医学、生物学等领域具有广泛应用。\"]},\"477\":{\"h\":\"python描述统计分析\",\"t\":[\"在Python中，你可以使用诸如pandas、numpy、scipy、statsmodels、sklearn等库来实现上述各种统计分析方法。以下是一些示例代码，展示如何使用这些工具进行描述统计、假设检验、信度分析、列联表分析、相关分析等。\"]},\"478\":{\"h\":\"1. 描述统计\",\"t\":[\"描述统计帮助你了解数据的基本特征：\",\"import pandas as pd # 示例数据 data = { 'Score': [88, 92, 79, 93, 85, 91, 89, 78, 85, 92] } df = pd.DataFrame(data) # 计算描述统计量 desc_stats = df.describe() print(desc_stats)\"]},\"479\":{\"h\":\"2. 假设检验\",\"t\":[\"以t检验为例，判断两个样本均值是否显著不同：\",\"from scipy import stats # 两组样本数据 group1 = [88, 92, 79, 93, 85] group2 = [91, 89, 78, 85, 92] # t检验 t_stat, p_value = stats.ttest_ind(group1, group2) print(f\\\"t-statistic: {t_stat}, p-value: {p_value}\\\")\"]},\"480\":{\"h\":\"3. 信度分析\",\"t\":[\"使用Cronbach's Alpha评估问卷的信度：\",\"import numpy as np # 示例问卷数据 responses = np.array([ [4, 5, 4, 5], [5, 4, 4, 4], [4, 4, 4, 5], [5, 5, 5, 4] ]) # 计算Cronbach's Alpha item_variances = responses.var(axis=0, ddof=1) total_variance = responses.sum(axis=1).var(ddof=1) cronbach_alpha = (len(responses[0]) / (len(responses[0]) - 1)) * (1 - sum(item_variances) / total_variance) print(f\\\"Cronbach's Alpha: {cronbach_alpha}\\\")\"]},\"481\":{\"h\":\"4. 列联表分析\",\"t\":[\"分析两个分类变量之间的关系：\",\"import pandas as pd from scipy.stats import chi2_contingency # 构建列联表 data = {'Gender': ['Male', 'Female', 'Female', 'Male', 'Male'], 'Preference': ['A', 'B', 'A', 'A', 'B']} df = pd.DataFrame(data) contingency_table = pd.crosstab(df['Gender'], df['Preference']) print(contingency_table) # 卡方检验 chi2, p, dof, expected = chi2_contingency(contingency_table) print(f\\\"Chi2: {chi2}, p-value: {p}\\\")\"]},\"482\":{\"h\":\"5. 相关分析\",\"t\":[\"计算皮尔逊相关系数：\",\"from scipy.stats import pearsonr # 两个变量的数据 x = [88, 92, 79, 93, 85] y = [91, 89, 78, 85, 92] # 计算皮尔逊相关系数 corr, _ = pearsonr(x, y) print(f\\\"Pearson correlation: {corr}\\\")\"]},\"483\":{\"h\":\"6. 方差分析（ANOVA）\",\"t\":[\"用于比较多个样本的均值：\",\"from scipy.stats import f_oneway # 三组数据 group1 = [88, 92, 79, 93, 85] group2 = [91, 89, 78, 85, 92] group3 = [84, 90, 76, 82, 89] # 单因素方差分析 f_stat, p_value = f_oneway(group1, group2, group3) print(f\\\"F-statistic: {f_stat}, p-value: {p_value}\\\")\"]},\"484\":{\"h\":\"7. 回归分析\",\"t\":[\"使用线性回归来分析自变量与因变量之间的关系：\",\"from sklearn.linear_model import LinearRegression import numpy as np # 示例数据 X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1) y = np.array([88, 92, 79, 93, 85]) # 线性回归模型 model = LinearRegression() model.fit(X, y) # 预测和系数 predictions = model.predict(X) print(f\\\"Coefficients: {model.coef_}, Intercept: {model.intercept_}\\\")\"]},\"485\":{\"h\":\"8. 聚类分析\",\"t\":[\"使用K-Means进行聚类：\",\"from sklearn.cluster import KMeans # 示例数据 X = np.array([[1, 2], [2, 3], [3, 4], [8, 9], [9, 10]]) # K-Means聚类 kmeans = KMeans(n_clusters=2, random_state=0).fit(X) print(f\\\"Cluster Centers: {kmeans.cluster_centers_}\\\")\"]},\"486\":{\"h\":\"9. 判别分析\",\"t\":[\"使用线性判别分析 (LDA)：\",\"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis # 示例数据 X = np.array([[1, 2], [2, 3], [3, 4], [8, 9], [9, 10]]) y = np.array([0, 0, 0, 1, 1]) # 线性判别分析 lda = LinearDiscriminantAnalysis() lda.fit(X, y) # 预测 predictions = lda.predict(X) print(f\\\"Predictions: {predictions}\\\")\"]},\"487\":{\"h\":\"10. 主成分分析和因子分析\",\"t\":[\"使用PCA进行数据降维：\",\"from sklearn.decomposition import PCA # 示例数据 X = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5], [8, 9, 10], [9, 10, 11]]) # 主成分分析 pca = PCA(n_components=2) principal_components = pca.fit_transform(X) print(f\\\"Principal Components:\\\\n{principal_components}\\\")\"]},\"488\":{\"h\":\"11. 时间序列分析\",\"t\":[\"使用ARIMA模型进行时间序列分析：\",\"import pandas as pd from statsmodels.tsa.arima.model import ARIMA # 示例时间序列数据 data = [88, 92, 79, 93, 85, 91, 89, 78, 85, 92] df = pd.Series(data) # ARIMA模型 model = ARIMA(df, order=(1, 1, 1)) model_fit = model.fit() # 预测 forecast = model_fit.forecast(steps=3) print(f\\\"Forecast: {forecast}\\\")\"]},\"489\":{\"h\":\"12. 生存分析\",\"t\":[\"使用Kaplan-Meier估计进行生存分析：\",\"from lifelines import KaplanMeierFitter # 示例数据 time = [5, 6, 6, 2, 4, 3, 4, 2, 3] event = [1, 0, 0, 1, 1, 1, 1, 1, 0] # Kaplan-Meier生存分析 kmf = KaplanMeierFitter() kmf.fit(time, event_observed=event) # 生存函数 kmf.plot_survival_function()\"]},\"490\":{\"h\":\"回归模型与分析\",\"t\":[\"回归模型是用于描述变量之间关系的一种统计方法，常用于预测和解释数据。以下是一些常见的回归模型：\"]},\"491\":{\"h\":\"1. (Simple Linear Regression)\",\"t\":[\"描述：用于描述两个变量之间的线性关系。假设因变量 ( y ) 和自变量 ( x ) 之间的关系可以用一条直线来表示，形式为 ( y = \\\\beta_0 + \\\\beta_1 x + \\\\epsilon )，其中 ( \\\\beta_0 ) 是截距，( \\\\beta_1 ) 是斜率，( \\\\epsilon ) 是误差项。\",\"应用：适用于只有一个自变量的简单预测或趋势分析。\"]},\"492\":{\"h\":\"2. (Multiple Linear Regression)\",\"t\":[\"描述：扩展一元线性回归，用于描述因变量与多个自变量之间的关系。形式为 ( y = \\\\beta_0 + \\\\beta_1 x_1 + \\\\beta_2 x_2 + \\\\dots + \\\\beta_n x_n + \\\\epsilon )。\",\"应用：用于预测或分析多个因素对结果的综合影响。\"]},\"493\":{\"h\":\"3. (Stepwise Regression)\",\"t\":[\"描述：逐步回归是一种变量选择方法，常用于多元回归中。它通过逐步添加或移除自变量来构建模型，以找到对因变量最有显著影响的自变量组合。\",\"应用：用于简化模型，避免过拟合，同时提高预测精度。\"]},\"494\":{\"h\":\"4. (Polynomial Regression)\",\"t\":[\"描述：多项式回归是线性回归的扩展，用于描述因变量与自变量之间的非线性关系。模型形式为 ( y = \\\\beta_0 + \\\\beta_1 x + \\\\beta_2 x^2 + \\\\dots + \\\\beta_n x^n + \\\\epsilon )。\",\"应用：适用于数据表现出曲线趋势的情况，通常在一元回归中使用。\"]},\"495\":{\"h\":\"5. (Generalized Linear Regression)\",\"t\":[\"描述：广义线性模型（GLM）扩展了传统的线性回归模型，允许因变量服从不同的概率分布（如二项分布、泊松分布等）。模型形式为 ( g(E(y)) = \\\\beta_0 + \\\\beta_1 x_1 + \\\\dots + \\\\beta_n x_n )，其中 ( g ) 是连接函数，( E(y) ) 是因变量的期望值。\",\"应用：适用于因变量不满足正态分布假设的情况，如分类问题、计数数据等。\"]},\"496\":{\"h\":\"python实现回归分析\",\"t\":[\"回归模型用于预测一个连续的目标变量（即响应变量）基于一个或多个特征变量（即解释变量）。回归分析帮助我们理解特征与目标之间的关系，并进行预测和推断。以下是一些常见的回归模型和分析方法，以及它们在 Python 中的实现示例。\"]},\"497\":{\"h\":\"1. 线性回归（Linear Regression）\",\"t\":[\"线性回归模型假设目标变量与特征之间存在线性关系。模型可以通过最小化预测值和实际值之间的平方误差来确定最佳拟合线。\",\"Python 实现：\",\"from sklearn.datasets import load_boston from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score # 加载示例数据集（波士顿房价数据集） data = load_boston() X = data.data y = data.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建线性回归模型并进行训练 model = LinearRegression() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的均方误差和R^2分数 mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) print(f\\\"Mean Squared Error: {mse:.2f}\\\") print(f\\\"R^2 Score: {r2:.2f}\\\")\"]},\"498\":{\"h\":\"2. 岭回归（Ridge Regression）\",\"t\":[\"岭回归是线性回归的一个变体，通过引入L2正则化来防止过拟合。这种正则化项对模型的复杂度进行惩罚，从而提高模型的泛化能力。\",\"Python 实现：\",\"from sklearn.linear_model import Ridge # 创建岭回归模型并进行训练 ridge_model = Ridge(alpha=1.0) ridge_model.fit(X_train, y_train) # 对测试集进行预测 y_pred_ridge = ridge_model.predict(X_test) # 输出预测的均方误差和R^2分数 mse_ridge = mean_squared_error(y_test, y_pred_ridge) r2_ridge = r2_score(y_test, y_pred_ridge) print(f\\\"Ridge Mean Squared Error: {mse_ridge:.2f}\\\") print(f\\\"Ridge R^2 Score: {r2_ridge:.2f}\\\")\"]},\"499\":{\"h\":\"3. LASSO回归（LASSO Regression）\",\"t\":[\"LASSO回归是另一种线性回归变体，它通过引入L1正则化来进行特征选择。L1正则化可以使一些特征的系数变为零，从而实现特征选择。\",\"Python 实现：\",\"from sklearn.linear_model import Lasso # 创建LASSO回归模型并进行训练 lasso_model = Lasso(alpha=0.1) lasso_model.fit(X_train, y_train) # 对测试集进行预测 y_pred_lasso = lasso_model.predict(X_test) # 输出预测的均方误差和R^2分数 mse_lasso = mean_squared_error(y_test, y_pred_lasso) r2_lasso = r2_score(y_test, y_pred_lasso) print(f\\\"LASSO Mean Squared Error: {mse_lasso:.2f}\\\") print(f\\\"LASSO R^2 Score: {r2_lasso:.2f}\\\")\"]},\"500\":{\"h\":\"4. 弹性网回归（Elastic Net Regression）\",\"t\":[\"弹性网回归结合了L1和L2正则化，是一种灵活的线性回归模型，可以同时进行特征选择和复杂度控制。\",\"Python 实现：\",\"from sklearn.linear_model import ElasticNet # 创建弹性网回归模型并进行训练 elastic_net_model = ElasticNet(alpha=1.0, l1_ratio=0.5) elastic_net_model.fit(X_train, y_train) # 对测试集进行预测 y_pred_en = elastic_net_model.predict(X_test) # 输出预测的均方误差和R^2分数 mse_en = mean_squared_error(y_test, y_pred_en) r2_en = r2_score(y_test, y_pred_en) print(f\\\"Elastic Net Mean Squared Error: {mse_en:.2f}\\\") print(f\\\"Elastic Net R^2 Score: {r2_en:.2f}\\\")\"]},\"501\":{\"h\":\"5. 多项式回归（Polynomial Regression）\",\"t\":[\"多项式回归通过引入特征的多项式变换来捕捉特征和目标变量之间的非线性关系。\",\"Python 实现：\",\"from sklearn.preprocessing import PolynomialFeatures from sklearn.pipeline import make_pipeline from sklearn.linear_model import LinearRegression # 创建多项式特征转换器 poly = PolynomialFeatures(degree=2) X_poly = poly.fit_transform(X) # 分割数据集为训练集和测试集 X_train_poly, X_test_poly, y_train, y_test = train_test_split(X_poly, y, test_size=0.3, random_state=42) # 创建多项式回归模型并进行训练 poly_model = LinearRegression() poly_model.fit(X_train_poly, y_train) # 对测试集进行预测 y_pred_poly = poly_model.predict(X_test_poly) # 输出预测的均方误差和R^2分数 mse_poly = mean_squared_error(y_test, y_pred_poly) r2_poly = r2_score(y_test, y_pred_poly) print(f\\\"Polynomial Regression Mean Squared Error: {mse_poly:.2f}\\\") print(f\\\"Polynomial Regression R^2 Score: {r2_poly:.2f}\\\")\"]},\"502\":{\"h\":\"6. 支持向量回归（Support Vector Regression, SVR）\",\"t\":[\"支持向量回归是一种非线性回归模型，可以通过核函数处理复杂的非线性关系。\",\"Python 实现：\",\"from sklearn.svm import SVR # 创建支持向量回归模型并进行训练 svr_model = SVR(kernel='rbf', C=100, epsilon=0.1) svr_model.fit(X_train, y_train) # 对测试集进行预测 y_pred_svr = svr_model.predict(X_test) # 输出预测的均方误差和R^2分数 mse_svr = mean_squared_error(y_test, y_pred_svr) r2_svr = r2_score(y_test, y_pred_svr) print(f\\\"SVR Mean Squared Error: {mse_svr:.2f}\\\") print(f\\\"SVR R^2 Score: {r2_svr:.2f}\\\")\"]},\"503\":{\"h\":\"7. 决策树回归（Decision Tree Regression）\",\"t\":[\"决策树回归通过创建树状结构来对数据进行分割，以进行回归预测。\",\"Python 实现：\",\"from sklearn.tree import DecisionTreeRegressor # 创建决策树回归模型并进行训练 tree_model = DecisionTreeRegressor() tree_model.fit(X_train, y_train) # 对测试集进行预测 y_pred_tree = tree_model.predict(X_test) # 输出预测的均方误差和R^2分数 mse_tree = mean_squared_error(y_test, y_pred_tree) r2_tree = r2_score(y_test, y_pred_tree) print(f\\\"Decision Tree Regression Mean Squared Error: {mse_tree:.2f}\\\") print(f\\\"Decision Tree Regression R^2 Score: {r2_tree:.2f}\\\")\"]},\"504\":{\"h\":\"总结\",\"t\":[\"线性回归 是最基础的回归模型，适用于线性关系的情况。\",\"岭回归 和 LASSO回归 通过正则化来控制模型复杂度，提高泛化能力。\",\"弹性网回归 结合了L1和L2正则化，可以同时进行特征选择和复杂度控制。\",\"多项式回归 可以处理特征与目标之间的非线性关系。\",\"支持向量回归 适用于复杂的非线性关系，通过核函数扩展线性回归的能力。\",\"决策树回归 使用树状结构进行回归，适合处理复杂的非线性关系。\",\"这些回归模型可以通过不同的方法来处理数据、提高预测性能，并帮助你理解特征与目标之间的关系。选择合适的模型通常取决于数据的特性和具体的任务需求。\"]},\"505\":{\"c\":[\"数学建模\"]},\"506\":{\"c\":[\"数学建模\"]},\"507\":{\"h\":\"聚类分析方法与判别分析\"},\"508\":{\"h\":\"聚类分析\",\"t\":[\"聚类分析是一种无监督学习方法，用于将数据集中的对象划分为多个簇，使得同一簇中的对象彼此相似，而不同簇之间的对象差异较大。以下是聚类分析的主要概念、常用方法、评价指标以及应用场景。\"]},\"509\":{\"h\":\"1. 主要概念\",\"t\":[\"簇 (Cluster): 数据集中彼此相似的对象组成的组。\",\"相似性 (Similarity): 衡量数据对象之间的相似程度，通常通过距离度量（如欧氏距离、曼哈顿距离）来表示。\",\"无监督学习: 聚类分析不依赖预先标注的类别标签，而是根据数据的内在结构进行分组。\"]},\"510\":{\"h\":\"2. 常用聚类方法\"},\"511\":{\"h\":\"(1) K-means 聚类\",\"t\":[\"基本原理: 将数据集划分为 K 个簇，最小化簇内的平方误差和（即数据点到其所在簇质心的距离平方和）。\",\"步骤: \",\"随机选择 K 个初始质心。\",\"将每个数据点分配到距离最近的质心所在的簇中。\",\"重新计算每个簇的质心。\",\"重复步骤 2 和 3，直到簇分配不再改变。\",\"优点: 简单高效，适用于大规模数据集。\",\"缺点: 需要预先指定 K，对初始质心敏感，容易陷入局部最优解。\"]},\"512\":{\"h\":\"(2) 层次聚类 (Hierarchical Clustering)\",\"t\":[\"凝聚层次聚类 (Agglomerative Clustering): 从每个数据点单独一个簇开始，不断合并最近的簇，直到所有数据点都合并成一个簇。\",\"分裂层次聚类 (Divisive Clustering): 从所有数据点组成一个大簇开始，不断拆分成更小的簇。\",\"优点: 不需要预先指定簇数，可以生成树状的聚类层次图（树状图）。\",\"缺点: 计算复杂度高，不适合大规模数据集。\"]},\"513\":{\"h\":\"(3) 基于密度的聚类 (DBSCAN)\",\"t\":[\"基本原理: 通过密度连接的方式形成簇，即将密度足够高的数据点聚集在一起，同时识别出噪声点。\",\"优点: 能够识别任意形状的簇，能处理噪声数据。\",\"缺点: 对参数（如邻域半径和最小点数）的选择敏感。\"]},\"514\":{\"h\":\"(4) 高斯混合模型 (GMMs)\",\"t\":[\"基本原理: 假设数据由多个高斯分布组成，通过估计这些高斯分布的参数来实现聚类。\",\"优点: 能够生成软聚类，即每个数据点属于每个簇的概率。\",\"缺点: 对初始参数敏感，计算复杂度较高。\"]},\"515\":{\"h\":\"3. 聚类效果评价指标\",\"t\":[\"轮廓系数 (Silhouette Coefficient): 结合了簇内紧凑性和簇间分离度，范围为 -1 到 1，值越大越好。\",\"互信息 (Mutual Information): 衡量聚类结果与真实标签之间的信息共享。\",\"调整兰德指数 (Adjusted Rand Index): 衡量聚类结果与真实标签的相似性。\"]},\"516\":{\"h\":\"4. 应用场景\",\"t\":[\"客户细分: 在市场营销中，根据消费者行为数据将客户分为不同的细分市场。\",\"图像分割: 将图像中的像素聚类为不同的区域，用于图像分析和处理。\",\"文本分类: 在自然语言处理中，根据文档内容将文本聚类为不同的主题。\",\"异常检测: 识别不属于任何簇的异常数据点。\"]},\"517\":{\"h\":\"5. Python 实现示例 (K-means 聚类)\",\"t\":[\"from sklearn.cluster import KMeans import matplotlib.pyplot as plt from sklearn.datasets import make_blobs # 生成样本数据 X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0) # K-means 聚类 kmeans = KMeans(n_clusters=4) kmeans.fit(X) y_kmeans = kmeans.predict(X) # 可视化聚类结果 plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis') centers = kmeans.cluster_centers_ plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75) plt.show()\",\"这个示例使用K-means对生成的样本数据进行聚类，并可视化了聚类结果。\"]},\"518\":{\"h\":\"判断分析\",\"t\":[\"判别分析（Discriminant Analysis）是一种统计分类方法，用于预测数据点的类别。与聚类分析不同，判别分析是一种有监督学习方法，需要使用带有已知类别标签的数据进行训练。判别分析的主要目标是找到能够最大化类间差异并最小化类内差异的决策边界，以便对新数据点进行分类。\"]},\"519\":{\"h\":\"1. 判别分析的主要类型\"},\"520\":{\"h\":\"(1) 线性判别分析 (LDA, Linear Discriminant Analysis)\",\"t\":[\"基本原理: 假设不同类别的数据服从正态分布，且具有相同的协方差矩阵。LDA通过寻找一个线性组合，使得不同类别之间的类间方差最大，而类内方差最小。\",\"应用场景: 在特征维度较高、类间方差大于类内方差的情况下表现较好。\",\"步骤: \",\"计算各类别的均值向量和全局均值。\",\"计算类内散布矩阵和类间散布矩阵。\",\"通过求解广义特征值问题，找到最佳投影方向。\",\"将数据投影到该方向上，并根据投影结果进行分类。\"]},\"521\":{\"h\":\"(2) 二次判别分析 (QDA, Quadratic Discriminant Analysis)\",\"t\":[\"基本原理: 放松LDA中对相同协方差矩阵的假设，允许每个类别有自己的协方差矩阵。因此，QDA可以构建更复杂的决策边界。\",\"优点: 适用于类别之间的协方差矩阵差异较大的情况。\",\"缺点: 当样本较少时，容易出现过拟合。\"]},\"522\":{\"h\":\"(3) 贝叶斯判别分析 (Bayesian Discriminant Analysis)\",\"t\":[\"基本原理: 基于贝叶斯定理，通过结合先验概率和条件概率来计算后验概率，根据后验概率最大化的原则进行分类。\",\"优点: 理论基础扎实，能够结合先验信息。\",\"应用场景: 在已知类别先验分布或可以推测先验分布的情况下应用广泛。\"]},\"523\":{\"h\":\"2. 判别分析的应用场景\",\"t\":[\"金融领域: 通过分析客户的历史数据来预测信用风险或贷款违约风险。\",\"医学诊断: 根据患者的体检数据进行疾病诊断和分类。\",\"图像识别: 用于人脸识别或手写数字识别，通过分析图像特征进行分类。\"]},\"524\":{\"h\":\"3. Python 实现示例 (LDA)\",\"t\":[\"以下是使用Python中的scikit-learn库进行线性判别分析的示例：\",\"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score # 加载示例数据集 data = load_iris() X = data.data y = data.target # 划分训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 线性判别分析 lda = LinearDiscriminantAnalysis() lda.fit(X_train, y_train) # 预测测试集 y_pred = lda.predict(X_test) # 计算准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"模型准确率: {accuracy * 100:.2f}%\\\")\",\"这个示例使用了经典的鸢尾花（Iris）数据集，通过线性判别分析对花卉的种类进行分类，并计算了分类准确率。\"]},\"525\":{\"h\":\"4. LDA 与 QDA 的比较\",\"t\":[\"决策边界: LDA 生成的是线性决策边界，而 QDA 生成的是二次决策边界。因此，LDA 适用于线性可分的数据集，而 QDA 则适用于更复杂的决策边界。\",\"数据需求: LDA 对数据的要求较低（相同协方差矩阵），而 QDA 对数据的要求较高（每个类别的协方差矩阵不同）。\",\"模型复杂度: LDA 的模型较简单，计算成本低，而 QDA 模型较复杂，计算成本较高。\"]},\"526\":{\"h\":\"5. 判别分析的优势与局限性\",\"t\":[\"优势:\",\"适用于高维数据的降维和分类。\",\"理论基础扎实，尤其在类别分布近似正态分布时效果较好。\",\"计算效率高，适合处理大规模数据。\",\"局限性:\",\"对于数据的分布假设较强，如果类别之间的协方差矩阵差异较大，LDA 可能表现不佳。\",\"对异常值敏感，异常数据可能显著影响决策边界。\"]},\"527\":{\"h\":\"监督学习\",\"t\":[\"监督学习是一种机器学习方法，通过使用带有标签的数据来训练模型，使模型能够根据输入数据预测输出结果。监督学习广泛应用于分类和回归问题中，是现代人工智能系统的核心方法之一。\"]},\"528\":{\"h\":\"1. 监督学习的基本概念\",\"t\":[\"标签 (Label): 数据集中的目标值或结果，在训练过程中提供给模型。例如，在图像分类任务中，标签可能是图像所属的类别。\",\"特征 (Feature): 用于描述数据的属性或变量，输入到模型中以进行预测。例如，在房价预测中，特征可能包括房屋面积、房间数、位置等。\",\"训练集 (Training Set): 用于训练模型的数据集，包含特征和对应的标签。\",\"测试集 (Test Set): 用于评估模型性能的数据集，模型对这些数据进行预测，并将结果与实际标签进行比较。\"]},\"529\":{\"h\":\"2. 监督学习的类型\"},\"530\":{\"h\":\"(1) 分类 (Classification)\",\"t\":[\"分类是将输入数据分配到一组预定义类别中的任务。分类问题的输出通常是离散值。\",\"二元分类 (Binary Classification): 将数据分为两个类别。例如，垃圾邮件检测（邮件是垃圾邮件或不是垃圾邮件）。\",\"多类分类 (Multi-class Classification): 将数据分为多个类别。例如，图像分类（猫、狗、鸟等）。\",\"常见算法: \",\"逻辑回归 (Logistic Regression)\",\"支持向量机 (Support Vector Machine, SVM)\",\"决策树 (Decision Tree)\",\"随机森林 (Random Forest)\",\"k-近邻算法 (k-Nearest Neighbors, k-NN)\",\"神经网络 (Neural Networks)\"]},\"531\":{\"h\":\"(2) 回归 (Regression)\",\"t\":[\"回归是预测一个连续值输出的任务。例如，根据历史数据预测未来的股票价格。\",\"线性回归 (Linear Regression): 建立输入特征与输出之间的线性关系。\",\"多项式回归 (Polynomial Regression): 使用多项式函数建立输入特征与输出之间的关系。\",\"岭回归 (Ridge Regression) 和 套索回归 (Lasso Regression): 增加正则化项来防止过拟合。\",\"常见算法: \",\"线性回归\",\"支持向量回归 (Support Vector Regression, SVR)\",\"决策树回归 (Decision Tree Regression)\",\"随机森林回归 (Random Forest Regression)\",\"神经网络回归 (Neural Network Regression)\"]},\"532\":{\"h\":\"3. 监督学习的工作流程\",\"t\":[\"数据收集: 获取带有标签的训练数据。\",\"数据预处理: 处理缺失值、归一化或标准化数据、特征提取与选择等。\",\"模型选择: 根据问题类型（分类或回归）选择合适的监督学习算法。\",\"模型训练: 使用训练数据集训练模型，使模型能够从数据中学习特征与标签之间的关系。\",\"模型评估: 使用测试集评估模型的性能，常用的评估指标包括准确率、精确率、召回率、均方误差等。\",\"模型优化: 通过调整超参数、增加数据量、使用正则化等方法来改进模型性能。\",\"模型部署: 将训练好的模型应用于实际问题中，进行预测或分类。\"]},\"533\":{\"h\":\"4. 监督学习中的关键概念\",\"t\":[\"过拟合 (Overfitting): 模型在训练数据上表现很好，但在新数据上表现差。这通常是因为模型过于复杂，捕捉到了训练数据中的噪声。\",\"欠拟合 (Underfitting): 模型无法在训练数据上取得良好表现，这通常是因为模型过于简单，无法捕捉数据中的模式。\",\"交叉验证 (Cross-validation): 用于评估模型性能的技术，通过多次训练和测试分割来获得更稳健的性能估计。\",\"正则化 (Regularization): 防止过拟合的一种技术，通过在模型中增加惩罚项来约束模型复杂度。\"]},\"534\":{\"h\":\"5. 监督学习的应用场景\",\"t\":[\"图像识别: 识别图像中的物体或场景，如人脸识别、车辆识别。\",\"自然语言处理: 文本分类、情感分析、机器翻译等。\",\"金融预测: 股票价格预测、信用评分、风险管理。\",\"医疗诊断: 根据患者病历数据预测疾病、推荐治疗方案。\",\"广告推荐: 根据用户行为数据进行个性化推荐。\"]},\"535\":{\"h\":\"6. 监督学习的Python实现示例\",\"t\":[\"以下是一个简单的逻辑回归分类示例，使用Python的scikit-learn库来对鸢尾花数据集进行分类。\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # 加载数据集 iris = load_iris() X = iris.data y = iris.target # 划分训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 数据标准化 scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # 训练逻辑回归模型 model = LogisticRegression() model.fit(X_train, y_train) # 预测测试集 y_pred = model.predict(X_test) # 计算准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"模型准确率: {accuracy * 100:.2f}%\\\")\",\"这个示例展示了如何使用逻辑回归进行分类，并计算模型的准确率。\"]},\"536\":{\"h\":\"7. 监督学习的挑战与发展\",\"t\":[\"数据质量: 监督学习依赖大量标注数据，数据的质量直接影响模型的性能。\",\"模型解释性: 有些监督学习模型（如深度神经网络）具有较高的准确性，但解释性较差，难以理解其决策过程。\",\"计算资源: 复杂的监督学习模型，尤其是深度学习模型，通常需要大量的计算资源和时间进行训练。\",\"监督学习在实际应用中非常广泛，其核心在于充分利用已有的标注数据进行有效的模型训练，以解决各种实际问题。\"]},\"537\":{\"h\":\"无监督学习\",\"t\":[\"无监督学习是一种机器学习方法，用于在没有标签的情况下从数据中发现潜在的模式或结构。与监督学习不同，无监督学习不依赖预先标注的输出，而是从数据的内在结构中自动进行学习。这种方法在探索和理解数据、降维、聚类、异常检测等任务中非常有用。\"]},\"538\":{\"h\":\"1. 无监督学习的基本概念\",\"t\":[\"数据分布: 无监督学习试图从数据的分布中提取有用的信息，而无需标签或目标值。\",\"聚类 (Clustering): 将数据集划分为多个组或簇，使得同一簇中的数据点彼此相似，不同簇之间的数据点差异较大。\",\"降维 (Dimensionality Reduction): 将高维数据映射到低维空间中，同时尽可能保留数据的关键结构和信息。\"]},\"539\":{\"h\":\"2. 无监督学习的常见方法\"},\"540\":{\"h\":\"(1) 聚类分析 (Clustering)\",\"t\":[\"K-means 聚类: 将数据集分为 K 个簇，通过迭代优化，最小化簇内数据点到质心的距离平方和。\",\"优点: 简单、计算效率高，适用于大规模数据。\",\"缺点: 需要预先指定簇数 K，对初始质心敏感，不能处理非凸形状的簇。\",\"层次聚类 (Hierarchical Clustering): 构建数据的层次结构，通过合并或分裂簇逐步生成聚类。\",\"优点: 不需要指定簇数，能生成聚类树。\",\"缺点: 计算复杂度高，不适合处理大规模数据。\",\"DBSCAN (Density-Based Spatial Clustering of Applications with Noise): 基于密度的聚类方法，能够发现任意形状的簇，并识别噪声点。\",\"优点: 能处理噪声数据，适用于任意形状的簇。\",\"缺点: 对参数选择敏感（如邻域半径和最小点数）。\"]},\"541\":{\"h\":\"(2) 降维 (Dimensionality Reduction)\",\"t\":[\"主成分分析 (PCA, Principal Component Analysis): 一种线性降维方法，通过找到数据的主要方向，将高维数据投影到低维空间中。\",\"优点: 解释性强，能够最大化数据的方差。\",\"缺点: 只适用于线性关系的数据，无法捕捉非线性结构。\",\"t-SNE (t-Distributed Stochastic Neighbor Embedding): 一种非线性降维方法，特别适用于高维数据的可视化，能将高维数据投影到二维或三维空间中。\",\"优点: 能很好地捕捉数据的非线性结构，适合可视化。\",\"缺点: 计算复杂度高，难以扩展到大规模数据。\",\"独立成分分析 (ICA, Independent Component Analysis): 将数据分解为统计独立的非高斯成分，适用于信号处理中的盲源分离。\",\"优点: 能提取互不相关的信号源。\",\"缺点: 对噪声敏感，需要数据具有非高斯分布。\"]},\"542\":{\"h\":\"3. 无监督学习的应用场景\",\"t\":[\"市场细分: 在市场营销中，通过聚类分析将客户分成不同的细分市场，以便制定有针对性的营销策略。\",\"图像压缩: 通过降维技术，将高维图像数据压缩到低维空间，减少存储和计算成本。\",\"异常检测: 在工业监控、网络安全等领域，通过发现数据中的异常模式来检测潜在问题。\",\"文本分析: 在自然语言处理中，通过聚类或主题模型分析大量未标注的文本数据，发现潜在主题或类别。\"]},\"543\":{\"h\":\"4. 无监督学习的Python实现示例\",\"t\":[\"以下是一个简单的K-means聚类示例，使用Python的scikit-learn库对生成的二维数据进行聚类，并可视化聚类结果。\",\"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.datasets import make_blobs # 生成示例数据 X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0) # K-means 聚类 kmeans = KMeans(n_clusters=4) kmeans.fit(X) y_kmeans = kmeans.predict(X) # 可视化聚类结果 plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis') centers = kmeans.cluster_centers_ plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75) plt.show()\",\"这个示例展示了如何使用K-means聚类算法对数据进行分组，并通过可视化来展示聚类结果。\"]},\"544\":{\"h\":\"5. 无监督学习的优势与局限性\"},\"545\":{\"h\":\"优势\",\"t\":[\"无需标签数据: 无监督学习不需要人工标注的标签，适合处理大量未标注的数据。\",\"数据探索: 能够自动发现数据中的潜在结构和模式，帮助理解和探索数据。\",\"多样化应用: 聚类、降维、异常检测等技术在各个领域都有广泛应用。\"]},\"546\":{\"h\":\"局限性\",\"t\":[\"结果解释困难: 无监督学习的结果往往缺乏直观的解释性，难以理解其内部机制。\",\"模型选择挑战: 由于没有标签，评估和选择合适的模型变得更加困难。\",\"数据依赖性强: 无监督学习的效果高度依赖于数据的质量和分布，噪声数据可能严重影响结果。\"]},\"547\":{\"h\":\"6. 无监督学习的发展趋势\",\"t\":[\"随着大数据时代的到来，无监督学习正变得越来越重要。研究者们正在探索更多的算法来处理复杂的数据结构，例如深度学习中的自编码器（Autoencoders）和生成对抗网络（GANs）。这些技术结合无监督学习的思想，进一步提升了对数据的理解和处理能力。\"]},\"548\":{\"h\":\"python的聚类算法实现\",\"t\":[\"在Python中，可以使用scikit-learn库实现多种聚类分析算法，如K-means聚类、层次聚类、DBSCAN等。以下是几种常用聚类算法的实现示例：\"]},\"549\":{\"h\":\"1. K-means聚类\",\"t\":[\"K-means聚类是最常用的聚类算法之一，它将数据集划分为K个簇，通过迭代优化簇内数据点到质心的距离平方和。\",\"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.datasets import make_blobs # 生成示例数据 X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0) # K-means 聚类 kmeans = KMeans(n_clusters=4) kmeans.fit(X) y_kmeans = kmeans.predict(X) # 可视化聚类结果 plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis') centers = kmeans.cluster_centers_ plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75) plt.show()\"]},\"550\":{\"h\":\"2. 层次聚类 (Hierarchical Clustering)\",\"t\":[\"层次聚类可以生成一个聚类树（树状图），用于可视化数据点之间的层次关系。\",\"import matplotlib.pyplot as plt import scipy.cluster.hierarchy as shc from sklearn.datasets import make_blobs from sklearn.cluster import AgglomerativeClustering # 生成示例数据 X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0) # 绘制树状图 plt.figure(figsize=(10, 7)) plt.title(\\\"Dendrogram\\\") dend = shc.dendrogram(shc.linkage(X, method='ward')) # 层次聚类 clustering = AgglomerativeClustering(n_clusters=4) y_hc = clustering.fit_predict(X) # 可视化聚类结果 plt.figure(figsize=(10, 7)) plt.scatter(X[:, 0], X[:, 1], c=y_hc, cmap='viridis') plt.show()\"]},\"551\":{\"h\":\"3. DBSCAN聚类\",\"t\":[\"DBSCAN是一种基于密度的聚类算法，适用于发现任意形状的簇，并能够识别噪声点。\",\"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import DBSCAN from sklearn.datasets import make_moons from sklearn.preprocessing import StandardScaler # 生成示例数据 X, _ = make_moons(n_samples=300, noise=0.1) # 数据标准化 X = StandardScaler().fit_transform(X) # DBSCAN 聚类 dbscan = DBSCAN(eps=0.3, min_samples=5) y_db = dbscan.fit_predict(X) # 可视化聚类结果 plt.scatter(X[:, 0], X[:, 1], c=y_db, cmap='viridis') plt.show()\"]},\"552\":{\"h\":\"4. Gaussian Mixture Model (GMM)\",\"t\":[\"GMM是一种基于概率的聚类方法，它假设数据是由多个高斯分布混合而成的。\",\"import numpy as np import matplotlib.pyplot as plt from sklearn.mixture import GaussianMixture from sklearn.datasets import make_blobs # 生成示例数据 X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0) # 高斯混合模型 gmm = GaussianMixture(n_components=4) gmm.fit(X) y_gmm = gmm.predict(X) # 可视化聚类结果 plt.scatter(X[:, 0], X[:, 1], c=y_gmm, s=50, cmap='viridis') plt.show()\"]},\"553\":{\"h\":\"5. 选择适合的聚类算法\",\"t\":[\"每种聚类算法都有其适用场景：\",\"K-means: 适用于形状规则、簇大小相似的数据。\",\"层次聚类: 用于需要层次关系或不知道簇数的数据。\",\"DBSCAN: 适用于含有噪声、形状不规则的簇。\",\"GMM: 适用于可以通过混合多个高斯分布建模的数据。\"]},\"554\":{\"h\":\"MATLAB实现聚类算法\",\"t\":[\"在MATLAB中，聚类分析可以使用内置函数实现。以下是几种常用聚类算法的MATLAB实现示例，包括K-means聚类、层次聚类和DBSCAN。\"]},\"555\":{\"h\":\"1. K-means聚类\",\"t\":[\"K-means聚类是MATLAB中的一个常用算法，可以使用kmeans函数来实现。\",\"% 生成示例数据 rng(1); % 设置随机种子 X = [randn(100,2)*0.75+ones(100,2); randn(100,2)*0.5-ones(100,2); randn(100,2)*0.75]; % 使用K-means进行聚类 k = 3; % 设定簇的数量 [idx, C] = kmeans(X, k); % 可视化聚类结果 figure; gscatter(X(:,1), X(:,2), idx, 'rgb', 'o'); hold on; plot(C(:,1), C(:,2), 'kx', 'MarkerSize', 15, 'LineWidth', 3); title('K-means Clustering'); legend('Cluster 1','Cluster 2','Cluster 3', 'Centroids', 'Location','Best'); hold off;\"]},\"556\":{\"h\":\"2. 层次聚类 (Hierarchical Clustering)\",\"t\":[\"在MATLAB中，层次聚类可以使用linkage和cluster函数实现，并使用dendrogram函数生成树状图。\",\"% 生成示例数据 rng(2); % 设置随机种子 X = [randn(100,2)*0.75+ones(100,2); randn(100,2)*0.5-ones(100,2); randn(100,2)*0.75]; % 计算数据点之间的距离 Y = pdist(X); % 使用Ward法进行层次聚类 Z = linkage(Y, 'ward'); % 绘制树状图 figure; dendrogram(Z); title('Hierarchical Clustering Dendrogram'); % 选择簇的数量 k = 3; T = cluster(Z, 'maxclust', k); % 可视化聚类结果 figure; gscatter(X(:,1), X(:,2), T, 'rgb', 'o'); title('Hierarchical Clustering'); legend('Cluster 1','Cluster 2','Cluster 3', 'Location','Best');\"]},\"557\":{\"h\":\"3. DBSCAN聚类\",\"t\":[\"MATLAB提供了dbscan函数用于密度聚类分析。\",\"% 生成示例数据 rng(3); % 设置随机种子 X = [randn(100,2)*0.75+ones(100,2); randn(100,2)*0.5-ones(100,2); randn(100,2)*0.75]; % 使用DBSCAN进行聚类 epsilon = 0.5; % 邻域半径 minpts = 5; % 最小样本数 [idx, corepts] = dbscan(X, epsilon, minpts); % 可视化聚类结果 figure; gscatter(X(:,1), X(:,2), idx, 'rgb', 'o'); hold on; plot(X(corepts,1), X(corepts,2), 'kx', 'MarkerSize', 15, 'LineWidth', 3); title('DBSCAN Clustering'); legend('Cluster 1','Cluster 2','Cluster 3', 'Core Points', 'Location','Best'); hold off;\"]},\"558\":{\"h\":\"4. Gaussian Mixture Model (GMM)\",\"t\":[\"Gaussian Mixture Model 可以通过MATLAB的fitgmdist函数来实现。\",\"% 生成示例数据 rng(4); % 设置随机种子 X = [randn(100,2)*0.75+ones(100,2); randn(100,2)*0.5-ones(100,2); randn(100,2)*0.75]; % 使用GMM进行聚类 k = 3; % 设定混合成分数量 GMModel = fitgmdist(X, k); % 使用GMM进行数据点的分类 idx = cluster(GMModel, X); % 可视化聚类结果 figure; gscatter(X(:,1), X(:,2), idx, 'rgb', 'o'); hold on; plot(GMModel.mu(:,1), GMModel.mu(:,2), 'kx', 'MarkerSize', 15, 'LineWidth', 3); title('Gaussian Mixture Model Clustering'); legend('Cluster 1','Cluster 2','Cluster 3', 'Centroids', 'Location','Best'); hold off;\"]},\"559\":{\"h\":\"总结\",\"t\":[\"K-means: 适合处理形状规则且均匀分布的簇。\",\"层次聚类: 适用于发现层次结构并生成树状图。\",\"DBSCAN: 能发现任意形状的簇，适合处理含噪声的数据。\",\"GMM: 基于概率模型，适合处理分布复杂的数据。\"]},\"560\":{\"h\":\"S型聚类和R型聚类\",\"t\":[\"S型聚类和R型聚类是聚类分析中的两个不同类型，用于不同的聚类目标。它们主要用于多维数据分析，尤其是在社会科学和心理学研究中比较常见。\"]},\"561\":{\"h\":\"1. S型聚类 (Subject Clustering)\",\"t\":[\"定义: S型聚类，又称为样本聚类或个体聚类，是指对观测样本（个体或对象）进行聚类分析。在S型聚类中，我们关注的是如何根据变量值将样本分成若干簇，以便在每个簇中，样本之间的差异最小，而不同簇之间的差异最大。\",\"应用: S型聚类常用于将消费者、病人、学生等分为不同的组，这些组内的个体具有相似的特征。\",\"示例:\",\"在市场细分中，S型聚类可以将消费者分成不同的组，便于制定有针对性的营销策略。\",\"在医学研究中，可以根据病人特征将其分为不同组，以研究不同病人群体的治疗反应。\"]},\"562\":{\"h\":\"2. R型聚类 (Variable Clustering)\",\"t\":[\"定义: R型聚类，又称为变量聚类，是指对变量进行聚类分析。在R型聚类中，我们关注的是如何将具有相似模式的变量分组。R型聚类的目的是将相似的变量组合在一起，从而减少维度或识别变量之间的潜在结构。\",\"应用: R型聚类常用于数据降维、特征选择、变量归类等场景。\",\"示例:\",\"在心理学研究中，可以将相关的问卷题目归为同一组，帮助理解潜在的心理因素。\",\"在经济学研究中，可以将相关的经济指标归类，以便分析不同指标对经济现象的共同影响。\"]},\"563\":{\"h\":\"3. S型聚类和R型聚类的关系\",\"t\":[\"对象: S型聚类关注的是样本之间的关系，而R型聚类关注的是变量之间的关系。\",\"目的: S型聚类主要用于分类或分组不同的样本，而R型聚类则用于识别和分组相关的变量。\",\"算法: 两种聚类可以使用类似的算法，但应用的对象不同。例如，K-means聚类既可以用于S型聚类（对样本聚类），也可以用于R型聚类（对变量聚类）。\"]},\"564\":{\"h\":\"4. 实现方法\",\"t\":[\"在实际应用中，可以使用类似的聚类算法来实现S型聚类和R型聚类，但数据的输入矩阵不同：\",\"S型聚类: 输入矩阵通常是(n \\\\times p)，其中(n)是样本数量，(p)是变量数量。算法聚类的是样本。\",\"R型聚类: 输入矩阵通常是(p \\\\times n)，或对(n \\\\times p)矩阵进行转置。算法聚类的是变量。\"]},\"565\":{\"h\":\"MATLAB 实现示例\",\"t\":[\"以下是如何在MATLAB中实现S型聚类和R型聚类的简单示例：\",\"S型聚类:\",\"% 生成示例数据 rng(1); data = rand(100, 5); % 100个样本，每个样本有5个变量 % 对样本进行聚类 Z = linkage(data, 'ward'); T = cluster(Z, 'maxclust', 3); % 假设我们希望聚类为3组 % 绘制树状图 dendrogram(Z);\",\"R型聚类:\",\"% 生成示例数据 rng(1); data = rand(100, 5); % 100个样本，每个样本有5个变量 % 对变量进行聚类，转置矩阵以对变量进行聚类 Z = linkage(data', 'ward'); T = cluster(Z, 'maxclust', 2); % 假设我们希望聚类为2组 % 绘制树状图 dendrogram(Z);\"]},\"566\":{\"h\":\"5. 总结\",\"t\":[\"S型聚类: 侧重于分析样本之间的相似性，常用于分类样本。\",\"R型聚类: 侧重于分析变量之间的相似性，常用于变量归类和降维。\"]},\"567\":{\"h\":\"python的判断分析算法实现\",\"t\":[\"判别分析（Discriminant Analysis）是一种用于分类的监督学习算法。常用的判别分析方法包括线性判别分析（LDA, Linear Discriminant Analysis）和二次判别分析（QDA, Quadratic Discriminant Analysis）。这些方法通常用于分类任务中，比如识别不同类别的样本。\",\"下面介绍如何使用Python和scikit-learn库来实现线性判别分析（LDA）和二次判别分析（QDA）算法。\"]},\"568\":{\"h\":\"1. 线性判别分析 (LDA)\",\"t\":[\"LDA用于寻找能够最有效地分开不同类别的线性组合。它假设各类的协方差矩阵相同。\"]},\"569\":{\"h\":\"示例代码：\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.discriminant_analysis import LinearDiscriminantAnalysis from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建LDA模型并进行训练 lda = LinearDiscriminantAnalysis() lda.fit(X_train, y_train) # 对测试集进行预测 y_pred = lda.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of LDA: {accuracy:.2f}\\\") # 绘制LDA投影结果（仅使用前两维数据进行可视化） X_lda = lda.transform(X) plt.figure(figsize=(8, 6)) plt.scatter(X_lda[:, 0], X_lda[:, 1], c=y, cmap='viridis', edgecolor='k', s=50) plt.title('LDA Projection') plt.xlabel('LD1') plt.ylabel('LD2') plt.show()\"]},\"570\":{\"h\":\"2. 二次判别分析 (QDA)\",\"t\":[\"QDA是LDA的扩展版本，它允许每个类别有不同的协方差矩阵，因此可以更好地适应数据的复杂性。\"]},\"571\":{\"h\":\"示例代码：\",\"t\":[\"import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建QDA模型并进行训练 qda = QuadraticDiscriminantAnalysis() qda.fit(X_train, y_train) # 对测试集进行预测 y_pred = qda.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of QDA: {accuracy:.2f}\\\")\"]},\"572\":{\"h\":\"3. 判别分析的应用场景\",\"t\":[\"分类问题: 判别分析用于分类问题，尤其是在数据服从多元正态分布的情况下表现良好。\",\"特征提取: LDA还可以用于降维，在保持类别可分性的同时减少特征的维数。\"]},\"573\":{\"h\":\"4. 总结\",\"t\":[\"线性判别分析 (LDA): 适用于假设各类的协方差矩阵相同的情况，可以用于二分类和多分类任务。\",\"二次判别分析 (QDA): 适用于各类的协方差矩阵不同的情况，适应性更强，但也更容易过拟合。\",\"通过scikit-learn库，你可以轻松实现这些判别分析算法，并在你的分类任务中应用它们。\"]},\"574\":{\"h\":\"机器学习的分类问题\",\"t\":[\"分类问题是监督学习中的一个重要任务，涉及将数据点分配到预定义的类别或标签中。分类问题在许多领域都有广泛应用，如图像识别、文本分类、医学诊断等。\"]},\"575\":{\"h\":\"分类问题的基本概念\",\"t\":[\"目标: 预测数据点属于哪个类别。分类问题的输出是一个离散的标签或类别。\",\"输入: 数据点的特征（属性或变量）。\",\"输出: 类别标签（如“正面”或“负面”，“猫”或“狗”）。\"]},\"576\":{\"h\":\"常见分类算法\",\"t\":[\"以下是一些常用的分类算法，每种算法适用于不同类型的数据和问题：\"]},\"577\":{\"h\":\"1. 逻辑回归 (Logistic Regression)\",\"t\":[\"逻辑回归是一种用于二分类问题的线性模型，它通过对特征的线性组合进行Sigmoid变换，输出预测概率。\",\"Python 实现示例:\",\"import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建逻辑回归模型并进行训练 model = LogisticRegression() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Logistic Regression: {accuracy:.2f}\\\")\"]},\"578\":{\"h\":\"2. 支持向量机 (SVM)\",\"t\":[\"支持向量机通过寻找一个最佳的超平面将不同类别的样本分开，适用于线性和非线性分类问题。\",\"Python 实现示例:\",\"import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.svm import SVC from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建SVM模型并进行训练 model = SVC(kernel='linear') model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of SVM: {accuracy:.2f}\\\")\"]},\"579\":{\"h\":\"3. 决策树 (Decision Tree)\",\"t\":[\"决策树通过将数据集划分为若干个子集，形成树状结构，用于分类任务。\",\"Python 实现示例:\",\"import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建决策树模型并进行训练 model = DecisionTreeClassifier() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Decision Tree: {accuracy:.2f}\\\")\"]},\"580\":{\"h\":\"4. 随机森林 (Random Forest)\",\"t\":[\"随机森林是决策树的集成方法，通过构建多棵决策树并结合它们的预测结果来提高分类性能。\",\"Python 实现示例:\",\"import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建随机森林模型并进行训练 model = RandomForestClassifier() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Random Forest: {accuracy:.2f}\\\")\"]},\"581\":{\"h\":\"5. K-近邻算法 (K-Nearest Neighbors, KNN)\",\"t\":[\"K-近邻算法通过计算样本与其最近邻居的距离来进行分类。\",\"Python 实现示例:\",\"import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建KNN模型并进行训练 model = KNeighborsClassifier(n_neighbors=5) model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of K-Nearest Neighbors: {accuracy:.2f}\\\")\"]},\"582\":{\"h\":\"分类问题的评价指标\",\"t\":[\"准确率 (Accuracy): 正确预测的样本占总样本的比例。\",\"精确率 (Precision): 预测为正样本中实际为正样本的比例。\",\"召回率 (Recall): 实际为正样本中被正确预测为正样本的比例。\",\"F1-分数 (F1 Score): 精确率和召回率的调和平均数，适用于类别不平衡的问题。\",\"ROC曲线和AUC值: 评估模型在不同分类阈值下的性能。\"]},\"583\":{\"h\":\"总结\",\"t\":[\"分类问题是机器学习中的核心任务之一，涉及将数据点分配到不同的类别。使用适当的分类算法和评价指标，可以有效地解决各种分类问题。通过scikit-learn等库，Python为实现这些算法提供了丰富的工具和资源。\"]},\"584\":{\"h\":\"模式识别\",\"t\":[\"模式识别（Pattern Recognition）是人工智能和机器学习中的一个关键领域，涉及从数据中识别和分类模式。它的目标是从输入数据中自动识别模式或规律，并将其分类为预定义的类别。模式识别在图像处理、语音识别、文本分析等领域有广泛应用。\"]},\"585\":{\"h\":\"模式识别的基本流程\",\"t\":[\"数据采集: 收集和准备数据，数据可以是图像、文本、音频等形式。\",\"特征提取: 从原始数据中提取有用的特征或信息。这些特征是描述数据的关键属性。\",\"模式识别: 应用分类算法或模式匹配方法对特征进行分析和分类。\",\"决策与输出: 基于识别结果做出决策或输出分类结果。\"]},\"586\":{\"h\":\"常用的模式识别方法\",\"t\":[\"分类算法: 通过训练模型对数据进行分类。常见的分类算法包括：\",\"支持向量机 (SVM): 尝试找到一个最佳的超平面将不同类别分开。\",\"决策树: 使用树状结构进行分类。\",\"K-近邻 (KNN): 通过计算样本与最近邻居的距离进行分类。\",\"神经网络 (NN): 模拟神经元之间的连接进行学习和分类。\",\"聚类算法: 将数据分成不同的簇，簇内的数据点相似度高。常见的聚类算法包括：\",\"K-means: 将数据分成K个簇，最小化簇内点的距离。\",\"DBSCAN: 基于密度的聚类算法，能够发现任意形状的簇。\",\"层次聚类: 构建树状结构来组织数据。\",\"特征提取方法: 从数据中提取特征用于进一步分析。常见的特征提取方法包括：\",\"主成分分析 (PCA): 降维技术，用于减少特征数量。\",\"线性判别分析 (LDA): 提取有助于分类的特征。\",\"模型评估和验证: 评估模型的性能和泛化能力。常用的评估指标包括：\",\"准确率: 正确分类的比例。\",\"精确率和召回率: 对分类结果的详细分析。\",\"ROC曲线和AUC: 评估分类模型的性能。\"]},\"587\":{\"h\":\"Python 实现模式识别的示例\",\"t\":[\"以下是一些常见模式识别任务在Python中的实现示例：\"]},\"588\":{\"h\":\"1. 图像分类（使用支持向量机）\",\"t\":[\"from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.svm import SVC from sklearn.metrics import accuracy_score # 加载示例数据集（手写数字数据集） digits = datasets.load_digits() X = digits.data y = digits.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建SVM模型并进行训练 model = SVC(gamma=0.001) model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of SVM on digits dataset: {accuracy:.2f}\\\")\"]},\"589\":{\"h\":\"2. 文本分类（使用朴素贝叶斯）\",\"t\":[\"from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score # 示例文本数据和标签 texts = [\\\"I love programming\\\", \\\"Python is great\\\", \\\"I hate bugs\\\", \\\"Machine learning is interesting\\\"] labels = [1, 1, 0, 1] # 1: Positive, 0: Negative # 特征提取 vectorizer = CountVectorizer() X = vectorizer.fit_transform(texts) y = labels # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建朴素贝叶斯模型并进行训练 model = MultinomialNB() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Naive Bayes on text data: {accuracy:.2f}\\\")\"]},\"590\":{\"h\":\"3. 图像特征提取（使用主成分分析）\",\"t\":[\"import numpy as np from sklearn import datasets from sklearn.decomposition import PCA import matplotlib.pyplot as plt # 加载示例数据集（手写数字数据集） digits = datasets.load_digits() X = digits.data y = digits.target # 创建PCA模型并进行特征降维 pca = PCA(n_components=2) X_pca = pca.fit_transform(X) # 可视化PCA结果 plt.figure(figsize=(8, 6)) scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis') plt.colorbar(scatter) plt.title('PCA of Digits Dataset') plt.xlabel('Principal Component 1') plt.ylabel('Principal Component 2') plt.show()\"]},\"591\":{\"h\":\"总结\",\"t\":[\"模式识别: 旨在从数据中识别模式并进行分类，广泛应用于图像、文本、音频等领域。\",\"算法选择: 根据数据特征和任务需求选择合适的分类、聚类、特征提取算法。\",\"Python工具: scikit-learn、numpy、matplotlib等库提供了强大的工具来实现模式识别任务。\",\"模式识别在机器学习和数据分析中扮演着重要角色，通过合适的算法和工具，可以从数据中提取有价值的信息并做出决策。\"]},\"592\":{\"h\":\"机器学习的算法\",\"t\":[\"机器学习算法有很多种，通常可以根据学习方式、任务类型和应用场景进行分类。以下是一些主要的机器学习算法类别和各类别中的常见算法：\"]},\"593\":{\"h\":\"1.\",\"t\":[\"监督学习是指模型在训练时需要提供已标注的训练数据，通过学习输入与输出之间的映射关系来进行预测。主要用于分类和回归任务。\",\"分类算法（用于离散标签的预测）\",\"逻辑回归（Logistic Regression）\",\"k-近邻算法（K-Nearest Neighbors, KNN）\",\"支持向量机（Support Vector Machine, SVM）\",\"决策树（Decision Tree）\",\"随机森林（Random Forest）\",\"朴素贝叶斯（Naive Bayes）\",\"神经网络（Neural Networks）\",\"梯度提升机（Gradient Boosting Machines, GBM）\",\"极限梯度提升（Extreme Gradient Boosting, XGBoost）\",\"回归算法（用于连续值的预测）\",\"线性回归（Linear Regression）\",\"岭回归（Ridge Regression）\",\"LASSO回归（LASSO Regression）\",\"弹性网回归（Elastic Net Regression）\",\"决策树回归（Decision Tree Regression）\",\"支持向量回归（Support Vector Regression, SVR）\",\"多层感知器回归（MLP Regression）\"]},\"594\":{\"h\":\"2.\",\"t\":[\"无监督学习算法用于处理未标注的数据，通过挖掘数据的内在结构进行分析和建模。主要用于聚类和降维任务。\",\"聚类算法\",\"k-均值聚类（K-Means Clustering）\",\"层次聚类（Hierarchical Clustering）\",\"DBSCAN（Density-Based Spatial Clustering of Applications with Noise）\",\"高斯混合模型（Gaussian Mixture Model, GMM）\",\"谱聚类（Spectral Clustering）\",\"降维算法\",\"主成分分析（Principal Component Analysis, PCA）\",\"线性判别分析（Linear Discriminant Analysis, LDA）\",\"独立成分分析（Independent Component Analysis, ICA）\",\"t-SNE（t-Distributed Stochastic Neighbor Embedding）\",\"UMAP（Uniform Manifold Approximation and Projection）\"]},\"595\":{\"h\":\"3.\",\"t\":[\"半监督学习结合了监督学习和无监督学习，利用少量标注数据和大量未标注数据来进行模型训练。\",\"自训练算法（Self-training）\",\"生成对抗网络（Generative Adversarial Networks, GANs）\",\"图形卷积网络（Graph Convolutional Networks, GCNs）\"]},\"596\":{\"h\":\"4.\",\"t\":[\"强化学习通过智能体在环境中不断试探性地进行动作，并根据奖励信号来调整策略以最大化累计奖励。常用于游戏AI、自动驾驶等领域。\",\"Q学习（Q-Learning）\",\"深度Q网络（Deep Q-Network, DQN）\",\"策略梯度方法（Policy Gradient Methods）\",\"近端策略优化（Proximal Policy Optimization, PPO）\",\"优势演员-评论家（Advantage Actor-Critic, A2C/A3C）\"]},\"597\":{\"h\":\"5.\",\"t\":[\"集成学习通过结合多个基学习器的预测结果来提高模型的泛化能力，主要用于提高模型性能和稳健性。\",\"袋装法（Bagging） \",\"随机森林（Random Forest）\",\"提升法（Boosting） \",\"梯度提升决策树（Gradient Boosted Decision Trees, GBDT）\",\"极限梯度提升（XGBoost）\",\"LightGBM\",\"CatBoost\",\"堆叠法（Stacking）\"]},\"598\":{\"h\":\"6.\",\"t\":[\"深度学习是神经网络的一种形式，通过多层网络结构来提取数据中的复杂特征。深度学习在图像处理、自然语言处理、语音识别等领域有广泛应用。\",\"卷积神经网络（Convolutional Neural Networks, CNNs）\",\"循环神经网络（Recurrent Neural Networks, RNNs）\",\"长短期记忆网络（Long Short-Term Memory, LSTM）\",\"生成对抗网络（Generative Adversarial Networks, GANs）\",\"自编码器（Autoencoders）\",\"变分自编码器（Variational Autoencoders, VAEs）\",\"Transformer（用于自然语言处理）\",\"深度信念网络（Deep Belief Networks, DBNs）\"]},\"599\":{\"h\":\"7.\",\"t\":[\"推荐算法用于为用户提供个性化的建议，常见于电商、流媒体等平台。\",\"协同过滤（Collaborative Filtering）\",\"矩阵分解（Matrix Factorization）\",\"隐语义模型（Latent Factor Models）\",\"基于内容的推荐（Content-Based Filtering）\",\"这些算法各自适用于不同的应用场景，选择合适的算法通常取决于具体的任务需求、数据特性和计算资源。\"]},\"600\":{\"h\":\"机器学习算法实现\",\"t\":[\"Python 是实现机器学习算法的一个非常流行的编程语言，它提供了大量的库和工具，使得实现各种机器学习算法变得更加便捷。以下是一些常见的机器学习算法的 Python 实现示例，使用了 scikit-learn 这个广泛使用的机器学习库。\"]},\"601\":{\"h\":\"1. 逻辑回归（Logistic Regression）\",\"t\":[\"逻辑回归是用于二分类问题的线性模型，它通过对特征的线性组合进行Sigmoid变换，输出预测概率。\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建逻辑回归模型并进行训练 model = LogisticRegression() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Logistic Regression: {accuracy:.2f}\\\")\"]},\"602\":{\"h\":\"2. 支持向量机（SVM）\",\"t\":[\"支持向量机通过寻找一个最佳的超平面将不同类别的样本分开，适用于线性和非线性分类问题。\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.svm import SVC from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建SVM模型并进行训练 model = SVC(kernel='linear') model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of SVM: {accuracy:.2f}\\\")\"]},\"603\":{\"h\":\"3. 决策树（Decision Tree）\",\"t\":[\"决策树通过将数据集划分为若干个子集，形成树状结构，用于分类任务。\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建决策树模型并进行训练 model = DecisionTreeClassifier() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Decision Tree: {accuracy:.2f}\\\")\"]},\"604\":{\"h\":\"4. 随机森林（Random Forest）\",\"t\":[\"随机森林是决策树的集成方法，通过构建多棵决策树并结合它们的预测结果来提高分类性能。\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建随机森林模型并进行训练 model = RandomForestClassifier() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Random Forest: {accuracy:.2f}\\\")\"]},\"605\":{\"h\":\"5. K-近邻算法（K-Nearest Neighbors, KNN）\",\"t\":[\"K-近邻算法通过计算样本与其最近邻居的距离来进行分类。\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 将多分类问题转化为二分类问题（这里只取前两类） X, y = X[y != 2], y[y != 2] # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建KNN模型并进行训练 model = KNeighborsClassifier(n_neighbors=5) model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of K-Nearest Neighbors: {accuracy:.2f}\\\")\"]},\"606\":{\"h\":\"6. 线性回归（Linear Regression）\",\"t\":[\"线性回归用于预测连续值，基于输入特征的线性组合来预测输出。\",\"from sklearn.datasets import load_boston from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error # 加载示例数据集（波士顿房价数据集） data = load_boston() X = data.data y = data.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建线性回归模型并进行训练 model = LinearRegression() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的均方误差 mse = mean_squared_error(y_test, y_pred) print(f\\\"Mean Squared Error of Linear Regression: {mse:.2f}\\\")\"]},\"607\":{\"h\":\"7. 朴素贝叶斯（Naive Bayes）\",\"t\":[\"朴素贝叶斯是一种基于贝叶斯定理的简单而强大的分类器，适用于文本分类等任务。\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建朴素贝叶斯模型并进行训练 model = GaussianNB() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Naive Bayes: {accuracy:.2f}\\\")\"]},\"608\":{\"h\":\"8. 神经网络（Neural Networks）\",\"t\":[\"可以使用 scikit-learn 实现简单的多层感知器（MLP），或者使用 TensorFlow/Keras 实现更复杂的神经网络。\",\"使用 scikit-learn 实现简单神经网络：\",\"from sklearn.datasets import load_digits from sklearn.model_selection import train_test_split from sklearn.neural_network import MLPClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（手写数字数据集） digits = load_digits() X = digits.data y = digits.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建神经网络模型并进行训练 model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500) model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Neural Network: {accuracy:.2f}\\\")\",\"使用 TensorFlow/Keras 实现复杂神经网络：\",\"import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense from sklearn.datasets import load_digits from sklearn.model_selection import train_test_split from sklearn.preprocessing import OneHotEncoder # 加载示例数据集（手写数字数据集） digits = load_digits() X = digits.data y = digits.target # One-Hot 编码标签 encoder = OneHotEncoder(sparse=False) y = encoder.fit_transform(y.reshape(-1, 1)) # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建神经网络模型 model = Sequential([ Dense(64, activation='relu', input_shape=(X_train.shape[1],)), Dense(64, activation='relu'), Dense(y_train.shape[1], activation='softmax') ]) # 编译模型 model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # 训练模型 model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2) # 评估模型 loss, accuracy = model.evaluate(X_test, y_test) print(f\\\"Accuracy of Neural Network: {accuracy:.2f}\\\")\"]},\"609\":{\"h\":\"9. 梯度提升机（Gradient Boosting Machine, GBM）\",\"t\":[\"可以使用 scikit-learn 或 XGBoost 等库来实现梯度提升机。\",\"使用 scikit-learn 实现梯度提升机：\",\"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.ensemble import GradientBoostingClassifier from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建梯度提升机模型并进行训练 model = GradientBoostingClassifier() model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of Gradient Boosting: {accuracy:.2f}\\\")\",\"使用 XGBoost 实现梯度提升机：\",\"import xgboost as xgb from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score # 加载示例数据集（鸢尾花数据集） data = load_iris() X = data.data y = data.target # 分割数据集为训练集和测试集 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 创建XGBoost模型并进行训练 model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss') model.fit(X_train, y_train) # 对测试集进行预测 y_pred = model.predict(X_test) # 输出预测的准确率 accuracy = accuracy_score(y_test, y_pred) print(f\\\"Accuracy of XGBoost: {accuracy:.2f}\\\")\"]},\"610\":{\"h\":\"10. 卷积神经网络（Convolutional Neural Network, CNN）\",\"t\":[\"卷积神经网络特别适用于图像数据的处理，可以使用 TensorFlow/Keras 实现。\",\"import tensorflow as tf from tensorflow.keras import layers, models from tensorflow.keras.datasets import mnist from tensorflow.keras.utils import to_categorical # 加载并预处理数据集（MNIST手写数字数据集） (X_train, y_train), (X_test, y_test) = mnist.load_data() X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32') / 255 X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32') / 255 y_train = to_categorical(y_train) y_test = to_categorical(y_test) # 创建卷积神经网络模型 model = models.Sequential([ layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)), layers.MaxPooling2D((2, 2)), layers.Conv2D(64, (3, 3), activation='relu'), layers.MaxPooling2D((2, 2)), layers.Conv2D(64, (3, 3), activation='relu'), layers.Flatten(), layers.Dense(64, activation='relu'), layers.Dense(10, activation='softmax') ]) # 编译模型 model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # 训练模型 model.fit(X_train, y_train, epochs=5, batch_size=64, validation_split=0.2) # 评估模型 test_loss, test_acc = model.evaluate(X_test, y_test) print(f\\\"Accuracy of CNN: {test_acc:.2f}\\\")\"]},\"611\":{\"c\":[\"数学建模\"]},\"612\":{\"c\":[\"数学建模\"]},\"613\":{\"h\":\"主成分分析\"},\"614\":{\"h\":\"数据维度和降维\",\"t\":[\"数据维度指的是数据集中的特征数量或变量数量。每个特征都可以看作一个维度，因此如果一个数据集有 n 个特征，那么这个数据集可以被认为是处于 n 维空间中。例如，在一个包含三个特征（如高度、体重和年龄）的数据集里，每个数据点可以表示为三维空间中的一个点。\",\"降维（Dimensionality Reduction）是将高维数据映射到低维空间的过程，同时尽可能保留原始数据的重要信息。降维的主要目的是：\",\"减少计算复杂度：高维数据在处理时往往需要更多的计算资源，通过降维可以减少计算时间和存储空间。\",\"消除噪声：高维数据中可能包含一些对最终分析没有贡献的特征，通过降维可以去除这些无关或噪声特征。\",\"提高模型性能：某些情况下，模型在低维数据上表现得更好，因为降维后数据的结构可能更加简单明了。\",\"可视化：降维能将数据映射到2D或3D空间，便于数据的可视化和直观理解。\",\"常见的降维方法有：\",\"主成分分析 (PCA)：通过将数据投影到主成分方向上，保留最大方差的维度。\",\"线性判别分析 (LDA)：通过最大化类间方差与类内方差之比来寻找最优投影方向。\",\"t-SNE：一种非线性降维技术，常用于将高维数据降到2D或3D，以便于可视化。\",\"UMAP：一种快速且强大的非线性降维方法，特别适合大型数据集的可视化。\",\"降维在数据分析、机器学习、图像处理等多个领域都有广泛应用。\"]},\"615\":{\"h\":\"主成分分析\",\"t\":[\"主成分分析（Principal Component Analysis，PCA）是一种广泛使用的降维技术，用于从高维数据中提取重要信息，同时减少数据的维度。PCA 通过线性变换将原始特征转换为一组新的不相关特征（称为主成分），这些主成分能够解释数据中尽可能多的方差。\"]},\"616\":{\"h\":\"PCA 的基本步骤\",\"t\":[\"标准化数据：\",\"因为不同特征的量纲可能不同，因此需要对每个特征进行标准化处理（如减去均值后除以标准差），使得所有特征具有相同的量级。\",\"计算协方差矩阵：\",\"协方差矩阵描述了数据集不同特征之间的关系。它的计算公式为：\",\"Σ=n−11​XTX 其中 X 是标准化后的数据矩阵，n 是样本数量。\",\"计算协方差矩阵的特征值和特征向量：\",\"特征值和特征向量分别表示数据的方差及其在特征空间中的方向。特征值越大，表示对应的特征向量方向上数据的方差越大。\",\"选择主成分：\",\"根据特征值的大小，对应的特征向量被称为主成分。通常选择前几个特征值最大的主成分作为新特征空间的基底。选择多少主成分取决于你希望保留的数据方差比例。\",\"转换数据：\",\"最后，将原始数据投影到选择的主成分上，从而获得降维后的数据。\"]},\"617\":{\"h\":\"PCA 的特点和应用\",\"t\":[\"无监督学习：PCA 是一种无监督学习算法，因为它不依赖于任何标签信息，仅基于数据的特征结构进行降维。\",\"解释性：PCA 使得我们能够理解数据的结构，例如哪个主成分在多大程度上解释了数据的变化。\",\"可视化：PCA 常用于高维数据的可视化，通过将数据映射到2D或3D空间，使数据结构更加直观。\"]},\"618\":{\"h\":\"示例\",\"t\":[\"假设你有一个数据集，包含 m 个样本和 n 个特征。应用 PCA 后，你可能发现前两个主成分解释了数据总方差的80%，因此你可以选择这两个主成分来减少维度，并将数据从 n 维空间投影到2D空间进行可视化。\"]},\"619\":{\"h\":\"使用 Python 进行 PCA\",\"t\":[\"在 Python 中，你可以使用 scikit-learn 库中的 PCA 类来执行主成分分析。以下是一个简单的示例代码：\",\"from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np # 假设 X 是你的数据矩阵，大小为 (m, n) X = np.array([[...], [...], ...]) # 1. 数据标准化 scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # 2. 创建 PCA 对象并拟合数据 pca = PCA(n_components=2) # 保留前两个主成分 X_pca = pca.fit_transform(X_scaled) # 3. 查看主成分解释的方差比例 explained_variance = pca.explained_variance_ratio_ print(f'Explained variance ratio: {explained_variance}')\"]},\"620\":{\"h\":\"优缺点\",\"t\":[\"优点：\",\"能够有效地降低数据维度，减少计算复杂度。\",\"通过最大化方差保留数据的最重要信息。\",\"可以消除特征之间的相关性，生成的主成分是互不相关的。\",\"缺点：\",\"PCA 是一种线性方法，对非线性关系无法很好地处理。\",\"主成分可能难以解释，因为它们是原始特征的线性组合。\",\"数据的方差可能集中在一个维度中，从而可能会忽略其他潜在重要的信息。\",\"PCA 是一种强大的工具，适用于各种数据分析场景，尤其是在处理高维数据时。\"]},\"621\":{\"h\":\"python实现主成分数据降维\",\"t\":[\"为了实现PCA数据降维，并动态模拟降维过程，你可以使用Python中的scikit-learn和matplotlib库。以下是一个完整的示例代码，它包括了PCA降维的实现以及动态模拟降维过程的可视化。\"]},\"622\":{\"h\":\"1. 导入必要的库\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt from sklearn.decomposition import PCA from sklearn.datasets import make_blobs from mpl_toolkits.mplot3d import Axes3D import matplotlib.animation as animation\"]},\"623\":{\"h\":\"2. 生成示例数据\",\"t\":[\"这里我们生成一个三维的样本数据集，这样可以更直观地看到降维过程。\",\"# 生成样本数据 X, _ = make_blobs(n_samples=100, n_features=3, centers=1, random_state=42) # 绘制原始3D数据 fig = plt.figure() ax = fig.add_subplot(111, projection='3d') ax.scatter(X[:, 0], X[:, 1], X[:, 2]) ax.set_title('Original 3D Data') plt.show()\"]},\"624\":{\"h\":\"3. 实现PCA并逐步降维\",\"t\":[\"在这个步骤中，我们将逐步计算主成分并可视化数据在降维过程中的变化。\",\"# 标准化数据 X_mean = np.mean(X, axis=0) X_centered = X - X_mean # 计算协方差矩阵 cov_matrix = np.cov(X_centered.T) # 计算协方差矩阵的特征值和特征向量 eigenvalues, eigenvectors = np.linalg.eig(cov_matrix) # 对特征值排序并选择前两个主成分 sorted_indices = np.argsort(eigenvalues)[::-1] sorted_eigenvectors = eigenvectors[:, sorted_indices] pca_components = sorted_eigenvectors[:, :2] # 动态模拟降维过程 fig, ax = plt.subplots() ax.set_xlim(-10, 10) ax.set_ylim(-10, 10) sc = ax.scatter(X[:, 0], X[:, 1]) def update(frame): # 在第 frame 步时，计算投影到第 frame 个主成分的结果 projected_data = X_centered @ sorted_eigenvectors[:, :frame+1] sc.set_offsets(projected_data) ax.set_title(f'Dimension: {frame+1}') return sc, ani = animation.FuncAnimation(fig, update, frames=2, repeat=False) plt.show()\"]},\"625\":{\"h\":\"4. 可视化完整的降维过程\",\"t\":[\"最后，将数据投影到前两个主成分上，并可视化最终结果。\",\"# 投影到前两个主成分 X_pca = X_centered @ pca_components # 可视化最终降维结果 plt.scatter(X_pca[:, 0], X_pca[:, 1]) plt.title('2D Projection using PCA') plt.xlabel('Principal Component 1') plt.ylabel('Principal Component 2') plt.grid(True) plt.show()\"]},\"626\":{\"h\":\"解释代码\",\"t\":[\"make_blobs：用于生成具有簇状结构的3D数据集。\",\"cov_matrix：计算样本数据的协方差矩阵，反映特征之间的相关性。\",\"eigenvalues, eigenvectors：通过特征值分解获得特征值和特征向量，特征向量代表主成分的方向。\",\"FuncAnimation：用于动态更新散点图，从而模拟降维的过程。\",\"通过上面的代码，你可以动态地模拟PCA降维的过程，并看到数据从3D逐步被投影到2D空间中的变化。\"]},\"627\":{\"h\":\"scikit-learn数据降维\"},\"628\":{\"c\":[\"数学建模\"]},\"629\":{\"c\":[\"数学建模\"]},\"630\":{\"h\":\"预测方法\"},\"631\":{\"h\":\"预测模型\",\"t\":[\"预测方法指的是用于预测未来事件、趋势或数据点的技术和算法。这些方法广泛应用于各个领域，如经济学、金融、工程、数据科学、人工智能等。常见的预测方法包括：\",\"时间序列分析：用于分析和预测时间序列数据的方法。例如，ARIMA（自回归积分滑动平均）模型和SARIMA（季节性ARIMA）模型。\",\"回归分析：用于预测因变量与一个或多个自变量之间关系的方法。线性回归和多元回归是最常见的回归分析方法。\",\"机器学习模型：\",\"决策树：用于分类和回归的树状模型。\",\"随机森林：基于多个决策树的集成方法，用于提高预测精度。\",\"支持向量机（SVM）：用于分类和回归的监督学习模型。\",\"神经网络：模仿人脑结构的复杂模型，尤其在深度学习中应用广泛。\",\"贝叶斯预测：基于贝叶斯定理的统计方法，通过先验知识和新的数据进行预测。\",\"灰色预测：适用于小样本、少数据、信息不完全系统的预测方法，常用于一些无法获取大量数据的领域。\",\"蒙特卡罗模拟：通过随机采样和统计方法模拟系统行为，常用于不确定性分析和风险评估。\",\"指数平滑法：基于时间序列的平滑技术，如简单指数平滑、双重指数平滑和霍尔特-温特斯法。\",\"预测方法的选择通常取决于数据的特性、预测目标以及对预测精度的要求。你想深入了解哪种预测方法，或是打算应用预测方法解决哪方面的问题？\"]},\"632\":{\"h\":\"灰色预测模型\",\"t\":[\"灰色预测模型是一种适用于小样本、不完全信息系统的预测方法。它在数据较少且随机性较大的情况下，能够通过生成灰色模型（Grey Model, GM）来预测系统的发展趋势。灰色预测的核心思想是利用有限的信息生成差分方程，进而推导出系统未来的行为。以下是灰色预测模型的主要特点和具体模型：\"]},\"633\":{\"h\":\"1.\",\"t\":[\"定义：灰色系统理论由中国学者邓聚龙在20世纪80年代提出。该理论将系统分为“白色系统”（信息完全已知）、“黑色系统”（信息完全未知）和“灰色系统”（部分信息已知）。\",\"应用场景：适用于小样本、少数据、无法完全掌握系统信息的场合，如经济预测、环境变化预测、工程控制等。\"]},\"634\":{\"h\":\"2.\",\"t\":[\"描述：GM(1,1) 是最常用的灰色预测模型，其中“1,1”表示一阶微分方程和单变量输入。它通过原始数据生成序列（AGO，累加生成序列），并建立一阶微分方程来描述系统的发展趋势。\",\"模型构建步骤： \",\"原始数据序列：将时间序列数据表示为 ( X(0) = {x(0)(1), x(0)(2), \\\\dots, x(0)(n)} )。\",\"累加生成序列 (AGO)：对原始数据进行累加，得到序列 ( X(1) )，其中 ( x(1)(k) = \\\\sum_{i=1}^{k} x(0)(i) )。\",\"构建差分方程：建立形式为 ( \\\\frac{dX(1)(t)}{dt} + aX(1)(t) = b ) 的一阶微分方程，其中 ( a ) 和 ( b ) 是模型参数。\",\"参数估计：通过最小二乘法估计参数 ( a ) 和 ( b )。\",\"预测计算：解出微分方程，得到预测序列 ( \\\\hat{X}(1) )，然后通过逆累加生成（IAGO）得到原始数据的预测值 ( \\\\hat{X}(0) )。\",\"应用：广泛用于经济数据的短期预测、工业生产过程的控制、人口预测等。\"]},\"635\":{\"h\":\"3.\",\"t\":[\"描述：GM(1,N) 是一种多变量灰色预测模型，其中“1”表示一阶微分方程，“N”表示N个变量。此模型用于在一个系统中考虑多个影响因素，通过多个输入变量来预测单一输出变量。\",\"应用：适用于复杂系统的预测，如多因素影响的经济系统、生态环境变化等。\"]},\"636\":{\"h\":\"4.\",\"t\":[\"描述：该模型是对GM(1,1)模型的扩展，适用于具有饱和增长特征的数据，如人口增长、技术扩散等。它通过引入非线性增长项（类似于Logistic曲线）来捕捉系统的非线性特征。\",\"应用：适用于预测具有饱和性质的系统行为，如市场饱和、产品生命周期预测等。\"]},\"637\":{\"h\":\"5.\",\"t\":[\"描述：将灰色预测模型与马尔科夫链结合，通过马尔科夫链的状态转移来修正灰色预测的结果，增强预测的准确性。\",\"应用：适用于系统状态具有明显转移特性的情况，如金融市场的波动预测。\"]},\"638\":{\"h\":\"6.\",\"t\":[\"描述：灰色关联分析用于评估不同因素对系统行为的影响，通过分析不同序列之间的关联度来确定各因素的重要性。\",\"应用：在多变量系统中，确定关键影响因素、优化决策等。\"]},\"639\":{\"h\":\"python的实现\",\"t\":[\"下面是一个用Python实现的简单灰色预测模型（GM(1,1)），并通过生成一个虚拟的数据集来展示如何使用该模型进行预测。\"]},\"640\":{\"h\":\"1. 导入必要的库\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt\"]},\"641\":{\"h\":\"2. 定义GM(1,1)模型的核心函数\",\"t\":[\"def gm11(x0): \\\"\\\"\\\" GM(1,1) 模型实现 :param x0: 原始数据序列 (list or numpy array) :return: a, b 模型参数 \\\"\\\"\\\" n = len(x0) x1 = np.cumsum(x0) # 1-AGO序列 # 构造数据矩阵B和数据向量Y B = np.zeros((n-1, 2)) Y = np.zeros((n-1, 1)) for i in range(1, n): B[i-1, 0] = -0.5 * (x1[i] + x1[i-1]) B[i-1, 1] = 1 Y[i-1] = x0[i] # 计算模型参数a和b Bt = np.transpose(B) BtB_inv = np.linalg.inv(np.dot(Bt, B)) BtY = np.dot(Bt, Y) C = np.dot(BtB_inv, BtY) a = C[0][0] b = C[1][0] return a, b\"]},\"642\":{\"h\":\"3. 定义预测函数\",\"t\":[\"def predict_gm11(x0, a, b, m): \\\"\\\"\\\" 使用GM(1,1)模型进行预测 :param x0: 原始数据序列 (list or numpy array) :param a: 模型参数a :param b: 模型参数b :param m: 预测步数 :return: 预测序列 (list) \\\"\\\"\\\" n = len(x0) x1 = np.cumsum(x0) # 1-AGO序列 x_pred = np.zeros(m) for i in range(m): x_pred[i] = (x0[0] - b / a) * np.exp(-a * (i + 1)) + b / a # 恢复预测数据的原始尺度 x_pred = np.insert(x_pred, 0, x0[0]) x_pred = np.diff(x_pred) return x_pred\"]},\"643\":{\"h\":\"4. 生成虚拟数据并进行预测\",\"t\":[\"# 生成虚拟数据 x0 = np.array([5, 7, 9, 12, 15, 19, 24, 30, 37, 45]) # 原始数据序列 # 训练GM(1,1)模型 a, b = gm11(x0) # 预测未来5个数据点 m = 5 x_pred = predict_gm11(x0, a, b, len(x0) + m) # 打印预测结果 print(\\\"原始数据:\\\", x0) print(\\\"预测数据:\\\", x_pred) # 可视化结果 plt.plot(np.arange(1, len(x0) + 1), x0, 'bo-', label='Original Data') plt.plot(np.arange(1, len(x_pred) + 1), x_pred, 'r--', label='Predicted Data') plt.xlabel('Time') plt.ylabel('Value') plt.legend() plt.title('GM(1,1) Prediction') plt.show()\"]},\"644\":{\"h\":\"5. 运行代码\",\"t\":[\"运行上述代码后，你会看到原始数据和预测数据的对比图。预测数据将通过红色虚线显示，而原始数据则是蓝色实线。这个简单的例子演示了如何使用GM(1,1)模型进行预测。\"]},\"645\":{\"h\":\"马尔科夫预测模型\",\"t\":[\"马尔科夫预测模型是一种基于马尔科夫链的统计模型，用于预测系统未来的状态。它假设系统的未来状态只与当前状态有关，而与过去的状态无关，即具有“无后效性”或“马尔科夫性”。马尔科夫模型在许多领域都有应用，如天气预测、经济分析、语音识别等。\"]},\"646\":{\"h\":\"1. 马尔科夫链的基本概念\",\"t\":[\"状态空间：系统可能处于的所有状态的集合。\",\"转移概率矩阵：从一个状态转移到另一个状态的概率矩阵，记为 ( P )，其中 ( P_{ij} ) 表示从状态 ( i ) 转移到状态 ( j ) 的概率。\",\"初始状态分布：系统最初处于各状态的概率分布，记为 ( \\\\pi )。\"]},\"647\":{\"h\":\"2. 马尔科夫链的性质\",\"t\":[\"无后效性：当前状态只依赖于前一状态，与之前的所有状态无关。\",\"平稳分布：经过足够长的时间后，系统达到平稳状态，即状态的概率分布不再改变。\"]},\"648\":{\"h\":\"3. Python实现马尔科夫预测模型\",\"t\":[\"接下来，通过一个简单的Python示例来展示如何构建和使用马尔科夫预测模型。\"]},\"649\":{\"h\":\"示例：天气预测\",\"t\":[\"假设一个简单的天气系统有两种状态：晴天和雨天。我们希望根据过去的天气状态预测未来的天气。\",\"import numpy as np # 定义状态空间 states = ['Sunny', 'Rainy'] # 定义转移概率矩阵 # P = [[P(Sunny->Sunny), P(Sunny->Rainy)], # [P(Rainy->Sunny), P(Rainy->Rainy)]] P = np.array([[0.8, 0.2], [0.4, 0.6]]) # 定义初始状态分布 initial_distribution = np.array([0.6, 0.4]) # 初始时晴天的概率为60%，雨天为40% def predict_weather(P, initial_distribution, days): \\\"\\\"\\\" 使用马尔科夫模型预测天气 :param P: 转移概率矩阵 (numpy array) :param initial_distribution: 初始状态分布 (numpy array) :param days: 预测的天数 :return: 预测的状态序列 \\\"\\\"\\\" n_states = len(P) predictions = [] current_distribution = initial_distribution for _ in range(days): next_distribution = np.dot(current_distribution, P) weather = np.random.choice(states, p=next_distribution) predictions.append(weather) current_distribution = next_distribution return predictions # 预测未来10天的天气 predicted_weather = predict_weather(P, initial_distribution, 10) # 打印预测结果 print(\\\"未来10天的天气预测:\\\") print(predicted_weather)\"]},\"650\":{\"h\":\"4. 代码说明\",\"t\":[\"转移概率矩阵 P：表示从一种天气状态到另一种天气状态的概率。例如，晴天后继续是晴天的概率为0.8，而晴天转为雨天的概率为0.2。\",\"初始状态分布：表示开始时的天气状态分布。例如，初始时晴天的概率为0.6，雨天的概率为0.4。\",\"predict_weather 函数：根据给定的转移概率矩阵和初始状态分布，预测指定天数内的天气状态。\"]},\"651\":{\"h\":\"5. 运行结果\",\"t\":[\"运行代码后，你将看到未来10天的天气预测结果。由于预测中引入了随机性，每次运行的结果可能不同。可以通过多次运行来观察不同的可能性。\"]},\"652\":{\"h\":\"6. 扩展应用\",\"t\":[\"马尔科夫模型不仅限于天气预测，还可以应用于各种需要预测状态转移的场景，如用户行为预测、经济状况分析、语音识别等。你可以根据具体应用场景调整状态空间和转移概率矩阵来构建相应的模型。\"]},\"653\":{\"h\":\"神经元网络预测\",\"t\":[\"神经网络（Neural Networks）是一种模仿人脑神经元连接的机器学习模型，擅长处理复杂的非线性数据。神经网络预测模型可以应用于各种任务，如时间序列预测、分类、回归等。它的基本结构由多个神经元（节点）和层组成，常见的神经网络模型包括前馈神经网络（Feedforward Neural Network, FFNN）、卷积神经网络（Convolutional Neural Network, CNN）和递归神经网络（Recurrent Neural Network, RNN）。\"]},\"654\":{\"h\":\"1. 前馈神经网络（Feedforward Neural Network, FFNN）\",\"t\":[\"前馈神经网络是最基本的神经网络模型，数据在输入层、中间的隐藏层、输出层之间按顺序前馈传递。用于解决回归和分类问题。\"]},\"655\":{\"h\":\"2. 递归神经网络（Recurrent Neural Network, RNN）\",\"t\":[\"递归神经网络适用于处理序列数据，如时间序列、文本等。RNN的特点是具有记忆功能，允许信息在序列中传递。\"]},\"656\":{\"h\":\"3. 长短期记忆网络（Long Short-Term Memory, LSTM）\",\"t\":[\"LSTM 是一种特殊的RNN，可以更好地处理长期依赖关系，广泛用于时间序列预测任务。\"]},\"657\":{\"h\":\"4. 用Python实现一个简单的神经网络预测模型\",\"t\":[\"我们将通过Keras和TensorFlow构建一个LSTM模型，用于时间序列预测。以下是一个示例，预测未来的股票价格。\"]},\"658\":{\"h\":\"1. 导入必要的库\",\"t\":[\"import numpy as np import pandas as pd from tensorflow.keras.models import Sequential from tensorflow.keras.layers import LSTM, Dense from sklearn.preprocessing import MinMaxScaler import matplotlib.pyplot as plt\"]},\"659\":{\"h\":\"2. 准备数据\",\"t\":[\"假设我们有一个时间序列数据，如股票的历史价格。我们将使用LSTM模型来预测未来的价格。\",\"# 生成虚拟的股票价格数据 np.random.seed(0) data = np.random.normal(0, 1, 100) # 100天的随机价格变化 data = np.cumsum(data) + 100 # 生成随机步进的价格序列 # 将数据转换为DataFrame df = pd.DataFrame(data, columns=['Price']) # 归一化数据 scaler = MinMaxScaler(feature_range=(0, 1)) scaled_data = scaler.fit_transform(df.values) # 构建训练集 def create_dataset(dataset, time_step=1): X, y = [], [] for i in range(len(dataset)-time_step-1): X.append(dataset[i:(i+time_step), 0]) y.append(dataset[i + time_step, 0]) return np.array(X), np.array(y) time_step = 10 X, y = create_dataset(scaled_data, time_step) # 将数据形状调整为LSTM输入的形状 [samples, time steps, features] X = X.reshape(X.shape[0], X.shape[1], 1)\"]},\"660\":{\"h\":\"3. 构建LSTM模型\",\"t\":[\"# 定义LSTM模型 model = Sequential() model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1))) model.add(LSTM(50, return_sequences=False)) model.add(Dense(25)) model.add(Dense(1)) # 编译模型 model.compile(optimizer='adam', loss='mean_squared_error') # 训练模型 model.fit(X, y, epochs=100, batch_size=32)\"]},\"661\":{\"h\":\"4. 进行预测\",\"t\":[\"# 使用训练好的模型进行预测 train_predict = model.predict(X) # 反归一化预测结果 train_predict = scaler.inverse_transform(train_predict) y_actual = scaler.inverse_transform([y]) # 可视化结果 plt.figure(figsize=(10, 6)) plt.plot(df.index[time_step + 1:], y_actual[0], label='Actual Price') plt.plot(df.index[time_step + 1:], train_predict.flatten(), label='Predicted Price') plt.xlabel('Days') plt.ylabel('Price') plt.title('Stock Price Prediction using LSTM') plt.legend() plt.show()\"]},\"662\":{\"h\":\"5. 代码说明\",\"t\":[\"数据准备：我们生成了一个随机的时间序列数据，并将其转换为适合LSTM模型输入的格式。\",\"LSTM模型：使用了两层LSTM层，并在最后使用了全连接层进行预测。该模型尝试学习时间序列的模式，并预测未来的值。\",\"可视化：绘制了实际的价格与预测的价格，帮助我们直观地理解模型的性能。\"]},\"663\":{\"h\":\"6. 扩展应用\",\"t\":[\"神经网络模型，尤其是LSTM，在时间序列预测中非常强大。它们可以应用于各种领域，如金融市场预测、能源需求预测、医疗数据分析等。\"]},\"664\":{\"c\":[\"数学建模\"]},\"665\":{\"c\":[\"数学建模\"]},\"666\":{\"h\":\"spss建模与统计分析\"},\"667\":{\"c\":[\"数学建模\"]},\"668\":{\"c\":[\"数学建模\"]},\"669\":{\"h\":\"几何模型\"},\"670\":{\"h\":\"几何模型\",\"t\":[\"几何模型是指通过数学和计算技术来描述和表示几何对象或形状的数学模型。在计算机图形学、计算机辅助设计（CAD）、工程模拟和其他领域中，几何模型是基础工具。根据几何模型的构建方式和使用的数学工具，可以将其分为多种类型。以下是几种常见的几何模型：\"]},\"671\":{\"h\":\"1.\",\"t\":[\"实体模型表示三维几何形状的体积和内部结构，通常用于工程设计和制造中。它们能够准确地描述物体的形状、体积和质量等特性。常见的实体模型包括：\",\"边界表示法（Boundary Representation, B-Rep）：通过表示对象的表面来定义实体的几何形状，使用顶点、边和面来描述表面。\",\"构造实体几何（Constructive Solid Geometry, CSG）：使用基本几何体（如立方体、圆柱体等）通过布尔运算（如并、交、差）构造复杂的实体模型。\",\"应用：产品设计、建筑建模、虚拟仿真。\"]},\"672\":{\"h\":\"2.\",\"t\":[\"曲面模型表示三维空间中的曲面而不关注物体的内部结构。它们通常用于表示光滑的自由形状，如汽车车身、船体、航空器等复杂曲面。\",\"参数曲面（Parametric Surfaces）：通过参数化方程来定义曲面，例如贝塞尔曲面（Bezier Surfaces）、B样条曲面（B-Spline Surfaces）和NURBS（非均匀有理B样条）。\",\"多边形网格（Polygon Meshes）：使用三角形或四边形网格来近似曲面，广泛用于计算机图形学和游戏开发。\",\"应用：工业设计、动画制作、3D打印。\"]},\"673\":{\"h\":\"3.\",\"t\":[\"线框模型通过表示物体的边缘线来描述三维几何形状，不包含表面或体积信息。它是最简单的三维模型类型。\",\"顶点和边表示：通过连接顶点的边线来构造模型，可以简单地描述复杂的几何结构。\",\"多视图表示：通常用于工程图中，以多种视角（如前视图、侧视图、俯视图）来显示物体的形状。\",\"应用：初步设计、结构分析、建筑图纸。\"]},\"674\":{\"h\":\"4.\",\"t\":[\"点云模型使用大量的离散点来表示三维形状。这些点通常由激光扫描、结构光扫描或摄影测量生成，每个点都有一个三维坐标。\",\"三维扫描：通过3D扫描仪生成的点云可以用来创建物体的数字模型。\",\"重建和拟合：点云数据可以用于重建曲面模型或拟合几何形状。\",\"应用：逆向工程、地形测量、文化遗产保护。\"]},\"675\":{\"h\":\"5.\",\"t\":[\"体素模型使用三维像素（体素）来表示空间中的物体。每个体素表示空间中的一个小立方体，其组合可以表示复杂的三维结构。\",\"体素化：通过将空间划分为体素，可以精确地表示三维形状和结构。\",\"三维纹理：体素模型可以用于表示体积数据，如医学成像中的CT和MRI数据。\",\"应用：医学成像、游戏开发、科学计算。\"]},\"676\":{\"h\":\"6.\",\"t\":[\"隐式曲面通过定义一个方程，所有满足方程的点都构成一个曲面。它们能够自然地表示复杂的形状，如气泡、液滴等。\",\"隐函数表示：使用隐函数f(x, y, z) = 0来定义曲面。\",\"元球（Metaballs）：一种常见的隐式曲面，用于模拟液体或软体物体的形状。\",\"应用：流体模拟、计算机动画、医学成像。\"]},\"677\":{\"h\":\"7.\",\"t\":[\"分形模型使用递归的数学方程来生成具有自相似特征的复杂几何形状，常用于自然物体的建模。\",\"分形几何：通过分形几何描述自然界中复杂的形状，如海岸线、山脉、树木等。\",\"分形维度：分形模型具有分数维度，用于描述非整数维度的复杂性。\",\"应用：自然景观建模、图像压缩、纹理生成。\",\"通过使用不同的几何模型，设计人员、工程师和科学家能够有效地表示、分析和操作三维形状，以满足各种应用需求。\"]},\"678\":{\"h\":\"管道包扎模型\",\"t\":[\"管道包扎模型（Sweeping or Swept Surface Model）是几何建模中一种常见的技术，用于通过沿一条路径移动一个截面曲线（称为截面或轮廓）来生成三维形状。这种方法在生成管道、隧道、索道、曲线建筑结构等形状时非常有用。\"]},\"679\":{\"h\":\"管道包扎模型的构建过程\",\"t\":[\"管道包扎模型通过以下几个步骤构建：\",\"定义截面曲线：选择一个二维截面曲线，通常是一个简单的几何形状，如圆形、矩形、椭圆或任意形状的多边形。\",\"定义路径曲线：选择一条三维路径曲线，沿着这条曲线移动截面曲线。路径可以是直线、曲线、B样条曲线、NURBS曲线等。\",\"沿路径移动截面曲线：将截面曲线沿路径曲线移动，并在路径的每个点上生成一个截面副本。\",\"生成管道表面：通过连接沿路径曲线移动的截面曲线，生成一个三维表面或实体。这种表面在某些情况下被称为扫掠面（Swept Surface）或扫掠体（Swept Solid）。\"]},\"680\":{\"h\":\"示例\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # 定义截面曲线（圆形） def generate_circle(radius, num_points): theta = np.linspace(0, 2 * np.pi, num_points) x = radius * np.cos(theta) y = radius * np.sin(theta) return x, y # 定义路径曲线（螺旋线） def generate_helix_path(radius, pitch, num_points, height): z = np.linspace(0, height, num_points) theta = z * (2 * np.pi / pitch) x = radius * np.cos(theta) y = radius * np.sin(theta) return x, y, z # 沿路径曲线移动截面曲线并生成管道表面 def generate_swept_surface(cross_section_radius, path_radius, pitch, height, num_path_points, num_cross_section_points): path_x, path_y, path_z = generate_helix_path(path_radius, pitch, num_path_points, height) cross_section_x, cross_section_y = generate_circle(cross_section_radius, num_cross_section_points) # 存储生成的表面点 surface_x, surface_y, surface_z = [], [], [] for i in range(num_path_points): cx, cy, cz = path_x[i], path_y[i], path_z[i] # 旋转并平移截面曲线 for j in range(num_cross_section_points): x = cross_section_x[j] + cx y = cross_section_y[j] + cy z = cz surface_x.append(x) surface_y.append(y) surface_z.append(z) return np.array(surface_x), np.array(surface_y), np.array(surface_z) # 参数设置 cross_section_radius = 0.5 # 截面曲线的半径 path_radius = 2.0 # 螺旋路径的半径 pitch = 1.0 # 螺旋路径的螺距 height = 10.0 # 螺旋路径的高度 num_path_points = 100 # 路径上的点数 num_cross_section_points = 50 # 截面上的点数 # 生成管道包扎模型 surface_x, surface_y, surface_z = generate_swept_surface(cross_section_radius, path_radius, pitch, height, num_path_points, num_cross_section_points) # 绘制3D图形 fig = plt.figure() ax = fig.add_subplot(111, projection='3d') # 绘制管道表面 ax.plot_trisurf(surface_x, surface_y, surface_z, color='cyan', edgecolor='grey', alpha=0.7) # 设置图形的标签和视角 ax.set_xlabel('X axis') ax.set_ylabel('Y axis') ax.set_zlabel('Z axis') ax.view_init(elev=30, azim=45) plt.show()\"]},\"681\":{\"h\":\"代码解释：\",\"t\":[\"generate_circle(radius, num_points):\",\"生成一个圆形截面曲线的点，这些点将用于在三维空间中生成管道表面。\",\"generate_helix_path(radius, pitch, num_points, height):\",\"生成螺旋路径曲线，该路径将用于管道的包扎过程。路径曲线在Z轴方向上上升，形成螺旋形。\",\"generate_swept_surface():\",\"该函数将截面曲线沿路径曲线移动，生成三维管道表面。它通过对路径上的每个点进行平移和旋转来创建管道。\",\"绘图:\",\"使用matplotlib中的plot_trisurf绘制三维表面。\"]},\"682\":{\"h\":\"运行结果：\",\"t\":[\"该代码将在三维空间中生成一个沿螺旋路径的管道，并显示其3D视图。你可以通过调整参数来改变管道的形状和路径。\",\"这个示例为基本的管道包扎模型实现，你可以根据需求进一步扩展，例如实现复杂的截面形状或路径曲线。\"]},\"683\":{\"h\":\"应用场景\",\"t\":[\"工程设计：用于设计管道系统、电缆布线、隧道等。在管道设计中，可以根据不同的截面形状和路径曲线生成复杂的管道几何形状。\",\"动画和游戏：用于生成角色的骨骼、肢体、触角等，或者用于轨道、路径的设计。\",\"建筑设计：用于创建具有复杂曲线和自由形状的建筑结构，如桥梁、走廊、通道等。\",\"工业制造：在生成制造工艺中的工具路径、材料流动轨迹、挤压成型的产品等。\"]},\"684\":{\"h\":\"优点和挑战\",\"t\":[\"优点：管道包扎模型能够生成非常复杂和自由的几何形状，适用于描述沿路径移动的各种形状。\",\"挑战：在构建过程中，需要处理路径曲线的弯曲、扭转，确保生成的形状符合设计要求。对于复杂路径和截面，可能需要更多的计算和调整。\"]},\"685\":{\"h\":\"铺瓷砖模型\",\"t\":[\"铺瓷砖模型在计算机图形学、建筑设计和虚拟现实等领域中非常常见。这个模型模拟了在一个平面或三维空间上铺设瓷砖的过程。通常，铺瓷砖模型会涉及到瓷砖的排列、对齐、填充和裁剪等步骤，以便在给定的区域内生成符合设计要求的瓷砖图案。\"]},\"686\":{\"h\":\"1. 基本概念\",\"t\":[\"瓷砖（Tile）：铺设的基本单元，通常是矩形或正方形，也可以是六边形、菱形等几何形状。\",\"铺设区域（Tiling Area）：瓷砖铺设的目标区域，通常是一个矩形平面，但也可能是曲面或不规则形状。\",\"铺设方式（Tiling Pattern）：瓷砖在铺设区域内的排列方式，可以是平行排列、交错排列、旋转排列等。\"]},\"687\":{\"h\":\"2. 实现思路\",\"t\":[\"在Python中实现一个简单的铺瓷砖模型，可以使用matplotlib和numpy库来绘制瓷砖铺设的图形。我们将以一个简单的矩形区域内铺设正方形瓷砖为例。\"]},\"688\":{\"h\":\"3. 实现代码\",\"t\":[\"import matplotlib.pyplot as plt import numpy as np def draw_tile(ax, x, y, width, height, color='lightgray'): \\\"\\\"\\\"在指定位置绘制一个瓷砖\\\"\\\"\\\" rect = plt.Rectangle((x, y), width, height, color=color, edgecolor='black') ax.add_patch(rect) def tile_floor(area_width, area_height, tile_width, tile_height): \\\"\\\"\\\"在给定的区域内铺设瓷砖\\\"\\\"\\\" fig, ax = plt.subplots() # 设置绘图区域大小 ax.set_xlim(0, area_width) ax.set_ylim(0, area_height) # 计算瓷砖在X和Y方向上的数量 num_tiles_x = int(np.ceil(area_width / tile_width)) num_tiles_y = int(np.ceil(area_height / tile_height)) # 逐行铺设瓷砖 for i in range(num_tiles_x): for j in range(num_tiles_y): x = i * tile_width y = j * tile_height draw_tile(ax, x, y, tile_width, tile_height) ax.set_aspect('equal') plt.gca().invert_yaxis() plt.show() # 参数设置 area_width = 10 # 铺设区域的宽度 area_height = 6 # 铺设区域的高度 tile_width = 1 # 瓷砖的宽度 tile_height = 1 # 瓷砖的高度 # 执行铺瓷砖模型 tile_floor(area_width, area_height, tile_width, tile_height)\"]},\"689\":{\"h\":\"4. 代码解释\",\"t\":[\"draw_tile函数:\",\"用于在指定的位置绘制一个瓷砖（矩形），颜色默认是浅灰色，边缘用黑色描绘。\",\"tile_floor函数:\",\"计算在指定区域内铺设瓷砖的数量，并调用draw_tile函数逐行铺设瓷砖。\",\"np.ceil用于确保即使瓷砖不能完全适配区域，也会尝试铺满整个区域。\",\"绘图区域:\",\"使用matplotlib的Rectangle对象在指定的绘图区域内添加瓷砖。\",\"设置了图形的长宽比为1，并反转Y轴以便更直观地展示铺设效果。\"]},\"690\":{\"h\":\"5. 运行结果\",\"t\":[\"代码运行后，将在指定区域内铺设瓷砖，并显示铺设的图形。你可以调整area_width、area_height、tile_width和tile_height参数，来生成不同铺设方式的瓷砖图案。\"]},\"691\":{\"h\":\"6. 扩展\",\"t\":[\"复杂图案：可以扩展该模型以支持更复杂的瓷砖形状（如六边形）和铺设图案（如菱形排列）。\",\"瓷砖颜色：可以根据设计要求改变瓷砖的颜色或生成不同颜色的瓷砖图案。\",\"三维铺设：如果铺设区域是三维的，瓷砖可以按照指定的模式铺设在曲面或立体表面上。\",\"通过这个模型，您可以在编程环境中模拟和可视化不同的瓷砖铺设方案，这对于建筑设计、室内装饰或虚拟现实开发等应用具有实际意义。\"]},\"692\":{\"h\":\"钢板切割模型\",\"t\":[\"钢板切割模型是一种优化问题，通常用于在制造业中，通过最小化废料或优化材料使用来进行切割。它属于典型的裁剪（Cutting Stock）问题。这个模型涉及将大尺寸的钢板切割成各种尺寸的小块，以满足需求，并尽量减少剩余材料的浪费。\"]},\"693\":{\"h\":\"1. 问题描述\",\"t\":[\"钢板切割模型的基本形式如下：\",\"输入： \",\"钢板的尺寸：通常是一个或多个固定尺寸的大钢板。\",\"需求尺寸：不同规格的小钢板及其需求数量。\",\"目标：在满足需求的情况下，尽量减少废料或使用最少数量的大钢板。\"]},\"694\":{\"h\":\"2. 解决方案的策略\",\"t\":[\"解决钢板切割问题的策略主要包括以下几种：\",\"启发式算法：如贪心算法、动态规划等，这些算法用于快速得到一个较优解，但不保证是最优解。\",\"整数规划（IP）：通过建立数学模型，利用整数规划来找到最优解。这种方法通常能够得到全局最优解，但计算复杂度较高。\",\"元启发式算法：如遗传算法、模拟退火等，适用于大规模问题，可以在较短时间内找到接近最优的解。\"]},\"695\":{\"h\":\"3. 简单示例\",\"t\":[\"假设有一块宽度为10米、长度为20米的钢板，需要切割成以下尺寸的小块：\",\"需求1：宽度2米、长度3米，数量为4块。\",\"需求2：宽度5米、长度4米，数量为3块。\"]},\"696\":{\"h\":\"4. 数学模型\",\"t\":[\"对于这个简单的钢板切割问题，可以通过以下步骤来建立数学模型：\"]},\"697\":{\"h\":\"4.1 变量定义\",\"t\":[\"设x_i表示第i种切割模式的使用次数。\",\"设p_ij表示第i种切割模式中第j种需求的小块数量。\"]},\"698\":{\"h\":\"4.2 目标函数\",\"t\":[\"目标是最小化使用的大钢板数量，或等价地最小化废料： [ \\\\text{Minimize} \\\\sum_{i} x_i ]\"]},\"699\":{\"h\":\"4.3 约束条件\",\"t\":[\"每种需求的小块必须得到满足： [ \\\\sum_{i} p_{ij} \\\\cdot x_i \\\\geq d_j ] 其中，d_j是第j种需求的数量。\",\"每个切割模式下的小块不能超出大钢板的尺寸： [ \\\\text{Width}_i \\\\leq \\\\text{Width of large steel plate} ] [ \\\\text{Length}_i \\\\leq \\\\text{Length of large steel plate} ]\"]},\"700\":{\"h\":\"5. Python实现示例\",\"t\":[\"这里展示如何用Python来实现一个简单的钢板切割问题的求解（假设使用整数规划）：\",\"from pulp import LpProblem, LpMinimize, LpVariable, lpSum # 需求数据 demands = [(2, 3, 4), (5, 4, 3)] # (宽, 长, 需求数量) steel_plate = (10, 20) # 大钢板的宽和长 # 创建线性规划问题 problem = LpProblem(\\\"Steel_Cutting_Problem\\\", LpMinimize) # 定义变量和目标函数 x_vars = [LpVariable(f\\\"x{i}\\\", 0, cat=\\\"Integer\\\") for i in range(len(demands))] problem += lpSum(x_vars) # 添加约束条件 for i, (width, length, quantity) in enumerate(demands): problem += x_vars[i] * width <= steel_plate[0] problem += x_vars[i] * length <= steel_plate[1] problem += x_vars[i] >= quantity # 求解问题 problem.solve() # 输出结果 for i, x in enumerate(x_vars): print(f\\\"需求 {i+1} 使用的次数: {x.varValue}\\\")\"]},\"701\":{\"h\":\"6. 实际应用中的考虑因素\",\"t\":[\"在实际应用中，钢板切割问题可能会更加复杂，需要考虑以下因素：\",\"切割路径：最优的切割路径可以减少切割时间和成本。\",\"废料处理：剩余的废料可能需要进行回收或处理，因此需要考虑如何处理废料。\",\"多目标优化：有时不仅要考虑材料利用率，还需要考虑切割时间、成本等。\",\"钢板切割模型在制造业中的应用非常广泛，通过合理的优化算法可以显著降低材料浪费，提高生产效率。\"]},\"702\":{\"c\":[\"数学建模\"]},\"703\":{\"c\":[\"数学建模\"]},\"704\":{\"h\":\"线性规划和整数规划模型\"},\"705\":{\"h\":\"规划问题\",\"t\":[\"在数学建模中，规划问题（Optimization Problems）指的是通过数学模型和算法，寻找最优解的过程。这些问题通常包括目标函数的最大化或最小化，并受到一系列约束条件的限制。以下是几种常见的规划问题类型及其应用领域：\"]},\"706\":{\"h\":\"1. 线性规划（Linear Programming, LP）\",\"t\":[\"描述：线性规划问题中，目标函数和约束条件都是线性的。其目标是最大化或最小化一个线性目标函数，同时满足一系列线性约束。\",\"应用：\",\"资源分配（如生产、物流）\",\"财务优化（如投资组合优化）\",\"运输问题（如最短路径问题）\",\"例子：\",\"企业生产优化：决定生产多少种产品以最大化利润。\"]},\"707\":{\"h\":\"2. 整数规划（Integer Programming, IP）\",\"t\":[\"描述：整数规划问题的决策变量被限制为整数。它可以是0-1整数规划（变量只能取0或1）或一般整数规划（变量可以是任意整数）。\",\"应用：\",\"排程问题（如员工排班、作业调度）\",\"资源分配（如选择问题）\",\"例子：\",\"0-1整数规划：选择哪些项目进行投资，以最大化总收益并满足预算限制。\"]},\"708\":{\"h\":\"3. 非线性规划（Nonlinear Programming, NLP）\",\"t\":[\"描述：非线性规划问题的目标函数或约束条件是非线性的。解决这类问题通常比线性规划问题更复杂。\",\"应用：\",\"经济模型（如成本函数最优化）\",\"工程设计（如结构优化）\",\"例子：\",\"设计一个优化的空气动力学形状，以最小化阻力。\"]},\"709\":{\"h\":\"4. 动态规划（Dynamic Programming, DP）\",\"t\":[\"描述：动态规划问题通过将复杂问题分解为子问题来解决。每个子问题的解可以用来构造更大的问题的解。\",\"应用：\",\"资源分配（如背包问题）\",\"过程优化（如序列决策问题）\",\"例子：\",\"背包问题：选择物品以最大化背包中的总价值，同时不超过背包的容量。\"]},\"710\":{\"h\":\"5. 多目标规划（Multi-objective Programming, MOP）\",\"t\":[\"描述：多目标规划问题涉及多个目标函数，通常这些目标函数之间是冲突的。目标是找到一个平衡解，使得所有目标都得到优化。\",\"应用：\",\"设计和工程（如优化产品性能与成本）\",\"环境管理（如经济效益与环境保护的平衡）\",\"例子：\",\"设计一个产品，以平衡成本、质量和生产时间。\"]},\"711\":{\"h\":\"6. 混合整数非线性规划（Mixed-Integer Nonlinear Programming, MINLP）\",\"t\":[\"描述：混合整数非线性规划问题结合了整数约束和非线性函数。这类问题通常很复杂，需要特别的算法来求解。\",\"应用：\",\"工程优化（如最优设计问题）\",\"供应链管理（如网络设计问题）\",\"例子：\",\"设计一个工厂布局，既要考虑成本，又要满足生产需求，并且某些决策变量必须是整数（如设备数量）。\"]},\"712\":{\"h\":\"7. 随机规划（Stochastic Programming）\",\"t\":[\"描述：随机规划问题处理包含不确定性的优化问题。目标是优化决策在随机环境中的表现。\",\"应用：\",\"财务管理（如投资决策）\",\"供应链管理（如库存控制）\",\"例子：\",\"在不确定需求的情况下，制定库存策略，以最小化总成本。\"]},\"713\":{\"h\":\"线性规划模型\"},\"714\":{\"h\":\"什么是线性规划模型\",\"t\":[\"线性规划（Linear Programming，简称LP）是一种数学优化技术，用于在满足一定约束条件下最大化或最小化一个线性目标函数。\"]},\"715\":{\"h\":\"线性规划的组成\",\"t\":[\"目标函数（Objective Function）： 这是需要优化的线性函数，通常表示为：\",\"Maximize (or Minimize)Z=c1​x1​+c2​x2​+⋯+cn​xn​\",\"其中，(c1​,c2​,…,cn​) 是已知的系数，(x1​,x2​,…,xn​)ˉ​ 是决策变量。\",\"约束条件（Constraints）： 这些是决策变量需要满足的线性不等式或等式，通常表示为：\",\"⎩⎨⎧​a11​x1​+a12​x2​+⋯+a1n​xn​≤b1​a21​x1​+a22​x2​+⋯+a2n​xn​≤b2​⋮am1​x1​+am2​x2​+⋯+amn​xn​≤bm​​\",\"其中，(aij​) 是已知的系数，(bi​) 是约束的常数项，(m) 是约束条件的数量。\",\"非负约束（Non-negativity Constraints）： 通常假设决策变量是非负的，即：\",\"x1​≥0,x2​≥0,…,xn​≥0\",\"线性规划模型的目标是找到一组 (x1​,x2​,…,xn​) 值，使得目标函数 (Z) 取得最大值或最小值，同时满足所有约束条件和非负约束。\"]},\"716\":{\"h\":\"线性规划的应用\",\"t\":[\"线性规划模型主要用于解决以下几类问题：\",\"资源分配问题：\",\"生产计划：确定各产品的生产数量，以最大化利润或最小化成本，同时满足资源和需求约束。\",\"人力资源调度：优化员工排班，以最小化劳动力成本或最大化效率。\",\"运输和物流问题：\",\"运输问题：确定物资从多个供应点到多个需求点的运输方案，以最小化运输成本。\",\"路径规划：为车辆或货物选择最优路线，以最小化运输时间或费用。\",\"投资组合优化：\",\"金融投资：确定不同资产的投资比例，以最大化投资回报或最小化风险，同时满足投资约束。\",\"网络流量优化：\",\"电信和数据网络：优化网络流量分配，以最大化带宽利用率或最小化延迟。\",\"能源管理：\",\"电力系统调度：优化电力生产和分配，以最小化运营成本或最大化系统效率。\",\"可再生能源利用：优化风能、太阳能等可再生能源的利用，以最小化能源成本或最大化能源产出。\",\"生产工艺优化：\",\"化工过程优化：优化化学品生产过程中的资源利用，以最小化原材料消耗或最大化产出效率。\",\"供应链管理：\",\"库存管理：确定库存水平和补货策略，以最小化库存成本或最大化服务水平。\",\"供应链设计：优化供应链网络结构，以最小化总成本或最大化响应速度。\"]},\"717\":{\"h\":\"具体问题示例\",\"t\":[\"生产计划问题：\",\"问题：一家工厂生产两种产品，每种产品的单位利润和所需资源不同。工厂有固定的资源限额，如何分配生产资源以最大化总利润？\",\"线性规划模型：决策变量是每种产品的生产数量，目标函数是总利润，约束条件是资源限额。\",\"运输问题：\",\"问题：一个公司有多个仓库和多个客户，每个仓库有一定的库存，每个客户有一定的需求，运输成本因仓库和客户的不同而异。如何安排运输以最小化总运输成本？\",\"线性规划模型：决策变量是从每个仓库到每个客户的运输量，目标函数是总运输成本，约束条件是每个仓库的库存量和每个客户的需求量。\",\"投资组合优化：\",\"问题：一个投资者有多个投资选项，每个选项有不同的预期回报和风险，如何分配资金以最大化预期回报或最小化风险？\",\"线性规划模型：决策变量是每个投资选项的资金分配，目标函数是总预期回报或风险，约束条件是总资金量和其他投资限制。\",\"通过建立和求解这些线性规划模型，可以在复杂的决策环境中找到最优解，从而有效地解决各种实际问题。\"]},\"718\":{\"h\":\"求解线性规划\",\"t\":[\"求解线性规划问题的常用方法包括单纯形法（Simplex Method）、内点法（Interior Point Method）等。许多数学软件如MATLAB、LINDO、Gurobi等都可以用来求解线性规划问题。\"]},\"719\":{\"h\":\"实际线性规划问题\"},\"720\":{\"h\":\"问题描述\",\"t\":[\"一家工厂生产两种产品：A和B。这两种产品的生产过程需要使用两种资源：原料和劳动力。每种资源的供应量是有限的。工厂希望通过合理分配资源来最大化利润。已知如下数据：\",\"每生产一单位产品A需要4个单位原料和3个小时劳动力，利润为5元。\",\"每生产一单位产品B需要2个单位原料和5个小时劳动力，利润为4元。\",\"工厂每天最多可以提供的原料是100个单位，劳动力是120小时。\",\"求每天生产多少单位的产品A和产品B，可以使得工厂的总利润最大化？\"]},\"721\":{\"h\":\"线性规划模型\",\"t\":[\"决策变量：\",\"(x1​)：每天生产的产品A的单位数\",\"(x2​)：每天生产的产品B的单位数\",\"目标函数：\",\"最大化总利润 (Z)\",\"Z=5x1​+4x2​\",\"约束条件：\",\"原料限制\",\"4x1​+2x2​≤100\",\"劳动力限制\",\"3x1​+5x2​≤120\",\"非负约束\",\"x1​≥0,x2​≥0\"]},\"722\":{\"h\":\"求解过程\",\"t\":[\"这个线性规划问题可以使用单纯形法或其他优化算法来求解。我们可以用Python的scipy.optimize库来求解这个问题。以下是Python代码示例：\",\"from scipy.optimize import linprog # 目标函数的系数（需要最大化的利润，负号表示转化为最小化问题） c = [-5, -4] # 不等式约束的系数矩阵 A = [ [4, 2], # 原料限制 [3, 5] # 劳动力限制 ] # 不等式约束的右侧常数项 b = [100, 120] # 非负约束（默认情况下，scipy.optimize.linprog假定所有变量均为非负） x0_bounds = (0, None) x1_bounds = (0, None) # 求解线性规划问题 result = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds], method='simplex') # 输出结果 print(f'每天生产产品A的数量: {result.x[0]:.2f}') print(f'每天生产产品B的数量: {result.x[1]:.2f}') print(f'最大化的总利润: {-result.fun:.2f}元')\"]},\"723\":{\"h\":\"整数规划模型\",\"t\":[\"在一些实际问题中，决策变量必须是整数。例如，当涉及到生产的产品数量、员工人数等问题时，非整数解是不可接受的。在这种情况下，我们需要使用整数规划（Integer Programming, IP）模型来求解问题。\"]},\"724\":{\"h\":\"纯整数规划模型\"},\"725\":{\"h\":\"线性规划问题（整数约束）\",\"t\":[\"决策变量：\",\"(x1​)：每天生产的产品A的单位数（必须是整数）\",\"(x2​)：每天生产的产品B的单位数（必须是整数）\",\"目标函数：\",\"最大化总利润 (Z)\",\"Z=5x1​+4x2​\",\"约束条件：\",\"原料限制\",\"4x1​+2x2​≤100\",\"劳动力限制\",\"3x1​+5x2​≤120\",\"非负约束\",\"x1​≥0,x2​≥0\",\"整数约束：\",\"x1​∈Z,x2​∈Z\"]},\"726\":{\"h\":\"MATLAB 代码\",\"t\":[\"在 MATLAB 中，可以使用 intlinprog 函数来求解整数线性规划问题。\",\"% 定义目标函数的系数 (由于 intlinprog 只能最小化目标函数，所以这里使用负号) f = [-5, -4]; % 定义不等式约束的系数矩阵 A 和右侧常数项 b A = [4, 2; 3, 5]; b = [100; 120]; % 定义整数约束的索引 intcon = [1, 2]; % 定义变量的上下界 (非负约束) lb = [0, 0]; ub = []; % 求解整数线性规划问题 [x, fval] = intlinprog(f, intcon, A, b, [], [], lb, ub); % 输出结果 fprintf('每天生产产品A的数量: %d\\\\n', x(1)); fprintf('每天生产产品B的数量: %d\\\\n', x(2)); fprintf('最大化的总利润: %.2f元\\\\n', -fval);\"]},\"727\":{\"h\":\"结果解释\",\"t\":[\"假设运行上述 MATLAB 代码后，得到的结果如下：\",\"每天生产产品A的数量: 20 每天生产产品B的数量: 10 最大化的总利润: 150.00元\",\"这意味着每天生产20单位的产品A和10单位的产品B，可以使工厂的总利润达到最大化，即150元。\"]},\"728\":{\"h\":\"详细解释\",\"t\":[\"定义目标函数：由于 intlinprog 函数用于最小化目标函数，而我们需要最大化利润，所以目标函数的系数使用负号表示。\",\"定义约束：将原料和劳动力的约束定义为不等式约束矩阵 ( A ) 和右侧常数项向量 ( b )。\",\"定义整数约束：使用整数约束的索引 intcon 指定哪些变量必须是整数。\",\"定义变量的上下界：由于变量 ( x_1 ) 和 ( x_2 ) 必须为非负数，所以设置下界为 0，上界可以为空（表示无限制）。\",\"求解：使用 intlinprog 函数求解整数线性规划问题，并输出最优解和最大化的总利润。\"]},\"729\":{\"h\":\"0-1整数规划模型\",\"t\":[\"0-1整数规划（Binary Integer Programming, BIP）是一种特殊的整数规划，其中决策变量只能取0或1的值。它通常用于选择、分配和布尔决策等问题。\"]},\"730\":{\"h\":\"实际问题示例\",\"t\":[\"假设有一家公司需要决定是否生产三种不同的产品（A、B、C）。每种产品都有固定的生产成本和预计的利润。公司有一个总预算限制，并希望在预算限制内最大化总利润。\",\"以下是每种产品的具体数据：\",\"产品A：生产成本为30元，预计利润为40元\",\"产品B：生产成本为20元，预计利润为30元\",\"产品C：生产成本为10元，预计利润为20元\",\"总预算为50元。公司需要决定是否生产每种产品，以最大化利润。\"]},\"731\":{\"h\":\"0-1整数规划模型\",\"t\":[\"决策变量：\",\"(x1​)：是否生产产品A（1表示生产，0表示不生产）\",\"(x2​)：是否生产产品B（1表示生产，0表示不生产）\",\"(x3​)：是否生产产品C（1表示生产，0表示不生产）\",\"目标函数：\",\"最大化总利润 (Z)\",\"Z=40x1​+30x2​+20x3​\",\"约束条件：\",\"总预算限制\",\"30x1​+20x2​+10x3​≤50\",\"0-1整数约束\",\"x1​,x2​,x3​∈{0,1}\"]},\"732\":{\"h\":\"MATLAB 代码\",\"t\":[\"在 MATLAB 中，可以使用 intlinprog 函数来求解0-1整数规划问题。\",\"% 定义目标函数的系数 (由于 intlinprog 只能最小化目标函数，所以这里使用负号) f = [-40, -30, -20]; % 定义不等式约束的系数矩阵 A 和右侧常数项 b A = [30, 20, 10]; b = [50]; % 定义整数约束的索引 intcon = [1, 2, 3]; % 定义变量的上下界 (0-1约束) lb = [0, 0, 0]; ub = [1, 1, 1]; % 求解0-1整数线性规划问题 [x, fval] = intlinprog(f, intcon, A, b, [], [], lb, ub); % 输出结果 fprintf('是否生产产品A: %d\\\\n', x(1)); fprintf('是否生产产品B: %d\\\\n', x(2)); fprintf('是否生产产品C: %d\\\\n', x(3)); fprintf('最大化的总利润: %.2f元\\\\n', -fval);\"]},\"733\":{\"h\":\"结果解释\",\"t\":[\"假设运行上述 MATLAB 代码后，得到的结果如下：\",\"是否生产产品A: 1 是否生产产品B: 1 是否生产产品C: 0 最大化的总利润: 70.00元\",\"这意味着公司应该生产产品A和产品B，而不生产产品C，以使总利润最大化，即70元。\"]},\"734\":{\"h\":\"详细解释\",\"t\":[\"定义目标函数：由于 intlinprog 函数用于最小化目标函数，而我们需要最大化利润，所以目标函数的系数使用负号表示。\",\"定义约束：将预算限制定义为不等式约束矩阵 ( A ) 和右侧常数项向量 ( b )。\",\"定义整数约束：使用整数约束的索引 intcon 指定哪些变量必须是整数（在0-1问题中，这些变量只能取0或1）。\",\"定义变量的上下界：设置下界为0，上界为1，以满足0-1整数约束。\",\"求解：使用 intlinprog 函数求解0-1整数规划问题，并输出最优解和最大化的总利润。\"]},\"735\":{\"h\":\"TSP旅行商问题\",\"t\":[\"旅行商问题（Traveling Salesman Problem，简称TSP）是组合优化中的经典问题之一。其目标是找到一条经过若干城市且每个城市仅访问一次的最短路径，并最终回到起点城市。TSP 问题是 NP 难问题，因此，对于较大的问题规模，求解最优解变得非常困难。\"]},\"736\":{\"h\":\"TSP 问题描述\",\"t\":[\"给定 (n) 个城市，以及每对城市之间的距离矩阵，寻找一条经过每个城市一次且仅一次，并且返回起点城市的最短路径。\"]},\"737\":{\"h\":\"数学模型\",\"t\":[\"决策变量：\",\"(xij​)：如果从城市 (i) 到城市 (j) 直接旅行，则 (xij​=1)，否则 (xij​=0)。\",\"目标函数：\",\"最小化总旅行距离\",\"MinimizeZ=i=1∑n​j=1∑n​dij​xij​\",\"其中 (dij​) 表示城市 (i) 和城市 (j) 之间的距离。\",\"约束条件：\",\"每个城市必须从另一个城市到达：\",\"j=1∑n​xij​=1∀i\",\"每个城市必须到达另一个城市：\",\"i=1∑n​xij​=1∀j\",\"预防子环（子循环）约束：\",\"可以使用 Miller-Tucker-Zemlin (MTZ) 约束来防止子环的形成：\",\"ui​−uj​+nxij​≤n−1∀i,j(i=j)\",\"其中 (ui​) 是辅助变量，表示城市 (i) 的访问顺序。\",\"整数约束：\",\"xij​∈{0,1},ui​≥0\"]},\"738\":{\"h\":\"MATLAB 代码\",\"t\":[\"MATLAB 可以使用 intlinprog 函数来求解 TSP 问题。以下是一个简单的示例代码：\",\"% 定义城市数量和距离矩阵 n = 4; d = [0, 10, 15, 20; 10, 0, 35, 25; 15, 35, 0, 30; 20, 25, 30, 0]; % 定义目标函数的系数 (展开成一维向量) f = d(:); % 定义整数约束的索引 intcon = 1:n^2; % 定义约束矩阵 Aeq = zeros(n, n^2); for i = 1:n Aeq(i, (i-1)*n+1:i*n) = 1; % 每个城市必须从另一个城市到达 end Aeq = [Aeq; kron(eye(n), ones(1, n))]; % 每个城市必须到达另一个城市 beq = ones(2*n, 1); % MTZ 约束 A = []; b = []; u = n+1:n+n; A = [A; repmat(eye(n-1), 1, n)]; A = [A; -repmat(eye(n-1), 1, n)]; b = [b; zeros(n-1, 1)]; b = [b; -ones(n-1, 1)]; for i = 2:n for j = 2:n if i ~= j temp = zeros(1, n^2); temp((i-1)*n+j) = n; A = [A; temp]; b = [b; n-1]; end end end % 定义变量的上下界 (0-1约束) lb = zeros(n^2, 1); ub = ones(n^2, 1); % 求解整数线性规划问题 [x, fval] = intlinprog(f, intcon, A, b, Aeq, beq, lb, ub); % 输出结果 x = reshape(x, n, n); route = find(x); route = mod(route-1, n) + 1; disp('最优路径:') disp(route) disp(['最小总距离: ', num2str(fval)])\"]},\"739\":{\"h\":\"结果解释\",\"t\":[\"假设运行上述 MATLAB 代码后，得到的结果如下：\",\"最优路径: 1 2 3 4 最小总距离: 80\",\"这意味着从城市1开始，按照顺序访问城市2、城市3、城市4，然后回到城市1，形成一条最优路径，总距离为80。\"]},\"740\":{\"h\":\"详细解释\",\"t\":[\"定义城市数量和距离矩阵：城市数量 ( n ) 和每对城市之间的距离矩阵 ( d )。\",\"定义目标函数：展开距离矩阵 ( d ) 成一维向量 ( f )。\",\"定义约束矩阵：每个城市必须从另一个城市到达和每个城市必须到达另一个城市的约束矩阵 ( Aeq ) 和常数项 ( beq )。\",\"MTZ 约束：使用辅助变量 ( u ) 来防止子环的形成。\",\"定义变量的上下界：设置变量的上下界为0和1，以满足0-1整数约束。\",\"求解：使用 intlinprog 函数求解0-1整数规划问题，并输出最优路径和最小总距离。\"]},\"741\":{\"c\":[\"数学建模\"]},\"742\":{\"c\":[\"数学建模\"]},\"743\":{\"h\":\"博弈模型\"},\"744\":{\"h\":\"博弈模型\",\"t\":[\"博弈模型是研究参与者在特定情境下做出决策时如何互动的数学框架。它在经济学、政治学、心理学、计算机科学等多个领域有广泛应用。博弈模型可以帮助理解竞争、合作、谈判等复杂社会现象。\"]},\"745\":{\"h\":\"博弈模型的基本概念\",\"t\":[\"玩家（Players）：博弈中的决策者。\",\"策略（Strategies）：玩家可以选择的行动方案。\",\"收益（Payoffs）：玩家在某种策略组合下获得的结果。\",\"信息（Information）：玩家在做出决策时所拥有的相关知识，可以是完全信息或不完全信息。\",\"均衡（Equilibrium）：玩家的策略组合，通常指纳什均衡，即在其他玩家策略不变的情况下，每个玩家都没有动力改变自己的策略。\"]},\"746\":{\"h\":\"博弈模型的分类\",\"t\":[\"合作博弈与非合作博弈：\",\"合作博弈：玩家可以形成联盟并达成合作协议。\",\"非合作博弈：玩家独立行动，不能强制合作。\",\"零和博弈与非零和博弈：\",\"零和博弈：一个玩家的收益完全等于其他玩家的损失，总收益为零。\",\"非零和博弈：玩家的收益可以同时增加或减少，总收益不为零。\",\"静态博弈与动态博弈：\",\"静态博弈：所有玩家同时做出决策，通常通过战略型博弈表示。\",\"动态博弈：玩家依次做出决策，时间因素起作用，通常通过扩展型博弈树表示。\",\"完全信息博弈与不完全信息博弈：\",\"完全信息博弈：所有玩家的策略和收益是公开的。\",\"不完全信息博弈：存在未公开的信息，如其他玩家的策略或类型。\"]},\"747\":{\"h\":\"博弈模型的应用\",\"t\":[\"经济学：如市场竞争分析、拍卖设计。\",\"政治学：如国际关系、选举策略。\",\"生物学：如动物行为的进化稳定策略（ESS）。\",\"计算机科学：如算法设计、网络安全。\"]},\"748\":{\"h\":\"常见博弈模型示例\",\"t\":[\"囚徒困境：一个经典的非合作博弈，展示了个人理性和集体理性之间的冲突。\",\"纳什均衡：一种策略组合，任何单个玩家都不能通过改变自己的策略来获得更好的结果。\"]},\"749\":{\"c\":[\"数学建模\"]},\"750\":{\"c\":[\"数学建模\"]},\"751\":{\"h\":\"综合评价方法\"},\"752\":{\"h\":\"综合评价\",\"t\":[\"综合评价方法（Multi-Criteria Decision Making, MCDM）是指在多维度、多指标条件下，对多个备选方案进行评价和选择的分析方法。它在工程、管理、经济学、环境科学等领域中广泛应用，用于在多个冲突性指标下做出最优决策。\"]},\"753\":{\"h\":\"综合评价方法的主要步骤\",\"t\":[\"确定评价目标和指标：明确评价的最终目标，选取相关的评价指标。这些指标可以是定量的（如成本、时间）或定性的（如满意度、可行性）。\",\"标准化处理：由于不同指标的量纲可能不同，需要对数据进行标准化处理，以使得不同指标可比。\",\"权重确定：为不同的评价指标分配权重，权重反映了指标的重要性，可以通过专家打分法、熵值法等方式确定。\",\"综合评价：根据各指标的权重和标准化后的值，计算各方案的综合得分。\",\"方案排序与选择：根据综合得分对各方案进行排序，选择最优方案或为决策提供参考。\"]},\"754\":{\"h\":\"常见的综合评价方法\",\"t\":[\"层次分析法（AHP, Analytic Hierarchy Process）：\",\"通过构建层次结构模型，将复杂问题分解为多个层次，然后逐对比较各个指标，最终确定每个方案的综合得分。\",\"优点：直观易懂，能够处理定性和定量数据。\",\"缺点：依赖于专家判断，主观性较强。\",\"熵权法：\",\"根据指标的客观数据计算各指标的熵值，熵值越小，指标的信息量越大，权重越高。\",\"优点：客观性较强，不依赖主观权重。\",\"缺点：对数据的敏感性较高，难以处理定性指标。\",\"TOPSIS法（Technique for Order Preference by Similarity to an Ideal Solution）：\",\"基于理想解和负理想解的概念，选择最接近理想解、最远离负理想解的方案。\",\"优点：考虑到各指标的相对距离，结果易于解释。\",\"缺点：对权重敏感，且需要合理选择标准化方法。\",\"灰色关联分析法：\",\"通过计算各方案与理想方案之间的关联度，选择关联度最大的方案。\",\"优点：能够处理不确定性和模糊性较大的问题。\",\"缺点：计算较为复杂，适用范围有限。\",\"模糊综合评价法：\",\"基于模糊数学的原理，适用于处理模糊性和不确定性较大的综合评价问题。\",\"优点：能够有效处理模糊信息，适应性强。\",\"缺点：需要构建较为复杂的隶属函数，计算量大。\",\"数据包络分析法（DEA, Data Envelopment Analysis）：\",\"通过线性规划方法，对多个决策单元的多输入多输出进行效率评价。\",\"优点：无需预设权重，适用于相同类型的决策单元。\",\"缺点：主要适用于效率评价，结果对极端值敏感。\"]},\"755\":{\"h\":\"综合评价方法的应用\",\"t\":[\"经济管理：如企业绩效评价、项目投资决策。\",\"工程技术：如工程方案选择、设备选型。\",\"环境科学：如环境影响评价、可持续发展评估。\",\"公共政策：如社会福利分配、教育资源配置。\",\"综合评价方法能够帮助决策者在复杂的多指标条件下做出合理的决策，选择最优方案或提供决策依据。如果你对某种具体方法的应用或计算步骤有进一步的需求，可以详细讨论。\"]},\"756\":{\"h\":\"综合评价指标\",\"t\":[\"综合评价指标是用于评估和比较不同方案或选项的标准或尺度。这些指标在综合评价方法中起到关键作用，通过量化或定性描述不同方案的优劣，帮助决策者进行判断和选择。\"]},\"757\":{\"h\":\"综合评价指标的分类\",\"t\":[\"综合评价指标通常可以根据不同的性质和用途进行分类：\",\"根据数据类型分类：\",\"定量指标：可以用具体数值表示的指标，如成本、时间、产量等。\",\"定性指标：难以用具体数值表示，通常通过专家打分或问卷调查等方式进行评估的指标，如满意度、风险、可行性等。\",\"根据评价目标分类：\",\"经济性指标：如成本、投资回报率、生产效率等，衡量方案的经济效益。\",\"技术性指标：如技术成熟度、可靠性、可操作性等，衡量方案的技术可行性。\",\"社会性指标：如就业影响、社会接受度等，衡量方案对社会的影响。\",\"环境性指标：如能源消耗、污染排放量、生态影响等，衡量方案的环境影响。\",\"根据重要性分类：\",\"核心指标：对评价结果起决定性作用的关键指标，通常权重较大。\",\"辅助指标：对评价结果有一定影响，但相对次要的指标，通常权重较小。\",\"根据性质分类：\",\"正向指标：指标值越大越好，如收益、满意度、效率等。\",\"负向指标：指标值越小越好，如成本、风险、污染等。\"]},\"758\":{\"h\":\"综合评价指标的确定方法\",\"t\":[\"专家咨询法：通过专家讨论或问卷调查，确定评价指标及其权重。\",\"文献研究法：通过查阅相关文献，借鉴已有研究中使用的指标体系。\",\"层次分析法（AHP）：构建层次结构，将复杂的评价目标分解为若干层次，并确定各层次中的评价指标。\",\"德尔菲法（Delphi）：通过多轮专家打分与反馈，逐步达成对指标和权重的共识。\"]},\"759\":{\"h\":\"综合评价指标的标准化\",\"t\":[\"在进行综合评价时，不同指标通常具有不同的量纲和数量级，因此需要对各指标进行标准化处理，以使得它们在同一尺度下可比。常见的标准化方法包括：\",\"极值标准化：将指标值按公式X′=Xmax​−Xmin​X−Xmin​​ 进行标准化，使其归一化到0到1之间。\",\"均值-标准差标准化：通过减去均值后除以标准差，将数据转化为标准正态分布。\",\"向量标准化：将指标值除以该指标的向量模，使得所有数据落在同一单位圆内。\"]},\"760\":{\"h\":\"综合评价指标的权重确定\",\"t\":[\"权重反映了不同指标的重要性。在综合评价中，权重的确定非常关键，常见的方法包括：\",\"主观赋权法：根据专家经验或决策者的主观判断赋予权重，如层次分析法（AHP）。\",\"客观赋权法：基于指标数据的内在特性赋予权重，如熵值法、变异系数法。\",\"组合赋权法：结合主观和客观方法，如将专家打分与熵值法结果结合。\"]},\"761\":{\"h\":\"综合评价指标的应用实例\",\"t\":[\"项目评价：在项目投资中，可能需要考虑经济性（如成本、投资回报率）、技术性（如技术难度、实施周期）、社会性（如社会影响、就业效应）和环境性（如环保指标、资源消耗）等多种指标。\",\"产品评估：在新产品开发中，可以考虑市场需求、技术创新、生产成本、竞争力、用户满意度等指标。\",\"政策评估：在政策制定中，可以使用社会效益、经济成本、可行性、风险等指标来评估政策的可行性和影响。\",\"综合评价指标的选择和权重分配直接影响评价结果，因此必须在评价前深入分析和审慎选择。\"]},\"762\":{\"h\":\"综合评价数据处理\",\"t\":[\"综合评价数据处理是指在综合评价过程中，对各项指标数据进行整理、转换、分析的过程，以便能够科学合理地对不同方案进行比较和评价。这个过程包括数据的收集、标准化、赋权、综合计算等多个环节。\"]},\"763\":{\"h\":\"综合评价数据处理的主要步骤\",\"t\":[\"数据收集：\",\"收集各项评价指标的原始数据，这些数据可以来自实际测量、调查问卷、文献资料等。\",\"确保数据的准确性、完整性和一致性。如果数据存在缺失或异常值，可能需要进行插补或修正。\",\"数据标准化：\",\"由于不同评价指标的量纲、数量级可能不同，需要对数据进行标准化处理，使不同指标可以在同一尺度下进行比较。\",\"常见的标准化方法包括： \",\"极值标准化（Min-Max Normalization）：将数据缩放到一个固定范围（通常是0到1之间）。\",\"X′=Xmax​−Xmin​X−Xmin​​\",\"Z-score标准化：将数据转换为标准正态分布（均值为0，标准差为1）。\",\"Z=σX−μ​\",\"向量标准化：将数据按其向量模归一化，使得数据在同一单位向量内。\",\"X′=∑i=1n​Xi2​​X​\",\"区间归一化：将数据标准化到特定的区间，如0到1之间。\",\"权重赋值：\",\"对各个指标分配权重，反映其在综合评价中的重要性。常见的权重赋值方法包括： \",\"专家打分法：通过专家评分确定各指标权重。\",\"熵值法：基于指标信息的离散度确定权重，信息熵越小，指标的重要性越大。\",\"层次分析法（AHP）：通过构建判断矩阵，计算指标的相对权重。\",\"变异系数法：基于指标的变异系数（标准差与均值的比率）来确定权重。\",\"综合评价计算：\",\"将标准化后的指标数据与权重相结合，计算各个方案的综合得分。常见的计算方法包括： \",\"加权求和法：最简单的综合评价方法，直接将各指标的标准化值乘以相应的权重后求和。\",\"Sj​=i=1∑n​wi​⋅Xij′​\",\"TOPSIS法：计算每个方案与理想解和负理想解的距离，选择距离理想解最近且距离负理想解最远的方案。\",\"灰色关联度法：计算每个方案与理想方案之间的关联度，选择关联度最大的方案。\",\"模糊综合评价法：将各项评价指标的模糊评价值进行加权求和，得到各方案的综合模糊评价值。\",\"结果分析与排序：\",\"根据综合得分对各个方案进行排序，得分最高的方案通常为最优方案。\",\"可以进行敏感性分析，评估不同权重设置对评价结果的影响。\",\"结合实际情况，分析各方案的优缺点，为最终决策提供依据。\",\"可视化与报告：\",\"将评价结果通过图表、报告等形式呈现，帮助决策者直观理解评价结果。\",\"常用的可视化方法包括雷达图、柱状图、热力图等。\"]},\"764\":{\"h\":\"处理综合评价数据时的注意事项\",\"t\":[\"数据的可靠性和一致性：\",\"数据的来源必须可靠，数据处理前应仔细检查数据的一致性，避免因数据质量问题导致评价结果偏差。\",\"标准化方法的选择：\",\"不同的标准化方法适用于不同的情况，选择合适的方法可以更好地反映各指标间的相对关系。\",\"权重的客观性：\",\"权重设置直接影响评价结果，应尽可能结合主观和客观的方法，以确保权重的合理性。\",\"敏感性分析：\",\"对不同权重、标准化方法等参数进行敏感性分析，以评估评价结果的稳健性，确保最终的评价结果具有较高的可信度。\",\"通过科学合理的数据处理，综合评价可以更加客观、公正地反映不同方案的优劣，为决策提供有力支持。如果你有具体的案例或数据需要处理，可以进一步探讨具体的操作步骤。\"]},\"765\":{\"h\":\"常用模型\",\"t\":[\"在综合评价中，选择合适的模型至关重要，不同的模型适用于不同的应用场景和数据类型。以下是几种常用的综合评价模型及其适用场景：\"]},\"766\":{\"h\":\"1.\",\"t\":[\"原理：将复杂问题分解为多个层次，构建层次结构模型。通过成对比较矩阵来确定各个指标的相对权重，然后计算每个方案的综合得分。\",\"优点：适用于多指标、多层次的复杂问题，能够处理定性和定量数据。通过层次结构的分解，能直观理解各因素之间的关系。\",\"缺点：依赖于专家的主观判断，成对比较可能带来一致性问题。\",\"应用场景：企业决策、项目评估、政策分析、产品选型等。\"]},\"767\":{\"h\":\"2.\",\"t\":[\"原理：基于信息熵理论，通过计算指标的数据离散度来确定权重。离散度越大，信息量越多，权重越高。\",\"优点：不依赖主观判断，权重客观且数据驱动。适用于定量数据的综合评价。\",\"缺点：对数据要求较高，特别是对数据分布的敏感性强。难以处理定性指标。\",\"应用场景：经济分析、绩效评估、资源分配等。\"]},\"768\":{\"h\":\"3.\",\"t\":[\"原理：通过计算每个方案与理想解和负理想解的欧几里得距离，选取距离理想解最近且距离负理想解最远的方案作为最优方案。\",\"优点：考虑了各指标的相对距离，结果直观易于理解。适用于定量和部分定性数据。\",\"缺点：对权重设置敏感，标准化方法选择不当可能影响结果。\",\"应用场景：投资决策、工程设计、供应链管理等。\"]},\"769\":{\"h\":\"4.\",\"t\":[\"原理：通过分析各方案与理想方案之间的灰色关联度来进行排序。关联度越大，方案越优。\",\"优点：能够处理不确定性较高、信息不完备的系统，适应性强。\",\"缺点：计算复杂，尤其是关联度的计算过程较为繁琐。\",\"应用场景：技术选择、产品设计、环境评估等。\"]},\"770\":{\"h\":\"5.\",\"t\":[\"原理：基于模糊数学理论，将定性和定量指标模糊化处理，通过隶属度函数来计算各个方案的模糊综合得分。\",\"优点：能够有效处理不确定性和模糊性问题，适用于复杂的综合评价问题。\",\"缺点：模型构建较为复杂，隶属函数的选取对结果有较大影响。\",\"应用场景：风险评估、质量管理、社会调查等。\"]},\"771\":{\"h\":\"6.\",\"t\":[\"原理：通过线性规划技术，分析多个决策单元在多输入、多输出情况下的相对效率。DEA评估不需要预设权重，结果为相对有效或无效。\",\"优点：能够有效评估多输入多输出的相对效率，无需主观赋权。\",\"缺点：适用于相同类型的决策单元，结果对极端值敏感。\",\"应用场景：绩效评价、资源配置、效率分析等。\"]},\"772\":{\"h\":\"7.\",\"t\":[\"原理：基于多指标优化和妥协解决方案理论，VIKOR法通过对多个备选方案的评价，选择妥协解决方案，适用于冲突性目标的综合评价。\",\"优点：能够处理多个冲突性评价指标，特别适合需要妥协的决策问题。\",\"缺点：结果依赖于权重和指标的选择，且需要妥善处理各指标间的冲突。\",\"应用场景：战略规划、政策制定、项目优选等。\"]},\"773\":{\"h\":\"8.\",\"t\":[\"原理：选择一个理想点（各指标的最优值）作为参照标准，计算各方案与理想点之间的距离，距离最小的方案为最优方案。\",\"优点：直观且计算简单，适用于定量评价问题。\",\"缺点：不适用于指标间存在较大差异或冲突的情况。\",\"应用场景：产品评估、项目选择、政策评价等。\"]},\"774\":{\"h\":\"9.\",\"t\":[\"原理：通过成对比较，将每个方案与其他所有方案进行比较，获胜次数最多的方案即为最优方案。\",\"优点：结果易于理解，适合处理较多备选方案的情况。\",\"缺点：当方案数量较大时，成对比较的数量会急剧增加，计算复杂度较高。\",\"应用场景：选举系统、决策支持、社会选择等。\"]},\"775\":{\"h\":\"10.\",\"t\":[\"原理：结合层次分析法和熵权法的优点，首先通过层次分析法确定指标的主观权重，再通过熵权法计算客观权重，最后使用TOPSIS法进行综合评价。\",\"优点：综合考虑了主客观因素，适用于复杂的评价体系。\",\"缺点：计算过程较复杂，需要合理处理主客观权重的组合。\",\"应用场景：大型项目评估、综合绩效管理、环境综合评价等。\",\"这些模型在不同的应用场景中各有优势，选择合适的综合评价模型需要根据实际的评价目标、指标特性、数据类型以及决策需求进行。\"]},\"776\":{\"c\":[\"数学建模\"]},\"777\":{\"c\":[\"数学建模\"]},\"778\":{\"h\":\"数学建模科技论文写作\"},\"779\":{\"h\":\"科技论文\"},\"780\":{\"h\":\"论文组成\",\"t\":[\"1：题目\",\"2：摘要\",\"3：关键词\",\"4：问题提出或重述不能直接抄袭原问题\",\"5：问题分析（可以不分析，放在正文当中论述）\",\"6：基本假设\",\"7：模型建立\",\"8：参数识别与模型求解\",\"9：结果分析和检验\",\"10：参考文献\",\"11：附录\"]},\"781\":{\"c\":[\"数学建模\"]},\"782\":{\"c\":[\"数学建模\"]},\"783\":{\"h\":\"图像处理\"},\"784\":{\"h\":\"图像处理\",\"t\":[\"图像处理理论是计算机视觉和数字图像处理的重要基础，涉及多个领域的知识。以下是一些关键理论概念的简介：\"]},\"785\":{\"h\":\"1.\",\"t\":[\"像素：图像是由许多像素组成的，每个像素代表图像中的一个点，并且具有颜色和亮度等属性。\",\"颜色模型：常见的颜色模型包括RGB（红绿蓝）、CMYK（青色、品红色、黄色和黑色）和灰度图像（仅有亮度信息）。\"]},\"786\":{\"h\":\"2.\",\"t\":[\"傅里叶变换：用于将图像从空间域转换到频率域，帮助分析图像的频率特性，如噪声过滤。\",\"离散余弦变换（DCT）：用于图像压缩（如JPEG），通过将图像表示为一系列余弦函数的加权和。\"]},\"787\":{\"h\":\"3.\",\"t\":[\"直方图均衡化：通过调整图像的亮度分布来增强对比度，使得图像的细节更加清晰。\",\"滤波：使用卷积核（如高斯滤波、拉普拉斯滤波）来平滑图像、去除噪声或增强边缘。\"]},\"788\":{\"h\":\"4.\",\"t\":[\"阈值分割：通过选择适当的阈值，将图像分割为前景和背景。\",\"边缘检测：检测图像中强度变化剧烈的区域，常用算法包括Canny、Sobel和Prewitt。\",\"区域增长：基于初始的“种子”点，通过将相似的邻近像素合并来分割区域。\"]},\"789\":{\"h\":\"5.\",\"t\":[\"膨胀和腐蚀：用于处理二值图像的形态操作，可以去除噪声、填补空洞或突出物体的形态特征。\",\"开运算和闭运算：组合膨胀和腐蚀的操作，用于平滑物体边缘或断开细小的连接。\"]},\"790\":{\"h\":\"6.\",\"t\":[\"角点检测：如Harris角点检测，用于在图像中检测出显著的角点，以便进行特征匹配和图像配准。\",\"纹理分析：利用统计方法（如共生矩阵）或频域方法（如小波变换）提取图像的纹理特征。\"]},\"791\":{\"h\":\"7.\",\"t\":[\"去模糊：使用逆滤波、维纳滤波等方法恢复因模糊、噪声等引起的图像退化。\",\"插值方法：如双线性插值、双三次插值，用于放大或缩小图像时恢复图像的细节。\"]},\"792\":{\"h\":\"8.\",\"t\":[\"卷积神经网络（CNN）：用于图像分类、对象检测等任务，通过自动学习图像的特征。\",\"生成对抗网络（GAN）：用于图像生成、去噪和超分辨率重建等。\"]},\"793\":{\"h\":\"图像处理的工具\",\"t\":[\"图像处理有许多工具可供使用，涵盖了从基本编辑到高级分析的各个方面。以下是一些常用的图像处理工具：\"]},\"794\":{\"h\":\"1.\",\"t\":[\"OpenCV：一个强大的开源计算机视觉库，支持多种编程语言（如Python、C++）。提供了图像读取、处理、分析等丰富的功能。\",\"Pillow：Python Imaging Library (PIL) 的一个分支，适用于图像处理的轻量级库，特别适合进行基本图像操作，如剪裁、旋转、滤镜应用等。\",\"scikit-image：基于Python的图像处理库，构建于SciPy之上，提供了丰富的图像处理算法和工具。\",\"MATLAB：拥有强大的图像处理工具箱，适合学术研究和工业应用，常用于原型开发和算法验证。\",\"GIMP：GNU图像处理程序，是一个免费的开源图像编辑工具，类似于Adobe Photoshop，支持各种图像编辑和处理操作。\"]},\"795\":{\"h\":\"2.\",\"t\":[\"Adobe Photoshop：专业的图像编辑软件，提供了全面的图像处理和设计工具，适用于图像编辑、修复、增强、合成等。\",\"CorelDRAW：图像编辑和矢量图形设计软件，广泛用于印刷设计和多媒体制作。\",\"Adobe Lightroom：专注于照片的组织和处理，特别适合摄影师处理和调整大量图像。\"]},\"796\":{\"h\":\"3.\",\"t\":[\"Canva：一种在线图形设计工具，提供了简单易用的界面，适合非专业用户进行图像编辑和设计。\",\"Fotor：一个在线图像编辑平台，提供了基本的图像处理功能，如裁剪、调整、滤镜应用等。\",\"Pixlr：在线图像编辑工具，具有类似Photoshop的界面和功能，可以在浏览器中直接使用。\"]},\"797\":{\"h\":\"4.\",\"t\":[\"TensorFlow 和 Keras：用于图像处理和计算机视觉任务的深度学习框架，广泛应用于图像分类、对象检测、图像生成等任务。\",\"PyTorch：一个深度学习框架，提供灵活的动态计算图，非常适合研究和原型开发。\",\"Detectron2：Facebook AI Research (FAIR) 的开源对象检测平台，基于PyTorch，用于最先进的目标检测和分割任务。\"]},\"798\":{\"h\":\"5.\",\"t\":[\"ImageJ：一个基于Java的图像处理和分析工具，广泛用于生物医学图像分析，支持插件扩展和脚本编写。\",\"NI Vision：由National Instruments开发的图像处理工具，集成于LabVIEW中，适合工业视觉检测应用。\"]},\"799\":{\"h\":\"python的图像处理\",\"t\":[\"Python 是图像处理领域非常流行的编程语言，拥有丰富的库和工具来处理和分析图像。以下是一些常用的 Python 图像处理库及其功能介绍：\"]},\"800\":{\"h\":\"1.\",\"t\":[\"功能：OpenCV 是一个强大的计算机视觉库，支持各种图像处理操作，如读取、显示、剪裁、旋转、缩放、滤波、边缘检测、特征提取等。它还支持视频处理、对象检测和跟踪、图像分割、深度学习模型的集成等高级功能。\",\"安装：pip install opencv-python\",\"示例代码：\",\"import cv2 image = cv2.imread('image.jpg') gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) cv2.imwrite('gray_image.jpg', gray_image)\"]},\"801\":{\"h\":\"2.\",\"t\":[\"功能：Pillow 是一个用于基本图像处理的库，可以执行图像打开、保存、剪裁、滤镜应用、颜色调整等操作。它是 Python Imaging Library (PIL) 的一个分支和改进版，适合需要简单图像处理的场景。\",\"安装：pip install Pillow\",\"示例代码：\",\"from PIL import Image, ImageFilter image = Image.open('image.jpg') blurred_image = image.filter(ImageFilter.BLUR) blurred_image.save('blurred_image.jpg')\"]},\"802\":{\"h\":\"3.\",\"t\":[\"功能：scikit-image 是一个基于 SciPy 的图像处理库，提供了高级的图像处理算法和工具，如图像分割、几何变换、颜色空间处理、特征提取、去噪等。它与其他科学计算库（如 NumPy 和 SciPy）无缝集成。\",\"安装：pip install scikit-image\",\"示例代码：\",\"from skimage import io, filters image = io.imread('image.jpg', as_gray=True) edges = filters.sobel(image) io.imsave('edges.jpg', edges)\"]},\"803\":{\"h\":\"4.\",\"t\":[\"功能：NumPy 是 Python 的一个强大的数值计算库，虽然它不是专门用于图像处理的，但由于图像可以被视为多维数组，NumPy 在图像处理中的作用非常重要。许多图像处理操作，如图像变换、滤波、颜色通道处理等，都可以通过 NumPy 实现。\",\"安装：pip install numpy\",\"示例代码：\",\"import numpy as np import cv2 image = cv2.imread('image.jpg') flipped_image = np.flipud(image) cv2.imwrite('flipped_image.jpg', flipped_image)\"]},\"804\":{\"h\":\"5.\",\"t\":[\"功能：Matplotlib 是一个绘图库，虽然它主要用于数据可视化，但也可以用于显示和处理图像。它可以方便地展示图像，并进行一些简单的处理操作，如绘制直方图、调整颜色通道等。\",\"安装：pip install matplotlib\",\"示例代码：\",\"import matplotlib.pyplot as plt import cv2 image = cv2.imread('image.jpg') plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)) plt.show()\"]},\"805\":{\"h\":\"6.\",\"t\":[\"功能：ImageAI 是一个基于深度学习的图像处理库，简化了图像分类、对象检测、图像识别等任务的实现。它支持多种预训练模型，如 ResNet、YOLO、RetinaNet 等。\",\"安装：pip install imageai --upgrade\",\"示例代码：\",\"from imageai.Detection import ObjectDetection detector = ObjectDetection() detector.setModelTypeAsRetinaNet() detector.setModelPath('resnet50_coco_best_v2.0.1.h5') detector.loadModel() detections = detector.detectObjectsFromImage(input_image='image.jpg', output_image_path='detected.jpg')\"]},\"806\":{\"h\":\"MATLAB的图像处理\",\"t\":[\"MATLAB 是图像处理领域中非常强大且广泛使用的工具，尤其在学术研究和工程应用中。MATLAB 提供了丰富的图像处理工具箱（Image Processing Toolbox），可以处理各种图像分析任务。以下是 MATLAB 在图像处理中的主要功能和一些基本操作示例：\"]},\"807\":{\"h\":\"1.\",\"t\":[\"功能：读取和显示图像文件。\",\"示例代码：\",\"% 读取图像 image = imread('image.jpg'); % 显示图像 imshow(image); % 显示图像的基本信息 imfinfo('image.jpg');\"]},\"808\":{\"h\":\"2.\",\"t\":[\"功能：转换图像的颜色空间，进行灰度化等操作。\",\"示例代码：\",\"% 转换为灰度图像 gray_image = rgb2gray(image); % 显示灰度图像 imshow(gray_image);\"]},\"809\":{\"h\":\"3.\",\"t\":[\"功能：通过直方图均衡化、调整对比度和滤波等方法增强图像。\",\"示例代码：\",\"% 直方图均衡化 enhanced_image = histeq(gray_image); % 显示增强后的图像 imshow(enhanced_image); % 应用高斯滤波 gaussian_filtered_image = imgaussfilt(image, 2); imshow(gaussian_filtered_image);\"]},\"810\":{\"h\":\"4.\",\"t\":[\"功能：使用不同的算法（如 Sobel、Canny）检测图像中的边缘。\",\"示例代码：\",\"% 使用 Canny 算法进行边缘检测 edges = edge(gray_image, 'Canny'); imshow(edges);\"]},\"811\":{\"h\":\"5.\",\"t\":[\"功能：使用阈值分割、区域生长或分水岭算法对图像进行分割。\",\"示例代码：\",\"% Otsu 阈值分割 level = graythresh(gray_image); bw_image = imbinarize(gray_image, level); imshow(bw_image); % 分水岭算法 L = watershed(imcomplement(gray_image)); imshow(label2rgb(L, 'jet', 'w'));\"]},\"812\":{\"h\":\"6.\",\"t\":[\"功能：进行膨胀、腐蚀、开运算、闭运算等形态学操作，处理二值图像的形态特征。\",\"示例代码：\",\"% 创建一个结构元素 se = strel('disk', 5); % 进行膨胀操作 dilated_image = imdilate(bw_image, se); imshow(dilated_image); % 进行腐蚀操作 eroded_image = imerode(bw_image, se); imshow(eroded_image);\"]},\"813\":{\"h\":\"7.\",\"t\":[\"功能：从图像中提取角点、边缘、纹理等特征，用于图像匹配和识别。\",\"示例代码：\",\"% Harris 角点检测 corners = detectHarrisFeatures(gray_image); imshow(image); hold on; plot(corners.selectStrongest(50));\"]},\"814\":{\"h\":\"8.\",\"t\":[\"功能：去除图像中的噪声和模糊，进行去噪或反卷积处理。\",\"示例代码：\",\"% 使用维纳滤波进行去噪 noisy_image = imnoise(gray_image, 'gaussian', 0, 0.01); restored_image = wiener2(noisy_image, [5 5]); imshow(restored_image);\"]},\"815\":{\"h\":\"9.\",\"t\":[\"功能：执行图像的旋转、缩放、平移、仿射变换等。\",\"示例代码：\",\"% 图像旋转 rotated_image = imrotate(image, 45); imshow(rotated_image); % 图像缩放 resized_image = imresize(image, 0.5); imshow(resized_image);\"]},\"816\":{\"h\":\"10.\",\"t\":[\"功能：计算图像的统计特性，进行区域属性测量（如区域面积、周长等）。\",\"示例代码：\",\"% 计算二值图像中区域的属性 stats = regionprops(bw_image, 'Area', 'Perimeter'); disp(stats);\"]},\"817\":{\"h\":\"图像处理的实例\",\"t\":[\"以下是几个常见的图像处理实例，它们涵盖了基本的图像处理操作到一些高级的处理任务。每个实例都使用Python的库进行实现，主要使用OpenCV和Pillow（PIL）。\"]},\"818\":{\"h\":\"实例 1：灰度转换\",\"t\":[\"将彩色图像转换为灰度图像是图像处理中的基本操作之一。\",\"import cv2 # 读取彩色图像 image = cv2.imread('image.jpg') # 转换为灰度图像 gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # 保存灰度图像 cv2.imwrite('gray_image.jpg', gray_image)\"]},\"819\":{\"h\":\"实例 2：高斯模糊\",\"t\":[\"高斯模糊用于去除图像中的噪声，平滑图像。\",\"import cv2 # 读取图像 image = cv2.imread('image.jpg') # 应用高斯模糊 blurred_image = cv2.GaussianBlur(image, (15, 15), 0) # 保存模糊后的图像 cv2.imwrite('blurred_image.jpg', blurred_image)\"]},\"820\":{\"h\":\"实例 3：边缘检测（Canny算法）\",\"t\":[\"使用Canny算法检测图像中的边缘，这对于许多计算机视觉任务是关键的一步。\",\"import cv2 # 读取图像并转换为灰度 image = cv2.imread('image.jpg') gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # 应用Canny边缘检测 edges = cv2.Canny(gray_image, 100, 200) # 保存边缘检测结果 cv2.imwrite('edges.jpg', edges)\"]},\"821\":{\"h\":\"实例 4：图像缩放\",\"t\":[\"图像缩放是图像处理中的基本几何变换操作之一。\",\"from PIL import Image # 读取图像 image = Image.open('image.jpg') # 缩放图像 resized_image = image.resize((300, 300)) # 保存缩放后的图像 resized_image.save('resized_image.jpg')\"]},\"822\":{\"h\":\"实例 5：图像旋转\",\"t\":[\"图像旋转是另一种常见的几何变换操作，通常用于数据增强或图像预处理。\",\"from PIL import Image # 读取图像 image = Image.open('image.jpg') # 旋转图像 rotated_image = image.rotate(45) # 保存旋转后的图像 rotated_image.save('rotated_image.jpg')\"]},\"823\":{\"h\":\"实例 6：图像直方图均衡化\",\"t\":[\"直方图均衡化用于增强图像对比度，使得图像的亮度分布更加均匀。\",\"import cv2 # 读取图像并转换为灰度 image = cv2.imread('image.jpg') gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # 应用直方图均衡化 equalized_image = cv2.equalizeHist(gray_image) # 保存均衡化后的图像 cv2.imwrite('equalized_image.jpg', equalized_image)\"]},\"824\":{\"h\":\"实例 7：图像二值化（Thresholding）\",\"t\":[\"二值化将图像转换为只有黑白两种颜色的图像，通常用于图像分割或边缘检测前的预处理。\",\"import cv2 # 读取图像并转换为灰度 image = cv2.imread('image.jpg') gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # 应用二值化 _, binary_image = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY) # 保存二值化后的图像 cv2.imwrite('binary_image.jpg', binary_image)\"]},\"825\":{\"h\":\"实例 8：图像形态学操作（膨胀与腐蚀）\",\"t\":[\"形态学操作用于处理图像的结构特征，常见操作包括膨胀、腐蚀、开运算、闭运算等。\",\"import cv2 import numpy as np # 读取二值图像 image = cv2.imread('binary_image.jpg', 0) # 创建结构元素 kernel = np.ones((5, 5), np.uint8) # 膨胀图像 dilated_image = cv2.dilate(image, kernel, iterations=1) # 腐蚀图像 eroded_image = cv2.erode(image, kernel, iterations=1) # 保存结果 cv2.imwrite('dilated_image.jpg', dilated_image) cv2.imwrite('eroded_image.jpg', eroded_image)\"]},\"826\":{\"h\":\"实例 9：图像特征检测（Harris角点检测）\",\"t\":[\"Harris角点检测用于检测图像中的角点，常用于图像匹配和对象识别。\",\"import cv2 import numpy as np # 读取图像并转换为灰度 image = cv2.imread('image.jpg') gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # Harris角点检测 gray_image = np.float32(gray_image) dst = cv2.cornerHarris(gray_image, 2, 3, 0.04) # 将角点标注在原图上 image[dst > 0.01 * dst.max()] = [0, 0, 255] # 保存结果 cv2.imwrite('harris_corners.jpg', image)\"]},\"827\":{\"h\":\"实例 10：人脸检测\",\"t\":[\"使用Haar级联分类器进行人脸检测，这是计算机视觉中的一个经典任务。\",\"import cv2 # 加载预训练的人脸检测模型 face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml') # 读取图像并转换为灰度 image = cv2.imread('image.jpg') gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # 检测人脸 faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30)) # 绘制矩形框标记人脸 for (x, y, w, h) in faces: cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2) # 保存结果 cv2.imwrite('detected_faces.jpg', image)\"]},\"828\":{\"c\":[\"数学建模\"]},\"829\":{\"c\":[\"数学建模\"]},\"830\":{\"h\":\"非线性规划和多目标规划模型\"},\"831\":{\"h\":\"非线性规划模型\",\"t\":[\"非线性规划（Nonlinear Programming, NLP）是用于优化问题的一种数学方法，其中目标函数或约束条件中至少有一个是非线性的。非线性规划模型在许多工程、经济学、管理学和其他领域中有广泛的应用。以下是非线性规划模型的基本概述：\"]},\"832\":{\"h\":\"1. 模型结构\",\"t\":[\"一个非线性规划问题通常可以表示为：\",\"minimizesubject to​f(x)gi​(x)≤0,i=1,2,…,mhj​(x)=0,j=1,2,…,px∈X​\",\"其中：\",\"f(x) 是目标函数，需要最小化或最大化。\",\"gi​(x) 是不等式约束。\",\"hj​(x) 是等式约束。\",\"X 是决策变量的可行域。\"]},\"833\":{\"h\":\"2. 非线性规划问题的分类\",\"t\":[\"根据问题的不同特点，非线性规划可以分为几种类型：\",\"凸规划问题：目标函数和约束都是凸的。凸规划问题通常较易求解。\",\"非凸规划问题：目标函数或约束中存在非凸部分，可能存在多个局部最优解。\",\"约束优化问题：包含等式和不等式约束。\",\"无约束优化问题：没有约束条件，仅优化目标函数。\"]},\"834\":{\"h\":\"3. 常用算法\",\"t\":[\"非线性规划问题的求解方法有很多，常用的算法包括：\",\"梯度下降法：适用于无约束优化问题，逐步沿着梯度方向搜索最优解。\",\"牛顿法：利用目标函数的二阶导数信息，加快收敛速度。\",\"罚函数法：将约束问题转化为无约束问题，通过引入罚函数处理约束条件。\",\"拉格朗日乘数法：将等式约束融入目标函数，构建拉格朗日函数求解。\",\"进化算法：如遗传算法、粒子群优化等，适用于全局优化问题。\"]},\"835\":{\"h\":\"4. 应用示例\"},\"836\":{\"h\":\"示例 1：投资组合优化\",\"t\":[\"目标是在满足一定风险约束的情况下，最大化投资组合的收益。模型可以表示为：\",\"maximizesubject to​R(x)=i=1∑n​ri​xi​i=1∑n​σi​xi​≤σ0​i=1∑n​xi​=1xi​≥0,i=1,2,…,n​\",\"其中 R(x) 是投资组合的收益，ri​ 是资产 i 的预期收益，σi​ 是资产 i 的风险，σ0​ 是允许的最大风险。\"]},\"837\":{\"h\":\"示例 2：非线性回归\",\"t\":[\"在数据拟合中，找到使模型与数据点误差最小的参数。模型可以表示为：\",\"minimizesubject to​i=1∑n​(yi​−f(xi​,β))2β∈Rp​\",\"其中 yi​ 是观测值，f(xi​,β) 是预测值，β 是待估参数。\"]},\"838\":{\"h\":\"5. 软件工具\",\"t\":[\"许多软件和工具可以用于求解非线性规划问题，如：\",\"MATLAB：提供了强大的优化工具箱。\",\"GAMS：适用于大规模数学规划问题。\",\"AMPL：一个高级建模语言，支持多种求解器。\",\"Python：使用库如SciPy、Pyomo等。\"]},\"839\":{\"h\":\"多目标规划模型\",\"t\":[\"多目标规划模型（Multi-objective Programming Model）是一种用于解决包含多个目标的优化问题的方法。在现实世界中，很多问题不仅仅有一个目标，而是有多个相互冲突或需要同时考虑的目标。多目标规划模型旨在在这些目标之间找到一个平衡点，使得综合结果达到最优。\"]},\"840\":{\"h\":\"多目标规划模型的基本概念\",\"t\":[\"目标函数：这些是需要优化的目标。例如，在一个生产计划问题中，可能希望同时最小化成本和最大化产量。\",\"决策变量：这些是可以控制或调整的变量，影响目标函数的值。\",\"约束条件：这些是必须满足的限制条件。例如，资源的限制、时间的限制等。\",\"Pareto最优解：在多目标规划中，一个解被称为Pareto最优解（或非支配解），如果不存在另一个解在所有目标上都优于它。简单来说，就是没有其他解在不使一个目标变差的情况下使得其他目标变得更好。\"]},\"841\":{\"h\":\"多目标规划模型的构建步骤\",\"t\":[\"确定目标和决策变量：明确需要优化的多个目标，以及可以调整的决策变量。\",\"建立数学模型：将目标和约束条件转化为数学表达式，构建多目标规划的数学模型。\",\"求解方法：\",\"加权和法：将多个目标通过加权和的方式转化为一个单目标优化问题。\",\"目标规划法：为每个目标设定一个期望值，然后通过最小化目标偏差的方式来进行优化。\",\"Pareto优化法：直接寻找Pareto最优解集，通过绘制Pareto前沿来分析和选择最优解。\",\"进化算法：如遗传算法、多目标粒子群优化等，这些算法可以有效地处理复杂的多目标优化问题。\",\"分析和选择最优解：通过求解得到一组Pareto最优解，然后根据具体需求和偏好进行分析和选择。\"]},\"842\":{\"h\":\"实例\",\"t\":[\"假设我们有一个生产计划问题，需要同时最小化生产成本和最大化生产质量。设决策变量为x1​,x2​，目标函数为f1​(x)（成本）和f2​(x)（质量），约束条件为gi​(x)≤bi​。\",\"模型可以表示为：\",\"minimizemaximizesubject to​f1​(x)(成本)f2​(x)(质量)gi​(x)≤bi​,i=1,2,…,mx≥0​\",\"通过上述步骤构建模型，并采用合适的方法求解，可以得到一组Pareto最优解，最终根据具体情况选择最优解。\"]},\"843\":{\"h\":\"工具和软件\",\"t\":[\"在实际应用中，可以使用一些专门的软件和工具来求解多目标规划问题，如MATLAB、Lingo、GAMS、R语言中的相关包等。\"]},\"844\":{\"h\":\"实践应用\",\"t\":[\"多目标规划模型在工程、经济、管理、交通运输等多个领域有广泛应用。例如：\",\"工程设计中的结构优化问题。\",\"物流运输中的路径优化问题。\",\"财务管理中的投资组合优化问题。\",\"环境管理中的资源分配问题。\",\"你在太赫兹传感检测、水质分析、海参轨迹追踪及生理特征信号识别的研究中，也可以利用多目标规划模型来优化相关参数，提高研究结果的质量和效\"]},\"845\":{\"c\":[\"数学建模\"]},\"846\":{\"c\":[\"数学建模\"]},\"847\":{\"h\":\"常微分方程模型\"},\"848\":{\"h\":\"常微分方程\",\"t\":[\"数学建模中的微分方程模型是用来描述系统动态行为的重要工具，通过建立微分方程模型，可以刻画系统随时间或其他变量变化的规律。微分方程模型在自然科学、工程、经济学、生物学等领域有广泛应用，能够帮助人们理解和预测复杂系统的行为。\"]},\"849\":{\"h\":\"微分方程模型的作用\",\"t\":[\"描述动态系统：微分方程可以描述物理、化学、生物等系统的动态变化，例如人口增长、化学反应速率、传染病传播等。\",\"预测系统行为：通过求解微分方程，可以预测系统在未来的行为，为决策提供依据。\",\"优化与控制：在工程中，通过微分方程模型可以设计和优化控制策略，例如自动控制系统中的PID控制器设计。\",\"解释现象：微分方程模型可以帮助解释观察到的现象，通过拟合实验数据建立模型。\"]},\"850\":{\"h\":\"应用问题示例\",\"t\":[\"人口增长模型：\",\"描述人口随时间变化的规律。\",\"常见的模型如Malthus模型和Logistic模型。\",\"传染病模型：\",\"描述传染病在群体中的传播规律。\",\"常见的模型如SIR模型和SEIR模型。\",\"物理运动模型：\",\"描述物体在力作用下的运动。\",\"常见的模型如自由落体运动、阻尼振动等。\",\"生态系统模型：\",\"描述不同物种之间的相互作用和演化。\",\"常见的模型如捕食-被捕食模型（Lotka-Volterra模型）。\",\"经济学模型：\",\"描述经济指标如GDP、通货膨胀、失业率等随时间的变化。\",\"常见的模型如Solow经济增长模型。\"]},\"851\":{\"h\":\"示例：SIR传染病模型\",\"t\":[\"SIR模型是一种经典的传染病模型，用于描述易感者(Susceptible)、感染者(Infected)和康复者(Recovered)在时间上的变化。\",\"模型的微分方程为：\",\"[ \\\\frac{dS}{dt} = -\\\\beta SI ] [ \\\\frac{dI}{dt} = \\\\beta SI - \\\\gamma I ] [ \\\\frac{dR}{dt} = \\\\gamma I ]\",\"其中， ( S ) 是易感者数量， ( I ) 是感染者数量， ( R ) 是康复者数量， ( \\\\beta ) 是传播率， ( \\\\gamma ) 是康复率。\"]},\"852\":{\"h\":\"Python代码实现\",\"t\":[\"以下代码展示了如何使用Python中的scipy.integrate.solve_ivp求解SIR模型，并绘制结果：\",\"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # 定义SIR模型 def sir_model(t, y, beta, gamma): S, I, R = y dSdt = -beta * S * I dIdt = beta * S * I - gamma * I dRdt = gamma * I return [dSdt, dIdt, dRdt] # 初始条件 S0, I0, R0 = 0.99, 0.01, 0.0 # 初始易感者、感染者、康复者比例 y0 = [S0, I0, R0] # 参数 beta = 0.3 # 传播率 gamma = 0.1 # 康复率 # 定义时间范围 t_span = (0, 160) t_eval = np.linspace(0, 160, 400) # 求解SIR模型 solution = solve_ivp(sir_model, t_span, y0, args=(beta, gamma), t_eval=t_eval) # 绘制结果 plt.plot(solution.t, solution.y[0], label='Susceptible') plt.plot(solution.t, solution.y[1], label='Infected') plt.plot(solution.t, solution.y[2], label='Recovered') plt.xlabel('Time') plt.ylabel('Proportion') plt.title('SIR Model') plt.legend() plt.grid() plt.show()\"]},\"853\":{\"h\":\"代码解释\",\"t\":[\"定义SIR模型：\",\"sir_model(t, y, beta, gamma)：定义SIR模型的微分方程。\",\"dSdt、dIdt、dRdt：分别表示易感者、感染者和康复者的变化率。\",\"初始条件：\",\"S0, I0, R0：初始易感者、感染者和康复者的比例。\",\"参数：\",\"beta：传播率。\",\"gamma：康复率。\",\"定义时间范围：\",\"t_span：定义时间范围。\",\"t_eval：定义评估的时间点。\",\"求解SIR模型：\",\"使用solve_ivp函数，指定SIR模型、时间范围、初始条件和参数。\",\"绘制结果：\",\"使用Matplotlib绘制易感者、感染者和康复者随时间变化的曲线。\"]},\"854\":{\"h\":\"一个实例-物体冷却问题\",\"t\":[\" 要解决这个问题，我们需要基于尸体冷却的模型来判断嫌疑人张某是否有可能在案发现场。尸体冷却常用的模型是Newton冷却定律，其形式如下：\",\"dtdT​=−k(T−Tenv​)\",\"其中：\",\"(T(t)) 是尸体在时间 (t) 的温度\",\"(Tenv​) 是环境温度\",\"(k) 是冷却常数\",\"(t) 是时间\",\"根据Newton冷却定律，可以通过求解微分方程来模拟尸体冷却过程。以下是Python代码，用于基于给定条件求解微分方程，并判断张某是否有可能在案发现场。\"]},\"855\":{\"h\":\"问题中的条件\",\"t\":[\"尸体发现时间：晚上 7:30\",\"法医到达现场时间：晚上 8:20\",\"法医测得尸体温度：32.6℃\",\"尸体搬走时间：法医到达1小时后，即晚上9:20\",\"搬走时测得尸体温度：31.4℃\",\"环境温度：21.1℃\",\"张某离开办公室时间：下午5:00\",\"从张某到受害者现场步行需5分钟\"]},\"856\":{\"h\":\"Python代码\",\"t\":[\"import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt # 定义冷却常数 def cooling_law(t, T, k, T_env): return -k * (T - T_env) # 初始条件 T_env = 21.1 # 环境温度 T1 = 32.6 # 法医到达时尸体温度 T2 = 31.4 # 尸体搬走时温度 t1 = 0 # 法医到达时间，假设为t=0 t2 = 60 # 搬走时间，假设为t=60分钟 # 根据温度变化计算冷却常数k k = -np.log((T2 - T_env) / (T1 - T_env)) / (t2 - t1) # 定义时间范围 t_span = (0, 120) # 模拟时间范围，0到120分钟 t_eval = np.linspace(0, 120, 1000) # 初始条件，法医到达时的温度 y0 = [T1] # 求解微分方程 solution = solve_ivp(cooling_law, t_span, y0, args=(k, T_env), t_eval=t_eval) # 获取时间和温度数据 t = solution.t T = solution.y[0] # 找出7:30之前的时间点 t_offset = 50 # 法医到达时间为7:30，搬走时间为8:20 t_actual = t - t_offset # 时间往前偏移50分钟，即7:30之前 # 绘制结果 plt.plot(t_actual, T, label='Body Temperature') plt.axvline(x=-140, color='r', linestyle='--', label='5:00 PM') plt.axvline(x=-90, color='b', linestyle='--', label='7:30 PM') plt.xlabel('Time (minutes from 5:00 PM)') plt.ylabel('Temperature (°C)') plt.title('Body Cooling Curve') plt.legend() plt.grid() plt.show() # 判断是否可信 if T[np.abs(t_actual + 90).argmin()] <= T1: print(\\\"张某的证言是可信的\\\") else: print(\\\"张某的证言不可信\\\")\"]},\"857\":{\"h\":\"代码解释\",\"t\":[\"定义冷却定律：根据Newton冷却定律定义微分方程。\",\"初始条件：包括环境温度、法医测得的尸体温度、搬走时的尸体温度等。\",\"计算冷却常数：利用法医测得的两次温度和时间差计算冷却常数 ( k )。\",\"求解微分方程：使用solve_ivp求解微分方程，得到温度随时间的变化。\",\"绘制结果：绘制尸体温度随时间变化的曲线，并标出关键时间点（如张某离开办公室的时间）。\",\"判断可信性：通过比较法医到达时间前尸体温度，判断张某的证言是否可信。\"]},\"858\":{\"h\":\"结果\",\"t\":[\"通过运行上述代码，可以得到尸体冷却的温度曲线，并且判断张某是否有可能在案发现场。如果法医到达之前的尸体温度符合计算结果，则张某的证言可信；否则，不可信。\"]},\"859\":{\"c\":[\"数学建模\"]},\"860\":{\"c\":[\"数学建模\"]},\"861\":{\"h\":\"差分方程模型\"},\"862\":{\"h\":\"差分方程\",\"t\":[\"差分方程（Difference Equation）是描述离散变量之间关系的方程，与微分方程类似，但用于离散系统。差分方程在数字信号处理、控制系统、经济学等领域有广泛应用。以下是对差分方程的一些基本介绍：\"]},\"863\":{\"h\":\"差分方程的定义\",\"t\":[\"差分方程是关于序列的方程，通常描述序列中一个元素与其前几个元素之间的关系。一般形式如下：\",\"an​=f(an−1​,an−2​,…,an−k​)\",\"其中，an​ 表示序列在第 n 项的值，f 是一个函数，描述了当前值与前几项值之间的关系。\"]},\"864\":{\"h\":\"线性差分方程\",\"t\":[\"最常见的差分方程是线性差分方程，形式如下：\",\"an​=c1​an−1​+c2​an−2​+⋯+ck​an−k​+g(n)\",\"其中，c1​,c2​,…,ck​ 是常数，g(n) 是一个函数，表示非齐次部分。如果 g(n)=0，则方程是齐次的。\"]},\"865\":{\"h\":\"差分方程的解\",\"t\":[\"解差分方程的方法包括以下几种：\",\"直接求解法：适用于简单的差分方程，通过代入初始条件逐步求解。\",\"特征方程法：适用于线性齐次差分方程，利用特征根求解。\",\"齐次解与特解法：适用于非齐次差分方程，先求齐次解，再求特解，最后将两者结合。\"]},\"866\":{\"h\":\"示例\",\"t\":[\"简单的线性齐次差分方程：\",\"考虑 an​−2an−1​=0，初始条件a0​=1 。\",\"该方程的特征方程为 r−2=0，解得 r=2。\",\"因此，通解为 an​=C⋅2n。\",\"结合初始条件 $a_0 = 1 $，得 $ C = 1$。\",\"最终解为 $ a_n = 2^n$。\",\"非齐次差分方程：\",\"考虑 an​−an−1​=n，初始条件 a0​=0。\",\"齐次方程 an​−an−1​=0 的通解为 anh​=C。\",\"选择特解 anp​=An+B，代入非齐次方程，得到 A=1，B=−1。\",\"因此，特解为 anp​=n−1。\",\"最终解为 an​=anh​+anp​=C+n−1。\",\"结合初始条件 a0​=0，得 C=1。\",\"最终解为 an​=n。\"]},\"867\":{\"h\":\"应用\",\"t\":[\"差分方程在许多领域都有应用，例如：\",\"数字信号处理：滤波器设计、信号分析。\",\"控制系统：系统建模、预测控制。\",\"经济学：时间序列分析、经济模型。\"]},\"868\":{\"h\":\"差分方程模型\",\"t\":[\"在数学建模中，差分方程模型是一种重要工具，特别适用于描述离散时间系统或离散空间系统的动态行为。这些模型在经济学、生态学、工程、物理等多个领域都有广泛应用。以下是一些差分方程模型在不同领域中的应用及其基本概念：\"]},\"869\":{\"h\":\"1. 人口增长模型\",\"t\":[\"人口增长可以用差分方程来描述，特别是当考虑离散的时间步长时。经典的人口增长模型如下：\",\"Pt+1​=Pt​+rPt​(1−KPt​​)\",\"其中：\",\"Pt​ 表示第 t 期的人口数量。\",\"r 是内禀增长率。\",\"K 是环境承载能力。\",\"这个方程称为离散形式的Logistic增长模型。\"]},\"870\":{\"h\":\"2. 经济学中的存款模型\",\"t\":[\"银行存款的积累可以用差分方程来描述，假设每期的存款都会按一定利率增长，同时有固定的存款和取款：\",\"Dt+1​=Dt​+s−w+rDt​\",\"其中：\",\"Dt​ 表示第 t 期的存款金额。\",\"s 是每期的固定存款。\",\"w 是每期的固定取款。\",\"r 是利率。\"]},\"871\":{\"h\":\"3. 生态系统模型\",\"t\":[\"捕食-被捕食模型（例如Lotka-Volterra模型）可以用差分方程来描述，表示捕食者和被捕食者种群的动态变化：\",\"{xt+1​=xt​+axt​−bxt​yt​yt+1​=yt​−cyt​+dxt​yt​​\",\"其中：\",\"xt​ 和 yt​ 分别表示第 t 期的被捕食者和捕食者的数量。\",\"a 是被捕食者的自然增长率。\",\"b 是捕食率系数。\",\"c 是捕食者的自然死亡率。\",\"d 是捕食者因捕食被捕食者而增长的比例。\"]},\"872\":{\"h\":\"4. 生物医学中的药物动力学模型\",\"t\":[\"药物在体内的浓度随时间变化可以用差分方程来描述：\",\"Ct+1​=Ct​+VD​−kCt​\",\"其中：\",\"Ct​ 表示第 t 时刻的药物浓度。\",\"D 是每次给药剂量。\",\"V 是分布容积。\",\"k 是消除速率常数。\"]},\"873\":{\"h\":\"5. 经济学中的库存模型\",\"t\":[\"企业的库存管理也可以用差分方程来建模，考虑固定的需求和生产：\",\"It+1​=It​+Pt​−D\",\"其中：\",\"It​ 表示第 t 期的库存量。\",\"Pt​ 是第 t 期的生产量。\",\"D 是每期的固定需求量。\"]},\"874\":{\"h\":\"模型求解方法\",\"t\":[\"差分方程模型的求解方法有很多，包括：\",\"解析解法：适用于简单的线性差分方程。\",\"数值解法：通过数值迭代的方法求解较复杂的差分方程。\",\"计算机仿真：对于复杂系统，通常用计算机仿真来得到系统行为的近似解。\"]},\"875\":{\"h\":\"示例：人口增长模型的求解\",\"t\":[\"假设人口增长模型为：\",\"Pt+1​=1.1Pt​\",\"初始条件为 P0​=100，则：\",\"P1​=1.1×100=110\",\"P2​=1.1×110=121\",\"P3​=1.1×121=133.1\",\"依此类推，可以通过迭代的方法得到各期人口数量。\",\"差分方程模型在数学建模中非常重要，它们提供了理解和预测复杂系统行为的工具。\"]},\"876\":{\"c\":[\"数学建模\"]},\"877\":{\"c\":[\"数学建模\"]},\"878\":{\"h\":\"偏微分方程模型\"},\"879\":{\"h\":\"偏微分方程\",\"t\":[\"偏微分方程（Partial Differential Equation, PDE）是包含多个独立变量和其偏导数的方程，用于描述连续变化的系统。PDE在物理学、工程学、经济学等领域有广泛应用，如热传导、波动、流体动力学等。\"]},\"880\":{\"h\":\"基本概念\",\"t\":[\"定义： 偏微分方程是关于未知函数及其偏导数的方程。一般形式如下：\",\"F(x1​,x2​,…,xn​,u,∂x1​∂u​,∂x2​∂u​,…,∂x12​∂2u​,…)=0\",\"其中，u 是未知函数，x1​,x2​,…,xn​ 是独立变量。\",\"分类：\",\"椭圆型：如拉普拉斯方程 Δu=0。\",\"抛物型：如热传导方程 ut​=αΔu。\",\"双曲型：如波动方程 utt​=c2Δu。\"]},\"881\":{\"h\":\"常见的偏微分方程\",\"t\":[\"拉普拉斯方程：\",\"Δu=0\",\"描述静态电场、引力场等。\",\"泊松方程：\",\"Δu=f\",\"是拉普拉斯方程的推广，右端项 f 通常表示源项。\",\"热传导方程：\",\"ut​=αΔu\",\"描述热量在介质中的扩散。\",\"波动方程：\",\"utt​=c2Δu\",\"描述波的传播，如声波、光波、水波等。\"]},\"882\":{\"h\":\"经典问题\",\"t\":[\"初值问题：给定初始时刻的函数值及其导数，求解 PDE 的问题。\",\"边值问题：给定边界上的函数值，求解 PDE 的问题。\"]},\"883\":{\"h\":\"解法\",\"t\":[\"分离变量法：假设解可以分离成时间和空间的乘积形式，适用于线性方程。\",\"傅里叶变换：将 PDE 转换到频域求解，再通过逆变换得到解。\",\"有限差分法：用差分近似代替偏导数，离散化后求解。\",\"有限元法：将区域划分为有限小区域，构造试函数逼近解。\",\"数值模拟：在复杂系统中，通过数值方法近似求解。\"]},\"884\":{\"h\":\"示例\",\"t\":[\"一维热传导方程：\",\"ut​=αuxx​\",\"初始条件 u(x,0)=f(x)，边界条件 u(0,t)=u(L,t)=0。\",\"解法：使用分离变量法，假设 u(x,t)=X(x)T(t)，得到两个常微分方程：\",\"αTT′​=XX′′​=−λ\",\"分别解这两个方程，再结合初始条件和边界条件，得到：\",\"u(x,t)=n=1∑∞​Bn​sin(Lnπx​)e−(Lnπ​)2αt\",\"其中，Bn​ 由初始条件 f(x) 决定。\",\"二维拉普拉斯方程：\",\"Δu=0\",\"边界条件 u(x,y)=g(x,y) 在边界上。\",\"解法：利用分离变量法，假设 u(x,y)=X(x)Y(y)，得到两个常微分方程：\",\"XX′′​=−λ,YY′′​=λ\",\"结合边界条件，得到一系列特解的叠加形式。\"]},\"885\":{\"h\":\"应用\",\"t\":[\"物理学：描述热传导、波动、电场、磁场等现象。\",\"工程学：结构分析、流体动力学、声学等。\",\"金融数学：期权定价、风险评估等。\",\"生态学：种群动态、扩散模型等。\"]},\"886\":{\"h\":\"Python描述偏微分方程\",\"t\":[\"可以使用Python中的scipy库和numpy库来数值求解偏微分方程（PDE）。以下是一个简单的例子，使用一维热传导方程（也称为热方程）来展示如何在Python中描述和求解偏微分方程。\"]},\"887\":{\"h\":\"一维热传导方程\",\"t\":[\"热传导方程的形式为：\",\"ut​=αuxx​\",\"其中：\",\"u 是温度随时间和空间的变化函数。\",\"α 是热扩散系数。\",\"ut​ 是 u 对时间 t 的偏导数。\",\"uxx​ 是 u 对空间 x 的二阶偏导数。\"]},\"888\":{\"h\":\"初始条件和边界条件\",\"t\":[\"初始条件：\",\"u(x,0)=sin(πx)\",\"边界条件：\",\"u(0,t)=0\",\"u(1,t)=0\"]},\"889\":{\"h\":\"Python实现\",\"t\":[\"使用有限差分法来数值求解这个PDE。以下是完整的Python代码：\",\"import numpy as np import matplotlib.pyplot as plt # 参数设置 alpha = 0.01 # 热扩散系数 L = 1.0 # 空间区间长度 T = 0.5 # 时间区间长度 nx = 20 # 空间步数 nt = 1000 # 时间步数 dx = L / (nx - 1) # 空间步长 dt = T / nt # 时间步长 # 初始条件 x = np.linspace(0, L, nx) u = np.sin(np.pi * x) # 存储结果的数组 u_all = np.zeros((nt, nx)) u_all[0, :] = u # 迭代求解 for n in range(0, nt-1): u_new = u.copy() for i in range(1, nx-1): u_new[i] = u[i] + alpha * dt / dx**2 * (u[i+1] - 2*u[i] + u[i-1]) u = u_new.copy() u_all[n+1, :] = u # 绘图 for i in range(0, nt, nt // 10): plt.plot(x, u_all[i, :], label=f't={i*dt:.2f}') plt.xlabel('x') plt.ylabel('u(x, t)') plt.legend() plt.title('1D Heat Equation') plt.show()\"]},\"890\":{\"h\":\"代码解释\",\"t\":[\"参数设置：设定热扩散系数 α、空间区间长度 L、时间区间长度 T、空间步数 nx 和时间步数 nt。\",\"初始条件：在 x 处设定初始温度分布为 sin(πx)。\",\"存储结果的数组：创建一个数组来存储每个时间步的温度分布。\",\"迭代求解：使用有限差分法计算每个时间步的温度分布。\",\"绘图：绘制每隔一定时间的温度分布。\",\"这个例子展示了如何使用Python数值求解一维热传导方程，并且通过图形展示了温度随时间变化的情况。\"]},\"891\":{\"h\":\"椭圆型偏微分\",\"t\":[\"椭圆型偏微分方程（Elliptic Partial Differential Equations）在数学和物理学中有广泛应用，特别是在静态场问题中，例如稳态热传导、电位场和形变问题。最著名的椭圆型PDE是拉普拉斯方程和泊松方程。\"]},\"892\":{\"h\":\"拉普拉斯方程和泊松方程\",\"t\":[\"拉普拉斯方程：\",\"Δu=0\",\"其中，Δ 是拉普拉斯算子，通常在二维情况下表示为：\",\"∂x2∂2u​+∂y2∂2u​=0\",\"泊松方程：\",\"Δu=f\",\"其中，f 是已知函数。\"]},\"893\":{\"h\":\"数值求解\",\"t\":[\"可以使用有限差分法（Finite Difference Method）来求解这些方程。下面是一个使用Python求解二维拉普拉斯方程的示例，采用有限差分法。\"]},\"894\":{\"h\":\"问题描述\",\"t\":[\"求解拉普拉斯方程在单位正方形区域上的解，边界条件为：\",\"u(x,0)=0,u(x,1)=0,u(0,y)=0,u(1,y)=sin(πy)\"]},\"895\":{\"h\":\"Python代码\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt # 参数设置 Lx = 1.0 # x方向长度 Ly = 1.0 # y方向长度 nx = 50 # x方向网格点数 ny = 50 # y方向网格点数 dx = Lx / (nx - 1) # x方向步长 dy = Ly / (ny - 1) # y方向步长 tolerance = 1e-6 # 收敛判据 max_iter = 10000 # 最大迭代次数 # 网格生成 x = np.linspace(0, Lx, nx) y = np.linspace(0, Ly, ny) X, Y = np.meshgrid(x, y) # 初始化 u = np.zeros((ny, nx)) # 边界条件 u[:, 0] = 0 # u(0, y) = 0 u[:, -1] = np.sin(np.pi * y) # u(1, y) = sin(pi * y) u[0, :] = 0 # u(x, 0) = 0 u[-1, :] = 0 # u(x, 1) = 0 # 迭代求解 def solve_laplace(u, tolerance, max_iter): for _ in range(max_iter): u_old = u.copy() u[1:-1, 1:-1] = 0.25 * (u_old[1:-1, :-2] + u_old[1:-1, 2:] + u_old[:-2, 1:-1] + u_old[2:, 1:-1]) if np.linalg.norm(u - u_old, ord=np.inf) < tolerance: break return u # 求解 u = solve_laplace(u, tolerance, max_iter) # 绘图 plt.contourf(X, Y, u, 20, cmap='viridis') plt.colorbar() plt.xlabel('x') plt.ylabel('y') plt.title('Solution to the Laplace Equation') plt.show()\"]},\"896\":{\"h\":\"代码解释\",\"t\":[\"参数设置：定义区域长度、网格点数、步长、收敛判据和最大迭代次数。\",\"网格生成：生成x和y方向的网格点。\",\"初始化：初始化解的数组 u。\",\"边界条件：设定边界上的函数值。\",\"迭代求解：使用有限差分法迭代求解拉普拉斯方程。迭代停止条件为解的最大变化量小于收敛判据或达到最大迭代次数。\",\"绘图：使用Matplotlib绘制结果。\",\"这个示例展示了如何在Python中使用有限差分法求解二维拉普拉斯方程，并展示了计算结果的图形。\"]},\"897\":{\"h\":\"抛物型偏微分\",\"t\":[\"抛物型偏微分方程（Parabolic Partial Differential Equations）通常描述扩散过程，例如热传导。最著名的抛物型偏微分方程是热传导方程（Heat Equation）。\"]},\"898\":{\"h\":\"热传导方程\",\"t\":[\"一维热传导方程的形式为：\",\"ut​=αuxx​\",\"其中：\",\"u 是温度随时间和空间的变化函数。\",\"α 是热扩散系数。\",\"ut​ 是 u 对时间 t 的偏导数。\",\"uxx​ 是 u 对空间 x 的二阶偏导数。\"]},\"899\":{\"h\":\"初始条件和边界条件\"},\"900\":{\"h\":\"初始条件：\",\"t\":[\"u(x,0)=f(x)\"]},\"901\":{\"h\":\"边界条件：\",\"t\":[\"u(0,t)=u(1,t)=0\"]},\"902\":{\"h\":\"Python实现\",\"t\":[\"使用有限差分法（Finite Difference Method）来数值求解这个方程。以下是完整的Python代码。\"]},\"903\":{\"h\":\"Python代码\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt # 参数设置 alpha = 0.01 # 热扩散系数 L = 1.0 # 空间区间长度 T = 0.5 # 时间区间长度 nx = 50 # 空间步数 nt = 5000 # 时间步数 dx = L / (nx - 1) # 空间步长 dt = T / nt # 时间步长 s = alpha * dt / dx**2 # 稳定性因子 # 初始条件 x = np.linspace(0, L, nx) u = np.sin(np.pi * x) # 边界条件 u[0] = 0 u[-1] = 0 # 存储结果的数组 u_all = np.zeros((nt, nx)) u_all[0, :] = u # 迭代求解 for n in range(0, nt-1): u_new = u.copy() for i in range(1, nx-1): u_new[i] = u[i] + s * (u[i+1] - 2*u[i] + u[i-1]) u = u_new.copy() u_all[n+1, :] = u # 绘图 for i in range(0, nt, nt // 10): plt.plot(x, u_all[i, :], label=f't={i*dt:.2f}') plt.xlabel('x') plt.ylabel('u(x, t)') plt.legend() plt.title('1D Heat Equation') plt.show()\"]},\"904\":{\"h\":\"代码解释\",\"t\":[\"参数设置：设定热扩散系数 α、空间区间长度 L、时间区间长度 T、空间步数 nx 和时间步数 nt。\",\"初始条件：在 x 处设定初始温度分布为 sin(πx)。\",\"边界条件：设定边界上的温度值为0。\",\"存储结果的数组：创建一个数组来存储每个时间步的温度分布。\",\"迭代求解：使用有限差分法计算每个时间步的温度分布。稳定性因子 s=αdx2dt​ 必须满足 s≤0.5 以保证数值稳定。\",\"绘图：使用Matplotlib绘制每隔一定时间的温度分布。\",\"这个示例展示了如何使用Python数值求解一维热传导方程，并通过图形展示温度随时间变化的情况。\"]},\"905\":{\"h\":\"双曲型偏微分\",\"t\":[\"双曲型偏微分方程（Hyperbolic Partial Differential Equations）通常描述波动过程，例如声波、光波和水波。最著名的双曲型偏微分方程是波动方程（Wave Equation）。\"]},\"906\":{\"h\":\"波动方程\",\"t\":[\"一维波动方程的形式为：\",\"utt​=c2uxx​\",\"其中：\",\"u 是位移随时间和空间的变化函数。\",\"c 是波速。\",\"utt​ 是 u 对时间 t 的二阶偏导数。\",\"uxx​ 是 u 对空间 x 的二阶偏导数。\"]},\"907\":{\"h\":\"初始条件和边界条件\"},\"908\":{\"h\":\"初始条件：\",\"t\":[\"u(x,0)=f(x)\",\"ut​(x,0)=g(x)\"]},\"909\":{\"h\":\"边界条件：\",\"t\":[\"u(0,t)=0\",\"u(L,t)=0\"]},\"910\":{\"h\":\"Python实现\",\"t\":[\"使用有限差分法（Finite Difference Method）来数值求解这个方程。以下是完整的Python代码。\"]},\"911\":{\"h\":\"Python代码\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt # 参数设置 c = 1.0 # 波速 L = 1.0 # 空间区间长度 T = 1.0 # 时间区间长度 nx = 100 # 空间步数 nt = 300 # 时间步数 dx = L / (nx - 1) # 空间步长 dt = T / nt # 时间步长 s = (c * dt / dx) ** 2 # 稳定性因子 # 初始条件 x = np.linspace(0, L, nx) u0 = np.sin(np.pi * x) # 初始位移 v0 = np.zeros(nx) # 初始速度 # 边界条件 u0[0] = 0 u0[-1] = 0 # 存储结果的数组 u = np.zeros((nt, nx)) u[0, :] = u0 # 第一时间步的计算（使用初始速度） u[1, 1:-1] = u0[1:-1] + dt * v0[1:-1] + 0.5 * s * (u0[2:] - 2 * u0[1:-1] + u0[:-2]) # 迭代求解 for n in range(1, nt-1): u[n+1, 1:-1] = 2 * (1 - s) * u[n, 1:-1] - u[n-1, 1:-1] + s * (u[n, 2:] + u[n, :-2]) # 边界条件 u[n+1, 0] = 0 u[n+1, -1] = 0 # 绘图 for i in range(0, nt, nt // 10): plt.plot(x, u[i, :], label=f't={i*dt:.2f}') plt.xlabel('x') plt.ylabel('u(x, t)') plt.legend() plt.title('1D Wave Equation') plt.show()\"]},\"912\":{\"h\":\"代码解释\",\"t\":[\"参数设置：定义波速 c、空间区间长度 L、时间区间长度 T、空间步数 nx 和时间步数 nt。\",\"初始条件：设定初始位移 u(x,0)=sin(πx) 和初始速度 ut​(x,0)=0。\",\"边界条件：设定边界上的位移为0。\",\"存储结果的数组：创建一个数组来存储每个时间步的位移分布。\",\"第一时间步的计算：根据初始条件计算第一个时间步的位移分布。\",\"迭代求解：使用有限差分法计算每个时间步的位移分布。稳定性因子 s=(dxc⋅dt​)2 必须满足 s≤1 以保证数值稳定。\",\"绘图：使用Matplotlib绘制每隔一定时间的位移分布。\",\"这个示例展示了如何使用Python数值求解一维波动方程，并通过图形展示位移随时间变化的情况。\"]},\"913\":{\"h\":\"SymPy符号计算库\",\"t\":[\"SymPy 是一个用于符号计算的 Python 库。它提供了许多符号数学工具，适用于代数、微积分、方程求解、矩阵运算等各种数学领域。SymPy 的设计目标是提供一个全功能的计算机代数系统，同时保持代码简单易读，并且易于扩展。\"]},\"914\":{\"h\":\"安装 SymPy\",\"t\":[\"你可以使用 pip 安装 SymPy：\",\"pip install sympy\"]},\"915\":{\"h\":\"基本用法\",\"t\":[\"以下是一些使用 SymPy 的基本示例。\"]},\"916\":{\"h\":\"1. 符号定义\",\"t\":[\"from sympy import symbols x, y, z = symbols('x y z')\"]},\"917\":{\"h\":\"2. 表达式操作\",\"t\":[\"from sympy import expand, factor expr = (x + 2) * (x - 3) expanded_expr = expand(expr) factored_expr = factor(expanded_expr) print(f\\\"Expanded: {expanded_expr}\\\") print(f\\\"Factored: {factored_expr}\\\")\"]},\"918\":{\"h\":\"3. 求导\",\"t\":[\"from sympy import diff expr = x**3 + 2*x**2 + x + 1 derivative = diff(expr, x) print(f\\\"Derivative: {derivative}\\\")\"]},\"919\":{\"h\":\"4. 积分\",\"t\":[\"from sympy import integrate expr = x**2 + x + 1 integral = integrate(expr, x) print(f\\\"Indefinite Integral: {integral}\\\")\"]},\"920\":{\"h\":\"5. 解方程\",\"t\":[\"from sympy import Eq, solve eq = Eq(x**2 - 4, 0) solutions = solve(eq, x) print(f\\\"Solutions: {solutions}\\\")\"]},\"921\":{\"h\":\"6. 矩阵运算\",\"t\":[\"from sympy import Matrix A = Matrix([[1, 2], [3, 4]]) B = Matrix([[2, 0], [1, 2]]) sum_matrix = A + B product_matrix = A * B det_A = A.det() inv_A = A.inv() print(f\\\"Sum:\\\\n{sum_matrix}\\\") print(f\\\"Product:\\\\n{product_matrix}\\\") print(f\\\"Determinant of A: {det_A}\\\") print(f\\\"Inverse of A:\\\\n{inv_A}\\\")\"]},\"922\":{\"h\":\"高级用法\"},\"923\":{\"h\":\"1. 解析求解偏微分方程\",\"t\":[\"from sympy import Function, dsolve, Eq t = symbols('t') x = Function('x')(t) # 定义方程 x''(t) + 9x(t) = 0 ode = Eq(x.diff(t, t) + 9*x, 0) # 求解方程 solution = dsolve(ode) print(f\\\"Solution: {solution}\\\")\"]},\"924\":{\"h\":\"2. 拉普拉斯变换\",\"t\":[\"from sympy import laplace_transform t, s = symbols('t s') f = t**2 # 拉普拉斯变换 laplace_f = laplace_transform(f, t, s) print(f\\\"Laplace Transform: {laplace_f}\\\")\"]},\"925\":{\"h\":\"3. 傅里叶变换\",\"t\":[\"from sympy import fourier_transform f = exp(-x**2) k = symbols('k') # 傅里叶变换 fourier_f = fourier_transform(f, x, k) print(f\\\"Fourier Transform: {fourier_f}\\\")\",\"SymPy 提供了丰富的数学功能和灵活的符号计算工具，使得它在学术研究、工程应用以及教育教学中得到了广泛应用。\"]},\"926\":{\"h\":\"反映扩散方程\",\"t\":[\"反应扩散方程是一类用来描述物质扩散和反应过程的偏微分方程。这些方程在化学、生物学和物理学中都有广泛的应用。例如，它们可以用来描述化学反应中的物质浓度变化，或者生物系统中的细胞分布。\",\"一个简单的反应扩散方程的形式如下：\",\"∂t∂u​=D∂x2∂2u​+R(u)\",\"其中：\",\"u=u(x,t) 是随时间 t 和空间 x 变化的浓度。\",\"D 是扩散系数。\",\"R(u) 是反应项，表示化学反应或生物反应的速率。\"]},\"927\":{\"h\":\"示例：Fisher-KPP 方程\",\"t\":[\"Fisher-KPP 方程是一种常见的反应扩散方程，用于描述种群密度的变化。其形式为：\",\"∂t∂u​=D∂x2∂2u​+ru(1−Ku​)\",\"其中：\",\"D 是扩散系数。\",\"r 是种群增长率。\",\"K 是环境的最大承载能力。\",\"下面是使用显式差分法求解 Fisher-KPP 方程的 Python 示例：\",\"import numpy as np import matplotlib.pyplot as plt # 参数设置 D = 0.1 # 扩散系数 r = 0.1 # 种群增长率 K = 1.0 # 最大承载能力 L = 10.0 # 空间区间长度 T = 10.0 # 时间区间长度 Nx = 100 # 空间离散点数 Nt = 2000 # 时间离散点数 dx = L / (Nx - 1) # 空间步长 dt = T / Nt # 时间步长 # 初始条件 u = np.zeros(Nx) u[int(0.4 / dx):int(0.6 / dx)] = 0.5 * K # 初始条件为一段方波 # 显式差分法求解反应扩散方程 for n in range(Nt): u_new = u.copy() for i in range(1, Nx - 1): diffusion = D * (u[i + 1] - 2 * u[i] + u[i - 1]) / dx**2 reaction = r * u[i] * (1 - u[i] / K) u_new[i] = u[i] + dt * (diffusion + reaction) u = u_new # 绘制结果 x = np.linspace(0, L, Nx) plt.plot(x, u, label='t = {:.2f}'.format(T)) plt.xlabel('x') plt.ylabel('u') plt.title('Reaction-Diffusion Equation (Fisher-KPP)') plt.legend() plt.grid(True) plt.show()\"]},\"928\":{\"h\":\"代码说明\",\"t\":[\"参数设置：\",\"D 是扩散系数。\",\"r 是种群增长率。\",\"K 是环境的最大承载能力。\",\"L 是空间区间长度。\",\"T 是时间区间长度。\",\"Nx 是空间离散点数。\",\"Nt 是时间离散点数。\",\"dx 和 dt 分别是空间步长和时间步长。\",\"初始条件：\",\"u 是初始种群密度分布，在区间 [0.4, 0.6] 内为 (0.5K)，其他地方为 0。\",\"显式差分法：\",\"使用显式差分公式迭代计算种群密度分布，u_new 存储每一步的更新值。\",\"diffusion 表示扩散项，reaction 表示反应项。\",\"绘制结果：\",\"使用 Matplotlib 绘制最终时刻的种群密度分布。\",\"运行该代码，你将看到反应扩散方程在最终时刻的种群密度分布情况。这是显式差分法求解反应扩散方程的一个简单示例。\"]},\"929\":{\"c\":[\"数学建模\"]},\"930\":{\"c\":[\"数学建模\"]},\"931\":{\"h\":\"插值与拟合\"},\"932\":{\"h\":\"插值\",\"t\":[\"插值是一种在已知数据点之间估算未知数据点的数学方法。它在数据分析、计算机图形学、信号处理、工程建模等多个领域有广泛应用。通过插值，我们可以构建一个连续的函数，这个函数在已知数据点处精确等于已知值，并且能够在这些点之间平滑地过渡。\"]},\"933\":{\"h\":\"插值方法\",\"t\":[\"线性插值（Linear Interpolation）\",\"概念：在线性插值中，我们假设已知数据点之间的关系是线性的。每两个相邻的已知点之间用一条直线连接。\",\"公式：对于两个已知点 (x0​,y0​) 和 (x1​,y1​)，对于任意的 x 值，插值结果 y 可以表示为：\",\"y=y0​+(y1​−y0​)x1​−x0​x−x0​​\",\"多项式插值（Polynomial Interpolation）\",\"概念：多项式插值通过一个多项式函数来拟合所有已知点。常见的多项式插值方法包括拉格朗日插值和牛顿插值。\",\"拉格朗日插值公式：\",\"P(x)=i=0∑n​yi​0≤j≤nj=i​∏​xi​−xj​x−xj​​\",\"牛顿插值公式：基于差分商的递归公式，构建一个多项式。\",\"样条插值（Spline Interpolation）\",\"概念：样条插值使用低阶多项式（通常是三次多项式）在每两个已知点之间进行插值，确保曲线的平滑性。\",\"自然三次样条：在每个区间内使用三次多项式，并且在区间连接处保证函数及其一阶和二阶导数的连续性。\",\"其他插值方法\",\"最近邻插值（Nearest-Neighbor Interpolation）：每个未知点的值等于距离最近的已知点的值。\",\"双线性插值（Bilinear Interpolation）：二维数据的插值方法，通过在两个方向上分别进行线性插值来估算未知点的值。\"]},\"934\":{\"h\":\"Python中的插值实例\",\"t\":[\"Python中可以使用SciPy库进行插值。以下是一些常见的插值方法的示例：\"]},\"935\":{\"h\":\"线性插值\",\"t\":[\"import numpy as np from scipy import interpolate import matplotlib.pyplot as plt # 已知数据点 x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 1, 4, 9, 16, 25]) # 需要插值的点 x_new = np.linspace(0, 5, 50) # 线性插值 f = interpolate.interp1d(x, y) # 计算插值 y_new = f(x_new) # 绘制结果 plt.plot(x, y, 'o', label='Known Points') plt.plot(x_new, y_new, '-', label='Linear Interpolation') plt.legend() plt.show()\"]},\"936\":{\"h\":\"样条插值\",\"t\":[\"import numpy as np from scipy import interpolate import matplotlib.pyplot as plt # 已知数据点 x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 1, 4, 9, 16, 25]) # 需要插值的点 x_new = np.linspace(0, 5, 50) # 样条插值 tck = interpolate.splrep(x, y) y_new = interpolate.splev(x_new, tck) # 绘制结果 plt.plot(x, y, 'o', label='Known Points') plt.plot(x_new, y_new, '-', label='Spline Interpolation') plt.legend() plt.show()\"]},\"937\":{\"h\":\"拉格朗日插值\",\"t\":[\"import numpy as np from scipy.interpolate import lagrange import matplotlib.pyplot as plt # 已知数据点 x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 1, 4, 9, 16, 25]) # 拉格朗日插值 poly = lagrange(x, y) # 需要插值的点 x_new = np.linspace(0, 5, 50) y_new = poly(x_new) # 绘制结果 plt.plot(x, y, 'o', label='Known Points') plt.plot(x_new, y_new, '-', label='Lagrange Interpolation') plt.legend() plt.show()\"]},\"938\":{\"h\":\"拟合\",\"t\":[\"拟合是一种通过数学模型逼近数据点的方法，旨在找到一个函数，使其尽可能地通过所有已知数据点或尽可能地逼近数据的总体趋势。拟合在统计学、数据分析、机器学习和工程建模中有广泛应用。拟合方法可以分为插值（通过所有数据点）和回归（逼近数据趋势，但不一定通过所有数据点）。\"]},\"939\":{\"h\":\"拟合方法\",\"t\":[\"线性回归（Linear Regression）\",\"概念：线性回归假设因变量与自变量之间呈线性关系，通过最小化误差平方和来确定模型参数。\",\"公式：对于简单线性回归模型 y=a+bx，其中 a 和 b 是待定参数。\",\"多项式拟合（Polynomial Fitting）\",\"概念：多项式拟合通过一个多项式函数来逼近数据点，可以是线性的、二次的、三次的等。\",\"公式：一般形式为 y=a0​+a1​x+a2​x2+⋯+an​xn，其中 a0​,a1​,…,an​ 是待定参数。\",\"非线性拟合（Non-linear Fitting）\",\"概念：非线性拟合用于模型非线性关系的数据，模型形式和参数的确定通常需要迭代优化算法。\",\"例子：指数函数拟合 y=aebx 或幂函数拟合 y=axb。\",\"最小二乘法（Least Squares Method）\",\"概念：最小二乘法是一种常见的拟合方法，通过最小化观测值与拟合函数之间的误差平方和来确定模型参数。\",\"应用：可以用于线性回归、多项式拟合等。\",\"样条拟合（Spline Fitting）\",\"概念：样条拟合使用低阶多项式片段在各个数据点之间进行拟合，以确保曲线的光滑性。\",\"例子：三次样条拟合（Cubic Spline Fitting）。\"]},\"940\":{\"h\":\"Python中的拟合实例\",\"t\":[\"Python中可以使用SciPy和NumPy库进行数据拟合。以下是一些常见的拟合方法的示例：\"]},\"941\":{\"h\":\"线性回归\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt from scipy import stats # 已知数据点 x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 1, 4, 9, 16, 25]) # 线性回归 slope, intercept, r_value, p_value, std_err = stats.linregress(x, y) # 拟合线 y_fit = intercept + slope * x # 绘制结果 plt.plot(x, y, 'o', label='Known Points') plt.plot(x, y_fit, '-', label='Linear Regression') plt.legend() plt.show()\"]},\"942\":{\"h\":\"多项式拟合\",\"t\":[\"import numpy as np import matplotlib.pyplot as plt # 已知数据点 x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 1, 4, 9, 16, 25]) # 多项式拟合（2次） coeffs = np.polyfit(x, y, 2) poly = np.poly1d(coeffs) # 需要拟合的点 x_new = np.linspace(0, 5, 50) y_new = poly(x_new) # 绘制结果 plt.plot(x, y, 'o', label='Known Points') plt.plot(x_new, y_new, '-', label='Polynomial Fitting (2nd Degree)') plt.legend() plt.show()\"]},\"943\":{\"h\":\"非线性拟合\",\"t\":[\"import numpy as np from scipy.optimize import curve_fit import matplotlib.pyplot as plt # 已知数据点 x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 1, 4, 9, 16, 25]) # 非线性函数定义 def func(x, a, b, c): return a * np.exp(b * x) + c # 非线性拟合 popt, pcov = curve_fit(func, x, y) # 需要拟合的点 x_new = np.linspace(0, 5, 50) y_new = func(x_new, *popt) # 绘制结果 plt.plot(x, y, 'o', label='Known Points') plt.plot(x_new, y_new, '-', label='Non-linear Fitting') plt.legend() plt.show()\"]},\"944\":{\"h\":\"样条拟合\",\"t\":[\"import numpy as np from scipy import interpolate import matplotlib.pyplot as plt # 已知数据点 x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 1, 4, 9, 16, 25]) # 样条拟合 tck = interpolate.splrep(x, y) y_new = interpolate.splev(np.linspace(0, 5, 50), tck) # 绘制结果 plt.plot(x, y, 'o', label='Known Points') plt.plot(np.linspace(0, 5, 50), y_new, '-', label='Spline Fitting') plt.legend() plt.show()\"]},\"945\":{\"h\":\"插值和拟合的实例\"},\"946\":{\"h\":\"Python 图像处理中的插值与拟合\",\"t\":[\"图像处理中的插值与拟合广泛应用于图像放大、旋转、变形、图像恢复等操作。这里我们将展示一个如何在图像缩放过程中应用插值的例子，以及如何在音频信号处理中进行插值与拟合。\"]},\"947\":{\"h\":\"图像插值示例\",\"t\":[\"在图像处理中，常见的插值方法包括最近邻插值、双线性插值和双三次插值等。我们将使用OpenCV库来演示图像缩放中的插值方法。\",\"import cv2 import numpy as np import matplotlib.pyplot as plt # 读取图像 img = cv2.imread('input_image.jpg', cv2.IMREAD_GRAYSCALE) # 获取图像尺寸 height, width = img.shape # 设置缩放比例 scale_factor = 2 # 最近邻插值 nearest_img = cv2.resize(img, (width*scale_factor, height*scale_factor), interpolation=cv2.INTER_NEAREST) # 双线性插值 bilinear_img = cv2.resize(img, (width*scale_factor, height*scale_factor), interpolation=cv2.INTER_LINEAR) # 双三次插值 bicubic_img = cv2.resize(img, (width*scale_factor, height*scale_factor), interpolation=cv2.INTER_CUBIC) # 绘制结果 plt.figure(figsize=(12, 4)) plt.subplot(1, 3, 1) plt.title('Nearest Interpolation') plt.imshow(nearest_img, cmap='gray') plt.subplot(1, 3, 2) plt.title('Bilinear Interpolation') plt.imshow(bilinear_img, cmap='gray') plt.subplot(1, 3, 3) plt.title('Bicubic Interpolation') plt.imshow(bicubic_img, cmap='gray') plt.show()\",\"output \",\"请注意，在运行此代码前需要安装OpenCV库，并准备一个名为 input_image.jpg 的图像文件。\"]},\"948\":{\"h\":\"音频处理中的插值与拟合\",\"t\":[\"音频处理中的插值与拟合常用于信号重采样、降噪、音高变换等。这里我们将演示如何使用SciPy库对音频信号进行插值和多项式拟合。\",\"import numpy as np import scipy.signal import scipy.io.wavfile as wav import matplotlib.pyplot as plt # 读取音频文件 sample_rate, data = wav.read('input_audio.wav') # 生成时间轴 t = np.linspace(0, len(data) / sample_rate, num=len(data)) # 缩短音频信号（下采样） factor = 2 shortened_data = data[::factor] shortened_t = t[::factor] # 线性插值重建音频信号 linear_interp = scipy.interpolate.interp1d(shortened_t, shortened_data, kind='linear') t_new = np.linspace(0, len(data) / sample_rate, num=len(data)) reconstructed_data_linear = linear_interp(t_new) # 多项式拟合 degree = 5 coeffs = np.polyfit(shortened_t, shortened_data, degree) poly = np.poly1d(coeffs) reconstructed_data_poly = poly(t_new) # 绘制结果 plt.figure(figsize=(12, 6)) plt.subplot(2, 1, 1) plt.title('Original and Reconstructed Signal (Linear Interpolation)') plt.plot(t, data, label='Original Signal', alpha=0.5) plt.plot(t_new, reconstructed_data_linear, label='Linear Interpolation', alpha=0.7) plt.legend() plt.subplot(2, 1, 2) plt.title('Original and Reconstructed Signal (Polynomial Fitting)') plt.plot(t, data, label='Original Signal', alpha=0.5) plt.plot(t_new, reconstructed_data_poly, label='Polynomial Fitting', alpha=0.7) plt.legend() plt.show() # 保存重建后的音频信号 wav.write('reconstructed_audio_linear.wav', sample_rate, reconstructed_data_linear.astype(np.int16)) wav.write('reconstructed_audio_poly.wav', sample_rate, reconstructed_data_poly.astype(np.int16))\",\"output \",\"请注意，在运行此代码前需要安装SciPy库，并准备一个名为 input_audio.wav 的音频文件。代码展示了如何对音频信号进行下采样、线性插值重建和多项式拟合重建，并绘制原始信号与重建信号的对比图。\"]},\"949\":{\"c\":[\"数学建模\"]},\"950\":{\"c\":[\"数学建模\"]},\"951\":{\"h\":\"最短路问题、最小生成树问题\"},\"952\":{\"h\":\"图论\",\"t\":[\"图论是数学的一个分支，研究图的性质和应用。图由顶点（节点）和连接这些顶点的边（链接）组成。图论在计算机科学、网络分析、交通规划等领域有广泛应用。\"]},\"953\":{\"h\":\"图的基本概念\",\"t\":[\"图 (Graph): 由顶点集合和边集合组成的二元组。 \",\"无向图 (Undirected Graph): 边没有方向。\",\"有向图 (Directed Graph): 边有方向，表示为有序对。\",\"顶点 (Vertex): 图中的点。\",\"边 (Edge): 连接顶点的线。\",\"度 (Degree): 与顶点相连的边的数量。在有向图中，有入度（指向该顶点的边数）和出度（从该顶点出发的边数）。\",\"路径 (Path): 顶点和边的序列，其中每条边都连接前一个顶点和后一个顶点。\",\"连通图 (Connected Graph): 任意两个顶点间都有路径。\",\"环 (Cycle): 起点和终点相同的路径。\"]},\"954\":{\"h\":\"图的表示方法\",\"t\":[\"邻接矩阵 (Adjacency Matrix):\",\"二维数组，其中A[i][j]表示顶点i到顶点j是否有边（无向图中对称，有向图中不对称）。\",\"% 邻接矩阵示例 adjMatrix = [0, 1, 0; 1, 0, 1; 0, 1, 0];\",\"邻接表 (Adjacency List):\",\"每个顶点有一个列表，包含所有与其相连的顶点。\",\"% 邻接表示例（使用cell数组） adjList = {[2], [1, 3], [2]};\"]},\"955\":{\"h\":\"MATLAB中的图论工具\",\"t\":[\"MATLAB提供了许多函数来创建和操作图。以下是一些常用函数：\",\"创建图：\",\"% 创建无向图 G = graph([1, 1, 2, 3], [2, 3, 3, 4]); % 创建有向图 DG = digraph([1, 2, 3], [2, 3, 1]);\",\"绘制图：\",\"% 绘制无向图 plot(G); % 绘制有向图 plot(DG);\",\"图的属性和操作：\",\"% 获取图的邻接矩阵 A = adjacency(G); % 计算最短路径 dist = distances(G, 1, 4); % 查找所有简单路径 allPaths = allpaths(G, 1, 4); % 查找最小生成树 mst = minspantree(G); % 计算连通分量 components = conncomp(G);\",\"示例代码：\",\"% 创建一个无向图 G = graph([1, 1, 2, 3], [2, 3, 3, 4]); % 绘制图 figure; plot(G); title('无向图'); % 计算顶点1到顶点4的最短路径 dist = distances(G, 1, 4); disp(['顶点1到顶点4的最短路径长度: ', num2str(dist)]); % 查找所有从顶点1到顶点4的简单路径 allPaths = allpaths(G, 1, 4); disp('所有简单路径:'); disp(allPaths);\",\"图论在许多实际应用中非常重要，例如网络路由优化、社交网络分析和生物网络研究。\"]},\"956\":{\"h\":\"最短路径\",\"t\":[\"最短路径问题是图论中的一个经典问题，其目标是找到图中两个顶点之间的最短路径。该问题在许多实际应用中非常重要，例如地图导航、网络路由和物流优化。\"]},\"957\":{\"h\":\"最短路径算法\",\"t\":[\"Dijkstra算法：\",\"适用于边权重非负的图。\",\"使用贪心策略，每次选择当前最短路径的顶点进行扩展。\",\"Bellman-Ford算法：\",\"适用于边权重可以为负的图。\",\"可以检测负权环。\",\"Floyd-Warshall算法：\",\"适用于计算所有顶点对之间的最短路径。\",\"使用动态规划思想，时间复杂度为 (O(n^3))。\"]},\"958\":{\"h\":\"Dijkstra算法\",\"t\":[\"算法步骤：\",\"初始化源点到自身的距离为0，其他点到源点的距离为无穷大。\",\"使用一个优先队列（或最小堆）来存储顶点及其当前的最短距离。\",\"每次从队列中取出当前距离最小的顶点，并更新其邻接顶点的距离。\",\"重复步骤3，直到队列为空。\",\"MATLAB实现：\",\"function [dist, path] = dijkstra(adjMatrix, source) % adjMatrix: 邻接矩阵 % source: 源点 % dist: 源点到其他所有点的最短距离 % path: 最短路径 numNodes = size(adjMatrix, 1); dist = inf(1, numNodes); dist(source) = 0; visited = false(1, numNodes); path = -1 * ones(1, numNodes); while any(~visited) % 找到当前未访问顶点中距离最小的顶点 [~, u] = min(dist + visited * inf); visited(u) = true; % 更新邻接顶点的距离 for v = 1:numNodes if adjMatrix(u, v) > 0 && ~visited(v) newDist = dist(u) + adjMatrix(u, v); if newDist < dist(v) dist(v) = newDist; path(v) = u; end end end end end\",\"使用示例：\",\"% 定义邻接矩阵 adjMatrix = [0, 10, 0, 30, 100; 10, 0, 50, 0, 0; 0, 50, 0, 20, 10; 30, 0, 20, 0, 60; 100, 0, 10, 60, 0]; % 计算源点1到其他顶点的最短路径 [source] = 1; [dist, path] = dijkstra(adjMatrix, source); % 输出结果 disp('最短距离:'); disp(dist); disp('路径:'); disp(path);\"]},\"959\":{\"h\":\"Bellman-Ford算法\",\"t\":[\"算法步骤：\",\"初始化源点到自身的距离为0，其他点到源点的距离为无穷大。\",\"对于每一条边，尝试更新其终点的距离。\",\"重复步骤2，最多进行|V|-1次（|V|为顶点数）。\",\"检查是否存在负权环。\",\"MATLAB实现：\",\"function [dist, path] = bellmanFord(adjMatrix, source) % adjMatrix: 邻接矩阵 % source: 源点 % dist: 源点到其他所有点的最短距离 % path: 最短路径 numNodes = size(adjMatrix, 1); dist = inf(1, numNodes); dist(source) = 0; path = -1 * ones(1, numNodes); for i = 1:numNodes-1 for u = 1:numNodes for v = 1:numNodes if adjMatrix(u, v) ~= 0 newDist = dist(u) + adjMatrix(u, v); if newDist < dist(v) dist(v) = newDist; path(v) = u; end end end end end % 检测负权环 for u = 1:numNodes for v = 1:numNodes if adjMatrix(u, v) ~= 0 && dist(u) + adjMatrix(u, v) < dist(v) error('图中包含负权环'); end end end end\",\"使用示例：\",\"% 定义邻接矩阵（可以包含负权边） adjMatrix = [0, -1, 4, 0, 0; 0, 0, 3, 2, 2; 0, 0, 0, 0, 0; 0, 1, 5, 0, 0; 0, 0, 0, -3, 0]; % 计算源点1到其他顶点的最短路径 [source] = 1; [dist, path] = bellmanFord(adjMatrix, source); % 输出结果 disp('最短距离:'); disp(dist); disp('路径:'); disp(path);\"]},\"960\":{\"h\":\"Floyd-Warshall算法\",\"t\":[\"算法步骤：\",\"初始化一个距离矩阵，将直接相连的顶点的距离设为边的权重，其他设为无穷大，自己到自己设为0。\",\"依次选择每一个顶点作为中间顶点，更新其他所有顶点之间的最短路径。\",\"MATLAB实现：\",\"function dist = floydWarshall(adjMatrix) % adjMatrix: 邻接矩阵 % dist: 所有顶点对之间的最短距离 numNodes = size(adjMatrix, 1); dist = adjMatrix; dist(dist == 0 & ~eye(numNodes)) = inf; for k = 1:numNodes for i = 1:numNodes for j = 1:numNodes if dist(i, j) > dist(i, k) + dist(k, j) dist(i, j) = dist(i, k) + dist(k, j); end end end end end\",\"使用示例：\",\"% 定义邻接矩阵 adjMatrix = [0, 3, inf, 5; 2, 0, inf, 4; inf, 1, 0, inf; inf, inf, 2, 0]; % 计算所有顶点对之间的最短路径 dist = floydWarshall(adjMatrix); % 输出结果 disp('最短距离矩阵:'); disp(dist);\",\"以上是最短路径问题的三种主要算法及其MATLAB实现。这些算法可以根据图的性质（如是否有负权边）来选择使用。\"]},\"961\":{\"h\":\"最小生成树\",\"t\":[\"最小生成树（Minimum Spanning Tree，MST）是图论中的一个经典问题，其目标是在图中找到一棵包含所有顶点且边权重和最小的树。最小生成树在网络设计、路径优化和聚类分析等领域有广泛应用。\"]},\"962\":{\"h\":\"最小生成树的基本概念\",\"t\":[\"无向图 (Undirected Graph)：最小生成树通常应用于无向图中。\",\"生成树 (Spanning Tree)：一个包含图中所有顶点的子图，是一棵无环连通图。\",\"最小生成树 (Minimum Spanning Tree, MST)：在所有可能的生成树中，边权重之和最小的生成树。\"]},\"963\":{\"h\":\"最小生成树的算法\",\"t\":[\"Kruskal算法：\",\"使用贪心策略，从权重最小的边开始逐渐构建生成树。\",\"适用于稀疏图，边的数量少。\",\"Prim算法：\",\"使用贪心策略，从某个顶点开始，逐渐将与生成树相连的权重最小的边加入生成树。\",\"适用于稠密图，顶点的数量多。\"]},\"964\":{\"h\":\"Kruskal算法\",\"t\":[\"算法步骤：\",\"将所有边按权重从小到大排序。\",\"初始化一个空集合，用于存储生成树的边。\",\"依次选择权重最小的边，如果这条边与生成树中的边不形成环，则将其加入生成树。\",\"重复步骤3，直到生成树包含 ( V-1 ) 条边（( V ) 为顶点数）。\",\"MATLAB实现：\",\"function [mstEdges, totalWeight] = kruskalMST(adjMatrix) % adjMatrix: 邻接矩阵 % mstEdges: 最小生成树的边 % totalWeight: 最小生成树的总权重 numNodes = size(adjMatrix, 1); edges = []; for i = 1:numNodes for j = i+1:numNodes if adjMatrix(i, j) > 0 edges = [edges; i, j, adjMatrix(i, j)]; end end end % 按边的权重排序 edges = sortrows(edges, 3); % 初始化并查集 parent = 1:numNodes; rank = zeros(1, numNodes); function root = find(x) if parent(x) ~= x parent(x) = find(parent(x)); end root = parent(x); end function union(x, y) rootX = find(x); rootY = find(y); if rootX ~= rootY if rank(rootX) > rank(rootY) parent(rootY) = rootX; else parent(rootX) = rootY; if rank(rootX) == rank(rootY) rank(rootY) = rank(rootY) + 1; end end end end % Kruskal算法 mstEdges = []; totalWeight = 0; for k = 1:size(edges, 1) u = edges(k, 1); v = edges(k, 2); weight = edges(k, 3); if find(u) ~= find(v) union(u, v); mstEdges = [mstEdges; u, v, weight]; totalWeight = totalWeight + weight; end end end\",\"使用示例：\",\"% 定义邻接矩阵 adjMatrix = [0, 10, 6, 0, 0; 10, 0, 5, 15, 0; 6, 5, 0, 4, 7; 0, 15, 4, 0, 8; 0, 0, 7, 8, 0]; % 计算最小生成树 [mstEdges, totalWeight] = kruskalMST(adjMatrix); % 输出结果 disp('最小生成树的边:'); disp(mstEdges); disp('最小生成树的总权重:'); disp(totalWeight);\"]},\"965\":{\"h\":\"Prim算法\",\"t\":[\"算法步骤：\",\"从任意一个顶点开始，将其加入生成树。\",\"重复以下步骤直到所有顶点都加入生成树： \",\"找到所有与生成树中的顶点相连的边中权重最小的边。\",\"将该边及其相连的顶点加入生成树。\",\"MATLAB实现：\",\"function [mstEdges, totalWeight] = primMST(adjMatrix) % adjMatrix: 邻接矩阵 % mstEdges: 最小生成树的边 % totalWeight: 最小生成树的总权重 numNodes = size(adjMatrix, 1); inMST = false(1, numNodes); dist = inf(1, numNodes); parent = -1 * ones(1, numNodes); dist(1) = 0; % 从第一个顶点开始 for i = 1:numNodes % 找到不在MST中的最小距离顶点 [~, u] = min(dist + inMST * inf); inMST(u) = true; % 更新邻接顶点的距离 for v = 1:numNodes if adjMatrix(u, v) > 0 && ~inMST(v) && adjMatrix(u, v) < dist(v) dist(v) = adjMatrix(u, v); parent(v) = u; end end end % 生成最小生成树的边和总权重 mstEdges = []; totalWeight = 0; for v = 2:numNodes u = parent(v); mstEdges = [mstEdges; u, v, adjMatrix(u, v)]; totalWeight = totalWeight + adjMatrix(u, v); end end\",\"使用示例：\",\"% 定义邻接矩阵 adjMatrix = [0, 2, 0, 6, 0; 2, 0, 3, 8, 5; 0, 3, 0, 0, 7; 6, 8, 0, 0, 9; 0, 5, 7, 9, 0]; % 计算最小生成树 [mstEdges, totalWeight] = primMST(adjMatrix); % 输出结果 disp('最小生成树的边:'); disp(mstEdges); disp('最小生成树的总权重:'); disp(totalWeight);\",\"通过以上两个算法的实现和示例，可以计算无向图的最小生成树，并理解其在图论中的重要性和应用。\"]},\"966\":{\"c\":[\"数学建模\"]},\"967\":{\"c\":[\"数学建模\",\"图论\"]},\"968\":{\"h\":\"python数学建模基础\"},\"969\":{\"c\":[\"数学建模\"]},\"970\":{\"c\":[\"数学建模\"]},\"971\":{\"h\":\"数学建模\"},\"972\":{\"c\":[\"学习\"]},\"973\":{\"h\":\"深度学习\"},\"974\":{\"c\":[\"Life\"]},\"975\":{\"h\":\"计算机视觉\"},\"976\":{\"c\":[\"Life\"]},\"977\":{\"h\":\"关于生活\"},\"978\":{\"c\":[\"Life\"]},\"979\":{\"h\":\"关于学习\"},\"980\":{\"c\":[\"Study\"]},\"981\":{\"h\":\"我\",\"t\":[\" 人生最难看透的只有四件事儿：\",\"“生死”\",\"“是非”\",\"“成败”\",\"“荣辱”\",\"其实只有一件事儿 ———— 我\"]},\"982\":{\"c\":[\"思考感悟\"]},\"983\":{\"c\":[\"我\"]},\"984\":{\"h\":\"2024年7月20日\"},\"985\":{\"h\":\"中华民族的历史文化\",\"t\":[\"甲骨文\"]},\"986\":{\"h\":\"五千年前，中国人和埃及人一样对抗汹涌的洪水\"},\"987\":{\"h\":\"四千年前，中华文明和古巴比伦一样进入了青铜器时代\"},\"988\":{\"h\":\"三千年前，中国先贤和古希腊哲学家一样在思考这个世界\"},\"989\":{\"h\":\"两千年前，帝国的军队和古罗马一样在征战四方\"},\"990\":{\"h\":\"一千年前，中国和阿拉伯一样都是富足的地区\"},\"991\":{\"h\":\"而现在，我们和美利坚合众国一样拥有强大的国力\"},\"992\":{\"h\":\"十年后、二十年后、五十年后、百年后\",\"t\":[\"十年后、二十年后、五十年后、百年后，中华民族依旧屹立在世界的东方，而这个世界上，大多数的文明都逃不过衰退消亡的命运 我们应该怎样定义中华民族？怎么定义中国人？ 中华民族是自强不息、敢于斗争的民族；是武德充沛，热爱和平的民族 中国人是有着优秀品质的，我们有着骨子里的温良和坚韧\"]},\"993\":{\"c\":[\"思考感悟\"]},\"994\":{\"c\":[\"历史文化\"]},\"995\":{\"h\":\"一些想法\"},\"996\":{\"c\":[\"Study\"]},\"997\":{\"h\":\"第一性原理\"},\"998\":{\"h\":\"第一性原理是什么\",\"t\":[\"第一性原理（First Principles Thinking）是一种解决问题的方法，它要求我们回到问题的最基本的真理或事实上，然后从这些最基础的概念出发，重新构建复杂的概念和解决方案。这种方法鼓励我们忽略传统智慧或现有的假设，而是依赖于不可争议的真相和最基本的原则来推导出结论。\"]},\"999\":{\"h\":\"如何运用第一性原理在工作和学习中\"},\"1000\":{\"h\":\"第一性原理的三个问题\"},\"1001\":{\"h\":\"寻求本质\"},\"1002\":{\"h\":\"批判旧事物\"},\"1003\":{\"h\":\"探索新事物\"},\"1004\":{\"c\":[\"思考\"]},\"1005\":{\"c\":[\"第一性原理\",\"深度思想\"]},\"1006\":{\"h\":\"重启人生\"},\"1007\":{\"c\":[\"思考\"]},\"1008\":{\"c\":[\"重启人生\",\"深度思想\"]},\"1009\":{\"h\":\"福建农林大学\"},\"1010\":{\"c\":[\"Study\"]},\"1011\":{\"h\":\"我的足迹\"},\"1012\":{\"c\":[\"Study\"]},\"1013\":{\"h\":\"科研英语\"},\"1014\":{\"c\":[\"英语\"]},\"1015\":{\"c\":[\"科研英语\",\"专业英语\"]},\"1016\":{\"h\":\"英语阅读\"},\"1017\":{\"c\":[\"英语\"]},\"1018\":{\"c\":[\"英语\",\"阅读\"]},\"1019\":{\"h\":\"计算机英语\"},\"1020\":{\"c\":[\"英语\"]},\"1021\":{\"c\":[\"计算机英语\",\"专业英语\"]},\"1022\":{\"h\":\"农业工程与信息技术-培养方案\",\"t\":[\"2024级农业工程与信息技术领域硕士专业学位研究生培养方案095136\"]},\"1023\":{\"h\":\"一、培养目标和要求\"},\"1024\":{\"h\":\"(一)培养目标\",\"t\":[\"农业工程与信息技术领域农业硕士是与该领域任职资格相联系的专业学位,主要为农业信息化、农业机械化、农业设施化等方面的技术研究、开发、应用、推广及管理，新农村发展、现代农业教育等企事业单位和管理部门培养应用型、交叉型、复合型高层次人才。\"]},\"1025\":{\"h\":\"(二)培养要求\",\"t\":[\"本领域包括农业信息技术、农业机械技术及智能装备、设施农业技术三个方向，培养要求如下:\",\"1.掌握中国特色社会主义理论;拥护党的基本路线、方针、政策;热爱祖国、热爱三农、遵纪守法、品德良好、艰苦奋斗、求实创新，积极为我国农业现代化、信息化、机械化和新农村建设与发展服务。\",\"2.掌握农业信息技术或农业机械技术或农业设施技术等方向的坚实基础理论、系统化专业知识，以及相关的管理、人文和社会科学知识;具有较宽广的知识面，较强的专业技能和技术传授技能，具有创新意识和新型的农业技术研究、开发、应用、推广和管理理念，能够独立从事较高层次的现代农业技术推广和新农村建设与发展工作。\",\"3.掌握一门外国语，基本能够阅读本领域的外文资料。\",\"4.恪守学术道德标准和学术规范;具有学术道德诚信，遵循学术伦理;具有科学、严谨的学术态度;坚守学术研究的社会责任。\"]},\"1026\":{\"h\":\"二、学制和学习年限\",\"t\":[\"农业工程与信息技术专业学位硕士研究生的学制为3年，因客观原因未能按期完成学习任务者，可申请延长学习年限。专业学位研究生的最长学习年限（含休学和保留学籍）不超过5年。 对提前完成培养计划，学位论文符合申请答辩要求的研究生，经过规定的审批程序可以提前答辩、毕业并申请学位。提前毕业的硕士专业学位研究生应至少在校学习期满2.5年。\"]},\"1027\":{\"h\":\"三、专业方向\",\"t\":[\"（一）农业信息技术 （二）农业机械技术及智能装备 （三）设施农业技术\"]},\"1028\":{\"h\":\"四、培养方式\",\"t\":[\"1.课程学习、专业实践和学位论文为专业学位研究生培养的三个主要环节。课程学习一般在校内完成，专业实践可以在实习单位或实践场所完成。注重实践能力和职业素质培养，加强理论联系实际的解决问题的能力培养，实践环节采取集中实践与分段实践相结合的方式进行。 2.实行双导师制，以校内导师指导为主，选聘有丰富实践经验的相关学科领域专家或行业专家作为行业导师。行业导师应充分发挥其行业优势，积极参与课程教学、专业实践和论文指导等环节的工作。第一指导教师为校外导师的，应在导师组内明确一名本校导师作为该生在校期间的培养责任人。\"]},\"1029\":{\"h\":\"五、课程设置及学分要求\"},\"1030\":{\"h\":\"（一）学分要求\",\"t\":[\"本专业硕士研究生应修读完成的各环节课程总学分要求不低于30学分，其中应获得的课程总学分要求不低于24学分，专业实践6学分。在课程总学分中，学位课程11学分，非学位课程（含必修课和选修课）不低于13学分。\"]},\"1031\":{\"h\":\"（二）补修课程\",\"t\":[\"同等学力或跨学科专业录取的硕士研究生，一般应补修不少于2-3门本学科的本科生主干课程，列入培养计划，不计入总学分。补修课程以70分为合格，补修课程考试不合格者不得进入中期考核。\"]},\"1032\":{\"h\":\"（三）其他说明\",\"t\":[\"通过大学生英语六级水平考试（入学前两年内），或通过出国外语水平考试，或英语专业本科（含）以上毕业、或入学前五年内曾在英语国家留学一学年（8-12个月），可申请免修免考，具体按照学校相关最新文件执行。\"]},\"1033\":{\"h\":\"六、主要培养环节及要求\"},\"1034\":{\"h\":\"（一）制定个人培养计划\",\"t\":[\"研究生个人培养计划含学习计划（包括学习计划、读书计划、学术活动安排等）和论文研究计划（学位论文研究和工作计划），在新生入学后的1个月内完成。导师或导师指导小组，应根据培养方案的要求，结合研究生个人实际情况，指导研究生认真制定个人培养计划。个人培养计划一经制定不得随意更改，更改个人培养计划应得到导师、学科和学院的批准。\"]},\"1035\":{\"h\":\"（二）专业实践\",\"t\":[\"专业实践是专业学位研究生重要的培养环节，专业学位研究生在学期间，必须保证不少于一年的实践训练，可采用集中实践与分段实践相结合的方式；鼓励涉农专业依托科技小院等扎根一线的专业实践基地开展实践工作，引导、激励研究生厚植爱农情怀，练就兴农本领。农业工程与信息技术领域农业硕士专业实践时间安排在第三个学期开始，研究生要提交专业实践计划，撰写实践学习总结报告。专业实践工作经考核通过后，记6个学分。 专业实践具体要求：提交专业实践计划、实践结束后要撰写实践学习总结报告，需实习单位和指导教师签署意见。 专业实践考核：指导教师根据研究生的现场实践综合表现、实践学习总结报告及实践单位的反馈意见等，按“优秀、良好、及格和不及格”四个等级评定成绩。\"]},\"1036\":{\"h\":\"（三）中期考核\",\"t\":[\"中期考核一般安排在第四学期，具体要求参照学校相关最新文件执行。\"]},\"1037\":{\"h\":\"（四）学位论文\",\"t\":[\"硕士生要用不少于一年的时间从事科学研究和学位论文工作，学位论文须在导师的指导下由硕士研究生本人独立完成。论文研究内容应体现系统性、完整性、创新性和应用性，要具备相应的技术要求和较充足的工作量，体现作者综合运用科学理论、方法和技术手段解决工程技术问题的能力，具有先进性、实用性。对研究的问题应有创新，成果应能解决生产实际问题，或对生产管理有实际应用价值和理论指导，或有大的社会效益或经济效益。\"]},\"1038\":{\"h\":\"1.论文选题开题\",\"t\":[\"（1）根据科研创新的培养要求，研究生在学位论文开题论证前应广泛阅读本学科近5-10年国内外相关文献，至少阅读60篇研究文献，其中外文文献应占10篇以上，并撰写文献综述。\",\"（2）论文选题应来源于农业工程与信息技术领域的技术革新、推广应用、生产管理等应用课题或现实问题，要有明确的应用价值，论文要有一定的技术难度、先进性和工作量，能体现作者综合运用科学理论、方法和技术手段解决农业信息化、农业机械化、农业设施化等方面问题的能力。 开题报告内容应包括文献综述、选题意义、研究方法、工作条件（经费、设备等）、预期达到的水平、存在的问题等。开题报告应在由导师、相关专业及企业专家组成的专家组参加的开题报告会上进行口头报告、答辩。 专业学位研究生应尽早确定研究课题，尽早开展科学研究，一般应在第三学期结束前完成论文选题和学位论文开题论证。学位论文选题一经通过论证，应严格认真执行，如有更改，应重新论证。具体要求参照学校相关最新文件执行。 2.论文形式 学位论文应反映研究生综合运用知识技能解决实际问题的能力和水平，可将研究论文、项目(产品)设计开发、调研报告、案例分析、发明专利、技术标准等作为主要内容，以论文形式表现。 3.论文评审与答辩 学位论文的评审应着重考查作者综合运用科学理论、方法和技术手段解决农业信息化、农业机械化、农业设施化方面问题的能力；审查学位论文工作的技术难度和工作量。 攻读农业工程与信息技术领域农业硕士专业学位研究生必须完成培养方案中规定的所有环节，成绩合格，方可申请参加学位论文答辩。学位论文应至少有2名具有副高级以上专业技术职称的专家评阅;答辩委员会应由3-5位副高级以上专业技术职称的专家组成，导师不得担任本人指导研究生的答辩委员会委员;学位论文评阅和答辩委员会均至少有1位专家来自校外。 学位论文评阅及答辩申请程序和时间安排以及具体要求按照按学校最新文件执行。\"]},\"1039\":{\"h\":\"（五）毕业与学位授予\",\"t\":[\"硕士生毕业、学位授予具体要求按学校最新文件执行。申请学位获得学术成果的要求，在不低于学校有关规定的基础上，按照《福建农林大学机电工程学院研究生申请学位获得学术成果规定》（2024年版）执行。\"]},\"1040\":{\"h\":\"七、本学科主要文献和书目\",\"t\":[\"农业工程与信息技术领域硕士专业学位研究生文献阅读主要书目和期刊目录 序号 著作或期刊的名称 主编或出版单位 备注（必读或选读）\",\"1 农业工程学报 中国农业工程学会 必读\",\"2 农业机械学报 中国农业机械学会 必读\",\"3 International Journal of Agricultural and Biological Engineering 中国农业工程学会和AOCABFE 必读\",\"4 Computers and Electronics in Agriculture Elsevier 必读\",\"5 农业信息系统原理及其应用 郑丽敏 必读\",\"6 农业物料学 马云海 必读\",\"7 试验设计与统计分析 金益主 必读\",\"8 试验与统计 冯学民 必读\",\"9 农产品加工机械与设备 沈在春 必读\",\"10 精确农业基础 邝朴生，蒋文科，刘刚等 必读\",\"11 农产品无损检测技术 应义斌，韩东海 必读\",\"12 数字图像处理 何东健 必读\",\"13 现代机械设计方法 倪洪启，谷耀新 必读\",\"14 数据采集与处理 南京航空航天大学 必读\",\"15 现代控制理论 汪纪锋 必读\",\"16 数值分析与计算方法（第二版） 雷金贵，李建良，蒋勇 必读\",\"17 机械工程学报 中国机械工程学会 选读\",\"18 中国机械工程 中国机械工程学会 选读\",\"19 仪器仪表学报 中国仪器仪表学会 选读\",\"20 材料热处理学报 中国机械工程学会 选读\",\"21 振动工程学报 中国振动工程学会 选读\",\"22 工程力学 中国力学学会 选读\",\"23 系统工程理论与实践 中国系统工程学会 选读\",\"24 中国农机化学报 农业部南京农业机械化研究所 选读\",\"25 Biosystems Engineering Elsevier B.V. 选读\",\"26 Transactions of the ASABE American Society of Agricultural and Biological Engineers 选读\",\"27 Applied Engineering in Agriculture American Society of Agricultural and Biological Engineers 选读\",\"28 Bioresource Technology Elsevier 选读\",\"29 农机化研究 黑龙江省农业机械学会 选读\",\"30 中国电机工程学报 中国电机工程学会 选读\",\"31 电工技术学报 中国电工技术学会 选读\",\"32 计算机学报 科学出版社 选读\",\"33 软件学报 中国科学院软件研究所 选读\",\"34 中国农业科学 中国农业科学院 选读\",\"35 仪器仪表学报 中国仪器仪表学会 选读\",\"36 国际农业生物工程学报 中国科学院微生物所 选读\",\"37 光谱学与光谱分析 中国光学学会 选读\",\"38 计算机研究与发展 中国计算机学会 选读\",\"39 农业信息学 曹卫星 选读\",\"40 农业物联网导论 李道亮 选读\",\"41 精细农业 何勇，杨青，洪添胜 选读\",\"42 农产品质量安全光学无损检测技术及应用 刘木华 选读\",\"43 图像处理与图像通信 朱秀昌 选读\",\"44 MATLAB程序设计与应用 刘卫国 选读\",\"45 传感器与测试技术 李晓莹 选读\",\"46 传感器与现代检测技术 陶红艳，余成波 选读\",\"47 现代控制工程（第五版） Katsuhiko Ogata著，卢伯英，佟明安译 选读\",\"48 太阳能学报 中国太阳能学会 选读\",\"49 可再生能源 辽宁省能源研究所 选读\",\"50 中国沼气 中国沼气学会，农业部沼气科学研究所 选读\",\"51 Journal of Hydrology Elsevier 选读\",\"52 水土保持学报 中国土壤学会 选读\"]},\"1041\":{\"h\":\"太赫兹传感器\"},\"1042\":{\"c\":[\"太赫兹\"]},\"1043\":{\"c\":[\"太赫兹\",\"生物传感器\"]},\"1044\":{\"h\":\"太赫兹理论基础\"},\"1045\":{\"c\":[\"太赫兹\"]},\"1046\":{\"c\":[\"太赫兹\",\"理论基础\"]},\"1047\":{\"h\":\"电磁学\"},\"1048\":{\"c\":[\"太赫兹\"]},\"1049\":{\"c\":[\"太赫兹\",\"电磁理论\"]},\"1050\":{\"h\":\"第一周文献阅读\"},\"1051\":{\"h\":\"第一周文献\",\"t\":[\"王玥,崔子健,张晓菊,等.超材料赋能先进太赫兹生物化学传感检测技术的研究进展[J].物理学报,2021,70(24):307-326.\",\"杨君,亓丽梅,武利勤,等.太赫兹超材料生物传感器的应用研究进展[J].光谱学与光谱分析,2021.\"]},\"1052\":{\"h\":\"太赫兹的概念\",\"t\":[\"太赫辐射（英语：Terahertz radiation），又称THz波或太赫茲，包含了频率为0.3到3 THz的电磁波。此频段属远红外光，高于微波波段的频率，对应的波长范围从1mm到0.1mm（或100μm），所以也叫作“亚毫米波段”（submillimeter waves）。\"]},\"1053\":{\"h\":\"超材料的概念\",\"t\":[\"超材料（英文：Metamaterial）, 拉丁语词根“meta-”表示“超出、另类”等含义。指的是一类具有特殊性质的人造材料，这些材料是自然界没有的。它们拥有一些特别的性质，比如让光、电磁波改变它们的通常性质，而这样的效果是传统材料无法实现的。超材料的成分上没有什么特别之处，它们的奇特性质源于其精密的几何结构以及尺寸大小。其中的微结构，大小尺度小于它作用的波长，因此得以对波施加影响。 对于超材料的初步研究是负折射率超材料。\"]},\"1054\":{\"h\":\"专业名词学习\"},\"1055\":{\"c\":[\"文献阅读\"]},\"1056\":{\"c\":[\"太赫兹\",\"文献阅读\"]},\"1057\":{\"h\":\"了解一个全新的研究领域\"},\"1058\":{\"h\":\"一、是什么的问题\"},\"1059\":{\"h\":\"二、先入为主（感性认知）\"},\"1060\":{\"h\":\"三、系统学习（理性认知）\"},\"1061\":{\"h\":\"四、知行合一（实践的方法）\"},\"1062\":{\"h\":\"五、质疑、假设和验证结果\"},\"1063\":{\"h\":\"六、工具\"},\"1064\":{\"c\":[\"科研\"]},\"1065\":{\"c\":[\"研究领域\"]},\"1066\":{\"h\":\"文献检索\"},\"1067\":{\"h\":\"文献检索平台\"},\"1068\":{\"h\":\"文献搜索引擎\",\"t\":[\"Google学术微软学术\"]},\"1069\":{\"h\":\"中文文献\"},\"1070\":{\"h\":\"英文文献\"},\"1071\":{\"h\":\"研究方向的检索词\"},\"1072\":{\"c\":[\"科研\"]},\"1073\":{\"c\":[\"文献检索\"]},\"1074\":{\"h\":\"文献管理\"},\"1075\":{\"h\":\"文献管理工具\"},\"1076\":{\"h\":\"Endnote\",\"t\":[\"https://endnote.com/\"]},\"1077\":{\"h\":\"Mendeley\",\"t\":[\"https://www.mendeley.com/\"]},\"1078\":{\"h\":\"NoteExpress\",\"t\":[\"https://www.inoteexpress.com/\"]},\"1079\":{\"h\":\"Zotero\",\"t\":[\"https://www.zotero.org/\"]},\"1080\":{\"h\":\"F1000 workspace\",\"t\":[\"https://f1000workspace.com/\"]},\"1081\":{\"h\":\"Zotero\"},\"1082\":{\"h\":\"Zotero官方文档\",\"t\":[\"https://www.zotero.org/support/\"]},\"1083\":{\"h\":\"Zotero中文社区\",\"t\":[\"https://zotero-chinese.com/\"]},\"1084\":{\"h\":\"1.导入文献\"},\"1085\":{\"h\":\"2.文献管理\"},\"1086\":{\"h\":\"3.生成引文报告\"},\"1087\":{\"h\":\"4.数据同步和备份\"},\"1088\":{\"h\":\"5.设置首选项\"},\"1089\":{\"h\":\"6.其他\"},\"1090\":{\"c\":[\"科研\"]},\"1091\":{\"c\":[\"文献管理\"]},\"1092\":{\"h\":\"文献阅读\"},\"1093\":{\"c\":[\"科研\"]},\"1094\":{\"c\":[\"文献阅读\"]},\"1095\":{\"h\":\"研究方向\"},\"1096\":{\"c\":[\"科研\"]},\"1097\":{\"c\":[\"研究方向\"]},\"1098\":{\"h\":\"LaTeX\"},\"1099\":{\"h\":\"LaTeX环境配置\"},\"1100\":{\"h\":\"Windows\",\"t\":[\"安装TeX发行版：\",\"推荐使用MiKTeX或TeX Live。你可以从其官网下载安装包。 \",\"MiKTeX: https://miktex.org/download\",\"TeX Live: https://www.tug.org/texlive/acquire-netinstall.html\",\"安装编辑器：\",\"推荐使用TeXworks、TeXstudio或Overleaf（基于Web）。 \",\"TeXworks: 通常包含在MiKTeX中。\",\"TeXstudio: https://www.texstudio.org/\",\"Overleaf: https://www.overleaf.com/\",\"测试安装：\",\"打开编辑器，编写一个简单的LaTeX文档，如：\",\"\\\\documentclass{article} \\\\begin{document} Hello, LaTeX! \\\\end{document}\",\"编译文档，检查输出是否正确。\"]},\"1101\":{\"h\":\"Mac\",\"t\":[\"安装TeX发行版：\",\"推荐使用MacTeX。你可以从其官网下载安装包。 \",\"MacTeX: https://www.tug.org/mactex/\",\"安装编辑器：\",\"推荐使用TeXShop（包含在MacTeX中）、TeXstudio或Overleaf。 \",\"TeXShop: 通常包含在MacTeX中。\",\"TeXstudio: https://www.texstudio.org/\",\"Overleaf: https://www.overleaf.com/\",\"测试安装：\",\"打开编辑器，编写一个简单的LaTeX文档，并编译，检查输出。\"]},\"1102\":{\"h\":\"Linux\",\"t\":[\"安装TeX发行版：\",\"推荐使用TeX Live。你可以通过包管理器安装，例如： \",\"Debian/Ubuntu:\",\"sudo apt-get install texlive-full\",\"Fedora:\",\"sudo dnf install texlive-scheme-full\",\"安装编辑器：\",\"推荐使用TeXworks、TeXstudio或Overleaf。 \",\"TeXworks: 通常包含在TeX Live中。\",\"TeXstudio: 你可以通过包管理器安装，例如：\",\"sudo apt-get install texstudio\",\"Overleaf: https://www.overleaf.com/\",\"测试安装：\",\"打开编辑器，编写一个简单的LaTeX文档，并编译，检查输出。\"]},\"1103\":{\"h\":\"总结\",\"t\":[\"配置LaTeX环境通常包括以下几个步骤：\",\"安装TeX发行版（如MiKTeX、TeX Live或MacTeX）。\",\"安装LaTeX编辑器（如TeXworks、TeXstudio或Overleaf）。\",\"编写并编译一个简单的LaTeX文档以测试安装。\"]},\"1104\":{\"h\":\"VScode配置LaTeX环境\",\"t\":[\"VScode配置LaTeX环境需要安装 LaTeX Workshop 扩展\"]},\"1105\":{\"h\":\"LaTex基础\"},\"1106\":{\"h\":\"命令与环境\",\"t\":[\"LATEX 中的命令通常是由一个反斜杠加上命令名称，再加上花括号内的参数构成的（有的命令不带参数，例如：\\\\TeX）．\",\"\\\\documentclass{ctexart}\",\"如果有一些选项是备选的，那么通常会在花括号前用方括号标出．比如：\",\"\\\\documentclass[a4paper]{ctexart}\",\"还有一种重要指令叫做环境．它被定义于控制命令 \\\\begin{environment} 和 \\\\end{environment} 间的内容．比如：\",\"\\\\begin{document} ...内容... \\\\end{document}\"]},\"1107\":{\"h\":\"基本结构\",\"t\":[\"\\\\documentclass[options]{doc-class} \\\\begin{document} ... \\\\end{document}\",\"语句 \\\\begin{document} 之前的内容称为导言区．导言区可以留空，以可以进行一些文档的准备操作．可以理解为：导言区即模板定义． 文档类的参数 doc-class 和可选选项 options 有表3.1取值： 在导言区最常见的是宏包的加载工作\"]},\"1108\":{\"h\":\"常用命令\",\"t\":[\"注释：%（百分号开头的行是注释）。\",\"换行：\\\\或\\\\*。\",\"段落：空行。 文档类的参数 doc-class 和可选选项 options 有表3.1取值：\"]},\"1109\":{\"h\":\"特殊字符\",\"t\":[\"LATEX 中有许多字符有着特殊的含义，在你生成文档时不会直接打印．例如每个命令的第一个字符：反斜杠．单独输入一个反斜杠在你的行文中不会有任何帮助，甚至可能产生错误．LATEX 中的保留字符有：\",\"它们的作用分别是：\",\"#: 自定义命令时，用于标明参数序号．\",\"$: 数学环境命令符．\",\"%: 注释符．在其后的该行命令都会视为注释．如果在回车前输入这个命令，可以防止行末 LATEX 插入一些奇怪的空白符．\",\"^: 数学环境中的上标命令符．\",\"&: 表格环境中的跳列符．\",\"_: 数学环境中的下标命令符．\",\"{与}: 花括号用于标记命令的必选参数，或者标记某一部分命令成为一个整体．\",\": 反斜杠用于开始各种 LATEX 命令．\"]},\"1110\":{\"h\":\"文件输出\",\"t\":[\".sty 宏包文件\",\".cls 文档类文件．\",\".aux 用于储存交叉引用信息的文件．因此，在更新交叉引用（公式编号、大纲级别）后，需要编译两次才能正常显示．\",\".log 日志．记录上次编译的信息．\",\".toc 目录文件．\",\".lof 图形目录．\",\".lot 表格目录．\",\".idx 如果文档中包含索引，该文件用于储存索引信息．\",\".ind 索引记录文件．\",\".ilg 索引日志文件．\",\".bib BIBTEX 参考文献数据文件．\",\".bbl BIBTEX 生成的参考文献记录．\",\".bst BIBTEX 模板．\",\".blg BIBTEX 日志\",\".out hyperref 宏包生成的 pdf 书签记录．\"]},\"1111\":{\"h\":\"段落与文本\"},\"1112\":{\"c\":[\"科研工具\"]},\"1113\":{\"c\":[\"LaTex\",\"写作排版\",\"论文写作\"]},\"1114\":{\"h\":\"MATLAB\"},\"1115\":{\"h\":\"MATLAB\",\"t\":[\"MatLab\"]},\"1116\":{\"h\":\"MATLAB简介\",\"t\":[\"MathWorks公司创立于1984年，总部位于美国马萨诸塞州内迪克，是领先的为工程师和科学家提供数学计算软件的供应商，其旗下的产品包括MATLAB产品家族、Simulink产品家族及PolySpace产品家族。 MATLAB是矩阵实验室（Matrix Laboratory）的简称，是一种用于算法开发、数据可视化、数据分析及数值计算的高级技术计算语言和交互式环境。MATLAB的应用范围非常广，包括信号和图像处理、通信、控制系统设计、测试和测量、财务建模和分析，以及计算生物学等众多应用领域。附加的工具箱扩展了MATLAB的使用环境，以解决这些应用领域内特定类型的问题。\"]},\"1117\":{\"h\":\"MATLAB系统组成\",\"t\":[\"MATLAB 系 统 由 MATLAB 开 发 环 境 、 MATLAB 数 学 函 数 库 、MATLAB 语 言 、 MATLAB 图 形 处 理 系 统 和 MATLAB 应 用 程 序 接 口（API）五大部分构成。\"]},\"1118\":{\"h\":\"1．MATLAB开发环境\",\"t\":[\"MATLAB开发环境是一套方便用户使用MATLAB函数和文件的工具集，其中许多工具是图形化用户接口。MATLAB是一个集成化的工作区，可以让用户输入、输出数据，并提供了M文件的集成编译和调试环境。MATLAB包括MATLAB命令行窗口、M文件编辑调试器、MATLAB工作区和在线帮助文档等。\"]},\"1119\":{\"h\":\"2．MATLAB数学函数库\",\"t\":[\"MATLAB数学函数库包括大量的计算算法，从基本运算（如加法）到复杂算法（如矩阵求逆、贝济埃函数、快速傅里叶变换等），体现了其强大的数学计算功能。\"]},\"1120\":{\"h\":\"3．MATLAB语言\",\"t\":[\"MATLAB语言是一个高级的基于矩阵/数组的语言，包括程序流控制、函数、脚本、数据结构、输入/输出、工具箱和面向对象编程等特色。用户既可以用它来快速编写简单的程序，也可以用它来编写庞大复杂的应用程序。\"]},\"1121\":{\"h\":\"4．MATLAB图形处理系统\",\"t\":[\"图形处理系统使得MATLAB能方便地图形化显示向量和矩阵，而且能对图形添加标注及进行打印。MATLAB包括强力的二维及三维图形函数、图像处理和动画显示等函数。\"]},\"1122\":{\"h\":\"5．MATLAB应用程序接口\",\"t\":[\"MATLAB应用程序接口可以使MATLAB方便地调用C和Fortran程序，以及在MATLAB与其他应用程序间建立客户/服务器关系。\"]},\"1123\":{\"h\":\"MATLAB基础\"},\"1124\":{\"h\":\"命令\"},\"1125\":{\"h\":\"会话管理\",\"t\":[\"clc 清除命令窗口。\",\"clear 从内存中删除变量。\",\"exist 检查文件或变量的存在。\",\"global 声明变量为全局变量。\",\"help 搜索帮助主题。\",\"lookfor 在帮助条目中搜索关键字。\",\"quit 停止MATLAB。\",\"who 列出当前变量。\",\"whos 列出当前变量（长显示）。\"]},\"1126\":{\"h\":\"系统命令\",\"t\":[\"cd 更改当前目录。\",\"date 显示当前日期。\",\"delete 删除文件。\",\"diary 开启/关闭日记文件录制。\",\"dir 列出当前目录中的所有文件。\",\"load 从文件加载工作区变量。\",\"path 显示搜索路径。\",\"pwd 显示当前目录。\",\"save 将工作空间变量保存在文件中。\",\"type 显示文件的内容。\",\"what 列出当前目录中的所有MATLAB文件。\",\"wklread 读取.wk1电子表格文件。\"]},\"1127\":{\"h\":\"数据类型\",\"t\":[\"MATLAB中的数据类型主要包括数值类型、逻辑类型、字符串、函数句柄、结构体和单元数组类型。这6种基本的数据类型都是按照数组形式存储和操作的。 MATLAB中还有两种用于高级交叉编程的数据类型，分别是用户自定义的面向对象的用户类类型和Java类类型。\",\"int8\",\"8位有符号整数\",\"uint8\",\"8位无符号整数\",\"int16\",\"16位有符号整数\",\"uint16\",\"16位无符号整数\",\"int32\",\"32位有符号整数\",\"uint32\",\"32位无符号整数\",\"int64\",\"64位有符号整数\",\"uint64\",\"64位无符号整数\",\"single\",\"单精度数值数据\",\"double\",\"双精度数值数据\",\"logical\",\"逻辑值1或0，分别表示true和false\",\"char\",\"字符数据（字符串存储为字符向量）\",\"cell array\",\"索引单元格数组，每个单元格能够存储不同维度和数据类型的数组\",\"structure\",\"类似于C的结构，每个结构都具有能够存储不同维度和数据类型的数组的命名字段\",\"function handle\",\"指向函数的指针\",\"user classes\",\"从用户定义的类构造的对象\",\"java classes\",\"从Java类构造的对象\"]},\"1128\":{\"h\":\"矩阵\",\"t\":[\"在 MATLAB 中，矩阵是基本的数据结构。MATLAB 甚至是 \\\"Matrix Laboratory\\\" 的缩写，这表明矩阵在 MATLAB 中的核心地位。以下是有关 MATLAB 中矩阵的详细介绍和示例，包括创建、操作和基本函数。\"]},\"1129\":{\"h\":\"1. 创建矩阵\"},\"1130\":{\"h\":\"1.1 直接定义矩阵\",\"t\":[\"你可以直接使用方括号 [] 定义矩阵。\",\"% 创建一个 2x3 矩阵 A = [1, 2, 3; 4, 5, 6];\"]},\"1131\":{\"h\":\"1.2 使用函数创建特殊矩阵\",\"t\":[\"MATLAB 提供了许多函数来创建特殊矩阵。\",\"% 创建一个 3x3 的全零矩阵 Z = zeros(3, 3); % 创建一个 3x3 的全一矩阵 O = ones(3, 3); % 创建一个 3x3 的单位矩阵 I = eye(3); % 创建一个 3x3 的随机矩阵 R = rand(3, 3);\"]},\"1132\":{\"h\":\"2. 矩阵操作\"},\"1133\":{\"h\":\"2.1 矩阵加减法\",\"t\":[\"A = [1, 2, 3; 4, 5, 6]; B = [6, 5, 4; 3, 2, 1]; % 矩阵加法 C = A + B; % 矩阵减法 D = A - B;\"]},\"1134\":{\"h\":\"2.2 矩阵乘法\",\"t\":[\"A = [1, 2; 3, 4]; B = [2, 0; 1, 2]; % 矩阵乘法 C = A * B; % 元素按位乘法 D = A .* B;\"]},\"1135\":{\"h\":\"2.3 矩阵转置\",\"t\":[\"A = [1, 2, 3; 4, 5, 6]; % 矩阵转置 B = A';\"]},\"1136\":{\"h\":\"2.4 矩阵求逆\",\"t\":[\"A = [1, 2; 3, 4]; % 矩阵求逆 B = inv(A);\"]},\"1137\":{\"h\":\"3. 矩阵索引和切片\"},\"1138\":{\"h\":\"3.1 基本索引\",\"t\":[\"A = [1, 2, 3; 4, 5, 6; 7, 8, 9]; % 访问矩阵中的元素 element = A(2, 3); % 访问第 2 行第 3 列的元素 % 修改矩阵中的元素 A(2, 3) = 10;\"]},\"1139\":{\"h\":\"3.2 矩阵切片\",\"t\":[\"A = [1, 2, 3; 4, 5, 6; 7, 8, 9]; % 访问矩阵中的一部分 sub_matrix = A(1:2, 2:3); % 访问第 1 到第 2 行，第 2 到第 3 列的元素\"]},\"1140\":{\"h\":\"4. 基本矩阵函数\"},\"1141\":{\"h\":\"4.1 矩阵大小\",\"t\":[\"A = [1, 2, 3; 4, 5, 6]; % 获取矩阵的大小 [m, n] = size(A);\"]},\"1142\":{\"h\":\"4.2 矩阵的行列和对角线\",\"t\":[\"A = [1, 2, 3; 4, 5, 6; 7, 8, 9]; % 计算每一列的和 column_sum = sum(A); % 计算每一行的和 row_sum = sum(A, 2); % 提取对角线元素 diagonal_elements = diag(A);\"]},\"1143\":{\"h\":\"4.3 矩阵的行列式和特征值\",\"t\":[\"A = [1, 2; 3, 4]; % 计算行列式 determinant = det(A); % 计算特征值 eigenvalues = eig(A);\"]},\"1144\":{\"h\":\"示例代码\",\"t\":[\"% 创建矩阵 A = [1, 2, 3; 4, 5, 6; 7, 8, 9]; B = [9, 8, 7; 6, 5, 4; 3, 2, 1]; % 矩阵加法 C = A + B; % 矩阵乘法 D = A * B; % 矩阵转置 E = A'; % 矩阵求逆 F = inv(A(1:2, 1:2)); % 提取一个 2x2 子矩阵并求逆 % 矩阵索引和切片 element = A(2, 3); % 访问第 2 行第 3 列的元素 sub_matrix = A(1:2, 2:3); % 访问第 1 到第 2 行，第 2 到第 3 列的元素 % 基本矩阵函数 [m, n] = size(A); % 获取矩阵的大小 column_sum = sum(A); % 计算每一列的和 row_sum = sum(A, 2); % 计算每一行的和 diagonal_elements = diag(A); % 提取对角线元素 determinant = det(A(1:2, 1:2)); % 计算子矩阵的行列式 eigenvalues = eig(A(1:2, 1:2)); % 计算子矩阵的特征值\"]},\"1145\":{\"h\":\"运算符\",\"t\":[\"在 MATLAB 中，运算符分为多种类型，包括算术运算符、关系运算符、逻辑运算符、按位运算符、集合运算符以及一些特殊字符。以下是每种运算符的详细列表及其使用说明。\"]},\"1146\":{\"h\":\"1. 算术运算符\",\"t\":[\"算术运算符用于执行基本的数学运算。\",\"运算符\",\"描述\",\"示例\",\"+\",\"加法\",\"a + b\",\"-\",\"减法\",\"a - b\",\"*\",\"乘法\",\"a * b\",\"/\",\"右除\",\"a / b\",\"\\\\\",\"左除\",\"a \\\\ b\",\"^\",\"幂运算\",\"a ^ b\",\".\",\"元素按位运算\",\"A .* B\",\".\",\"元素按位除法\",\"A ./ B\",\".\",\"元素按位幂运算\",\"A .^ B\"]},\"1147\":{\"h\":\"2. 关系运算符\",\"t\":[\"关系运算符用于比较两个值。\",\"运算符\",\"描述\",\"示例\",\"==\",\"等于\",\"a == b\",\"~=\",\"不等于\",\"a ~= b\",\"<\",\"小于\",\"a < b\",\"<=\",\"小于等于\",\"a <= b\",\">\",\"大于\",\"a > b\",\">=\",\"大于等于\",\"a >= b\"]},\"1148\":{\"h\":\"3. 逻辑运算符\",\"t\":[\"逻辑运算符用于执行逻辑运算。\",\"运算符\",\"描述\",\"示例\",\"&\",\"逻辑与\",\"a & b\",\"`\",\"`\",\"逻辑或\",\"~\",\"逻辑非\",\"~a\",\"&&\",\"短路逻辑与\",\"a && b\",\"`\",\"`\"]},\"1149\":{\"h\":\"4. 按位运算符\",\"t\":[\"按位运算符用于逐位进行运算。\",\"运算符\",\"描述\",\"示例\",\"&\",\"按位与\",\"a & b\",\"`\",\"`\",\"按位或\",\"~\",\"按位非\",\"~a\",\"^\",\"按位异或\",\"a ^ b\",\"<<\",\"左移\",\"a << n\",\">>\",\"右移\",\"a >> n\"]},\"1150\":{\"h\":\"5. 集合运算符\",\"t\":[\"集合运算符用于处理集合操作。\",\"运算符\",\"描述\",\"示例\",\"union\",\"并集\",\"union(A, B)\",\"intersect\",\"交集\",\"intersect(A, B)\",\"setdiff\",\"差集\",\"setdiff(A, B)\",\"setxor\",\"对称差\",\"setxor(A, B)\",\"ismember\",\"元素是否属于集合\",\"ismember(A, B)\",\"unique\",\"去除重复元素\",\"unique(A)\"]},\"1151\":{\"h\":\"6. 特殊字符\",\"t\":[\"MATLAB 还包含一些特殊字符，用于索引、转置等操作。\",\"字符\",\"描述\",\"示例\",\":\",\"范围\",\"1:10\",\";\",\"分隔符\",\"a = 1; b = 2;\",\",\",\"分隔符\",\"[1, 2, 3]\",\"'\",\"转置\",\"A'\",\".\",\"结构体字段访问\",\"struct.field\"]},\"1152\":{\"h\":\"示例代码：MATLAB 运算符使用\",\"t\":[\"% 算术运算符 a = 5; b = 3; add = a + b; subtract = a - b; multiply = a * b; divide = a / b; power = a ^ b; % 关系运算符 is_equal = (a == b); is_not_equal = (a ~= b); is_less = (a < b); is_less_equal = (a <= b); is_greater = (a > b); is_greater_equal = (a >= b); % 逻辑运算符 logical_and = (a > 2) & (b < 4); logical_or = (a > 2) | (b > 4); logical_not = ~(a > 2); short_circuit_and = (a > 2) && (b < 4); short_circuit_or = (a > 2) || (b > 4); % 按位运算符 bitwise_and = bitand(a, b); bitwise_or = bitor(a, b); bitwise_not = bitcmp(a); bitwise_xor = bitxor(a, b); left_shift = bitshift(a, 2); right_shift = bitshift(a, -2); % 集合运算符 A = [1, 2, 3, 4]; B = [3, 4, 5, 6]; union_set = union(A, B); intersect_set = intersect(A, B); diff_set = setdiff(A, B); sym_diff = setxor(A, B); is_member = ismember(3, A); unique_elements = unique([A, B]); % 特殊字符 range = 1:10; semicolon_separated = [a; b]; comma_separated = [a, b]; transpose_a = a'; structure = struct('field', a);\"]},\"1153\":{\"h\":\"数组和向量\",\"t\":[\"在MATLAB中，数组和向量是最基本的数据类型之一，理解它们的区别和用法对于编写高效的代码至关重要。\"]},\"1154\":{\"h\":\"数组\",\"t\":[\"数组是元素的集合，可以是一维、二维或多维的。\",\"创建数组：\",\"% 一维数组 arr1D = [1, 2, 3, 4, 5]; % 二维数组（矩阵） arr2D = [1, 2, 3; 4, 5, 6]; % 多维数组 arr3D = cat(3, [1, 2; 3, 4], [5, 6; 7, 8]);\",\"数组操作：\",\"% 访问数组元素 element1D = arr1D(3); % 获取一维数组的第三个元素 element2D = arr2D(2, 3); % 获取二维数组的第二行第三列的元素 % 修改数组元素 arr1D(3) = 10; arr2D(2, 3) = 9; % 数组大小 size1D = size(arr1D); % [1, 5] size2D = size(arr2D); % [2, 3] % 数组连接 arrConcat = [arr1D, [6, 7, 8]]; % 水平连接 arrConcatVert = [arr2D; [7, 8, 9]]; % 垂直连接\"]},\"1155\":{\"h\":\"向量\",\"t\":[\"向量是特殊的一维数组，可以是行向量或列向量。\",\"创建向量：\",\"% 行向量 rowVec = [1, 2, 3, 4, 5]; % 列向量 colVec = [1; 2; 3; 4; 5];\",\"向量操作：\",\"% 访问向量元素 elementRow = rowVec(4); % 行向量的第四个元素 elementCol = colVec(2); % 列向量的第二个元素 % 修改向量元素 rowVec(4) = 10; colVec(2) = 9; % 向量长度 lengthRow = length(rowVec); % 5 lengthCol = length(colVec); % 5 % 向量加法 vecSum = rowVec + [5, 4, 3, 2, 1]; % 向量点积 dotProduct = dot(rowVec, [5, 4, 3, 2, 1]); % 向量的范数 normVec = norm(rowVec);\"]},\"1156\":{\"h\":\"数组和向量的常用操作\",\"t\":[\"生成特定类型的数组：\",\"% 全零数组 zerosArray = zeros(3, 4); % 3x4全零数组 % 全一数组 onesArray = ones(2, 3); % 2x3全一数组 % 单位矩阵 identityMatrix = eye(4); % 4x4单位矩阵 % 随机数组 randArray = rand(3, 3); % 3x3均匀分布的随机数数组 randnArray = randn(3, 3); % 3x3正态分布的随机数数组\",\"线性空间和重复数组：\",\"% 线性空间 linSpaceArray = linspace(0, 10, 5); % 从0到10生成5个等间隔的点 % 重复数组 repeatedArray = repmat([1, 2; 3, 4], 2, 3); % 将2x2的数组重复2次行和3次列\",\"这些是MATLAB中数组和向量的基本概念和操作方法。通过掌握这些基础，可以进行更复杂的数据处理和数学计算。\"]},\"1157\":{\"h\":\"MATLAB编程\"},\"1158\":{\"h\":\"分支语句\",\"t\":[\"在 MATLAB 中，分支语句主要用于控制程序的执行流程，根据条件判断执行不同的代码块。以下是 MATLAB 中常用的分支语句：\"]},\"1159\":{\"h\":\"1.\",\"t\":[\"if 语句用于根据条件执行代码块。\",\"if condition % 如果 condition 为真，执行这段代码 end\",\"例如：\",\"x = 10; if x > 0 disp('x is positive'); end\"]},\"1160\":{\"h\":\"2.\",\"t\":[\"当 if 条件不满足时，else 部分的代码将被执行。\",\"if condition % 如果 condition 为真，执行这段代码 else % 如果 condition 为假，执行这段代码 end\",\"例如：\",\"x = -5; if x > 0 disp('x is positive'); else disp('x is non-positive'); end\"]},\"1161\":{\"h\":\"3.\",\"t\":[\"当有多个条件需要判断时，可以使用 elseif 扩展 if 语句。\",\"if condition1 % 如果 condition1 为真，执行这段代码 elseif condition2 % 如果 condition1 为假，condition2 为真，执行这段代码 else % 如果前面的条件都为假，执行这段代码 end\",\"例如：\",\"x = 0; if x > 0 disp('x is positive'); elseif x < 0 disp('x is negative'); else disp('x is zero'); end\"]},\"1162\":{\"h\":\"4.\",\"t\":[\"switch-case 语句用于判断一个变量或表达式的值，并根据值执行相应的代码块。\",\"switch variable case value1 % 如果 variable 等于 value1，执行这段代码 case value2 % 如果 variable 等于 value2，执行这段代码 otherwise % 如果 variable 不等于任何一个 case 的值，执行这段代码 end\",\"例如：\",\"fruit = 'apple'; switch fruit case 'apple' disp('You chose an apple.'); case 'banana' disp('You chose a banana.'); otherwise disp('Unknown fruit.'); end\"]},\"1163\":{\"h\":\"5.\",\"t\":[\"分支语句可以嵌套使用，即在一个 if、elseif、else 或 switch-case 代码块内再嵌套一个分支语句。\",\"例如：\",\"x = 10; y = -5; if x > 0 if y > 0 disp('x and y are positive'); else disp('x is positive, but y is not'); end else disp('x is not positive'); end\",\"这些分支语句允许你根据不同条件灵活控制 MATLAB 程序的执行流程。\"]},\"1164\":{\"h\":\"循环语句\",\"t\":[\"在 MATLAB 中，循环语句用于重复执行代码块，直到满足某些条件为止。以下是 MATLAB 中常用的循环语句：\"]},\"1165\":{\"h\":\"1.\",\"t\":[\"for 循环用于在已知循环次数的情况下重复执行代码块。\",\"for index = startValue:endValue % 执行代码 end\",\"例如：\",\"for i = 1:5 disp(['Iteration ', num2str(i)]); end\",\"这个例子将输出从 1 到 5 的迭代次数。\",\"你也可以指定步长：\",\"for i = 1:2:9 disp(i); end\",\"这将输出 1、3、5、7、9。\"]},\"1166\":{\"h\":\"2.\",\"t\":[\"while 循环用于在满足某个条件时重复执行代码块。与 for 循环不同，while 循环的次数可能不固定。\",\"while condition % 执行代码 end\",\"例如：\",\"x = 1; while x <= 5 disp(['x = ', num2str(x)]); x = x + 1; end\",\"这个循环将一直运行，直到 x 的值超过 5。\"]},\"1167\":{\"h\":\"3.\",\"t\":[\"break 语句用于提前终止循环，不再执行剩余的循环迭代。\",\"例如：\",\"for i = 1:10 if i == 5 break; % 循环在 i 等于 5 时终止 end disp(i); end\",\"这个循环将输出 1 到 4，然后终止。\"]},\"1168\":{\"h\":\"4.\",\"t\":[\"continue 语句用于跳过本次循环的剩余部分，直接开始下一次迭代。\",\"例如：\",\"for i = 1:5 if i == 3 continue; % 跳过 i 等于 3 时的输出 end disp(i); end\",\"这个循环将输出 1、2、4、5，跳过 3。\"]},\"1169\":{\"h\":\"5.\",\"t\":[\"你可以在一个循环内嵌套另一个循环。例如，可以用嵌套循环遍历一个二维矩阵的所有元素。\",\"例如：\",\"for i = 1:3 for j = 1:3 disp(['i = ', num2str(i), ', j = ', num2str(j)]); end end\",\"这个代码将输出 i 和 j 的所有组合。\"]},\"1170\":{\"h\":\"6.\",\"t\":[\"通常情况下，循环和条件语句结合使用，以实现更复杂的控制流。\",\"例如：\",\"n = 10; for i = 1:n if mod(i,2) == 0 disp([num2str(i), ' is even']); else disp([num2str(i), ' is odd']); end end\",\"这个循环将输出 1 到 10 的奇偶性。\",\"MATLAB 中的循环语句非常灵活，适用于需要重复执行操作的各种场景。根据具体需求选择合适的循环类型，可以高效地实现各种功能。\"]},\"1171\":{\"h\":\"函数\",\"t\":[\"在 MATLAB 中，函数是用于封装一段可重复使用的代码的方式。使用函数可以让代码更模块化、结构更清晰，并且易于调试和维护。下面是关于 MATLAB 函数的主要内容：\"]},\"1172\":{\"h\":\"1.\",\"t\":[\"MATLAB 函数通常存储在独立的 .m 文件中，文件名应与函数名相同。函数定义的基本语法如下：\",\"function [output1, output2, ...] = functionName(input1, input2, ...) % 函数体：在这里编写代码 end\",\"例如，定义一个简单的加法函数 addNumbers.m：\",\"function sum = addNumbers(a, b) sum = a + b; end\",\"保存上述代码为 addNumbers.m，然后可以在 MATLAB 中调用这个函数：\",\"result = addNumbers(3, 5); disp(result); % 输出: 8\"]},\"1173\":{\"h\":\"2.\",\"t\":[\"输入参数：函数可以接受多个输入参数。输入参数在函数调用时传递给函数体。\",\"输出参数：函数可以返回一个或多个输出。返回多个输出时，输出用方括号括起来，并用逗号分隔。\",\"例如，定义一个函数同时返回两个输出：\",\"function [sum, product] = calculate(a, b) sum = a + b; product = a * b; end\",\"调用该函数：\",\"[s, p] = calculate(3, 5); disp(['Sum: ', num2str(s)]); disp(['Product: ', num2str(p)]);\"]},\"1174\":{\"h\":\"3.\",\"t\":[\"局部变量：函数内部的变量默认是局部变量，只在函数体内有效，不会影响其他工作区或函数中的同名变量。\",\"全局变量：如果需要在多个函数或工作区共享变量，可以使用 global 关键字声明全局变量。\",\"例如：\",\"function demoGlobal() global x x = 10; end\",\"在函数外部使用：\",\"global x demoGlobal(); disp(x); % 输出: 10\"]},\"1175\":{\"h\":\"4.\",\"t\":[\"MATLAB 支持在一个函数内定义另一个函数，这种函数称为嵌套函数。嵌套函数可以访问其外部函数的变量。\",\"例如：\",\"function mainFunction() a = 5; b = 10; result = nestedFunction(a, b); disp(result); function sum = nestedFunction(x, y) sum = x + y; end end\",\"在这个例子中，nestedFunction 可以访问 mainFunction 中的变量 a 和 b。\"]},\"1176\":{\"h\":\"5.\",\"t\":[\"匿名函数是一个简单的、未命名的函数，可以在一行中定义，通常用于简单的计算或作为其他函数的输入。\",\"语法如下：\",\"f = @(x) x^2 + 2*x + 1;\",\"调用匿名函数：\",\"y = f(3); % y = 16\"]},\"1177\":{\"h\":\"6.\",\"t\":[\"函数句柄是一种可以引用函数的变量，可以将函数句柄传递给其他函数或保存起来以便稍后调用。\",\"创建函数句柄的方法：\",\"f = @addNumbers; result = f(3, 5); % 调用 addNumbers 函数\"]},\"1178\":{\"h\":\"7.\",\"t\":[\"MATLAB 函数可以定义可变数量的输入和输出参数，使用 varargin 和 varargout 处理。\",\"例如，定义一个函数可以接受任意数量的输入参数：\",\"function result = flexibleSum(varargin) result = 0; for i = 1:nargin result = result + varargin{i}; end end\",\"调用该函数：\",\"total = flexibleSum(1, 2, 3, 4, 5); % total = 15\"]},\"1179\":{\"h\":\"8.\",\"t\":[\"在函数文件的开头，可以使用注释编写函数的文档，描述函数的用途、输入、输出等。\",\"例如：\",\"function sum = addNumbers(a, b) % ADDNUMBERS 加法函数 % sum = ADDNUMBERS(a, b) 返回 a 和 b 的和。 sum = a + b; end\",\"然后在 MATLAB 中使用 help 命令查看文档：\",\"help addNumbers\",\"MATLAB 函数提供了灵活的编程能力，通过函数你可以将复杂的代码分解为易于管理和理解的模块化代码。\"]},\"1180\":{\"h\":\"M文件\",\"t\":[\"MATLAB 中的 .m 文件是存储 MATLAB 代码的标准格式文件。.m 文件可以包含函数、脚本、类或单元测试。以下是关于 .m 文件的详细介绍：\"]},\"1181\":{\"h\":\"1.\",\"t\":[\"脚本文件是包含一系列 MATLAB 命令的 .m 文件。这些命令按顺序执行。脚本文件没有输入或输出参数，并且在 MATLAB 的工作空间中直接运行。\",\"示例： 创建一个名为 myscript.m 的脚本文件：\",\"% myscript.m % 这是一个简单的脚本文件示例 x = 10; % 定义变量 x y = 20; % 定义变量 y z = x + y; % 计算 x 和 y 的和 disp(['The sum of x and y is: ', num2str(z)]); % 显示结果\",\"运行这个脚本时，它会在工作空间中定义变量 x、y 和 z，并输出结果。\"]},\"1182\":{\"h\":\"2.\",\"t\":[\"函数文件是包含 MATLAB 函数定义的 .m 文件。函数文件通常有输入和输出参数，并且只在函数调用时执行。函数文件的文件名必须与函数名相同。\",\"示例： 创建一个名为 myfunction.m 的函数文件：\",\"function result = myfunction(a, b) % myfunction 计算两个数的乘积 % result = myfunction(a, b) 返回 a 和 b 的乘积 result = a * b; % 计算乘积 end\",\"在 MATLAB 命令窗口中调用这个函数：\",\"r = myfunction(3, 5); % r = 15\"]},\"1183\":{\"h\":\"3.\",\"t\":[\"MATLAB 支持面向对象编程（OOP），你可以在 .m 文件中定义类。类文件中包含类的定义、属性和方法。\",\"示例： 创建一个名为 MyClass.m 的类文件：\",\"classdef MyClass properties Property1 end methods function obj = MyClass(val) obj.Property1 = val; end function result = multiplyBy(obj, factor) result = obj.Property1 * factor; end end end\",\"使用这个类：\",\"obj = MyClass(10); result = obj.multiplyBy(5); % result = 50\"]},\"1184\":{\"h\":\"4.\",\"t\":[\"脚本：直接在当前工作空间中运行代码，变量会保存在工作空间中。脚本适合用于执行一系列固定的命令。\",\"函数：有自己的局部工作空间，变量只在函数内部有效，函数适合用于重复使用的代码逻辑。\"]},\"1185\":{\"h\":\"5.\",\"t\":[\"MATLAB 提供了框架支持编写单元测试，单元测试文件用于测试函数和类的正确性。通常使用 test 前缀命名单元测试文件。\",\"示例： 创建一个名为 testMyFunction.m 的测试文件：\",\"function tests = testMyFunction tests = functiontests(localfunctions); end function testMultiplyByThree(testCase) actual = myfunction(3, 3); expected = 9; verifyEqual(testCase, actual, expected); end\",\"在 MATLAB 中运行测试：\",\"results = runtests('testMyFunction');\"]},\"1186\":{\"h\":\"6.\",\"t\":[\"你可以使用 MATLAB 内置的编辑器创建和编辑 .m 文件。打开 MATLAB，点击 \\\"New Script\\\" 或 \\\"New Function\\\" 来创建一个新的 .m 文件。\"]},\"1187\":{\"h\":\"7.\",\"t\":[\"在 .m 文件中，你可以使用 % 添加单行注释，或使用 %{ 和 %} 添加多行注释。这些注释对于文档化代码和帮助他人理解你的代码非常有用。\",\"示例：\",\"% 这是单行注释 %{ 这是多行注释 可以跨越多行 %}\"]},\"1188\":{\"h\":\"8.\",\"t\":[\"MATLAB 提供了强大的调试功能，可以在 .m 文件中设置断点、查看变量值、逐步执行代码等。你可以在编辑器中点击行号左侧的灰点来设置断点，调试时 MATLAB 会在该行暂停执行。\",\".m 文件是 MATLAB 编程的核心，掌握如何使用脚本、函数、类和单元测试文件能够显著提升你的 MATLAB 编程效率和代码质量。\"]},\"1189\":{\"h\":\"数据输入输出\",\"t\":[\"在 MATLAB 中，数据的输入和输出操作是非常基本但非常重要的功能。以下是一些常见的数据输入和输出方法：\"]},\"1190\":{\"h\":\"1.\"},\"1191\":{\"h\":\"1.1 从命令行输入\",\"t\":[\"手动输入: 直接在命令行窗口输入变量值。\",\"x = 10; % 定义一个变量 x，值为 10\",\"输入函数: 使用 input 函数从用户处获取输入。\",\"x = input('请输入一个数值: '); % 提示用户输入一个数值\"]},\"1192\":{\"h\":\"1.2 从文件读取数据\",\"t\":[\"从文本文件读取: 使用 fopen 和 fscanf/fgets/fgetl 等函数。\",\"fileID = fopen('data.txt','r'); % 打开文件 data = fscanf(fileID, '%f'); % 按照指定格式读取数据 fclose(fileID); % 关闭文件\",\"从 Excel 文件读取: 使用 xlsread 或 readtable 函数。\",\"data = xlsread('data.xlsx'); % 读取 Excel 文件\",\"从 MAT 文件读取: 使用 load 函数。\",\"load('data.mat'); % 加载 MAT 文件中的数据\"]},\"1193\":{\"h\":\"2.\"},\"1194\":{\"h\":\"2.1 输出到命令行\",\"t\":[\"打印到命令行: 使用 disp 或 fprintf 函数。\",\"disp(x); % 简单地显示变量值 fprintf('x 的值为: %f\\\\n', x); % 格式化输出\"]},\"1195\":{\"h\":\"2.2 保存数据到文件\",\"t\":[\"保存为文本文件: 使用 fopen 和 fprintf 函数。\",\"fileID = fopen('output.txt','w'); % 打开文件以写入 fprintf(fileID, '%f\\\\n', x); % 将数据写入文件 fclose(fileID); % 关闭文件\",\"保存为 Excel 文件: 使用 xlswrite 函数。\",\"xlswrite('output.xlsx', data); % 将数据写入 Excel 文件\",\"保存为 MAT 文件: 使用 save 函数。\",\"save('output.mat', 'x'); % 保存变量 x 到 MAT 文件中\"]},\"1196\":{\"h\":\"3.\",\"t\":[\"以下是一个综合示例，演示如何从文件读取数据、处理数据并将结果保存到新文件中：\",\"% 从文本文件中读取数据 fileID = fopen('data.txt','r'); data = fscanf(fileID, '%f'); fclose(fileID); % 对数据进行处理 result = data * 2; % 将结果保存到新文件中 fileID = fopen('output.txt','w'); fprintf(fileID, '%f\\\\n', result); fclose(fileID); % 将结果输出到命令行 disp('处理结果:'); disp(result);\"]},\"1197\":{\"h\":\"官方文档\",\"t\":[\"数据导入与分析\"]},\"1198\":{\"h\":\"APP构建\",\"t\":[\"APP构建文档\"]},\"1199\":{\"h\":\"MATLAB绘图\",\"t\":[\"在 MATLAB 中，绘图是一个非常重要的功能，可以用来可视化数据、展示分析结果。MATLAB 提供了多种绘图函数来创建各种类型的图表。以下是一些常用的绘图方法和示例。\"]},\"1200\":{\"h\":\"1.\"},\"1201\":{\"h\":\"1.1\",\"t\":[\"plot 函数: 用于绘制二维折线图。\",\"x = 0:0.1:10; % 定义 x 轴数据 y = sin(x); % 定义 y 轴数据 plot(x, y); % 绘制折线图 xlabel('x 轴'); % 添加 x 轴标签 ylabel('y 轴'); % 添加 y 轴标签 title('二维折线图'); % 添加图表标题 grid on; % 打开网格\"]},\"1202\":{\"h\":\"1.2\",\"t\":[\"scatter 函数: 用于绘制二维散点图。\",\"x = randn(100, 1); % 生成随机数据 y = randn(100, 1); scatter(x, y); xlabel('x 轴'); ylabel('y 轴'); title('散点图');\"]},\"1203\":{\"h\":\"1.3\",\"t\":[\"bar 函数: 用于绘制柱状图。\",\"x = [1 2 3 4 5]; y = [10 20 15 25 30]; bar(x, y); xlabel('类别'); ylabel('值'); title('柱状图');\"]},\"1204\":{\"h\":\"1.4\",\"t\":[\"pie 函数: 用于绘制饼图。\",\"data = [10, 20, 30, 40]; pie(data); title('饼图');\"]},\"1205\":{\"h\":\"2.\"},\"1206\":{\"h\":\"2.1\",\"t\":[\"plot3 函数: 用于绘制三维曲线。\",\"t = 0:0.01:10; x = sin(t); y = cos(t); z = t; plot3(x, y, z); xlabel('x 轴'); ylabel('y 轴'); zlabel('z 轴'); title('三维曲线图'); grid on;\"]},\"1207\":{\"h\":\"2.2\",\"t\":[\"mesh 和 surf 函数: 用于绘制三维网格图和三维曲面图。\",\"[X, Y] = meshgrid(-5:0.5:5, -5:0.5:5); % 生成网格点 Z = sin(sqrt(X.^2 + Y.^2)); % 计算 Z 轴数据 mesh(X, Y, Z); % 绘制三维网格图 title('三维网格图'); figure; % 打开新窗口 surf(X, Y, Z); % 绘制三维曲面图 title('三维曲面图');\"]},\"1208\":{\"h\":\"3.\"},\"1209\":{\"h\":\"3.1\",\"t\":[\"subplot 函数: 用于在同一个窗口中绘制多个子图。\",\"x = 0:0.1:10; y1 = sin(x); y2 = cos(x); subplot(2, 1, 1); % 创建两行一列的子图，并选择第一个子图 plot(x, y1); title('子图 1: sin(x)'); subplot(2, 1, 2); % 选择第二个子图 plot(x, y2); title('子图 2: cos(x)');\"]},\"1210\":{\"h\":\"3.2\",\"t\":[\"hold on 和 hold off 函数: 用于在同一图上绘制多条曲线。\",\"x = 0:0.1:10; y1 = sin(x); y2 = cos(x); plot(x, y1, 'r'); % 绘制第一条曲线，红色 hold on; plot(x, y2, 'b'); % 绘制第二条曲线，蓝色 hold off; xlabel('x 轴'); ylabel('y 轴'); title('多条曲线在同一图上'); legend('sin(x)', 'cos(x)'); % 添加图例\"]},\"1211\":{\"h\":\"4.\",\"t\":[\"你可以使用 saveas 或 print 函数将绘制的图保存为不同的图像格式：\",\"saveas(gcf, 'figure1.png'); % 保存当前图为 PNG 格式 print('figure1', '-dpng'); % 另存为 PNG 格式\"]},\"1212\":{\"h\":\"5.\",\"t\":[\"MATLAB 还支持许多高级绘图功能，如等高线图、热力图、直方图、误差棒图等。根据需要可以查阅 MATLAB 的文档或使用帮助命令（如 help plot）获取更多信息。\"]},\"1213\":{\"h\":\"绘图文档\",\"t\":[\"图形与绘图\"]},\"1214\":{\"h\":\"MATLAB数学\",\"t\":[\"MATLAB 是一个强大的数学计算工具，广泛应用于数值计算、线性代数、微积分、概率统计等领域。以下是 MATLAB 中一些常见的数学操作和函数：\"]},\"1215\":{\"h\":\"1.\"},\"1216\":{\"h\":\"1.1 算术运算\",\"t\":[\"加法、减法、乘法、除法和幂运算：\",\"a = 5 + 3; % 加法 b = 10 - 4; % 减法 c = 2 * 3; % 乘法 d = 8 / 2; % 除法 e = 3^2; % 幂运算\"]},\"1217\":{\"h\":\"1.2 常数\",\"t\":[\"MATLAB 内置了一些常用的数学常数：\",\"pi_value = pi; % 圆周率 e_value = exp(1); % 自然常数 e\"]},\"1218\":{\"h\":\"1.3 三角函数\",\"t\":[\"MATLAB 支持标准的三角函数：\",\"sin_val = sin(pi/4); % 正弦函数 cos_val = cos(pi/4); % 余弦函数 tan_val = tan(pi/4); % 正切函数 asin_val = asin(0.5); % 反正弦函数 acos_val = acos(0.5); % 反余弦函数 atan_val = atan(1); % 反正切函数\"]},\"1219\":{\"h\":\"1.4 指数和对数函数\",\"t\":[\"自然指数和对数：\",\"exp_val = exp(2); % 指数函数 e^2 log_val = log(10); % 自然对数 ln(10) log10_val = log10(100); % 以 10 为底的对数 log10(100)\"]},\"1220\":{\"h\":\"2.\"},\"1221\":{\"h\":\"2.1 向量运算\",\"t\":[\"创建向量：\",\"v = [1, 2, 3, 4]; % 行向量 w = [1; 2; 3; 4]; % 列向量\",\"向量加减：\",\"v1 = [1, 2, 3]; v2 = [4, 5, 6]; v_add = v1 + v2; % 向量加法 v_sub = v1 - v2; % 向量减法\",\"点乘和叉乘：\",\"dot_product = dot(v1, v2); % 向量点乘 cross_product = cross(v1, v2); % 向量叉乘\"]},\"1222\":{\"h\":\"2.2 矩阵运算\",\"t\":[\"创建矩阵：\",\"A = [1, 2; 3, 4]; % 2x2 矩阵 B = [5, 6; 7, 8];\",\"矩阵加减：\",\"C = A + B; % 矩阵加法 D = A - B; % 矩阵减法\",\"矩阵乘法：\",\"E = A * B; % 矩阵乘法\",\"转置和求逆：\",\"A_transpose = A'; % 矩阵转置 A_inv = inv(A); % 矩阵求逆\",\"行列式：\",\"det_A = det(A); % 矩阵 A 的行列式\",\"生成单位矩阵和零矩阵：\",\"I = eye(3); % 3x3 单位矩阵 Z = zeros(2, 3); % 2x3 零矩阵\"]},\"1223\":{\"h\":\"3.\"},\"1224\":{\"h\":\"3.1 符号计算\",\"t\":[\"使用符号变量和符号表达式：\",\"syms x; f = x^2 + 2*x + 1; % 定义符号表达式\"]},\"1225\":{\"h\":\"3.2 求导\",\"t\":[\"计算函数的导数：\",\"df = diff(f, x); % 对 f(x) 求导数\"]},\"1226\":{\"h\":\"3.3 积分\",\"t\":[\"计算函数的不定积分和定积分：\",\"F = int(f, x); % 不定积分 definite_int = int(f, x, 0, 1); % 在 [0, 1] 上的定积分\"]},\"1227\":{\"h\":\"3.4 数值积分\",\"t\":[\"使用 integral 函数进行数值积分：\",\"num_int = integral(@(x) x.^2 + 2*x + 1, 0, 1); % 数值积分\"]},\"1228\":{\"h\":\"4.\"},\"1229\":{\"h\":\"4.1 基本统计量\",\"t\":[\"计算均值、中位数、方差和标准差：\",\"data = [1, 2, 3, 4, 5]; mean_val = mean(data); % 均值 median_val = median(data); % 中位数 var_val = var(data); % 方差 std_val = std(data); % 标准差\"]},\"1230\":{\"h\":\"4.2 概率分布\",\"t\":[\"生成常见概率分布的随机数：\",\"normal_data = randn(1, 100); % 生成 100 个服从标准正态分布的随机数 uniform_data = rand(1, 100); % 生成 100 个服从均匀分布的随机数\",\"计算概率密度函数 (PDF) 和累积分布函数 (CDF)：\",\"x = -3:0.1:3; pdf_vals = normpdf(x, 0, 1); % 标准正态分布的 PDF cdf_vals = normcdf(x, 0, 1); % 标准正态分布的 CDF\"]},\"1231\":{\"h\":\"5.\"},\"1232\":{\"h\":\"5.1 求解线性方程组\",\"t\":[\"解线性方程组 Ax = b：\",\"A = [1, 2; 3, 4]; b = [5; 6]; x = A\\\\b; % 解方程 Ax = b\"]},\"1233\":{\"h\":\"5.2 特征值和特征向量\",\"t\":[\"计算矩阵的特征值和特征向量：\",\"[V, D] = eig(A); % V 是特征向量矩阵，D 是特征值对角矩阵\"]},\"1234\":{\"h\":\"官方文档\",\"t\":[\"MATLAB数学文档\"]},\"1235\":{\"h\":\"MATLAB高级\"},\"1236\":{\"h\":\"偏微分方程工具箱\"},\"1237\":{\"h\":\"优化工具箱\"},\"1238\":{\"h\":\"小波分析工具箱\"},\"1239\":{\"h\":\"Simulink仿真基础\"},\"1240\":{\"h\":\"Simulink仿真应用\"},\"1241\":{\"h\":\"句柄图形对象\"},\"1242\":{\"h\":\"图形用户界面\"},\"1243\":{\"h\":\"文件IO\"},\"1244\":{\"c\":[\"科研工具\"]},\"1245\":{\"c\":[\"MATLAB\",\"科研工具\",\"数据分析\"]},\"1246\":{\"h\":\"Origin\"},\"1247\":{\"h\":\"Origin\"},\"1248\":{\"c\":[\"科研工具\"]},\"1249\":{\"c\":[\"Origin\",\"科研工具\",\"数据分析\"]},\"1250\":{\"h\":\"R语言数据分析和可视化\"},\"1251\":{\"c\":[\"科研工具\"]},\"1252\":{\"c\":[\"R\",\"科研工具\",\"数据分析\"]},\"1253\":{\"h\":\"spss\"},\"1254\":{\"c\":[\"科研工具\"]},\"1255\":{\"c\":[\"spss\",\"数据分析\"]},\"1256\":{\"h\":\"Java基础语法\"},\"1257\":{\"h\":\"Java\"},\"1258\":{\"h\":\"Java简介\",\"t\":[\"Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling和同事们共同研发，并在 1995 年正式推出。后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。\",\"Java分为三个体系：\",\"JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）\",\"JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)\",\"JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版) 2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 \\\"2\\\"：J2EE 更名为 Java EE，J2SE 更名为Java SE，J2ME 更名为 Java ME。\"]},\"1259\":{\"h\":\"主要特性\",\"t\":[\"Java 语言是简单的： Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。\",\"Java 语言是面向对象的： Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。\",\"Java语言是分布式的： Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。\",\"Java 语言是健壮的： Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的明智选择。Java 的安全检查机制使得 Java 更具健壮性。\",\"Java语言是安全的： Java通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵。\",\"Java 语言是体系结构中立的： Java 程序（后缀为 java 的文件）在 Java 平台上被编译为体系结构中立的字节码格式（后缀为 class 的文件），然后可以在实现这个 Java 平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。\",\"Java 语言是可移植的： 这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。\",\"Java 语言是解释型的： 如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。\",\"Java 是高性能的： 与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 JIT(Just-In-Time）编译器技术的发展越来越接近于 C++。\",\"Java 语言是多线程的： 在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread(Runnable) 的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。\",\"Java 语言是动态的： Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。\"]},\"1260\":{\"h\":\"Java的版本和体系\"},\"1261\":{\"h\":\"三个版本\",\"t\":[\"Java SE：Standard Edition\",\"Java EE：Enterprise Edition\",\"Java ME：Micro Edition\",\"Java SE就是标准版，包含标准的JVM和标准库，而Java EE是企业版，它只是在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。\",\"Java ME就和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。\"]},\"1262\":{\"h\":\"Java的体系架构\"},\"1263\":{\"h\":\"JVM\",\"t\":[\"Java Virtual Machine（JVM）是Java编程语言的核心组件之一，它是运行Java程序的运行时环境。JVM是平台无关的，这是Java语言“编译一次，到处运行”的关键所在。以下是JVM的基础知识：\"]},\"1264\":{\"h\":\"1. JVM的基本概念\",\"t\":[\"虚拟机：JVM是一个抽象计算机，提供运行Java程序所需的指令集和执行环境。它负责将编译后的Java字节码（.class文件）解释或编译为特定平台的机器码并执行。\",\"平台无关性：Java源代码编译成字节码后，这些字节码可以在任何安装了相应JVM的设备上运行，而不需要重新编译。\"]},\"1265\":{\"h\":\"2. JVM的主要组件\",\"t\":[\"类加载器（Class Loader）：负责将字节码加载到JVM中。类加载器可以从文件系统、网络或其他位置加载.class文件，并将其转换为JVM可以理解的类对象。\",\"运行时数据区（Runtime Data Area）： \",\"方法区（Method Area）：存储已加载的类信息、常量、静态变量和方法字节码。\",\"堆（Heap）：存储Java对象实例，是垃圾回收器（GC）管理的主要区域。\",\"栈（Stack）：每个线程都有自己的栈，栈中保存了局部变量、操作数和方法调用的返回地址。\",\"程序计数器（PC Register）：记录当前线程执行的字节码指令地址。\",\"本地方法栈（Native Method Stack）：用于执行本地方法（通常是C或C++实现的）。\"]},\"1266\":{\"h\":\"3. JVM的工作过程\",\"t\":[\"类加载：通过类加载器将字节码加载到内存中。\",\"字节码校验：确保字节码符合JVM的规范和安全要求。\",\"解释与执行：JVM解释或即时编译（Just-In-Time, JIT）字节码，将其转化为机器码并执行。\",\"垃圾回收：自动管理堆内存，通过垃圾回收机制回收不再使用的对象。\"]},\"1267\":{\"h\":\"4. JVM的调优与管理\",\"t\":[\"垃圾回收（GC）：JVM自动管理内存，但不同的GC算法（如串行GC、并行GC、G1 GC等）适用于不同的应用场景。合理配置GC可以提升应用性能。\",\"JVM参数调优：通过设置JVM启动参数（如-Xms、-Xmx、-XX:PermSize等），可以优化内存使用、GC行为和性能表现。\",\"监控工具：Java提供了多种监控工具，如JConsole、VisualVM、JMC（Java Mission Control），用于监控JVM的性能、内存使用、线程状态等。\"]},\"1268\":{\"h\":\"5. JVM与多线程\",\"t\":[\"线程模型：JVM原生支持多线程，每个Java线程对应于操作系统的一个线程。JVM通过多线程机制提高程序执行效率，特别是在多核处理器上。\",\"同步与锁：JVM提供了内置锁（monitor）和同步机制，确保多线程访问共享资源时的线程安全。\"]},\"1269\":{\"h\":\"6. 常见JVM问题与调试\",\"t\":[\"内存泄漏：尽管JVM有垃圾回收机制，内存泄漏仍可能发生。调试工具如MAT（Memory Analyzer Tool）可以帮助查找和解决内存泄漏问题。\",\"性能瓶颈：性能调优通常涉及垃圾回收、内存分配和线程管理。通过性能监控工具，可以识别和解决JVM性能瓶颈。\",\"JVM不仅仅是Java程序的运行时环境，它还通过跨平台能力、高效的内存管理和强大的多线程支持。\"]},\"1270\":{\"h\":\"Java开发环境\"},\"1271\":{\"h\":\"windows开发环境\"},\"1272\":{\"h\":\"IDE\",\"t\":[\"IDEA使用指南\"]},\"1273\":{\"h\":\"基础语法\",\"t\":[\"一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。\",\"对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。\",\"类：类是一个模板，它描述一类对象的行为和状态。\",\"方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。\",\"实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。\"]},\"1274\":{\"h\":\"hello world\",\"t\":[\"public class HelloWorld { /* 第一个Java程序 * 它将输出字符串 Hello World */ public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); // 输出 Hello World } }\"]},\"1275\":{\"h\":\"基本规则\",\"t\":[\"大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。\"]},\"1276\":{\"h\":\"标识符\",\"t\":[\"Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。\",\"关于 Java 标识符，有以下几点需要注意：\",\"所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始\",\"首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合\",\"关键字不能用作标识符\",\"标识符是大小写敏感的\",\"合法标识符举例：age、$salary、_value、__1_value\",\"非法标识符举例：123abc、-salary\"]},\"1277\":{\"h\":\"修饰符\",\"t\":[\"像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：\",\"访问控制修饰符 : default, public , protected, private\",\"非访问控制修饰符 : final, abstract, static, synchronized\"]},\"1278\":{\"h\":\"变量\",\"t\":[\"Java 中主要有如下几种类型的变量\",\"局部变量\",\"类变量（静态变量）\",\"成员变量（非静态变量）\"]},\"1279\":{\"h\":\"关键字\"},\"1280\":{\"h\":\"注释\",\"t\":[\"Java 注释主要有三种类型：\",\"单行注释\",\"多行注释\",\"文档注释\"]},\"1281\":{\"h\":\"单行注释\",\"t\":[\"单行注释以双斜杠 // 开始：\",\"// 这是一个单行注释 int x = 10; // 初始化一个变量x为10\"]},\"1282\":{\"h\":\"多行注释\",\"t\":[\"多行注释以 /*开始，以 */结束：\",\"/* 这是一个多行注释 可以用来注释多行代码 */ int y = 20; // 初始化一个变量y为20\"]},\"1283\":{\"h\":\"文档注释\",\"t\":[\"文档注释以 /** 开始，以 */ 结束，通常出现在类、方法、字段等的声明前面，用于生成代码文档，这种注释可以被工具提取并生成 API 文档，如 JavaDoc。\",\"/** * 这是一个文档注释示例 * 它通常包含有关类、方法或字段的详细信息 */ public class MyClass { // 类的成员和方法 }\",\"文档注释的格式通常包含一些特定的标签，如 @param 用于描述方法参数，@return 用于描述返回值，@throws 用于描述可能抛出的异常等等，这些标签有助于生成清晰的API文档，以便其他开发者能够更好地理解和使用你的代码。\"]},\"1284\":{\"h\":\"Java编译运行\"},\"1285\":{\"h\":\"基本数据类型\",\"t\":[\"Java 中有八种基本数据类型，它们分为四类：整数类型、浮点类型、字符类型和布尔类型。\"]},\"1286\":{\"h\":\"1. 整数类型 (Integer Types)\",\"t\":[\"byte: 8 位有符号整数，取值范围为 -128 到 127。\",\"short: 16 位有符号整数，取值范围为 -32,768 到 32,767。\",\"int: 32 位有符号整数，取值范围为 -2^31 到 2^31-1（即 -2,147,483,648 到 2,147,483,647）。\",\"long: 64 位有符号整数，取值范围为 -2^63 到 2^63-1。\"]},\"1287\":{\"h\":\"2. 浮点类型 (Floating-Point Types)\",\"t\":[\"float: 32 位单精度浮点数。适合存储小数位数较少的数据。\",\"double: 64 位双精度浮点数。适合存储大部分浮点数。\"]},\"1288\":{\"h\":\"3. 字符类型 (Character Type)\",\"t\":[\"char: 16 位字符，表示一个 Unicode 字符，取值范围为 '\\\\u0000' (即 0) 到 '\\\\uffff' (即 65,535)。\"]},\"1289\":{\"h\":\"4. 布尔类型 (Boolean Type)\",\"t\":[\"boolean: 只有两个取值：true 和 false。通常用于条件判断。\"]},\"1290\":{\"h\":\"类型默认值\"},\"1291\":{\"h\":\"引用类型\",\"t\":[\"在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。\",\"对象、数组都是引用数据类型。\",\"所有引用类型的默认值都是null。\",\"一个引用变量可以用来引用任何与之兼容的类型。\",\"例子：Site site = new Site(\\\"Java\\\")。\"]},\"1292\":{\"h\":\"常量\",\"t\":[\"在Java中，常量和转义字符是编程中经常使用的概念。下面是对这两个概念的详细介绍：\",\"常量（Constants） 常量是指在程序运行过程中其值保持不变的量。Java中常量通常使用final关键字来定义。常见的常量类型包括：\",\"整数常量：如100、0、-25等。\",\"浮点数常量：如3.14、0.001等。\",\"字符常量：单个字符用单引号包围，如'A'、'b'、'3'等。\",\"字符串常量：一串字符用双引号包围，如\\\"Hello, World!\\\"、\\\"Java\\\"等。\",\"布尔常量：true或false。\",\"final int MAX_VALUE = 100; // 整数常量 final double PI = 3.14159; // 浮点数常量 final char NEWLINE = '\\\\n'; // 字符常量 final String GREETING = \\\"Hello\\\"; // 字符串常量 final boolean FLAG = true; // 布尔常量\",\"转义字符（Escape Characters） 转义字符用于表示某些不能直接打印的字符或具有特殊含义的字符。它们通常由反斜杠\\\\后跟一个字符来表示。常见的转义字符包括：\",\"\\\\n：换行符，表示光标移到下一行的开头。\",\"\\\\t：制表符，表示光标移动到下一个水平制表位。\",\"\\\\\\\\：反斜杠字符本身。\",\"\\\\'：单引号字符。\",\"\\\\\\\"：双引号字符。\",\"\\\\r：回车符，表示光标移到本行的开头。\",\"\\\\b：退格符，表示光标向前移动一个字符。\",\"\\\\f：换页符，表示光标移动到下一页。\",\"public class Main { public static void main(String[] args) { System.out.println(\\\"Hello\\\\nWorld!\\\"); // 输出带换行符的字符串 System.out.println(\\\"Tab\\\\tCharacter\\\"); // 输出带制表符的字符串 System.out.println(\\\"A single quote: \\\\'\\\"); // 输出带单引号的字符串 System.out.println(\\\"A backslash: \\\\\\\\\\\"); // 输出反斜杠 } }\",\"输出结果：\",\"Hello World! Tab Character A single quote: ' A backslash: \\\\\"]},\"1293\":{\"h\":\"类型转换\",\"t\":[\"在Java中，数据类型转换是指将一种数据类型的值转换为另一种数据类型的过程。数据类型的转换主要分为两类：自动类型转换（隐式转换）和强制类型转换（显式转换）。\"]},\"1294\":{\"h\":\"1. 自动类型转换（Implicit Casting）\",\"t\":[\"自动类型转换是指将一种较小范围的数据类型自动转换为较大范围的数据类型。由于这种转换是安全的，Java会在需要时自动执行。例如，将一个int类型的值赋给long类型的变量。\",\"规则：\",\"从小范围到大范围的数据类型可以自动转换。\",\"自动类型转换顺序：byte -> short -> int -> long -> float -> double\",\"示例：\",\"int intVal = 100; long longVal = intVal; // int自动转换为long float floatVal = longVal; // long自动转换为float double doubleVal = floatVal; // float自动转换为double\"]},\"1295\":{\"h\":\"2. 强制类型转换（Explicit Casting）\",\"t\":[\"强制类型转换是将一种较大范围的数据类型显式转换为较小范围的数据类型。这种转换可能会导致数据精度丢失，因此需要使用显式的转换操作。\",\"语法：\",\"targetType variableName = (targetType) value;\",\"规则：\",\"需要手动指定目标类型。\",\"可能会导致数据精度丢失或溢出。\",\"示例：\",\"double doubleVal = 100.99; float floatVal = (float) doubleVal; // double强制转换为float long longVal = (long) floatVal; // float强制转换为long int intVal = (int) longVal; // long强制转换为int short shortVal = (short) intVal; // int强制转换为short\"]},\"1296\":{\"h\":\"3. 特殊类型转换\"},\"1297\":{\"h\":\"字符与数值类型的转换\",\"t\":[\"字符可以通过其对应的ASCII码值与数值类型相互转换。\",\"示例：\",\"char charVal = 'A'; int intVal = (int) charVal; // 'A' 转换为 65 char anotherChar = (char) (intVal + 1); // 66 转换为 'B'\"]},\"1298\":{\"h\":\"字符串与基本数据类型的转换\",\"t\":[\"字符串转换为基本类型：使用包装类的parseXXX()方法。\",\"基本类型转换为字符串：使用String.valueOf()方法或直接与空字符串相加。\",\"示例：\",\"String numberStr = \\\"123\\\"; int intVal = Integer.parseInt(numberStr); // 字符串转换为int double doubleVal = Double.parseDouble(numberStr); // 字符串转换为double int num = 456; String strVal = String.valueOf(num); // int转换为字符串 String anotherStr = num + \\\"\\\"; // int转换为字符串\"]},\"1299\":{\"h\":\"4. 类型转换的注意事项\",\"t\":[\"数据溢出：在强制类型转换时，如果超出了目标类型的范围，可能会发生数据溢出。\",\"精度丢失：浮点数转换为整数时，小数部分会被截断。\",\"示例：\",\"int largeInt = 100000; byte smallByte = (byte) largeInt; // 可能发生溢出 double largeDouble = 123.456; int truncatedInt = (int) largeDouble; // 小数部分会被截断，结果为123\"]},\"1300\":{\"h\":\"变量\",\"t\":[\"在 Java 中，变量是存储数据的容器，可以用于存储各种数据类型的值。Java 变量需要在使用前先声明，声明变量时必须指定变量的类型。根据变量的作用域和生命周期，Java 变量可以分为三种类型：局部变量、实例变量（也称为成员变量或字段）和类变量（也称为静态变量）。\"]},\"1301\":{\"h\":\"1. 局部变量 (Local Variables)\",\"t\":[\"定义：局部变量是在方法、构造方法或代码块中声明的变量。\",\"作用域：局部变量的作用域只限于其声明所在的块或方法，方法结束后变量会被销毁。\",\"默认值：局部变量在声明后不会被自动初始化，因此在使用之前必须显式地初始化。\",\"示例：\",\"public void myMethod() { int age = 25; // age 是一个局部变量 System.out.println(age); }\"]},\"1302\":{\"h\":\"2. 实例变量 (Instance Variables)\",\"t\":[\"定义：实例变量是类中声明，但在方法、构造方法或块之外的变量。每个对象都有自己的一份实例变量的拷贝。\",\"作用域：实例变量的作用域是整个类，存在于对象被创建的内存中，直到对象被垃圾回收。\",\"默认值：实例变量会有默认值，例如，整型变量的默认值是 0，布尔型变量的默认值是 false，对象的默认值是 null。\",\"示例：\",\"public class Person { String name; // name 是一个实例变量 int age; public void display() { System.out.println(name + \\\" is \\\" + age + \\\" years old.\\\"); } }\"]},\"1303\":{\"h\":\"3. 类变量 (Class Variables)\",\"t\":[\"定义：类变量使用 static 关键字声明，是类的所有对象共享的变量。\",\"作用域：类变量的作用域是整个类，且存在于所有对象之间共享。它们在类加载时初始化，并在类卸载时销毁。\",\"默认值：类变量也会有默认值，和实例变量类似。\",\"示例：\",\"public class Person { static int population; // population 是一个类变量 String name; int age; public Person(String name, int age) { this.name = name; this.age = age; population++; } }\"]},\"1304\":{\"h\":\"变量的声明和初始化\",\"t\":[\"声明：在声明变量时，必须指定变量的类型。\",\"int count; // 变量声明\",\"初始化：声明变量后，可以给变量赋值。\",\"count = 10; // 变量初始化\",\"同时声明和初始化：\",\"int count = 10;\"]},\"1305\":{\"h\":\"变量命名规则\",\"t\":[\"变量名必须以字母、美元符号 $ 或下划线 _ 开头，后续可以包含数字。\",\"变量名区分大小写，如 myVar 和 myvar 是两个不同的变量。\",\"变量名不能是 Java 的关键字，如 class、public、static 等。\"]},\"1306\":{\"h\":\"修饰符\",\"t\":[\"在Java中，修饰符（Modifiers）用于定义类、方法、变量等的可见性、行为或特性。修饰符主要分为两大类：访问修饰符和非访问修饰符。以下是详细介绍：\"]},\"1307\":{\"h\":\"1. 访问修饰符（Access Modifiers）\",\"t\":[\"访问修饰符控制类、方法、构造函数、和变量的访问级别，即它们在其他类中的可见性。主要有四种访问修饰符：\",\"public:\",\"类：可以被所有类访问。\",\"方法/变量：可以被所有类访问，无论是在同一包内还是在不同包中。\",\"public class MyClass { public int number; public void show() { // 方法体 } }\",\"protected:\",\"方法/变量：可以被同一包中的类访问，也可以被不同包中子类访问。不能用于修饰类。\",\"class MyClass { protected int number; protected void show() { // 方法体 } }\",\"default（无修饰符）:\",\"类/方法/变量：只有在同一包内的类可以访问，不能被不同包中的类访问。默认访问级别，即不显式指定修饰符时使用此级别。\",\"class MyClass { int number; // 默认访问级别 void show() { // 方法体 } }\",\"private:\",\"方法/变量：只能在同一个类中访问，不能被其他类访问。不能用于修饰类。\",\"class MyClass { private int number; private void show() { // 方法体 } }\"]},\"1308\":{\"h\":\"2. 非访问修饰符（Non-Access Modifiers）\",\"t\":[\"非访问修饰符用于实现类、方法、和变量的其他特性，如静态特性、不可变性、多态性等。主要包括以下几种：\",\"static:\",\"方法/变量：表明该成员属于类，而不属于类的实例，可以通过类名直接访问。static变量在类的所有实例之间共享。\",\"class MyClass { static int count = 0; // 静态变量 static void show() { // 静态方法 // 方法体 } }\",\"final:\",\"类：表示该类不能被继承。\",\"方法：表示该方法不能被子类重写。\",\"变量：表示该变量的值在初始化后不能被修改，必须在声明时或通过构造函数初始化。\",\"final class MyClass { // 该类不能被继承 final int MAX_VALUE = 100; // 常量 final void display() { // 该方法不能被重写 // 方法体 } }\",\"abstract:\",\"类：表示该类是抽象类，不能直接实例化，需要通过子类实现其抽象方法。\",\"方法：表示该方法没有实现，需要在子类中实现。\",\"abstract class MyClass { abstract void display(); // 抽象方法 } class SubClass extends MyClass { void display() { // 实现抽象方法 } }\",\"synchronized:\",\"方法：用于多线程环境，保证在同一时刻只能有一个线程执行该方法，常用于线程安全控制。\",\"class MyClass { synchronized void increment() { // 线程安全的代码 } }\",\"volatile:\",\"变量：表示该变量在多个线程间可见，防止线程缓存变量的副本，确保变量的修改能够被其他线程立即看到。\",\"class MyClass { volatile int sharedVariable; }\",\"transient:\",\"变量：用于序列化时，表示该变量不需要被序列化（即不会保存到序列化的对象状态中）。\",\"class MyClass implements Serializable { transient int tempValue; // 不会被序列化 }\",\"native:\",\"方法：用于声明本地方法，该方法在Java中没有实现，通常用C/C++语言实现。\",\"class MyClass { native void nativeMethod(); // 声明本地方法 }\",\"strictfp:\",\"类/方法：用于在浮点运算中强制执行严格的IEEE 754标准，实现跨平台的一致性。\",\"strictfp class MyClass { strictfp void calculate() { // 浮点计算 } }\"]},\"1309\":{\"h\":\"修饰符的组合\",\"t\":[\"修饰符可以组合使用，以满足特定的访问控制和特性需求。例如：\",\"public final class MyClass { private static final int MAX_VALUE = 100; public synchronized void safeMethod() { // 方法体 } }\",\"在这个例子中：\",\"MyClass是public和final的，表示它可以被所有类访问，但不能被继承。\",\"MAX_VALUE是private、static和final的，表示它是一个静态常量，只能在本类中访问。\",\"safeMethod是public和synchronized的，表示它是一个线程安全的方法，所有类都可以访问。\",\"通过合理使用Java修饰符，可以控制类和成员的可见性、行为和特性，确保代码的安全性、可维护性和扩展性。\"]},\"1310\":{\"h\":\"运算符\",\"t\":[\"Java运算符用于执行各种操作，如算术运算、比较操作、逻辑判断等。Java中的运算符可以分为以下几大类：\"]},\"1311\":{\"h\":\"1. 算术运算符（Arithmetic Operators）\",\"t\":[\"这些运算符用于执行基本的数学运算。\",\"运算符\",\"描述\",\"示例\",\"+\",\"加法\",\"a + b\",\"-\",\"减法\",\"a - b\",\"*\",\"乘法\",\"a * b\",\"/\",\"除法\",\"a / b\",\"%\",\"取模（求余数）\",\"a % b\",\"++\",\"自增（增加1）\",\"a++ 或 ++a\",\"--\",\"自减（减少1）\",\"a-- 或 --a\",\"++a（前缀自增）先增加后使用，a++（后缀自增）先使用后增加。同理，--a 和 a-- 也是类似的。\"]},\"1312\":{\"h\":\"2. 赋值运算符（Assignment Operators）\",\"t\":[\"赋值运算符用于将值赋给变量。\",\"运算符\",\"描述\",\"示例\",\"=\",\"赋值\",\"a = b\",\"+=\",\"加后赋值\",\"a += b 相当于 a = a + b\",\"-=\",\"减后赋值\",\"a -= b 相当于 a = a - b\",\"*=\",\"乘后赋值\",\"a *= b 相当于 a = a * b\",\"/=\",\"除后赋值\",\"a /= b 相当于 a = a / b\",\"%=\",\"取模后赋值\",\"a %= b 相当于 a = a % b\"]},\"1313\":{\"h\":\"3. 比较运算符（Relational Operators）\",\"t\":[\"比较运算符用于比较两个值的关系，返回一个布尔值（true或false）。\",\"运算符\",\"描述\",\"示例\",\"==\",\"等于\",\"a == b\",\"!=\",\"不等于\",\"a != b\",\">\",\"大于\",\"a > b\",\"<\",\"小于\",\"a < b\",\">=\",\"大于等于\",\"a >= b\",\"<=\",\"小于等于\",\"a <= b\"]},\"1314\":{\"h\":\"4. 逻辑运算符（Logical Operators）\",\"t\":[\"逻辑运算符用于执行布尔逻辑操作。\",\"运算符\",\"描述\",\"示例\",\"&&\",\"逻辑与（AND）\",\"a && b\",\"||\",\"逻辑或（OR）\",\"a || b\",\"!\",\"逻辑非（NOT）\",\"!a\",\"&&：如果两个操作数都为true，结果才为true。\",\"\\\\|\\\\|：如果两个操作数中至少有一个为true，结果就为true。\",\"!：对操作数进行逻辑取反。\"]},\"1315\":{\"h\":\"5. 位运算符（Bitwise Operators）\",\"t\":[\"位运算符用于对整数类型的二进制位进行操作。\",\"运算符\",\"描述\",\"示例\",\"&\",\"按位与（AND）\",\"a & b\",\"|\",\"按位或（OR）\",\"a | b\",\"^\",\"按位异或（XOR）\",\"a ^ b\",\"~\",\"按位取反（NOT）\",\"~a\",\"<<\",\"左移运算\",\"a << 2\",\">>\",\"右移运算\",\"a >> 2\",\">>>\",\"无符号右移\",\"a >>> 2\",\"&：按位与，两个对应的二进制位都为1，结果才为1。\",\"|：按位或，两个对应的二进制位中有一个为1，结果为1。\",\"^：按位异或，对应的二进制位相同为0，不同为1。\",\"~：按位取反，二进制位取反，0变1，1变0。\",\"<<：左移，二进制位整体左移，低位补0。\",\">>：右移，二进制位整体右移，符号位保持不变（正数补0，负数补1）。\",\">>>：无符号右移，二进制位整体右移，高位补0。\"]},\"1316\":{\"h\":\"6. 三元运算符（Ternary Operator）\",\"t\":[\"三元运算符是一种简洁的条件语句，语法为条件表达式 ? 表达式1 : 表达式2。如果条件表达式为true，则返回表达式1的值，否则返回表达式2的值。\",\"int result = (a > b) ? a : b;\"]},\"1317\":{\"h\":\"7. instanceof运算符\",\"t\":[\"instanceof运算符用于测试对象是否为特定类的实例。\",\"if (obj instanceof MyClass) { // 执行代码 }\"]},\"1318\":{\"h\":\"8. 字符串连接运算符\",\"t\":[\"+运算符在字符串连接时，也用于将字符串连接在一起。\",\"String result = \\\"Hello, \\\" + \\\"world!\\\";\"]},\"1319\":{\"h\":\"语句\",\"t\":[\"在Java编程中，循环和分支语句是控制程序流程的基本构造。它们允许你根据条件执行不同的代码块或重复执行某段代码。\"]},\"1320\":{\"h\":\"1. 分支语句\",\"t\":[\"分支语句根据条件的真或假来决定执行哪一段代码。Java中主要的分支语句有if-else、switch。\"]},\"1321\":{\"h\":\"1.1 语句\",\"t\":[\"if-else语句用于在条件为true时执行某段代码，为false时执行另一段代码。\",\"int number = 10; if (number > 0) { System.out.println(\\\"Number is positive\\\"); } else if (number < 0) { System.out.println(\\\"Number is negative\\\"); } else { System.out.println(\\\"Number is zero\\\"); }\",\"if：条件为真时执行。\",\"else if：可以有多个，用于检查其他条件。\",\"else：当所有if和else if条件都为假时执行。\"]},\"1322\":{\"h\":\"1.2 语句\",\"t\":[\"switch语句用于基于一个变量的值来执行多个代码分支。\",\"int day = 3; switch (day) { case 1: System.out.println(\\\"Monday\\\"); break; case 2: System.out.println(\\\"Tuesday\\\"); break; case 3: System.out.println(\\\"Wednesday\\\"); break; default: System.out.println(\\\"Invalid day\\\"); break; }\",\"case：与switch表达式的值匹配时执行对应的代码块。\",\"break：用于退出switch语句，防止执行下一个case块。\",\"default：当没有case匹配时执行。\"]},\"1323\":{\"h\":\"2. 循环语句\",\"t\":[\"循环语句用于重复执行某段代码，直到满足某个条件。Java中主要的循环语句有for、while和do-while。\"]},\"1324\":{\"h\":\"2.1 循环\",\"t\":[\"for循环通常用于当循环次数已知时。\",\"for (int i = 0; i < 5; i++) { System.out.println(\\\"i = \\\" + i); }\",\"初始化：在循环开始前执行一次，通常用来初始化循环变量。\",\"条件：在每次循环迭代前检查，如果条件为true，则继续循环。\",\"迭代：在每次循环迭代结束后执行，通常用来更新循环变量。\"]},\"1325\":{\"h\":\"2.2 增强型 循环（for-each）\",\"t\":[\"增强型for循环用于遍历数组或集合。\",\"int[] numbers = {1, 2, 3, 4, 5}; for (int number : numbers) { System.out.println(number); }\"]},\"1326\":{\"h\":\"2.3 循环\",\"t\":[\"while循环在条件为true时重复执行某段代码。\",\"int i = 0; while (i < 5) { System.out.println(\\\"i = \\\" + i); i++; }\",\"条件：在每次循环前检查，如果条件为true，则继续循环。\"]},\"1327\":{\"h\":\"2.4 循环\",\"t\":[\"do-while循环类似于while循环，但它会先执行一次循环体，然后再检查条件。\",\"int i = 0; do { System.out.println(\\\"i = \\\" + i); i++; } while (i < 5);\",\"执行顺序：先执行循环体，再检查条件，这意味着循环体至少会执行一次。\"]},\"1328\":{\"h\":\"3. 控制循环的语句\",\"t\":[\"Java还提供了一些控制循环执行的语句。\"]},\"1329\":{\"h\":\"3.1\",\"t\":[\"break语句用于立即退出当前循环。\",\"for (int i = 0; i < 10; i++) { if (i == 5) { break; // 退出循环 } System.out.println(i); }\"]},\"1330\":{\"h\":\"3.2\",\"t\":[\"continue语句用于跳过当前循环的剩余部分，并立即开始下一次迭代。\",\"for (int i = 0; i < 5; i++) { if (i == 2) { continue; // 跳过剩余循环体 } System.out.println(i); }\"]},\"1331\":{\"h\":\"4. 嵌套循环和分支\",\"t\":[\"你可以将循环和分支语句嵌套使用，以处理更复杂的逻辑。\",\"for (int i = 1; i <= 3; i++) { for (int j = 1; j <= 3; j++) { if (i == j) { continue; // 跳过当i等于j时的循环 } System.out.println(\\\"i = \\\" + i + \\\", j = \\\" + j); } }\"]},\"1332\":{\"h\":\"5. 总结\",\"t\":[\"分支语句 (if-else, switch) 用于根据条件执行不同的代码块。\",\"循环语句 (for, while, do-while) 用于重复执行代码，直到满足某个条件。\",\"控制循环的语句 (break, continue) 用于控制循环的执行流程。\",\"掌握这些语句后，你可以构建出复杂的程序逻辑，处理各种不同的编程任务。\"]},\"1333\":{\"h\":\"函数（方法）\",\"t\":[\"在Java中，方法（Method）是代码块的封装，用于执行特定任务。方法可以接受参数并返回结果，具有代码重用、简化程序结构的作用。\"]},\"1334\":{\"h\":\"1. 方法的定义和调用\"},\"1335\":{\"h\":\"1.1 定义方法\",\"t\":[\"在Java中，方法的定义通常包括以下几个部分：\",\"访问修饰符：如public、private，控制方法的访问范围。\",\"返回类型：方法返回的值的数据类型；如果方法不返回值，使用void。\",\"方法名：用于调用方法的名称。\",\"参数列表：方法可以接受的输入，位于括号内，用逗号分隔多个参数。\",\"方法体：位于大括号内，包含方法执行的代码。\",\"public class MyClass { // 无返回值的方法 public void sayHello() { System.out.println(\\\"Hello, World!\\\"); } // 有返回值的方法 public int add(int a, int b) { return a + b; } }\"]},\"1336\":{\"h\":\"1.2 调用方法\",\"t\":[\"方法可以通过对象来调用（非静态方法），或者直接调用（静态方法）。\",\"public class Main { public static void main(String[] args) { MyClass myClass = new MyClass(); // 调用无返回值的方法 myClass.sayHello(); // 调用有返回值的方法 int result = myClass.add(5, 3); System.out.println(\\\"Result: \\\" + result); } }\"]},\"1337\":{\"h\":\"2. 方法的参数\",\"t\":[\"方法可以接受零个或多个参数，参数列表的定义类似于变量的声明，类型和名称成对出现。\"]},\"1338\":{\"h\":\"2.1 参数传递\",\"t\":[\"Java中的参数传递是值传递（pass-by-value），即方法接收到的是参数的副本，而不是原始变量。\",\"public void modifyValue(int x) { x = 10; // 只修改了副本，不会影响原始变量 }\"]},\"1339\":{\"h\":\"2.2 可变参数\",\"t\":[\"使用...表示可变参数，这样方法可以接受任意数量的参数（但必须是相同类型）。\",\"public void printNumbers(int... numbers) { for (int number : numbers) { System.out.println(number); } }\"]},\"1340\":{\"h\":\"3. 返回值\",\"t\":[\"方法可以返回一个值，使用return关键字来返回值并结束方法的执行。\"]},\"1341\":{\"h\":\"3.1 返回基本数据类型\",\"t\":[\"返回值的类型要与方法定义中的返回类型一致。\",\"public int square(int x) { return x * x; }\"]},\"1342\":{\"h\":\"3.2 返回引用数据类型\",\"t\":[\"方法也可以返回对象或数组等引用类型。\",\"public String getGreeting() { return \\\"Hello, World!\\\"; }\"]},\"1343\":{\"h\":\"4. 方法的重载\",\"t\":[\"方法的重载（Overloading）指在同一个类中定义多个方法，这些方法具有相同的名称但不同的参数列表（参数类型或参数个数不同）。\",\"public class MyClass { // 重载方法，接受不同参数类型 public int add(int a, int b) { return a + b; } public double add(double a, double b) { return a + b; } // 重载方法，接受不同数量的参数 public int add(int a, int b, int c) { return a + b + c; } }\"]},\"1344\":{\"h\":\"5. 静态方法\",\"t\":[\"静态方法属于类，而不属于实例，可以直接通过类名调用。静态方法不能访问非静态成员变量或调用非静态方法。\",\"public class MathUtils { public static int multiply(int a, int b) { return a * b; } } // 调用静态方法 int result = MathUtils.multiply(5, 3);\"]},\"1345\":{\"h\":\"6. 递归方法\",\"t\":[\"递归方法是指一个方法在其内部调用自身，用于解决一些递归定义的问题，如阶乘、斐波那契数列。\",\"public int factorial(int n) { if (n == 1) { return 1; } return n * factorial(n - 1); }\"]},\"1346\":{\"h\":\"7. 方法的作用域\",\"t\":[\"方法中声明的变量是局部变量，它们只能在方法内访问。方法的参数也被视为局部变量。\",\"public void myMethod() { int x = 10; // x是局部变量，只能在myMethod中使用 }\"]},\"1347\":{\"h\":\"8. 方法的修饰符\",\"t\":[\"除了public和private等访问修饰符外，方法还可以使用其他修饰符：\",\"static：静态方法，属于类本身。\",\"final：最终方法，不能被子类重写。\",\"abstract：抽象方法，没有方法体，需要在子类中实现。\"]},\"1348\":{\"h\":\"9. 总结\",\"t\":[\"Java方法是构建程序功能的基本单位，通过方法可以实现代码重用、结构化编程。掌握方法的定义、调用、参数传递、返回值、重载以及修饰符的使用是学习Java编程的重要部分。\"]},\"1349\":{\"h\":\"数组\",\"t\":[\"Java数组是存储相同类型数据的容器，通过使用数组，你可以方便地处理大量数据。Java数组具有固定的大小和类型，一旦定义就不能更改。\"]},\"1350\":{\"h\":\"1. 创建数组\",\"t\":[\"数组可以通过以下方式创建：\"]},\"1351\":{\"h\":\"1.1 声明和初始化\",\"t\":[\"// 声明一个数组 int[] myArray; // 分配内存并初始化数组 myArray = new int[5]; // 创建一个长度为5的int数组\",\"或者同时声明和初始化：\",\"int[] myArray = new int[5]; // 创建一个长度为5的int数组\"]},\"1352\":{\"h\":\"1.2 使用数组字面量初始化\",\"t\":[\"int[] myArray = {1, 2, 3, 4, 5}; // 创建一个包含5个元素的int数组\"]},\"1353\":{\"h\":\"2. 访问数组元素\",\"t\":[\"数组元素的访问通过索引进行，索引从0开始。\",\"int[] myArray = {1, 2, 3, 4, 5}; int firstElement = myArray[0]; // 访问第一个元素，值为1 myArray[2] = 10; // 修改第三个元素的值，将其改为10\"]},\"1354\":{\"h\":\"3. 数组的长度\",\"t\":[\"数组的长度是固定的，可以使用length属性获取数组的长度。\",\"int[] myArray = {1, 2, 3, 4, 5}; int length = myArray.length; // 数组长度为5\"]},\"1355\":{\"h\":\"4. 遍历数组\",\"t\":[\"可以使用for循环或for-each循环遍历数组中的元素。\"]},\"1356\":{\"h\":\"4.1 使用 循环\",\"t\":[\"int[] myArray = {1, 2, 3, 4, 5}; for (int i = 0; i < myArray.length; i++) { System.out.println(myArray[i]); }\"]},\"1357\":{\"h\":\"4.2 使用 循环\",\"t\":[\"int[] myArray = {1, 2, 3, 4, 5}; for (int element : myArray) { System.out.println(element); }\"]},\"1358\":{\"h\":\"5. 多维数组\",\"t\":[\"Java支持多维数组，即数组的数组。\"]},\"1359\":{\"h\":\"5.1 创建和初始化二维数组\",\"t\":[\"int[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };\",\"或者分步骤创建：\",\"int[][] matrix = new int[3][3]; // 创建一个3x3的二维数组 matrix[0][0] = 1; // 初始化数组元素\"]},\"1360\":{\"h\":\"5.2 访问和遍历二维数组\",\"t\":[\"int[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; for (int i = 0; i < matrix.length; i++) { for (int j = 0; j < matrix[i].length; j++) { System.out.print(matrix[i][j] + \\\" \\\"); } System.out.println(); }\"]},\"1361\":{\"h\":\"6. Java中的数组操作\"},\"1362\":{\"h\":\"6.1 数组的复制\",\"t\":[\"Java提供了多种方式来复制数组，例如使用System.arraycopy()方法：\",\"int[] original = {1, 2, 3}; int[] copy = new int[original.length]; System.arraycopy(original, 0, copy, 0, original.length);\"]},\"1363\":{\"h\":\"6.2 数组的排序\",\"t\":[\"使用Arrays.sort()方法可以对数组进行排序：\",\"import java.util.Arrays; int[] numbers = {5, 3, 8, 1, 2}; Arrays.sort(numbers); // 数组将被排序为 [1, 2, 3, 5, 8]\"]},\"1364\":{\"h\":\"6.3 搜索数组中的元素\",\"t\":[\"可以使用Arrays.binarySearch()方法在有序数组中搜索元素：\",\"int[] numbers = {1, 2, 3, 5, 8}; int index = Arrays.binarySearch(numbers, 3); // 返回3所在的索引，值为2\"]},\"1365\":{\"h\":\"7. 常见问题\",\"t\":[\"数组越界：访问不存在的索引会抛出ArrayIndexOutOfBoundsException异常。\",\"int[] numbers = {1, 2, 3}; int x = numbers[5]; // 会抛出ArrayIndexOutOfBoundsException\",\"数组的类型：数组只能存储与声明类型相同的元素。如果尝试存储不同类型的元素，编译时会报错。\",\"int[] numbers = new int[5]; numbers[0] = \\\"Hello\\\"; // 编译错误：类型不匹配\"]},\"1366\":{\"h\":\"8. 总结\",\"t\":[\"Java数组是一种强大且基础的数据结构，用于存储和操作相同类型的数据。虽然数组大小在声明时是固定的，但它们在许多情况下都非常有用。通过熟练掌握数组的基本操作、遍历、排序和搜索等技能，可以有效地处理各种编程任务。\"]},\"1367\":{\"h\":\"字符串\",\"t\":[\"在Java中，字符串处理是非常常见的操作。Java提供了三个主要的类来处理字符串：String、StringBuffer 和 StringBuilder。每个类都有其特定的用途和特点。让我们详细了解它们的特性和用法。\"]},\"1368\":{\"h\":\"1. 类\"},\"1369\":{\"h\":\"1.1 特点\",\"t\":[\"不可变性：String对象是不可变的，一旦创建就无法更改。如果对字符串进行任何修改操作，如拼接、替换，实际上是创建了一个新的字符串对象。\",\"字符串常量池：Java中的String对象使用字符串常量池来减少内存消耗和提高性能。相同的字符串字面量会引用同一个对象。\"]},\"1370\":{\"h\":\"1.2 常用方法\",\"t\":[\"public class StringExample { public static void main(String[] args) { String str1 = \\\"Hello\\\"; String str2 = \\\"World\\\"; // 拼接字符串 String str3 = str1 + \\\" \\\" + str2; System.out.println(str3); // 输出 \\\"Hello World\\\" // 获取字符串长度 int length = str3.length(); System.out.println(\\\"Length: \\\" + length); // 输出 \\\"Length: 11\\\" // 字符串比较 boolean isEqual = str1.equals(str2); System.out.println(\\\"Is Equal: \\\" + isEqual); // 输出 \\\"Is Equal: false\\\" // 查找字符位置 int index = str3.indexOf('o'); System.out.println(\\\"Index of 'o': \\\" + index); // 输出 \\\"Index of 'o': 4\\\" // 提取子字符串 String subStr = str3.substring(6); System.out.println(\\\"Substring: \\\" + subStr); // 输出 \\\"Substring: World\\\" } }\"]},\"1371\":{\"h\":\"2. 类\"},\"1372\":{\"h\":\"2.1 特点\",\"t\":[\"可变性：StringBuffer是可变的，即可以在不创建新对象的情况下修改字符串内容。\",\"线程安全：StringBuffer是线程安全的，所有对字符串内容的操作都是同步的（synchronized），因此适合多线程环境。\"]},\"1373\":{\"h\":\"2.2 常用方法\",\"t\":[\"public class StringBufferExample { public static void main(String[] args) { StringBuffer buffer = new StringBuffer(\\\"Hello\\\"); // 追加字符串 buffer.append(\\\" World\\\"); System.out.println(buffer.toString()); // 输出 \\\"Hello World\\\" // 插入字符串 buffer.insert(6, \\\"Java \\\"); System.out.println(buffer.toString()); // 输出 \\\"Hello Java World\\\" // 替换部分字符串 buffer.replace(6, 10, \\\"C++\\\"); System.out.println(buffer.toString()); // 输出 \\\"Hello C++ World\\\" // 反转字符串 buffer.reverse(); System.out.println(buffer.toString()); // 输出 \\\"dlroW ++C olleH\\\" } }\"]},\"1374\":{\"h\":\"3. 类\"},\"1375\":{\"h\":\"3.1 特点\",\"t\":[\"可变性：与StringBuffer类似，StringBuilder也是可变的，可以修改其内容。\",\"非线程安全：StringBuilder不是线程安全的，因此在单线程环境中使用性能更高。\",\"更高性能：在单线程环境下，StringBuilder比StringBuffer更快，因为它没有同步开销。\"]},\"1376\":{\"h\":\"3.2 常用方法\",\"t\":[\"StringBuilder的用法与StringBuffer几乎相同，唯一的区别是StringBuilder的操作没有同步，因此更适合在性能关键的单线程应用中使用。\",\"public class StringBuilderExample { public static void main(String[] args) { StringBuilder builder = new StringBuilder(\\\"Hello\\\"); // 追加字符串 builder.append(\\\" World\\\"); System.out.println(builder.toString()); // 输出 \\\"Hello World\\\" // 插入字符串 builder.insert(6, \\\"Java \\\"); System.out.println(builder.toString()); // 输出 \\\"Hello Java World\\\" // 替换部分字符串 builder.replace(6, 10, \\\"C++\\\"); System.out.println(builder.toString()); // 输出 \\\"Hello C++ World\\\" // 反转字符串 builder.reverse(); System.out.println(builder.toString()); // 输出 \\\"dlroW ++C olleH\\\" } }\"]},\"1377\":{\"h\":\"4. vs vs\",\"t\":[\"不可变性：String是不可变的，StringBuffer和StringBuilder是可变的。\",\"线程安全：StringBuffer是线程安全的，而String和StringBuilder不是。\",\"性能：在涉及大量字符串修改的情况下，StringBuilder的性能最好，其次是StringBuffer，String性能最差（因为每次修改都会创建新对象）。\"]},\"1378\":{\"h\":\"5. 选择使用哪种类\",\"t\":[\"String：用于不可变的字符串，或在字符串内容不频繁更改的情况下使用。\",\"StringBuffer：用于多线程环境下频繁修改字符串内容的场景。\",\"StringBuilder：用于单线程环境下需要高性能且频繁修改字符串的场景。\"]},\"1379\":{\"h\":\"6. 总结\",\"t\":[\"Java中提供的这三种类让开发者可以根据具体的需求选择最适合的字符串处理方式。了解每种类的特点和应用场景，有助于编写更加高效和线程安全的代码。\"]},\"1380\":{\"h\":\"Number类\",\"t\":[\"在Java中，Number类是一个抽象类，位于java.lang包中，是所有数值类的父类。这些数值类包括Integer、Long、Float、Double、Byte、Short等。这些子类为不同的数值类型提供了包装器，使得基本数据类型可以作为对象来处理。\"]},\"1381\":{\"h\":\"1. 类概述\",\"t\":[\"Number类本身是抽象的，不能直接实例化。它定义了一些通用的方法，这些方法可以在其子类中重写，以便将不同的数值类型转换为其他数值类型。\"]},\"1382\":{\"h\":\"1.1 常用方法\",\"t\":[\"Number类定义了将数值类型转换为其他类型的抽象方法，主要包括：\",\"byteValue()：将数值转换为byte类型。\",\"shortValue()：将数值转换为short类型。\",\"intValue()：将数值转换为int类型。\",\"longValue()：将数值转换为long类型。\",\"floatValue()：将数值转换为float类型。\",\"doubleValue()：将数值转换为double类型。\",\"这些方法在Number类的子类中被实现，用于将数值转换为相应的基本数据类型。\"]},\"1383\":{\"h\":\"2. 类的子类\",\"t\":[\"Number类有几个直接的子类，每个子类对应Java中的一个基本数据类型。它们分别是：\",\"Byte：用于包装byte类型的值。\",\"Short：用于包装short类型的值。\",\"Integer：用于包装int类型的值。\",\"Long：用于包装long类型的值。\",\"Float：用于包装float类型的值。\",\"Double：用于包装double类型的值。\"]},\"1384\":{\"h\":\"3. 示例代码\",\"t\":[\"以下是使用Number类及其子类的简单示例：\",\"public class NumberExample { public static void main(String[] args) { Integer intValue = 100; // Integer 是 Number 的子类 Double doubleValue = 55.55; // Double 是 Number 的子类 // 使用 Number 类的方法转换类型 System.out.println(\\\"Integer as byte: \\\" + intValue.byteValue()); System.out.println(\\\"Integer as double: \\\" + intValue.doubleValue()); System.out.println(\\\"Double as int: \\\" + doubleValue.intValue()); System.out.println(\\\"Double as float: \\\" + doubleValue.floatValue()); // 自动装箱和拆箱示例 int primitiveInt = intValue; // 自动拆箱 Integer newIntValue = primitiveInt; // 自动装箱 System.out.println(\\\"Primitive int: \\\" + primitiveInt); System.out.println(\\\"Integer object: \\\" + newIntValue); } }\"]},\"1385\":{\"h\":\"4. 自动装箱和拆箱\",\"t\":[\"自动装箱（Autoboxing）：Java自动将基本数据类型转换为其对应的包装类型。例如，将int转换为Integer。\",\"自动拆箱（Unboxing）：Java自动将包装类型转换为其对应的基本数据类型。例如，将Integer转换为int。\",\"Integer intObj = 10; // 自动装箱，将 int 转换为 Integer 对象 int intValue = intObj; // 自动拆箱，将 Integer 对象转换为 int\"]},\"1386\":{\"h\":\"5. 数值类的用法\",\"t\":[\"Number类的子类非常有用，尤其是在需要将基本数据类型作为对象处理时。例如，在使用集合（如ArrayList、HashMap）时，基本数据类型不能直接存储在集合中，因此需要将它们转换为对应的包装类型。\"]},\"1387\":{\"h\":\"6. 总结\",\"t\":[\"Number类是所有数值类型的父类，定义了一些通用的转换方法。\",\"Number类的子类包括Integer、Double、Float等，这些类为基本数据类型提供了包装器，使得它们可以作为对象处理。\",\"自动装箱和拆箱使得基本数据类型与其包装类型之间的转换更加方便。\",\"通过理解和利用Number类及其子类，开发者可以更灵活地处理Java中的数值数据。\"]},\"1388\":{\"h\":\"Math类\",\"t\":[\"Math类是Java标准库中的一个工具类，位于java.lang包中，提供了一系列静态方法用于进行数学计算。Math类的所有方法都是静态的，因此无需创建Math类的实例即可直接调用这些方法。\"]},\"1389\":{\"h\":\"1. 类概述\"},\"1390\":{\"h\":\"1.1 特性\",\"t\":[\"静态方法：所有方法都是静态的，意味着可以通过Math类直接调用，无需创建对象。\",\"常量：提供了一些常用的数学常量，如Math.PI和Math.E。\"]},\"1391\":{\"h\":\"2. 常用方法\"},\"1392\":{\"h\":\"2.1 基本数学运算\",\"t\":[\"Math.abs(x)：返回x的绝对值。\",\"Math.max(a, b)：返回a和b中的较大值。\",\"Math.min(a, b)：返回a和b中的较小值。\",\"Math.addExact(a, b)：返回a和b的和，若溢出则抛出异常。\",\"Math.subtractExact(a, b)：返回a和b的差，若溢出则抛出异常。\",\"Math.multiplyExact(a, b)：返回a和b的积，若溢出则抛出异常.\",\"Math.toIntExact(a)：将long类型转换为int，若超出范围则抛出异常。\",\"public class MathExample { public static void main(String[] args) { System.out.println(\\\"Absolute value of -10: \\\" + Math.abs(-10)); // 10 System.out.println(\\\"Max of 5 and 10: \\\" + Math.max(5, 10)); // 10 System.out.println(\\\"Min of 5 and 10: \\\" + Math.min(5, 10)); // 5 System.out.println(\\\"AddExact(5, 10): \\\" + Math.addExact(5, 10)); // 15 } }\"]},\"1393\":{\"h\":\"2.2 三角函数\",\"t\":[\"Math.sin(angle)：返回角度angle的正弦值。\",\"Math.cos(angle)：返回角度angle的余弦值。\",\"Math.tan(angle)：返回角度angle的正切值。\",\"Math.asin(x)：返回x的反正弦值。\",\"Math.acos(x)：返回x的反余弦值。\",\"Math.atan(x)：返回x的反正切值。\",\"Math.toRadians(degrees)：将角度转换为弧度。\",\"Math.toDegrees(radians)：将弧度转换为角度。\",\"public class TrigonometryExample { public static void main(String[] args) { double angle = Math.toRadians(45); // 角度转换为弧度 System.out.println(\\\"sin(45 degrees): \\\" + Math.sin(angle)); System.out.println(\\\"cos(45 degrees): \\\" + Math.cos(angle)); System.out.println(\\\"tan(45 degrees): \\\" + Math.tan(angle)); } }\"]},\"1394\":{\"h\":\"2.3 对数和幂运算\",\"t\":[\"Math.exp(x)：返回e的x次幂。\",\"Math.log(x)：返回x的自然对数。\",\"Math.log10(x)：返回x的以10为底的对数。\",\"Math.pow(base, exponent)：返回base的exponent次幂。\",\"Math.sqrt(x)：返回x的平方根。\",\"public class LogPowerExample { public static void main(String[] args) { System.out.println(\\\"e^2: \\\" + Math.exp(2)); // 7.3890560989306495 System.out.println(\\\"log(100): \\\" + Math.log(100)); // 4.605170185988092 System.out.println(\\\"log10(100): \\\" + Math.log10(100)); // 2.0 System.out.println(\\\"2^3: \\\" + Math.pow(2, 3)); // 8.0 System.out.println(\\\"Square root of 16: \\\" + Math.sqrt(16)); // 4.0 } }\"]},\"1395\":{\"h\":\"2.4 随机数生成\",\"t\":[\"Math.random()：返回一个范围在[0.0, 1.0)之间的伪随机double值。\",\"public class RandomExample { public static void main(String[] args) { System.out.println(\\\"Random number between 0 and 1: \\\" + Math.random()); } }\"]},\"1396\":{\"h\":\"3. 常量\",\"t\":[\"Math.PI：圆周率π的值。\",\"Math.E：自然对数的底数e的值。\",\"public class ConstantsExample { public static void main(String[] args) { System.out.println(\\\"Value of PI: \\\" + Math.PI); System.out.println(\\\"Value of E: \\\" + Math.E); } }\"]},\"1397\":{\"h\":\"4. 类的使用场景\",\"t\":[\"数学计算：Math类提供了丰富的数学函数，适用于各种数学计算任务，如科学计算、工程应用等。\",\"统计和概率：用于计算随机数、对数、幂等。\",\"几何和物理：用于计算角度、距离、物理公式中的数学运算等。\"]},\"1398\":{\"h\":\"5. 总结\",\"t\":[\"Math类提供了一系列静态方法用于基本的数学运算，包括三角函数、对数、幂运算和随机数生成等。\",\"Math类的方法不需要创建对象，可以直接调用，且常用的数学常量PI和E也包含在其中。\",\"了解和掌握Math类的使用，可以帮助在编程中更高效地进行各种数学计算。\"]},\"1399\":{\"h\":\"日期时间\",\"t\":[\"在Java中，日期和时间的处理是一个重要的主题，尤其是在涉及到各种时间计算和格式化时。Java提供了多种类来处理日期和时间，主要分为旧的java.util.Date和java.util.Calendar类，以及新的java.time包中的类。\"]},\"1400\":{\"h\":\"1. 和\"},\"1401\":{\"h\":\"1.1 类\",\"t\":[\"java.util.Date类用于表示一个具体的时刻，精确到毫秒。然而，它已经不推荐使用，因为它设计上存在一些缺陷，如不易处理时区和格式问题。建议使用java.time包中的类代替。\",\"常用方法：\",\"Date()：创建一个表示当前时间的Date对象。\",\"Date(long date)：创建一个表示从1970年1月1日00:00:00 GMT起的毫秒数的Date对象。\",\"getTime()：返回从1970年1月1日00:00:00 GMT起的毫秒数。\",\"setTime(long time)：设置从1970年1月1日00:00:00 GMT起的毫秒数。\",\"示例代码：\",\"import java.util.Date; public class DateExample { public static void main(String[] args) { Date now = new Date(); // 当前时间 System.out.println(\\\"Current date and time: \\\" + now); long timeInMillis = now.getTime(); // 获取时间戳 System.out.println(\\\"Time in milliseconds since January 1, 1970: \\\" + timeInMillis); Date specificDate = new Date(1000000000000L); // 从1970年1月1日00:00:00 GMT起的秒数 System.out.println(\\\"Specific date: \\\" + specificDate); } }\"]},\"1402\":{\"h\":\"1.2 类\",\"t\":[\"java.util.Calendar类提供了对日期和时间的更全面的操作，包括日期的计算和格式化。Calendar类是抽象类，通常使用其子类GregorianCalendar。\",\"常用方法：\",\"get(int field)：获取指定字段的值。\",\"set(int field, int value)：设置指定字段的值。\",\"add(int field, int amount)：增加或减少指定字段的值。\",\"getTime()：获取表示当前日期和时间的Date对象。\",\"示例代码：\",\"import java.util.Calendar; public class CalendarExample { public static void main(String[] args) { Calendar calendar = Calendar.getInstance(); // 获取当前时间的日历对象 System.out.println(\\\"Current date and time: \\\" + calendar.getTime()); calendar.add(Calendar.MONTH, 1); // 增加一个月 System.out.println(\\\"Date after one month: \\\" + calendar.getTime()); calendar.set(Calendar.YEAR, 2025); // 设置年份 System.out.println(\\\"Date in 2025: \\\" + calendar.getTime()); } }\"]},\"1403\":{\"h\":\"2. 包\",\"t\":[\"Java 8引入了java.time包，该包提供了更强大和灵活的日期时间API。主要类包括LocalDate、LocalTime、LocalDateTime、ZonedDateTime、Duration和Period等。\"]},\"1404\":{\"h\":\"2.1 、 和\",\"t\":[\"LocalDate：表示没有时区的日期（年、月、日）。\",\"LocalTime：表示没有时区的时间（时、分、秒）。\",\"LocalDateTime：表示没有时区的日期时间（年、月、日、时、分、秒）。\",\"示例代码：\",\"import java.time.LocalDate; import java.time.LocalTime; import java.time.LocalDateTime; public class LocalDateTimeExample { public static void main(String[] args) { LocalDate today = LocalDate.now(); // 当前日期 System.out.println(\\\"Today's date: \\\" + today); LocalTime now = LocalTime.now(); // 当前时间 System.out.println(\\\"Current time: \\\" + now); LocalDateTime dateTime = LocalDateTime.now(); // 当前日期时间 System.out.println(\\\"Current date and time: \\\" + dateTime); LocalDate specificDate = LocalDate.of(2024, 8, 19); // 创建指定日期 System.out.println(\\\"Specific date: \\\" + specificDate); } }\"]},\"1405\":{\"h\":\"2.2\",\"t\":[\"ZonedDateTime表示带有时区的日期时间。\",\"示例代码：\",\"import java.time.ZonedDateTime; import java.time.ZoneId; public class ZonedDateTimeExample { public static void main(String[] args) { ZonedDateTime zonedDateTime = ZonedDateTime.now(); // 当前时区的日期时间 System.out.println(\\\"Current date and time with time zone: \\\" + zonedDateTime); ZonedDateTime utcDateTime = ZonedDateTime.now(ZoneId.of(\\\"UTC\\\")); // UTC时区的日期时间 System.out.println(\\\"UTC date and time: \\\" + utcDateTime); } }\"]},\"1406\":{\"h\":\"2.3 和\",\"t\":[\"Duration：表示时间段（以秒和纳秒为单位）。\",\"Period：表示日期段（以年、月、日为单位）。\",\"示例代码：\",\"import java.time.Duration; import java.time.LocalDateTime; import java.time.Period; public class DurationPeriodExample { public static void main(String[] args) { LocalDateTime start = LocalDateTime.now(); LocalDateTime end = start.plus(Duration.ofHours(5)); // 增加5小时 Duration duration = Duration.between(start, end); System.out.println(\\\"Duration: \\\" + duration.toHours() + \\\" hours\\\"); LocalDateTime today = LocalDateTime.now(); LocalDateTime nextWeek = today.plus(Period.ofWeeks(1)); // 增加一周 Period period = Period.between(today.toLocalDate(), nextWeek.toLocalDate()); System.out.println(\\\"Period: \\\" + period.getDays() + \\\" days\\\"); } }\"]},\"1407\":{\"h\":\"3. 日期时间格式化\",\"t\":[\"DateTimeFormatter类用于格式化和解析LocalDate、LocalTime、LocalDateTime等日期时间对象。\",\"示例代码：\",\"import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; public class DateTimeFormatterExample { public static void main(String[] args) { LocalDateTime now = LocalDateTime.now(); DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\"); String formattedDate = now.format(formatter); System.out.println(\\\"Formatted date and time: \\\" + formattedDate); String dateStr = \\\"2024-08-19 12:34:56\\\"; LocalDateTime parsedDate = LocalDateTime.parse(dateStr, formatter); System.out.println(\\\"Parsed date and time: \\\" + parsedDate); } }\"]},\"1408\":{\"h\":\"4. 总结\",\"t\":[\"java.util.Date 和 java.util.Calendar：旧的日期时间类，Date表示特定时刻，Calendar提供了更全面的日期时间操作，但它们已经不推荐使用。\",\"java.time 包：Java 8引入的新日期时间API，提供了更强大、易用的日期时间操作功能，包括LocalDate、LocalTime、LocalDateTime、ZonedDateTime等类。\",\"DateTimeFormatter：用于格式化和解析日期时间字符串。\",\"新的java.time包提供了更好的日期时间处理能力，建议使用java.time包中的类来处理日期时间问题。\"]},\"1409\":{\"h\":\"正则表达式\",\"t\":[\"在Java中，正则表达式（regular expressions）用于模式匹配和文本处理。Java的正则表达式功能由java.util.regex包提供，其中最主要的类包括Pattern、Matcher和PatternSyntaxException。\"]},\"1410\":{\"h\":\"1. 基本概念\",\"t\":[\"正则表达式（Regex）：一种文本模式，用于匹配和操作字符串。\",\"模式（Pattern）：定义了要搜索的文本模式。\",\"匹配器（Matcher）：用于执行匹配操作，检查文本是否符合模式。\"]},\"1411\":{\"h\":\"2. 常用正则表达式语法\"},\"1412\":{\"h\":\"2.1 元字符\",\"t\":[\".：匹配任何单个字符（除了行结束符）。\",\"\\\\d：匹配任何数字，相当于[0-9]。\",\"\\\\D：匹配任何非数字字符，相当于[^0-9]。\",\"\\\\w：匹配任何字母数字字符，相当于[a-zA-Z0-9_]。\",\"\\\\W：匹配任何非字母数字字符，相当于[^a-zA-Z0-9_]。\",\"\\\\s：匹配任何空白字符，包括空格、制表符、换行符等。\",\"\\\\S：匹配任何非空白字符。\",\"^：匹配输入的开始位置。\",\"$：匹配输入的结束位置。\",\"[]：定义一个字符类，匹配其中的任何一个字符。例如，[abc]匹配字符a、b或c。\",\"|：逻辑或运算符。例如，a|b匹配字符a或b。\",\"()：分组运算符，用于将模式分组。\"]},\"1413\":{\"h\":\"2.2 量词\",\"t\":[\"*：匹配前面的子表达式零次或多次。\",\"+：匹配前面的子表达式一次或多次。\",\"?：匹配前面的子表达式零次或一次。\",\"{n}：匹配前面的子表达式恰好n次。\",\"{n,}：匹配前面的子表达式至少n次。\",\"{n,m}：匹配前面的子表达式至少n次，但不超过m次。\"]},\"1414\":{\"h\":\"3. 使用 和 类\"},\"1415\":{\"h\":\"3.1 类\",\"t\":[\"Pattern类是正则表达式的编译表示，提供了与正则表达式相关的操作。\",\"常用方法：\",\"compile(String regex)：编译正则表达式。\",\"matcher(CharSequence input)：创建一个匹配器来匹配给定的输入序列。\"]},\"1416\":{\"h\":\"3.2 类\",\"t\":[\"Matcher类用于执行匹配操作。\",\"常用方法：\",\"find()：尝试查找与正则表达式匹配的子字符串。\",\"matches()：检查整个输入序列是否与正则表达式匹配。\",\"group()：返回最近匹配的子字符串。\",\"replaceAll(String replacement)：用给定的替换字符串替换所有匹配的子字符串。\",\"示例代码：\",\"import java.util.regex.Pattern; import java.util.regex.Matcher; public class RegexExample { public static void main(String[] args) { String text = \\\"The price is $123.45\\\"; String regex = \\\"\\\\\\\\$\\\\\\\\d+\\\\\\\\.\\\\\\\\d{2}\\\"; // 匹配货币格式 Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(text); while (matcher.find()) { System.out.println(\\\"Found a match: \\\" + matcher.group()); } // 替换操作 String replacedText = matcher.replaceAll(\\\"$100.00\\\"); System.out.println(\\\"Replaced text: \\\" + replacedText); } }\"]},\"1417\":{\"h\":\"4. 常见应用场景\",\"t\":[\"验证输入：如验证电子邮件地址、电话号码等。\",\"文本搜索和替换：在文本中查找和替换符合某些模式的内容。\",\"数据提取：从文本中提取特定格式的数据。\"]},\"1418\":{\"h\":\"5. 示例：验证电子邮件地址\",\"t\":[\"import java.util.regex.Pattern; import java.util.regex.Matcher; public class EmailValidator { public static void main(String[] args) { String email = \\\"example@example.com\\\"; String emailRegex = \\\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\\\\\.[a-zA-Z]{2,}$\\\"; Pattern pattern = Pattern.compile(emailRegex); Matcher matcher = pattern.matcher(email); if (matcher.matches()) { System.out.println(email + \\\" is a valid email address.\\\"); } else { System.out.println(email + \\\" is not a valid email address.\\\"); } } }\"]},\"1419\":{\"h\":\"6. 总结\",\"t\":[\"Java中的正则表达式功能由java.util.regex包提供，包括Pattern和Matcher类。\",\"正则表达式用于文本匹配和处理，通过元字符、量词等定义匹配模式。\",\"Pattern类用于编译正则表达式，Matcher类用于执行匹配操作。\",\"正则表达式广泛应用于输入验证、文本搜索和替换等场景。\"]},\"1420\":{\"h\":\"输入输出\",\"t\":[\"在Java中，用户输入输出（I/O）操作主要包括从用户获取输入和将输出显示给用户。常用的方式有使用Scanner类来读取用户输入，以及使用System.out来输出信息。以下是详细的介绍和示例代码：\"]},\"1421\":{\"h\":\"1. 使用 类读取用户输入\",\"t\":[\"Scanner类是Java提供的一种用于从各种输入源（如键盘、文件等）读取数据的便利工具。它可以读取不同类型的数据，包括整数、浮点数、字符串等。\"]},\"1422\":{\"h\":\"1.1 基本用法\",\"t\":[\"import java.util.Scanner; public class ScannerExample { public static void main(String[] args) { // 创建Scanner对象来读取输入 Scanner scanner = new Scanner(System.in); // 读取一个字符串 System.out.print(\\\"Enter your name: \\\"); String name = scanner.nextLine(); System.out.println(\\\"Hello, \\\" + name + \\\"!\\\"); // 读取一个整数 System.out.print(\\\"Enter your age: \\\"); int age = scanner.nextInt(); System.out.println(\\\"You are \\\" + age + \\\" years old.\\\"); // 读取一个浮点数 System.out.print(\\\"Enter your height in meters: \\\"); double height = scanner.nextDouble(); System.out.println(\\\"Your height is \\\" + height + \\\" meters.\\\"); // 关闭Scanner scanner.close(); } }\"]},\"1423\":{\"h\":\"1.2 常用方法\",\"t\":[\"next(): 读取下一个标记（空格分隔）。\",\"nextLine(): 读取整行输入。\",\"nextInt(): 读取下一个整数。\",\"nextDouble(): 读取下一个双精度浮点数。\",\"nextBoolean(): 读取下一个布尔值。\"]},\"1424\":{\"h\":\"2. 使用 输出信息\",\"t\":[\"System.out 是 PrintStream 类的一个静态实例，用于输出数据到控制台。常用的方法包括 print(), println(), 和 printf()。\"]},\"1425\":{\"h\":\"2.1 基本用法\",\"t\":[\"public class PrintStreamExample { public static void main(String[] args) { // 输出字符串 System.out.println(\\\"Hello, World!\\\"); // 输出整数 int age = 25; System.out.println(\\\"Age: \\\" + age); // 格式化输出 double height = 1.75; System.out.printf(\\\"Height: %.2f meters%n\\\", height); } }\"]},\"1426\":{\"h\":\"2.2 常用方法\",\"t\":[\"print(): 输出指定的内容，不会换行。\",\"println(): 输出指定的内容，并换行。\",\"printf(): 格式化输出，类似于C语言的printf()函数。\"]},\"1427\":{\"h\":\"3. 综合示例：用户输入输出\",\"t\":[\"结合使用Scanner和System.out来读取用户输入并显示输出：\",\"import java.util.Scanner; public class UserInputOutputExample { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); // 读取用户输入 System.out.print(\\\"Enter your name: \\\"); String name = scanner.nextLine(); System.out.print(\\\"Enter your age: \\\"); int age = scanner.nextInt(); System.out.print(\\\"Enter your height in meters: \\\"); double height = scanner.nextDouble(); // 输出用户输入的信息 System.out.println(\\\"User Information:\\\"); System.out.println(\\\"Name: \\\" + name); System.out.println(\\\"Age: \\\" + age); System.out.printf(\\\"Height: %.2f meters%n\\\", height); scanner.close(); } }\"]},\"1428\":{\"h\":\"4. 异常处理\",\"t\":[\"在处理用户输入时，可能会遇到异常，例如用户输入了非整数值而你期望的是整数。可以通过异常处理机制来捕捉这些错误：\",\"import java.util.InputMismatchException; import java.util.Scanner; public class InputExceptionHandlingExample { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int age = 0; while (true) { System.out.print(\\\"Enter your age: \\\"); try { age = scanner.nextInt(); break; // 成功读取整数，退出循环 } catch (InputMismatchException e) { System.out.println(\\\"Invalid input. Please enter a valid integer.\\\"); scanner.next(); // 清除无效输入 } } System.out.println(\\\"You entered age: \\\" + age); scanner.close(); } }\"]},\"1429\":{\"h\":\"5. 总结\",\"t\":[\"Scanner 类：用于从控制台读取用户输入，可以读取各种数据类型。\",\"System.out：用于将信息输出到控制台，支持基本输出、格式化输出等。\",\"异常处理：用于处理用户输入错误，确保程序的健壮性。\",\"这些工具和方法可以帮助你处理用户的输入输出需求，并使程序更具交互性和用户友好性。\"]},\"1430\":{\"h\":\"文件IO\",\"t\":[\"Java中的输入输出（I/O）操作是处理数据读写的重要组成部分。Java提供了一系列类和接口来进行文件和数据流的操作，包括字符流和字节流。以下是Java I/O的基础知识和一些常用的操作示例。\"]},\"1431\":{\"h\":\"1. 字符流 vs. 字节流\",\"t\":[\"字符流：处理字符数据，使用Reader和Writer类。适用于文本文件的读取和写入。\",\"字节流：处理原始的字节数据，使用InputStream和OutputStream类。适用于二进制文件的读取和写入。\"]},\"1432\":{\"h\":\"2. 字符流\"},\"1433\":{\"h\":\"2.1 和\",\"t\":[\"FileReader：用于读取字符文件。\",\"FileWriter：用于写入字符文件。\",\"示例代码：\",\"import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; public class FileReaderWriterExample { public static void main(String[] args) { // 写入文件 try (FileWriter writer = new FileWriter(\\\"example.txt\\\")) { writer.write(\\\"Hello, World!\\\"); } catch (IOException e) { e.printStackTrace(); } // 读取文件 try (FileReader reader = new FileReader(\\\"example.txt\\\")) { int ch; while ((ch = reader.read()) != -1) { System.out.print((char) ch); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1434\":{\"h\":\"2.2 和\",\"t\":[\"BufferedReader：用于高效地读取字符数据，提供了缓冲功能。\",\"BufferedWriter：用于高效地写入字符数据，提供了缓冲功能。\",\"示例代码：\",\"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; public class BufferedReaderWriterExample { public static void main(String[] args) { // 写入文件 try (BufferedWriter writer = new BufferedWriter(new FileWriter(\\\"example.txt\\\"))) { writer.write(\\\"Hello, Buffered World!\\\"); } catch (IOException e) { e.printStackTrace(); } // 读取文件 try (BufferedReader reader = new BufferedReader(new FileReader(\\\"example.txt\\\"))) { String line; while ((line = reader.readLine()) != null) { System.out.println(line); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1435\":{\"h\":\"3. 字节流\"},\"1436\":{\"h\":\"3.1 和\",\"t\":[\"FileInputStream：用于读取文件的字节数据。\",\"FileOutputStream：用于写入文件的字节数据。\",\"示例代码：\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class FileInputOutputStreamExample { public static void main(String[] args) { // 写入文件 try (FileOutputStream fos = new FileOutputStream(\\\"example.bin\\\")) { fos.write(\\\"Hello, Binary World!\\\".getBytes()); } catch (IOException e) { e.printStackTrace(); } // 读取文件 try (FileInputStream fis = new FileInputStream(\\\"example.bin\\\")) { int b; while ((b = fis.read()) != -1) { System.out.print((char) b); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1437\":{\"h\":\"3.2 和\",\"t\":[\"BufferedInputStream：用于高效地读取字节数据，提供了缓冲功能。\",\"BufferedOutputStream：用于高效地写入字节数据，提供了缓冲功能。\",\"示例代码：\",\"import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class BufferedInputOutputStreamExample { public static void main(String[] args) { // 写入文件 try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\\\"example.bin\\\"))) { bos.write(\\\"Hello, Buffered Binary World!\\\".getBytes()); } catch (IOException e) { e.printStackTrace(); } // 读取文件 try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(\\\"example.bin\\\"))) { int b; while ((b = bis.read()) != -1) { System.out.print((char) b); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1438\":{\"h\":\"4. 文件操作\"},\"1439\":{\"h\":\"4.1 类\",\"t\":[\"File类用于表示文件和目录，并提供了对文件和目录的基本操作。\",\"常用方法：\",\"exists()：检查文件或目录是否存在。\",\"createNewFile()：创建新文件。\",\"delete()：删除文件或目录。\",\"renameTo(File dest)：重命名文件或目录。\",\"listFiles()：列出目录中的文件和子目录。\",\"示例代码：\",\"import java.io.File; import java.io.IOException; public class FileExample { public static void main(String[] args) { File file = new File(\\\"example.txt\\\"); // 创建新文件 try { if (file.createNewFile()) { System.out.println(\\\"File created: \\\" + file.getName()); } else { System.out.println(\\\"File already exists.\\\"); } } catch (IOException e) { e.printStackTrace(); } // 检查文件是否存在 if (file.exists()) { System.out.println(\\\"File exists.\\\"); } else { System.out.println(\\\"File does not exist.\\\"); } // 删除文件 if (file.delete()) { System.out.println(\\\"Deleted the file: \\\" + file.getName()); } else { System.out.println(\\\"Failed to delete the file.\\\"); } } }\"]},\"1440\":{\"h\":\"5. NIO (New I/O)\",\"t\":[\"Java 7引入了java.nio包，提供了更高效的I/O操作。java.nio包括了Path、Files、ByteBuffer等类，提供了更强大的文件处理和数据操作能力。\",\"示例代码：\",\"import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.io.IOException; public class NIOExample { public static void main(String[] args) { Path path = Paths.get(\\\"example.txt\\\"); // 写入文件 try { Files.write(path, \\\"Hello, NIO World!\\\".getBytes()); } catch (IOException e) { e.printStackTrace(); } // 读取文件 try { byte[] bytes = Files.readAllBytes(path); System.out.println(new String(bytes)); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1441\":{\"h\":\"6. 总结\",\"t\":[\"字符流（Reader和Writer）：用于处理字符数据，适用于文本文件。\",\"字节流（InputStream和OutputStream）：用于处理原始字节数据，适用于二进制文件。\",\"缓冲流（BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream）：提供了缓存功能，提高了I/O效率。\",\"File 类：用于基本的文件和目录操作。\",\"NIO：提供了更高效的I/O操作，包括Path、Files等类。\",\"这些I/O操作和类可以帮助你高效地处理文件和数据流，根据需求选择合适的类和方法进行操作。\"]},\"1442\":{\"h\":\"异常处理\",\"t\":[\"在Java中，异常处理是管理程序运行时错误的重要机制。通过异常处理，程序可以捕获、处理和恢复错误，防止程序崩溃。Java的异常处理机制基于try-catch语句块、throw关键字和自定义异常类。\"]},\"1443\":{\"h\":\"1. 基本概念\",\"t\":[\"异常（Exception）：表示程序运行时发生的错误或不正常的情况。\",\"异常类（Exception Class）：Java的异常是Throwable类的子类，主要有Exception和Error两类。\",\"捕获（Catch）：处理异常的过程。\",\"抛出（Throw）：将异常传递给调用者的过程。\"]},\"1444\":{\"h\":\"2. 异常处理语法\"},\"1445\":{\"h\":\"2.1 语句\",\"t\":[\"try块中包含可能引发异常的代码，catch块用于捕获和处理这些异常。\",\"示例代码：\",\"public class ExceptionHandlingExample { public static void main(String[] args) { try { int result = 10 / 0; // 可能会引发ArithmeticException } catch (ArithmeticException e) { System.out.println(\\\"An error occurred: \\\" + e.getMessage()); } } }\"]},\"1446\":{\"h\":\"2.2 语句\",\"t\":[\"finally块中的代码无论是否发生异常都会执行，通常用于释放资源。\",\"示例代码：\",\"public class FinallyExample { public static void main(String[] args) { try { int result = 10 / 2; System.out.println(\\\"Result: \\\" + result); } catch (ArithmeticException e) { System.out.println(\\\"An error occurred: \\\" + e.getMessage()); } finally { System.out.println(\\\"This block is always executed.\\\"); } } }\"]},\"1447\":{\"h\":\"2.3 关键字\",\"t\":[\"throw用于显式地抛出一个异常。\",\"示例代码：\",\"public class ThrowExample { public static void checkAge(int age) { if (age < 18) { throw new IllegalArgumentException(\\\"Age must be 18 or older.\\\"); } } public static void main(String[] args) { try { checkAge(15); } catch (IllegalArgumentException e) { System.out.println(\\\"Caught exception: \\\" + e.getMessage()); } } }\"]},\"1448\":{\"h\":\"2.4 自定义异常\",\"t\":[\"你可以创建自定义异常类来表示特定的错误条件。自定义异常通常继承Exception类或其子类。\",\"示例代码：\",\"// 自定义异常类 class CustomException extends Exception { public CustomException(String message) { super(message); } } public class CustomExceptionExample { public static void test() throws CustomException { throw new CustomException(\\\"This is a custom exception.\\\"); } public static void main(String[] args) { try { test(); } catch (CustomException e) { System.out.println(\\\"Caught custom exception: \\\" + e.getMessage()); } } }\"]},\"1449\":{\"h\":\"3. 异常分类\"},\"1450\":{\"h\":\"3.1 检查异常（Checked Exception）\",\"t\":[\"检查异常是在编译时检查的异常。必须要么捕获这些异常，要么在方法签名中声明它们。常见的检查异常包括IOException、SQLException等。\"]},\"1451\":{\"h\":\"3.2 非检查异常（Unchecked Exception）\",\"t\":[\"非检查异常是在运行时检查的异常，不需要在代码中显式地处理或声明。包括RuntimeException及其子类，例如NullPointerException、ArrayIndexOutOfBoundsException等。\"]},\"1452\":{\"h\":\"4. 异常处理最佳实践\",\"t\":[\"只捕获需要处理的异常：不要捕获所有异常，应该只捕获那些你能处理的异常。\",\"记录异常信息：在处理异常时，记录详细的异常信息，以便调试。\",\"使用自定义异常：对于业务逻辑中的特定错误，可以创建自定义异常类。\",\"保持代码清晰：避免过度使用异常，异常应该用来处理意外情况，而不是控制程序流。\"]},\"1453\":{\"h\":\"5. 总结\",\"t\":[\"try-catch：用于捕获和处理异常。\",\"finally：用于无论是否发生异常都执行的代码块。\",\"throw：用于显式地抛出异常。\",\"自定义异常：可以创建特定的异常类来表示特定的错误条件。\",\"异常分类：检查异常和非检查异常分别在编译时和运行时处理。\",\"通过适当地使用Java的异常处理机制，可以提高程序的稳定性和可维护性，确保在出现错误时能够优雅地处理问题。\"]},\"1454\":{\"c\":[\"Java\"]},\"1455\":{\"c\":[\"Java基础\"]},\"1456\":{\"h\":\"Java学习内容\"},\"1457\":{\"h\":\"Java基础\",\"t\":[\"Java基础语法\",\"基础语法 \",\"语句\",\"变量\",\"数据类型\",\"运算\",\"控制结构 \",\"顺序\",\"循环\",\"分支\",\"数组\",\"字符串\",\"⭐ 面向对象 \",\"封装\",\"继承\",\"多态\",\"重载\",\"接口\",\"枚举\",\"包\",\"异常\",\"集合\",\"多线程\",\"泛型\",\"注解\",\"网络编程\",\"IO流\",\"反射\",\"常用API\",\"jdk8/9/11/17\"]},\"1458\":{\"h\":\"Java高级\",\"t\":[\"Java并发编程\",\"Java数据结构与算法\",\"JVM\",\"Java设计模式\"]},\"1459\":{\"h\":\"计算机基础\",\"t\":[\"计算机组成原理\",\"数据结构\",\"操作系统\",\"计算机网络\"]},\"1460\":{\"h\":\"JavaWeb\",\"t\":[\"前端基础\",\"HTML\",\"CSS SCSS\",\"JavaScript\",\"Ajax\",\"jQuery\",\"Vue3\",\"React\",\"Node\",\"数据库\",\"MySQL\",\"JDBC\",\"数据库优化\",\"Servlet\",\"JSP\",\"SSM\",\"Spring\",\"SpringMVC\",\"MyBatis MybatisPlus\",\"Nginx\",\"Tomcat\",\"Linux\",\"Maven\"]},\"1461\":{\"h\":\"中间件\"},\"1462\":{\"h\":\"分布式微服务\"},\"1463\":{\"h\":\"大数据\"},\"1464\":{\"c\":[\"Java\"]},\"1465\":{\"c\":[\"Java学习内容\"]},\"1466\":{\"h\":\"Java面向对象\"},\"1467\":{\"h\":\"Java对象和类\",\"t\":[\"Java 是一种面向对象的编程语言，理解面向对象编程（OOP）的基本概念对学习 Java 至关重要。下面是对 Java 中一些关键概念的解释：\"]},\"1468\":{\"h\":\"1. 类（Class）\",\"t\":[\"定义：类是对现实世界中对象的抽象。它是一个模板或蓝图，用于创建对象。类定义了对象的属性（字段或成员变量）和行为（方法）。\",\"示例：假设你有一个类 Car，它包含了属性（如颜色、品牌）和方法（如启动、停止）。\",\"class Car { String color; String brand; void start() { System.out.println(\\\"Car is starting\\\"); } void stop() { System.out.println(\\\"Car is stopping\\\"); } }\"]},\"1469\":{\"h\":\"2. 对象（Object）\",\"t\":[\"定义：对象是类的实例，是类的实际表现形式。对象是具有状态和行为的实体。每个对象都具有独立的属性值。\",\"示例：使用 Car 类创建对象。\",\"Car myCar = new Car(); myCar.color = \\\"Red\\\"; myCar.brand = \\\"Toyota\\\"; myCar.start();\"]},\"1470\":{\"h\":\"3. 继承（Inheritance）\",\"t\":[\"定义：继承是面向对象编程的一个核心概念，它允许一个类从另一个类继承属性和方法。继承的类被称为子类或派生类，继承的类被称为父类或基类。通过继承，子类可以重用父类的代码并扩展其功能。\",\"示例：ElectricCar 类继承 Car 类。\",\"class ElectricCar extends Car { int batteryCapacity; void charge() { System.out.println(\\\"Charging the car\\\"); } }\"]},\"1471\":{\"h\":\"4. 封装（Encapsulation）\",\"t\":[\"定义：封装是将对象的属性和行为隐藏在类的内部，通过公共接口（方法）来访问和修改属性。这确保了对象的内部状态不被外部直接访问，从而保护数据的完整性。\",\"示例：在 Car 类中使用 private 修饰符，并通过 getter 和 setter 方法访问属性。\",\"class Car { private String color; private String brand; public String getColor() { return color; } public void setColor(String color) { this.color = color; } public String getBrand() { return brand; } public void setBrand(String brand) { this.brand = brand; } }\"]},\"1472\":{\"h\":\"5. 多态（Polymorphism）\",\"t\":[\"定义：多态是指同一个方法在不同对象上表现出不同的行为。在 Java 中，多态主要有两种形式：编译时多态（方法重载）和运行时多态（方法重写）。\",\"示例：方法重写体现了运行时多态。\",\"class Car { void start() { System.out.println(\\\"Car is starting\\\"); } } class ElectricCar extends Car { @Override void start() { System.out.println(\\\"Electric Car is starting silently\\\"); } } Car myCar = new ElectricCar(); myCar.start(); // 输出: Electric Car is starting silently\"]},\"1473\":{\"h\":\"6. 抽象（Abstraction）\",\"t\":[\"定义：抽象是将对象的复杂性隐藏，只暴露出必要的部分。Java 中的抽象类和接口就是实现抽象的手段。抽象类是不能实例化的类，只能作为其他类的父类，通常包含抽象方法（没有方法体）。\",\"示例：定义一个抽象类 Vehicle。\",\"abstract class Vehicle { abstract void start(); } class Car extends Vehicle { @Override void start() { System.out.println(\\\"Car is starting\\\"); } }\"]},\"1474\":{\"h\":\"7. 接口（Interface）\",\"t\":[\"定义：接口是一个完全抽象的类，里面只能包含抽象方法和常量。接口不能实例化，类可以通过 implements 关键字实现接口，并必须实现接口中的所有方法。\",\"示例：定义一个 Drivable 接口。\",\"interface Drivable { void drive(); } class Car implements Drivable { @Override public void drive() { System.out.println(\\\"Car is driving\\\"); } }\"]},\"1475\":{\"h\":\"8. 方法（Method）\",\"t\":[\"定义：方法是定义在类中的一组指令，用于执行某种操作。方法可以接收输入参数，并可能返回一个值。方法是类的行为表现形式。\",\"示例：Car 类中的 start() 和 stop() 方法就是方法的例子。\"]},\"1476\":{\"h\":\"9. 重载（Overloading）\",\"t\":[\"定义：方法重载是在同一个类中定义多个方法，它们具有相同的名字但参数列表不同（参数的类型、数量或顺序不同）。编译器通过参数列表来决定调用哪个方法。\",\"示例：printInfo 方法的重载。\",\"class Car { void printInfo(String brand) { System.out.println(\\\"Brand: \\\" + brand); } void printInfo(String brand, String color) { System.out.println(\\\"Brand: \\\" + brand + \\\", Color: \\\" + color); } }\"]},\"1477\":{\"h\":\"类源文件声明\",\"t\":[\"一个源文件中只能有一个 public 类\",\"一个源文件可以有多个非 public 类\",\"源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。\",\"如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。\",\"如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。\",\"import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。\"]},\"1478\":{\"h\":\"对象修饰符\",\"t\":[\"Java 提供了一些修饰符（Modifiers）来控制类、方法、字段等的访问权限和行为。这些修饰符可以分为四类：访问修饰符、类修饰符、方法修饰符和字段修饰符。以下是对 Java 修饰符的详细解释：\"]},\"1479\":{\"h\":\"1.\",\"t\":[\"访问修饰符用于控制类、方法和字段的访问权限。Java 有四种访问修饰符：\"]},\"1480\":{\"h\":\"1.1\",\"t\":[\"作用范围：对所有类可见。\",\"用法：类、方法、字段。\",\"public class MyClass { public int publicField; public void publicMethod() { // 方法体 } }\"]},\"1481\":{\"h\":\"1.2\",\"t\":[\"作用范围：对同一包中的类和任何子类可见（即使这些子类在其他包中）。\",\"用法：方法、字段。\",\"public class MyClass { protected int protectedField; protected void protectedMethod() { // 方法体 } }\"]},\"1482\":{\"h\":\"1.3\",\"t\":[\"作用范围：对同一包中的类可见。\",\"用法：类、方法、字段。\",\"class MyClass { int defaultField; void defaultMethod() { // 方法体 } }\"]},\"1483\":{\"h\":\"1.4\",\"t\":[\"作用范围：仅对定义它的类可见。\",\"用法：方法、字段。\",\"public class MyClass { private int privateField; private void privateMethod() { // 方法体 } }\"]},\"1484\":{\"h\":\"2.\",\"t\":[\"类修饰符用于描述类的性质和行为。\"]},\"1485\":{\"h\":\"2.1\",\"t\":[\"作用：表示类不能被实例化，必须由子类继承并实现其抽象方法。\",\"用法：类和方法。\",\"public abstract class AbstractClass { public abstract void abstractMethod(); }\"]},\"1486\":{\"h\":\"2.2\",\"t\":[\"作用：表示类不能被继承，方法不能被重写，字段值不能被修改。\",\"用法：类、方法、字段。\",\"public final class FinalClass { public final int finalField = 10; public final void finalMethod() { // 方法体 } }\"]},\"1487\":{\"h\":\"3.\",\"t\":[\"方法修饰符用于描述方法的行为和性质。\"]},\"1488\":{\"h\":\"3.1\",\"t\":[\"作用：表示方法或字段属于类而不是对象，可以通过类名直接访问。\",\"用法：方法、字段。\",\"public class MyClass { public static void staticMethod() { // 方法体 } }\"]},\"1489\":{\"h\":\"3.2\",\"t\":[\"作用：用于多线程编程，确保同一时刻只有一个线程可以执行同步代码块。\",\"用法：方法、代码块。\",\"public synchronized void synchronizedMethod() { // 方法体 }\"]},\"1490\":{\"h\":\"3.3\",\"t\":[\"作用：用于多线程编程，确保字段的值在多个线程之间的一致性。\",\"用法：字段。\",\"public volatile int volatileField;\"]},\"1491\":{\"h\":\"3.4\",\"t\":[\"作用：表示在序列化对象时，字段的值不会被序列化。\",\"用法：字段。\",\"public transient int transientField;\"]},\"1492\":{\"h\":\"3.5\",\"t\":[\"作用：表示方法是用其他语言（如 C 或 C++）编写的，通常用于调用本地系统库。\",\"用法：方法。\",\"public native void nativeMethod();\"]},\"1493\":{\"h\":\"4.\",\"t\":[\"字段修饰符用于描述字段的行为和性质。\"]},\"1494\":{\"h\":\"4.1\",\"t\":[\"作用：表示字段是一个枚举类型的常量。\",\"用法：字段（通常用于定义枚举常量）。\",\"public enum Day { SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY }\"]},\"1495\":{\"h\":\"5.\",\"t\":[\"修饰符可以组合使用，但有一些规则需要遵守。例如：\",\"public 和 final 可以一起使用。\",\"abstract 和 final 不能一起使用，因为 abstract 表示类不能实例化，而 final 表示类不能被继承。\",\"static 和 synchronized 可以一起使用。\"]},\"1496\":{\"h\":\"面向对象的关键字\",\"t\":[\"在 Java 的面向对象编程（OOP）中，几个关键字是至关重要的，因为它们定义了类、对象及其交互方式。以下是 Java 面向对象编程中使用的关键字及其作用：\"]},\"1497\":{\"h\":\"1.\",\"t\":[\"作用：定义一个类。类是对象的模板或蓝图，包含字段（属性）和方法（行为）。\",\"示例：\",\"public class Car { // 字段 String color; int year; // 方法 void drive() { System.out.println(\\\"Driving...\\\"); } }\"]},\"1498\":{\"h\":\"2.\",\"t\":[\"作用：定义一个接口。接口是一种特殊的类，用于声明方法，但不提供具体的实现。类可以实现接口，提供具体的方法实现。\",\"示例：\",\"public interface Drivable { void drive(); void stop(); }\"]},\"1499\":{\"h\":\"3.\",\"t\":[\"作用：表示一个类继承另一个类。子类继承父类的属性和方法，并可以重写父类的方法。\",\"示例：\",\"public class ElectricCar extends Car { // 新增字段和方法 int batteryCapacity; @Override void drive() { System.out.println(\\\"Driving electric car...\\\"); } }\"]},\"1500\":{\"h\":\"4.\",\"t\":[\"作用：表示一个类实现一个或多个接口。实现接口的类必须提供接口中声明的所有方法的具体实现。\",\"示例：\",\"public class ElectricCar implements Drivable { @Override public void drive() { System.out.println(\\\"Driving electric car...\\\"); } @Override public void stop() { System.out.println(\\\"Electric car stopped.\\\"); } }\"]},\"1501\":{\"h\":\"5.\",\"t\":[\"作用：定义一个抽象类或抽象方法。抽象类不能被实例化，通常作为其他类的基类。抽象方法没有具体实现，必须在子类中实现。\",\"示例：\",\"public abstract class Vehicle { abstract void start(); void stop() { System.out.println(\\\"Vehicle stopped.\\\"); } }\"]},\"1502\":{\"h\":\"6.\",\"t\":[\"作用：表示一个类不能被继承，一个方法不能被重写，一个字段的值不能被修改。\",\"示例：\",\"public final class Constants { public static final int MAX_SPEED = 120; } public class Car { public final void displaySpeed() { System.out.println(\\\"Speed: 100 km/h\\\"); } }\"]},\"1503\":{\"h\":\"7.\",\"t\":[\"作用：表示字段或方法属于类而不是对象，可以通过类名直接访问。static 关键字也用于静态初始化块。\",\"示例：\",\"public class MathUtils { public static int add(int a, int b) { return a + b; } } public class Main { public static void main(String[] args) { int sum = MathUtils.add(5, 3); System.out.println(\\\"Sum: \\\" + sum); } }\"]},\"1504\":{\"h\":\"8.\",\"t\":[\"作用：用于访问父类的字段、方法和构造函数。super 关键字常用于子类构造函数中调用父类构造函数。\",\"示例：\",\"public class Animal { String name; public Animal(String name) { this.name = name; } void speak() { System.out.println(\\\"Animal speaks\\\"); } } public class Dog extends Animal { public Dog(String name) { super(name); // 调用父类构造函数 } @Override void speak() { super.speak(); // 调用父类方法 System.out.println(\\\"Dog barks\\\"); } }\"]},\"1505\":{\"h\":\"9.\",\"t\":[\"作用：指代当前对象的引用。this 关键字用于访问当前对象的字段和方法，也用于在构造函数中调用其他构造函数（构造函数重载）。\",\"示例：\",\"public class Person { String name; public Person(String name) { this.name = name; // 区分字段和参数 } public void setName(String name) { this.name = name; // 访问当前对象的字段 } }\"]},\"1506\":{\"h\":\"10.\",\"t\":[\"作用：访问修饰符，用于控制类、方法、字段的访问权限。private 表示私有，仅对同一类可见；protected 表示受保护，对同一包和子类可见；public 表示公共，对所有类可见；default（无修饰符）表示包级可见。\",\"示例：\",\"public class Person { private String name; // 仅对 Person 类可见 protected int age; // 对同一包和子类可见 public String address; // 对所有类可见 void display() { // 包级可见 System.out.println(\\\"Name: \\\" + name); System.out.println(\\\"Age: \\\" + age); System.out.println(\\\"Address: \\\" + address); } }\"]},\"1507\":{\"h\":\"继承\",\"t\":[\"在 Java 中，继承是一种机制，使得一个类可以继承另一个类的属性和方法。继承是一种代码重用的手段，允许一个类（子类）获取另一个类（父类）的特性，并可以对其进行扩展或修改。\"]},\"1508\":{\"h\":\"1.\",\"t\":[\"父类（基类、超类）：被继承的类。\",\"子类（派生类、扩展类）：继承父类的类，可以添加新特性或重写父类的方法。\"]},\"1509\":{\"h\":\"2.\",\"t\":[\"class Parent { // 父类属性 String name; // 父类方法 void greet() { System.out.println(\\\"Hello from Parent!\\\"); } } class Child extends Parent { // 子类属性 int age; // 子类方法 void display() { System.out.println(\\\"Name: \\\" + name); System.out.println(\\\"Age: \\\" + age); } // 重写父类方法 @Override void greet() { System.out.println(\\\"Hello from Child!\\\"); } }\"]},\"1510\":{\"h\":\"3.\"},\"1511\":{\"h\":\"3.1\",\"t\":[\"class Animal { void eat() { System.out.println(\\\"This animal eats food.\\\"); } } class Dog extends Animal { void bark() { System.out.println(\\\"Woof! Woof!\\\"); } } public class Main { public static void main(String[] args) { Dog dog = new Dog(); dog.eat(); // 继承自 Animal 类 dog.bark(); // Dog 类的方法 } }\"]},\"1512\":{\"h\":\"3.2\",\"t\":[\"构造函数不会被继承，但子类可以调用父类的构造函数。可以使用 super() 关键字来调用父类的构造函数。\",\"class Parent { Parent() { System.out.println(\\\"Parent constructor\\\"); } } class Child extends Parent { Child() { super(); // 调用父类构造函数 System.out.println(\\\"Child constructor\\\"); } } public class Main { public static void main(String[] args) { Child child = new Child(); // 输出: // Parent constructor // Child constructor } }\"]},\"1513\":{\"h\":\"3.3\",\"t\":[\"子类可以重写父类的方法以提供特定的实现。使用 @Override 注解来标识重写的方法。\",\"class Animal { void sound() { System.out.println(\\\"Animal makes a sound\\\"); } } class Cat extends Animal { @Override void sound() { System.out.println(\\\"Meow!\\\"); } } public class Main { public static void main(String[] args) { Cat cat = new Cat(); cat.sound(); // 输出: Meow! } }\"]},\"1514\":{\"h\":\"3.4\",\"t\":[\"super()：用于调用父类的构造函数。\",\"super.methodName()：用于调用父类的方法。\",\"class Animal { void eat() { System.out.println(\\\"Animal eats\\\"); } } class Cat extends Animal { void eat() { super.eat(); // 调用父类的方法 System.out.println(\\\"Cat eats fish\\\"); } } public class Main { public static void main(String[] args) { Cat cat = new Cat(); cat.eat(); // 输出: // Animal eats // Cat eats fish } }\"]},\"1515\":{\"h\":\"4.\",\"t\":[\"单继承：Java 支持单继承，即一个类只能继承一个父类。\",\"访问控制：子类可以访问父类的 public 和 protected 成员，但不能访问 private 成员。\",\"方法重写规则： \",\"重写的方法必须具有相同的名称、参数列表和返回类型。\",\"子类重写父类方法的访问权限不能比父类方法更严格。\",\"可以使用 @Override 注解来确保正确重写父类方法。\",\"构造函数：构造函数不会被继承，子类必须定义自己的构造函数。\"]},\"1516\":{\"h\":\"5.\",\"t\":[\"子类对象可以访问父类的公共和保护成员，并可以调用被继承和重写的方法。\",\"class Vehicle { void start() { System.out.println(\\\"Vehicle starting\\\"); } } class Car extends Vehicle { void start() { System.out.println(\\\"Car starting\\\"); } } public class Main { public static void main(String[] args) { Vehicle v = new Car(); // 向上转型 v.start(); // 输出: Car starting } }\",\"继承是 Java 面向对象编程的核心特性之一，它通过类的层次结构实现了代码的重用和扩展。理解继承及其应用可以帮助你设计更灵活和可维护的程序。\"]},\"1517\":{\"h\":\"重写和重载\",\"t\":[\"在 Java 中，重写（Overriding）和重载（Overloading）是两个常见的概念，用于实现多态和灵活的方法调用。虽然它们的名字相似，但它们在实现方式和应用场景上有所不同。\"]},\"1518\":{\"h\":\"1.\",\"t\":[\"重写是子类提供父类方法的具体实现。通过重写，子类可以修改从父类继承来的方法的行为。\"]},\"1519\":{\"h\":\"1.1\",\"t\":[\"方法签名：子类重写的方法必须与父类的方法具有相同的名称、参数列表和返回类型。\",\"访问权限：子类重写的方法的访问权限不能比父类的方法更严格。例如，如果父类的方法是 public，子类的方法也必须是 public，不能是 protected 或 private。\",\"@Override 注解：推荐使用 @Override 注解，它可以帮助编译器检查是否正确重写了父类的方法。\"]},\"1520\":{\"h\":\"1.2\",\"t\":[\"class Animal { void sound() { System.out.println(\\\"Animal makes a sound\\\"); } } class Dog extends Animal { @Override void sound() { System.out.println(\\\"Woof!\\\"); } } public class Main { public static void main(String[] args) { Animal animal = new Dog(); animal.sound(); // 输出: Woof! } }\",\"在上述代码中，Dog 类重写了 Animal 类的 sound 方法，实现了特定的行为。\"]},\"1521\":{\"h\":\"2.\",\"t\":[\"重载是指在同一个类中定义多个方法名相同但参数不同的方法。重载方法可以有不同的参数数量或类型，但返回类型可以相同也可以不同。\"]},\"1522\":{\"h\":\"2.1\",\"t\":[\"方法名称：方法的名称必须相同。\",\"参数列表：参数的数量、类型或顺序必须不同。\",\"返回类型：返回类型可以相同也可以不同，但仅凭返回类型无法区分重载方法。\"]},\"1523\":{\"h\":\"2.2\",\"t\":[\"class MathOperations { // 方法重载 int add(int a, int b) { return a + b; } double add(double a, double b) { return a + b; } int add(int a, int b, int c) { return a + b + c; } } public class Main { public static void main(String[] args) { MathOperations math = new MathOperations(); System.out.println(math.add(5, 3)); // 输出: 8 System.out.println(math.add(5.5, 3.2)); // 输出: 8.7 System.out.println(math.add(1, 2, 3)); // 输出: 6 } }\",\"在上述代码中，MathOperations 类有三个 add 方法，每个方法的参数列表不同，从而实现了方法的重载。\"]},\"1524\":{\"h\":\"总结\",\"t\":[\"重写：子类重新定义父类的方法，目的是修改或扩展父类的方法实现。重写发生在继承关系中，并且子类方法的签名必须与父类方法完全一致。\",\"重载：同一个类中多个方法具有相同的名称但参数不同，目的是实现同名方法的不同功能。重载发生在同一个类中，通过不同的参数列表来区分不同的方法。\"]},\"1525\":{\"h\":\"多态\",\"t\":[\"多态（Polymorphism）是 Java 的一个核心概念，它允许对象以多种形式出现。多态使得同一操作能够作用于不同的对象上，产生不同的行为。它主要通过方法重写和方法重载来实现。以下是 Java 中多态的详细解释及示例：\"]},\"1526\":{\"h\":\"1.\",\"t\":[\"静态多态（编译时多态）：主要通过方法重载实现。静态多态在编译时决定调用哪个方法。\",\"动态多态（运行时多态）：主要通过方法重写实现。动态多态在运行时决定调用哪个方法，通常是通过父类引用指向子类对象来实现。\"]},\"1527\":{\"h\":\"2.\",\"t\":[\"方法重载允许同一个类中定义多个方法名相同但参数不同的方法。根据方法的参数列表（数量、类型、顺序）来决定调用哪个方法。\"]},\"1528\":{\"h\":\"示例代码：\",\"t\":[\"class Printer { void print(int number) { System.out.println(\\\"Printing number: \\\" + number); } void print(String message) { System.out.println(\\\"Printing message: \\\" + message); } void print(double number) { System.out.println(\\\"Printing double: \\\" + number); } } public class Main { public static void main(String[] args) { Printer printer = new Printer(); printer.print(100); // 输出: Printing number: 100 printer.print(\\\"Hello\\\"); // 输出: Printing message: Hello printer.print(99.99); // 输出: Printing double: 99.99 } }\"]},\"1529\":{\"h\":\"3.\",\"t\":[\"动态多态通过方法重写实现，允许子类提供父类方法的具体实现。方法重写的实际调用是在运行时决定的，通常是通过父类的引用变量指向子类对象来实现。\"]},\"1530\":{\"h\":\"示例代码：\",\"t\":[\"class Animal { void sound() { System.out.println(\\\"Animal makes a sound\\\"); } } class Dog extends Animal { @Override void sound() { System.out.println(\\\"Woof!\\\"); } } class Cat extends Animal { @Override void sound() { System.out.println(\\\"Meow!\\\"); } } public class Main { public static void main(String[] args) { Animal animal1 = new Dog(); // 动态多态 Animal animal2 = new Cat(); // 动态多态 animal1.sound(); // 输出: Woof! animal2.sound(); // 输出: Meow! } }\",\"在这个例子中，Animal 类的引用变量 animal1 和 animal2 指向 Dog 和 Cat 的对象。尽管它们的声明类型都是 Animal，实际调用的是它们各自的 sound 方法，实现了动态多态。\"]},\"1531\":{\"h\":\"4.\",\"t\":[\"灵活性：代码可以处理父类引用的不同子类对象，增加了代码的灵活性和扩展性。\",\"代码重用：通过方法重写，可以重用父类代码而无需修改它。\",\"可维护性：使用多态可以减少代码的重复，提高系统的可维护性和可扩展性。\"]},\"1532\":{\"h\":\"5.\",\"t\":[\"多态也可以通过接口实现。接口定义了一组方法，类可以实现这些接口，从而提供特定的实现。\"]},\"1533\":{\"h\":\"示例代码：\",\"t\":[\"interface Drawable { void draw(); } class Circle implements Drawable { @Override public void draw() { System.out.println(\\\"Drawing a circle\\\"); } } class Rectangle implements Drawable { @Override public void draw() { System.out.println(\\\"Drawing a rectangle\\\"); } } public class Main { public static void main(String[] args) { Drawable shape1 = new Circle(); Drawable shape2 = new Rectangle(); shape1.draw(); // 输出: Drawing a circle shape2.draw(); // 输出: Drawing a rectangle } }\",\"在这个例子中，Drawable 接口定义了 draw 方法，Circle 和 Rectangle 实现了这个接口。使用 Drawable 类型的引用可以指向任何实现了该接口的对象，从而实现多态。\"]},\"1534\":{\"h\":\"6.\",\"t\":[\"方法签名：动态多态依赖于方法签名一致，即父类和子类方法的名称和参数列表必须一致。\",\"类型转换：在运行时，将父类引用转换为子类对象时要小心，确保对象类型正确。\",\"抽象类和接口：抽象类和接口可以被用来定义多态行为，它们提供了实现多态的基础。\"]},\"1535\":{\"h\":\"向下转型\",\"t\":[\"在Java中，向下转型（Downcasting）指的是将一个父类类型的引用转换为其子类类型的引用。向下转型通常是在父类引用实际指向的是子类对象的情况下进行的，目的是为了访问子类中特有的方法或属性。\"]},\"1536\":{\"h\":\"1. 向下转型的基本概念\",\"t\":[\"向上转型（Upcasting）： 将子类对象的引用赋值给父类类型的变量。向上转型是自动进行的，无需显式转换。\",\"向下转型（Downcasting）： 将父类引用显式转换为子类类型。向下转型必须手动进行，并且存在一定的风险（比如类转换异常）。\",\"示例：\",\"class Animal { void eat() { System.out.println(\\\"Animal is eating\\\"); } } class Dog extends Animal { void bark() { System.out.println(\\\"Dog is barking\\\"); } } public class Main { public static void main(String[] args) { Animal animal = new Dog(); // 向上转型，自动进行 animal.eat(); // 可以调用父类的方法 // 向下转型，需要显式转换 Dog dog = (Dog) animal; dog.bark(); // 可以调用子类特有的方法 } }\",\"在上面的例子中，animal引用实际上指向的是Dog对象。在将animal向下转型为Dog类型后，可以调用Dog类中特有的bark方法。\"]},\"1537\":{\"h\":\"2. 向下转型的注意事项\"},\"1538\":{\"h\":\"2.1 向下转型前的类型检查\",\"t\":[\"在进行向下转型之前，通常需要使用instanceof关键字来检查对象是否是特定子类的实例，以避免ClassCastException异常。\",\"示例：\",\"Animal animal = new Dog(); if (animal instanceof Dog) { Dog dog = (Dog) animal; dog.bark(); } else { System.out.println(\\\"animal is not an instance of Dog\\\"); }\",\"instanceof用于确保animal确实是Dog类型的实例，然后再进行安全的向下转型。\"]},\"1539\":{\"h\":\"2.2 异常\",\"t\":[\"如果尝试将一个对象向下转型为不兼容的类型，Java会抛出ClassCastException异常。例如，如果animal引用指向的是一个Cat对象，但你尝试将它向下转型为Dog类型，就会导致这个异常。\",\"示例：\",\"Animal animal = new Cat(); // 这里是另一个子类 Dog dog = (Dog) animal; // 这里会抛出 ClassCastException\"]},\"1540\":{\"h\":\"3. 向下转型的应用场景\"},\"1541\":{\"h\":\"3.1 多态的应用\",\"t\":[\"在面向对象编程中，向下转型通常用于实现多态。多态允许我们在运行时根据实际对象的类型调用适当的方法。通过向上转型，我们可以使用父类引用来调用通用方法，而向下转型则允许我们访问子类特有的行为。\",\"示例：\",\"public class Main { public static void main(String[] args) { Animal animal = getAnimal(); // 假设这个方法返回一个具体的动物对象 if (animal instanceof Dog) { Dog dog = (Dog) animal; dog.bark(); } else if (animal instanceof Cat) { Cat cat = (Cat) animal; cat.meow(); } } static Animal getAnimal() { // 逻辑返回不同的动物对象 return new Dog(); // 这里返回一个Dog对象 } }\",\"在这个例子中，通过getAnimal方法返回一个具体的Animal对象，然后通过instanceof检查并向下转型，根据实际对象类型调用子类的特定方法。\"]},\"1542\":{\"h\":\"3.2 处理集合中的多态对象\",\"t\":[\"在集合中存储多态对象时，向下转型也非常常见。例如，你可能有一个List<Animal>，其中存储了Dog和Cat对象。如果你想访问这些对象的子类特有方法，就需要进行向下转型。\",\"示例：\",\"List<Animal> animals = new ArrayList<>(); animals.add(new Dog()); animals.add(new Cat()); for (Animal animal : animals) { if (animal instanceof Dog) { Dog dog = (Dog) animal; dog.bark(); } else if (animal instanceof Cat) { Cat cat = (Cat) animal; cat.meow(); } }\",\"在这个例子中，我们遍历animals列表，并根据每个对象的实际类型进行相应的向下转型。\"]},\"1543\":{\"h\":\"总结\",\"t\":[\"向下转型允许将父类类型的引用转换为子类类型的引用，从而访问子类特有的方法或属性。\",\"向下转型前应使用instanceof检查对象的类型，以避免ClassCastException异常。\",\"向下转型在实现多态和处理多态对象集合时非常有用，能够根据运行时对象类型执行不同的操作。\",\"向下转型虽然强大，但也要谨慎使用，确保对象的实际类型与目标类型兼容，以避免运行时错误。\"]},\"1544\":{\"h\":\"代码块\",\"t\":[\"在Java中，代码块（Code Blocks）是一组被大括号 {} 包围的代码，用于组织代码逻辑。Java中的代码块可以分为以下几种类型：普通代码块、构造块（初始化块）、静态代码块和同步代码块。每种代码块都有不同的作用和执行时机。\"]},\"1545\":{\"h\":\"1. 普通代码块\",\"t\":[\"普通代码块是最常见的代码块，用于在方法体或构造函数中组织代码。它只是在当前方法或构造函数执行过程中被执行。\",\"示例：\",\"public class Example { public void someMethod() { // 普通代码块 { int x = 10; System.out.println(\\\"Inside block, x = \\\" + x); } // x 超出了代码块的作用域，以下代码会报错 // System.out.println(x); } }\",\"在这个例子中，x 变量是在普通代码块中定义的，因此它的作用域仅限于代码块内，代码块外无法访问。\"]},\"1546\":{\"h\":\"2. 构造块（初始化块）\",\"t\":[\"构造块（也称为初始化块）是在类中定义的一种代码块，它在每次创建对象时都会被自动调用，且在构造函数执行之前执行。构造块可以用来进行对象的通用初始化。\",\"示例：\",\"public class Example { // 构造块 { System.out.println(\\\"Initialization block\\\"); } public Example() { System.out.println(\\\"Constructor\\\"); } public static void main(String[] args) { Example example1 = new Example(); Example example2 = new Example(); } }\",\"输出：\",\"Initialization block Constructor Initialization block Constructor\",\"在这个例子中，构造块在每次创建对象时都会执行一次，且总是先于构造函数执行。每次创建 Example 对象时，都会输出 \\\"Initialization block\\\" 和 \\\"Constructor\\\"。\"]},\"1547\":{\"h\":\"3. 静态代码块\",\"t\":[\"静态代码块用于在类加载时初始化静态数据。静态代码块在类第一次加载时执行，只执行一次，用于对静态成员进行初始化。\",\"示例：\",\"public class Example { // 静态代码块 static { System.out.println(\\\"Static block\\\"); } public Example() { System.out.println(\\\"Constructor\\\"); } public static void main(String[] args) { Example example1 = new Example(); Example example2 = new Example(); } }\",\"输出：\",\"Static block Constructor Constructor\",\"在这个例子中，静态代码块在类加载时执行，只执行一次，而构造函数在每次创建对象时执行。\",\"注意： 静态代码块可以有多个，多个静态代码块按照它们在类中定义的顺序依次执行。\"]},\"1548\":{\"h\":\"4. 同步代码块\",\"t\":[\"同步代码块用于在多线程环境中控制对共享资源的访问，确保同一时间只有一个线程可以执行同步代码块中的代码。使用 synchronized 关键字定义同步代码块，可以在方法中指定一个对象作为锁，来保证线程安全。\",\"语法：\",\"synchronized (lockObject) { // 线程安全的代码 }\",\"示例：\",\"public class Example { private int count = 0; public void increment() { // 使用同步代码块确保线程安全 synchronized (this) { count++; } } public int getCount() { return count; } public static void main(String[] args) { Example example = new Example(); // 创建多个线程来访问 increment 方法 Thread t1 = new Thread(() -> example.increment()); Thread t2 = new Thread(() -> example.increment()); t1.start(); t2.start(); try { t1.join(); t2.join(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"Final count: \\\" + example.getCount()); } }\",\"在这个例子中，increment 方法使用了同步代码块来确保 count 的增量操作是线程安全的。即使多个线程同时调用 increment 方法，最终的 count 值仍然是正确的。\"]},\"1549\":{\"h\":\"5. 静态代码块与构造块的区别\",\"t\":[\"执行时机：\",\"静态代码块：在类加载时执行，并且只执行一次。\",\"构造块：在每次创建对象时执行，每次创建对象都会执行一次。\",\"作用域：\",\"静态代码块：只能操作静态成员。\",\"构造块：可以操作类的实例成员。\",\"用途：\",\"静态代码块：用于静态数据的初始化。\",\"构造块：用于实例数据的通用初始化。\"]},\"1550\":{\"h\":\"总结\",\"t\":[\"普通代码块 用于在方法或构造函数中组织代码逻辑。\",\"构造块 在对象创建时自动执行，用于实例的通用初始化。\",\"静态代码块 在类加载时执行，用于静态数据的初始化，只执行一次。\",\"同步代码块 用于在多线程环境中保护共享资源，确保线程安全。\",\"理解这些不同类型的代码块及其用途有助于更好地管理和组织代码，尤其是在需要初始化静态资源或处理多线程操作时。\"]},\"1551\":{\"h\":\"抽象\",\"t\":[\"在 Java 中，抽象是面向对象编程的一个重要概念，用于定义一个类的共同特征而不提供具体实现。抽象类和接口是 Java 实现抽象的两种主要方式。以下是对抽象概念的详细解释和示例：\"]},\"1552\":{\"h\":\"1.\",\"t\":[\"抽象类是不能被实例化的类，通常用于提供一些通用的行为和特征，供子类继承和实现。抽象类可以包含抽象方法和非抽象方法。\"]},\"1553\":{\"h\":\"1.1\",\"t\":[\"使用 abstract 关键字声明一个类为抽象类。\",\"抽象类可以包含抽象方法和普通方法。抽象方法在抽象类中没有实现，必须由子类提供具体实现。\"]},\"1554\":{\"h\":\"1.2\",\"t\":[\"abstract class Animal { // 抽象方法（没有方法体） abstract void makeSound(); // 普通方法（有方法体） void eat() { System.out.println(\\\"This animal eats food.\\\"); } } class Dog extends Animal { @Override void makeSound() { System.out.println(\\\"Woof!\\\"); } } public class Main { public static void main(String[] args) { Dog dog = new Dog(); dog.makeSound(); // 输出: Woof! dog.eat(); // 输出: This animal eats food. } }\",\"在这个例子中，Animal 是一个抽象类，makeSound 是一个抽象方法，Dog 类继承了 Animal 类并实现了 makeSound 方法。\"]},\"1555\":{\"h\":\"2.\",\"t\":[\"接口是一个纯粹的抽象类，只包含抽象方法和常量（Java 8 及以后的版本也允许接口中包含默认方法和静态方法）。接口用于定义一组必须由实现类提供具体实现的方法。\"]},\"1556\":{\"h\":\"2.1\",\"t\":[\"使用 interface 关键字声明一个接口。\",\"接口中的方法默认为 public 和 abstract，即使没有明确声明。\"]},\"1557\":{\"h\":\"2.2\",\"t\":[\"interface Drawable { void draw(); } class Circle implements Drawable { @Override public void draw() { System.out.println(\\\"Drawing a circle.\\\"); } } class Rectangle implements Drawable { @Override public void draw() { System.out.println(\\\"Drawing a rectangle.\\\"); } } public class Main { public static void main(String[] args) { Drawable shape1 = new Circle(); Drawable shape2 = new Rectangle(); shape1.draw(); // 输出: Drawing a circle. shape2.draw(); // 输出: Drawing a rectangle. } }\",\"在这个例子中，Drawable 是一个接口，Circle 和 Rectangle 实现了 Drawable 接口并提供了 draw 方法的具体实现。\"]},\"1558\":{\"h\":\"3.\",\"t\":[\"抽象类：\",\"可以包含抽象方法和非抽象方法。\",\"可以包含构造函数、成员变量、静态方法等。\",\"子类继承抽象类时，必须实现所有抽象方法（除非子类也是抽象类）。\",\"接口：\",\"只能包含抽象方法（Java 8 之后可以有默认方法和静态方法）。\",\"无法包含构造函数、成员变量（只能是 public static final 常量）。\",\"一个类可以实现多个接口，实现多重继承的功能。\"]},\"1559\":{\"h\":\"4.\",\"t\":[\"抽象类：当多个类具有共同行为和特征时，使用抽象类可以将这些共性行为提取到一个基类中，以减少代码重复。\",\"接口：当类的行为可以被多个不相关的类共享时，使用接口可以定义行为的契约，从而实现多重继承。\"]},\"1560\":{\"h\":\"5.\",\"t\":[\"从 Java 8 开始，接口可以包含默认方法，这些方法有具体实现，但接口仍然不能被实例化。默认方法用于为接口提供一些默认行为，而不强制实现类必须实现这些方法。\"]},\"1561\":{\"h\":\"示例代码：\",\"t\":[\"interface Printable { void print(); // 默认方法 default void printDefault() { System.out.println(\\\"This is a default print method.\\\"); } } class Document implements Printable { @Override public void print() { System.out.println(\\\"Printing document...\\\"); } } public class Main { public static void main(String[] args) { Document doc = new Document(); doc.print(); // 输出: Printing document... doc.printDefault(); // 输出: This is a default print method. } }\",\"在这个例子中，Printable 接口包含一个默认方法 printDefault，Document 类实现了 Printable 接口，并且可以使用接口提供的默认方法。\"]},\"1562\":{\"h\":\"总结\",\"t\":[\"抽象类和接口是 Java 中实现抽象的关键工具，能够帮助设计更具灵活性和可扩展性的系统。抽象类提供了一种代码重用的方法，而接口则提供了一种实现多重继承的方式。\"]},\"1563\":{\"h\":\"封装\",\"t\":[\"封装（Encapsulation）是面向对象编程（OOP）的一个基本原则，用于将对象的状态（属性）和行为（方法）封装在一个类中，并隐藏内部实现细节，只暴露必要的操作接口。封装使得对象的内部状态可以被保护，并且可以控制对这些状态的访问和修改，从而提高了代码的安全性和可维护性。\"]},\"1564\":{\"h\":\"1.\",\"t\":[\"封装涉及到以下几个方面：\",\"私有成员：类的属性和方法通常被设置为 private，以防止外部直接访问。\",\"公共接口：通过 public 方法（通常是 getter 和 setter 方法）来访问或修改私有成员。这样可以控制对类的属性的访问和修改。\",\"数据保护：封装有助于保护数据不被外部随意修改，并可以增加数据访问的安全性和准确性。\"]},\"1565\":{\"h\":\"2.\"},\"1566\":{\"h\":\"2.1\",\"t\":[\"将类的属性设置为 private，以隐藏其内部实现。\"]},\"1567\":{\"h\":\"2.2\",\"t\":[\"提供 public 方法来访问和修改这些私有属性，这些方法通常称为 getter 和 setter 方法。\"]},\"1568\":{\"h\":\"2.3\",\"t\":[\"public class Person { // 私有属性 private String name; private int age; // 公共构造函数 public Person(String name, int age) { this.name = name; this.age = age; } // 公共 getter 方法 public String getName() { return name; } // 公共 setter 方法 public void setName(String name) { this.name = name; } // 公共 getter 方法 public int getAge() { return age; } // 公共 setter 方法 public void setAge(int age) { if (age > 0) { // 可以添加条件控制属性的有效性 this.age = age; } } } public class Main { public static void main(String[] args) { // 创建 Person 对象 Person person = new Person(\\\"John\\\", 30); // 通过公共方法访问和修改属性 System.out.println(\\\"Name: \\\" + person.getName()); // 输出: Name: John System.out.println(\\\"Age: \\\" + person.getAge()); // 输出: Age: 30 person.setName(\\\"Jane\\\"); person.setAge(25); System.out.println(\\\"Updated Name: \\\" + person.getName()); // 输出: Updated Name: Jane System.out.println(\\\"Updated Age: \\\" + person.getAge()); // 输出: Updated Age: 25 } }\"]},\"1569\":{\"h\":\"3.\",\"t\":[\"保护数据：通过将数据隐藏在类内部，可以防止外部代码直接访问和修改数据，从而保护数据的完整性。\",\"简化接口：通过提供公共方法来操作数据，隐藏内部实现细节，使得外部代码更容易使用和理解。\",\"提高可维护性：更改类的内部实现不会影响到使用这个类的外部代码，只要公共接口保持不变。\",\"控制访问：可以通过 setter 方法添加额外的逻辑来控制对属性的访问和修改，例如验证数据的有效性。\"]},\"1570\":{\"h\":\"4.\",\"t\":[\"封装与继承：封装通过隐藏类的内部细节和提供公共接口来保护数据，而继承通过扩展父类的功能来重用代码。封装和继承可以结合使用，以提高代码的复用性和灵活性。\",\"封装与多态：封装和多态结合可以通过提供统一的接口来处理不同的对象，从而实现动态方法调用和不同的行为实现。\"]},\"1571\":{\"h\":\"5.\",\"t\":[\"在实际编程中，封装的实践可以包括：\",\"将类的属性设置为 private，以隐藏数据。\",\"提供适当的 getter 和 setter 方法来访问和修改属性。\",\"在 setter 方法中添加逻辑来验证输入数据。\",\"使用封装来创建清晰的公共接口，简化类的使用。\",\"通过良好的封装实践，可以创建更安全、可维护和易于理解的代码，提高软件的质量和可维护性。\"]},\"1572\":{\"h\":\"接口\",\"t\":[\"接口（Interface）是 Java 的一个核心概念，用于定义类应该遵循的契约或行为规范。接口提供了一种机制，让类可以实现这些规范，并通过接口类型的引用来操作这些实现。接口是实现多态的一种重要方式，也是 Java 支持抽象和解耦的工具。\"]},\"1573\":{\"h\":\"1.\",\"t\":[\"接口可以包含抽象方法和默认方法（Java 8 及以后版本），用于定义类应实现的行为规范。接口不能被实例化，只能被实现（implement）。\"]},\"1574\":{\"h\":\"1.1\",\"t\":[\"使用 interface 关键字声明一个接口。\",\"接口中的方法默认为 public 和 abstract，即使没有明确声明。接口中的变量默认为 public static final。\"]},\"1575\":{\"h\":\"1.2\",\"t\":[\"interface Drawable { // 抽象方法 void draw(); }\"]},\"1576\":{\"h\":\"2.\",\"t\":[\"类使用 implements 关键字来实现一个或多个接口，并提供接口中定义的抽象方法的具体实现。\"]},\"1577\":{\"h\":\"2.1\",\"t\":[\"class Circle implements Drawable { @Override public void draw() { System.out.println(\\\"Drawing a circle.\\\"); } } class Rectangle implements Drawable { @Override public void draw() { System.out.println(\\\"Drawing a rectangle.\\\"); } }\",\"在这个例子中，Circle 和 Rectangle 类实现了 Drawable 接口，并提供了 draw 方法的具体实现。\"]},\"1578\":{\"h\":\"3.\",\"t\":[\"从 Java 8 开始，接口可以包含默认方法，这些方法有具体实现，允许接口提供默认的行为。这样，即使接口在将来添加新方法，也不会破坏现有的实现类。\"]},\"1579\":{\"h\":\"3.1\",\"t\":[\"interface Drawable { void draw(); // 抽象方法 // 默认方法 default void print() { System.out.println(\\\"Printing...\\\"); } } class Circle implements Drawable { @Override public void draw() { System.out.println(\\\"Drawing a circle.\\\"); } } public class Main { public static void main(String[] args) { Circle circle = new Circle(); circle.draw(); // 输出: Drawing a circle. circle.print(); // 输出: Printing... } }\",\"在这个例子中，Drawable 接口包含一个默认方法 print，Circle 类实现了接口并可以使用这个默认方法。\"]},\"1580\":{\"h\":\"4.\",\"t\":[\"接口还可以包含静态方法，这些方法不能被实现类重写或覆盖，只能通过接口调用。\"]},\"1581\":{\"h\":\"4.1\",\"t\":[\"interface Drawable { void draw(); // 抽象方法 // 静态方法 static void info() { System.out.println(\\\"This is a Drawable interface.\\\"); } } public class Main { public static void main(String[] args) { // 调用接口的静态方法 Drawable.info(); // 输出: This is a Drawable interface. } }\"]},\"1582\":{\"h\":\"5.\",\"t\":[\"一个接口可以继承多个接口，这使得接口可以组合不同的行为规范。实现类必须实现所有继承的接口的方法。\"]},\"1583\":{\"h\":\"5.1\",\"t\":[\"interface Shape { void draw(); } interface Colorable { void color(); } class Circle implements Shape, Colorable { @Override public void draw() { System.out.println(\\\"Drawing a circle.\\\"); } @Override public void color() { System.out.println(\\\"Coloring the circle.\\\"); } } public class Main { public static void main(String[] args) { Circle circle = new Circle(); circle.draw(); // 输出: Drawing a circle. circle.color(); // 输出: Coloring the circle. } }\"]},\"1584\":{\"h\":\"6.\",\"t\":[\"接口：\",\"只能包含抽象方法和常量（Java 8 及以后可以有默认方法和静态方法）。\",\"一个类可以实现多个接口，实现多重继承的功能。\",\"主要用于定义行为的契约。\",\"抽象类：\",\"可以包含抽象方法和非抽象方法。\",\"不能直接实例化。\",\"支持构造函数和成员变量。\",\"主要用于代码重用和提供共同的基础功能。\"]},\"1585\":{\"h\":\"7.\",\"t\":[\"定义规范：接口用于定义类需要遵循的行为规范。\",\"实现多态：通过接口引用不同的实现类，实现多态。\",\"解耦：通过接口实现模块间的解耦，使得代码更灵活和可扩展。\"]},\"1586\":{\"h\":\"内部类\",\"t\":[\"在Java中，内部类（Inner Class）是定义在另一个类中的类。内部类允许将逻辑上相关的类进行分组，同时还可以方便地访问外部类的成员。Java内部类有四种主要类型：\",\"成员内部类（非静态内部类）\",\"静态内部类（静态嵌套类）\",\"局部内部类\",\"匿名内部类\"]},\"1587\":{\"h\":\"1. 成员内部类（非静态内部类）\",\"t\":[\"成员内部类是在一个类的内部定义的类，但在静态上下文之外。成员内部类可以访问外部类的所有成员，包括私有成员。\"]},\"1588\":{\"h\":\"1.1 定义成员内部类\",\"t\":[\"class OuterClass { private String outerField = \\\"Outer Field\\\"; // 成员内部类 class InnerClass { void display() { System.out.println(\\\"Accessing outer field: \\\" + outerField); } } } public class Main { public static void main(String[] args) { OuterClass outer = new OuterClass(); OuterClass.InnerClass inner = outer.new InnerClass(); // 创建内部类实例 inner.display(); // 输出: Accessing outer field: Outer Field } }\",\"在这个例子中：\",\"InnerClass是OuterClass的成员内部类。\",\"内部类InnerClass可以访问外部类的私有字段outerField。\"]},\"1589\":{\"h\":\"1.2 成员内部类的特性\",\"t\":[\"可以访问外部类的所有成员（包括私有成员）。\",\"必须先创建外部类的实例，然后才能创建内部类的实例。\",\"内部类的实例使用语法：OuterClass.InnerClass inner = outer.new InnerClass();。\"]},\"1590\":{\"h\":\"2. 静态内部类（静态嵌套类）\",\"t\":[\"静态内部类是使用static关键字修饰的内部类。它不依赖于外部类的实例，因此不能访问外部类的非静态成员。\"]},\"1591\":{\"h\":\"2.1 定义静态内部类\",\"t\":[\"class OuterClass { private static String outerStaticField = \\\"Outer Static Field\\\"; // 静态内部类 static class StaticInnerClass { void display() { System.out.println(\\\"Accessing outer static field: \\\" + outerStaticField); } } } public class Main { public static void main(String[] args) { OuterClass.StaticInnerClass inner = new OuterClass.StaticInnerClass(); // 创建静态内部类实例 inner.display(); // 输出: Accessing outer static field: Outer Static Field } }\",\"在这个例子中：\",\"StaticInnerClass是OuterClass的静态内部类。\",\"静态内部类StaticInnerClass可以访问外部类的静态字段outerStaticField，但不能访问非静态字段。\"]},\"1592\":{\"h\":\"2.2 静态内部类的特性\",\"t\":[\"不能直接访问外部类的非静态成员。\",\"可以不创建外部类的实例而直接创建静态内部类的实例。\",\"静态内部类的实例使用语法：OuterClass.StaticInnerClass inner = new OuterClass.StaticInnerClass();。\"]},\"1593\":{\"h\":\"3. 局部内部类\",\"t\":[\"局部内部类是定义在方法或代码块中的类。它的作用范围仅限于定义它的块内。\"]},\"1594\":{\"h\":\"3.1 定义局部内部类\",\"t\":[\"class OuterClass { void display() { // 局部内部类 class LocalInnerClass { void print() { System.out.println(\\\"This is a local inner class.\\\"); } } LocalInnerClass local = new LocalInnerClass(); // 创建局部内部类实例 local.print(); // 输出: This is a local inner class. } } public class Main { public static void main(String[] args) { OuterClass outer = new OuterClass(); outer.display(); } }\",\"在这个例子中：\",\"LocalInnerClass是定义在display()方法中的局部内部类。\",\"局部内部类LocalInnerClass只能在display()方法内部使用。\"]},\"1595\":{\"h\":\"3.2 局部内部类的特性\",\"t\":[\"作用范围仅限于定义它的方法或代码块内。\",\"可以访问外部类的成员和方法中声明为final的局部变量（Java 8 之后可以访问有效最终变量）。\",\"局部内部类不能有static成员。\"]},\"1596\":{\"h\":\"4. 匿名内部类\",\"t\":[\"匿名内部类是没有名字的局部内部类。它通常用于实现接口的实例，或者继承自某个类的子类实例。匿名内部类在创建时即定义并实例化。\"]},\"1597\":{\"h\":\"4.1 定义匿名内部类\",\"t\":[\"interface Animal { void makeSound(); } public class Main { public static void main(String[] args) { // 使用匿名内部类实现接口 Animal dog = new Animal() { @Override public void makeSound() { System.out.println(\\\"Woof\\\"); } }; dog.makeSound(); // 输出: Woof } }\",\"在这个例子中：\",\"Animal接口被一个匿名内部类实现。\",\"匿名内部类在new关键字后立即定义并实例化。\"]},\"1598\":{\"h\":\"4.2 匿名内部类的特性\",\"t\":[\"没有构造函数，因为它没有类名。\",\"只能实例化一次。\",\"只能用来重写现有类或接口的方法。\"]},\"1599\":{\"h\":\"5. 使用内部类的好处\",\"t\":[\"逻辑分组：内部类可以很好地组织代码，将逻辑上相关的类封装在一起，增强代码的可读性和可维护性。\",\"封装性：内部类可以访问外部类的私有成员，外部类可以控制内部类的可见性。\",\"简化代码：匿名内部类使得创建简单类的实例变得方便，减少了代码冗余。\"]},\"1600\":{\"h\":\"6. 内部类的使用注意事项\",\"t\":[\"避免滥用：虽然内部类可以提高代码的封装性，但使用过多的内部类会增加代码的复杂度，应根据具体情况谨慎使用。\",\"避免内存泄漏：非静态内部类持有外部类的引用，如果生命周期不一致，可能会导致内存泄漏。静态内部类通常不会有这个问题。\",\"调试困难：内部类特别是匿名内部类，可能会让代码调试变得更加复杂。\"]},\"1601\":{\"h\":\"总结\",\"t\":[\"Java的内部类提供了一种将逻辑上相关的类组织在一起的方式，增强了封装性和代码可读性。不同类型的内部类适用于不同的场景，开发者应根据具体需求选择合适的内部类类型来实现功能。\"]},\"1602\":{\"h\":\"枚举\",\"t\":[\"枚举（Enumeration）是 Java 中的一种特殊类型，用于定义一组常量。枚举提供了一种类型安全的方式来表示有限的、固定的集合值。它比传统的 int 常量更具可读性和类型安全性。\"]},\"1603\":{\"h\":\"1.\",\"t\":[\"在 Java 中，枚举类使用 enum 关键字声明。每个枚举值实际上是枚举类的一个实例。枚举类可以包含字段、方法和构造函数。\"]},\"1604\":{\"h\":\"1.1\",\"t\":[\"enum Day { SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY }\"]},\"1605\":{\"h\":\"2.\",\"t\":[\"枚举可以用于控制流语句、作为方法的参数和返回值等场景。枚举的每个实例都是该枚举类型的唯一实例。\"]},\"1606\":{\"h\":\"2.1\",\"t\":[\"public class Main { public static void main(String[] args) { Day today = Day.MONDAY; switch (today) { case MONDAY: System.out.println(\\\"Start of the work week\\\"); break; case FRIDAY: System.out.println(\\\"End of the work week\\\"); break; case SATURDAY: case SUNDAY: System.out.println(\\\"Weekend\\\"); break; default: System.out.println(\\\"Midweek\\\"); break; } } }\"]},\"1607\":{\"h\":\"3.\",\"t\":[\"枚举可以包含字段、方法和构造函数。构造函数在枚举的每个常量实例创建时被调用。\"]},\"1608\":{\"h\":\"3.1\",\"t\":[\"enum Day { SUNDAY(\\\"Weekend\\\"), MONDAY(\\\"Weekday\\\"), TUESDAY(\\\"Weekday\\\"), WEDNESDAY(\\\"Weekday\\\"), THURSDAY(\\\"Weekday\\\"), FRIDAY(\\\"Weekday\\\"), SATURDAY(\\\"Weekend\\\"); private final String type; Day(String type) { this.type = type; } public String getType() { return type; } } public class Main { public static void main(String[] args) { for (Day day : Day.values()) { System.out.println(day + \\\" is a \\\" + day.getType()); } } }\"]},\"1609\":{\"h\":\"4.\",\"t\":[\"values()：返回一个包含所有枚举常量的数组。\",\"valueOf(String name)：根据名字返回对应的枚举常量。\",\"name()：返回枚举常量的名字。\",\"ordinal()：返回枚举常量的序号（从 0 开始）。\"]},\"1610\":{\"h\":\"4.1\",\"t\":[\"public class Main { public static void main(String[] args) { // 使用 values() 方法 for (Day day : Day.values()) { System.out.println(day + \\\" is at position \\\" + day.ordinal()); } // 使用 valueOf() 方法 Day day = Day.valueOf(\\\"FRIDAY\\\"); System.out.println(day + \\\" is a \\\" + day.getType()); } }\"]},\"1611\":{\"h\":\"5.\",\"t\":[\"实现接口：枚举可以实现接口，以提供特定的行为。\"]},\"1612\":{\"h\":\"5.1\",\"t\":[\"interface Describable { String getDescription(); } enum Day implements Describable { SUNDAY(\\\"Weekend\\\"), MONDAY(\\\"Weekday\\\"), TUESDAY(\\\"Weekday\\\"), WEDNESDAY(\\\"Weekday\\\"), THURSDAY(\\\"Weekday\\\"), FRIDAY(\\\"Weekday\\\"), SATURDAY(\\\"Weekend\\\"); private final String description; Day(String description) { this.description = description; } @Override public String getDescription() { return description; } } public class Main { public static void main(String[] args) { for (Day day : Day.values()) { System.out.println(day + \\\" is a \\\" + day.getDescription()); } } }\"]},\"1613\":{\"h\":\"6.\",\"t\":[\"使用枚举代替常量：枚举比传统的 int 常量更具类型安全性和可读性。\",\"提供自定义方法：可以为枚举定义方法来处理与常量相关的行为。\",\"实现接口：可以通过实现接口来为枚举提供额外的功能和描述。\"]},\"1614\":{\"h\":\"7.\",\"t\":[\"在与数据库交互时，枚举可以用来表示固定的、有限的状态或类别。将枚举映射到数据库字段时，可以存储其名称或序号，并在程序中进行转换。\"]},\"1615\":{\"h\":\"总结\",\"t\":[\"枚举在 Java 中提供了一种强类型的方式来表示一组固定的常量，具有良好的可读性和可维护性。\"]},\"1616\":{\"h\":\"包\",\"t\":[\"在 Java 中，包（Package）是一种用于组织类和接口的机制。包可以帮助你组织项目结构，避免命名冲突，提高代码的可维护性和可读性。\"]},\"1617\":{\"h\":\"1.\",\"t\":[\"组织结构：包将相关的类、接口、枚举等组织在一起，使得项目的结构更加清晰。\",\"命名空间：包提供了命名空间的功能，可以避免不同包中的类名冲突。\",\"访问控制：包可以控制类和成员的访问级别，帮助实现封装。\"]},\"1618\":{\"h\":\"2.\",\"t\":[\"在 Java 中，包的创建通过 package 关键字来实现。包声明通常是 Java 文件的第一行。\"]},\"1619\":{\"h\":\"2.1\",\"t\":[\"package com.example.myapp; public class MyClass { public void display() { System.out.println(\\\"Hello from MyClass in com.example.myapp package.\\\"); } }\"]},\"1620\":{\"h\":\"3.\",\"t\":[\"要使用其他包中的类，需要导入这些类。可以使用 import 关键字来导入类或整个包。\"]},\"1621\":{\"h\":\"3.1\",\"t\":[\"import com.example.myapp.MyClass; public class Main { public static void main(String[] args) { MyClass myClass = new MyClass(); myClass.display(); } }\"]},\"1622\":{\"h\":\"3.2\",\"t\":[\"import com.example.myapp.*; public class Main { public static void main(String[] args) { MyClass myClass = new MyClass(); myClass.display(); } }\"]},\"1623\":{\"h\":\"4.\",\"t\":[\"包级别的访问控制可以限制类和成员的访问范围：\",\"public：类或成员对所有其他类可见。\",\"protected：类成员对同一包中的类及其子类可见。\",\"default（没有修饰符）：类或成员对同一包中的其他类可见。\",\"private：类成员对定义它的类可见。\"]},\"1624\":{\"h\":\"4.1\",\"t\":[\"package com.example.myapp; class PackageClass { // package-private access void display() { System.out.println(\\\"Hello from PackageClass.\\\"); } }\",\"package com.example.main; import com.example.myapp.PackageClass; public class Main { public static void main(String[] args) { PackageClass pkgClass = new PackageClass(); // 编译错误，因为 PackageClass 是 package-private pkgClass.display(); } }\"]},\"1625\":{\"h\":\"5.\",\"t\":[\"包通常与文件系统中的目录结构对应。一个包 com.example.myapp 应该在文件系统中对应到 com/example/myapp 目录。\"]},\"1626\":{\"h\":\"5.1\",\"t\":[\"src/ └── com/ └── example/ └── myapp/ └── MyClass.java └── com/ └── example/ └── main/ └── Main.java\"]},\"1627\":{\"h\":\"6.\",\"t\":[\"在编译和运行 Java 程序时，classpath 用于指定包的位置。你可以通过 -cp 或 -classpath 选项来设置类路径。\"]},\"1628\":{\"h\":\"6.1\",\"t\":[\"javac -d bin src/com/example/myapp/MyClass.java src/com/example/main/Main.java\",\"-d 选项指定输出目录 bin，将编译后的 .class 文件放置在相应的包目录结构下。\"]},\"1629\":{\"h\":\"6.2\",\"t\":[\"java -cp bin com.example.main.Main\",\"-cp 选项指定类路径 bin，用于查找 .class 文件。\"]},\"1630\":{\"h\":\"7.\",\"t\":[\"Java 标准库提供了许多常用的包，例如：\",\"java.lang：包含核心类，如 String、Math、Object 等。\",\"java.util：包含集合框架、日期时间 API 等。\",\"java.io：提供输入和输出流的类。\",\"java.nio：提供 NIO（New I/O）功能的类。\"]},\"1631\":{\"h\":\"8.\",\"t\":[\"规范命名：使用唯一的包名，通常使用公司域名的反向形式作为前缀，如 com.example.project。\",\"组织代码：根据功能或模块组织代码，保持包结构清晰。\",\"控制访问：合理使用访问修饰符，确保封装性和代码的安全性。\"]},\"1632\":{\"h\":\"总结\",\"t\":[\"包是 Java 中组织代码的基本单位，通过包可以将相关的类和接口组织在一起，避免命名冲突，控制访问级别，并提高代码的可维护性。理解和合理使用包可以帮助你设计结构良好的 Java 应用程序。\"]},\"1633\":{\"h\":\"反射\",\"t\":[\"反射（Reflection）是 Java 提供的一种机制，允许程序在运行时检查和操作类、方法、字段和构造函数等信息。反射使得 Java 程序能够动态地访问和修改对象的属性和方法，而不需要在编译时知道具体的类和对象。这在许多情况下非常有用，例如框架的设计、动态代理、测试工具等。\"]},\"1634\":{\"h\":\"1.\",\"t\":[\"Class 对象：每个 Java 类都有一个对应的 Class 对象，可以通过这个对象获取类的元数据（例如，类的方法、字段等）。\",\"动态访问：可以在运行时创建对象、调用方法和访问字段，而不需要在编译时知道这些信息。\",\"元数据：反射允许你获取类的结构信息，如构造函数、字段、方法等。\"]},\"1635\":{\"h\":\"2.\",\"t\":[\"有几种方法可以获取一个类的 Class 对象：\"]},\"1636\":{\"h\":\"2.1\",\"t\":[\"Class<?> clazz = Class.forName(\\\"com.example.MyClass\\\");\"]},\"1637\":{\"h\":\"2.2\",\"t\":[\"Class<?> clazz = MyClass.class;\"]},\"1638\":{\"h\":\"2.3\",\"t\":[\"MyClass obj = new MyClass(); Class<?> clazz = obj.getClass();\"]},\"1639\":{\"h\":\"3.\",\"t\":[\"通过反射，可以动态地创建类的实例：\",\"Class<?> clazz = Class.forName(\\\"com.example.MyClass\\\"); Object obj = clazz.getDeclaredConstructor().newInstance();\"]},\"1640\":{\"h\":\"4.\",\"t\":[\"可以通过反射访问和修改对象的字段：\"]},\"1641\":{\"h\":\"4.1\",\"t\":[\"Field field = clazz.getDeclaredField(\\\"myField\\\"); field.setAccessible(true); // 如果字段是私有的，必须调用 setAccessible(true)\"]},\"1642\":{\"h\":\"4.2\",\"t\":[\"// 读取字段值 Object value = field.get(obj); // 修改字段值 field.set(obj, newValue);\"]},\"1643\":{\"h\":\"5.\",\"t\":[\"可以通过反射调用对象的方法：\"]},\"1644\":{\"h\":\"5.1\",\"t\":[\"Method method = clazz.getDeclaredMethod(\\\"myMethod\\\", String.class); method.setAccessible(true); // 如果方法是私有的，必须调用 setAccessible(true)\"]},\"1645\":{\"h\":\"5.2\",\"t\":[\"// 调用方法 Object result = method.invoke(obj, \\\"parameterValue\\\");\"]},\"1646\":{\"h\":\"6.\",\"t\":[\"可以通过反射访问和调用构造函数：\"]},\"1647\":{\"h\":\"6.1\",\"t\":[\"Constructor<?> constructor = clazz.getDeclaredConstructor(String.class); constructor.setAccessible(true); // 如果构造函数是私有的\"]},\"1648\":{\"h\":\"6.2\",\"t\":[\"Object obj = constructor.newInstance(\\\"constructorParameter\\\");\"]},\"1649\":{\"h\":\"7.\",\"t\":[\"动态代理：通过反射可以创建动态代理对象，这在实现 AOP（面向切面编程）和其他中间件技术中非常有用。\",\"框架和库：许多框架（如 Spring、Hibernate）使用反射来动态处理对象和配置。\",\"测试工具：测试框架（如 JUnit）使用反射来访问私有成员并执行测试。\"]},\"1650\":{\"h\":\"8.\",\"t\":[\"性能开销：反射操作通常比直接代码调用要慢，因为它涉及到动态解析。\",\"安全性：反射可以绕过封装，访问和修改私有字段和方法，这可能会引发安全问题。\",\"维护性：使用反射的代码较难阅读和维护，因为它不明确地显示出程序的结构。\"]},\"1651\":{\"h\":\"9.\",\"t\":[\"以下是一个使用反射的示例，它演示了如何创建对象、访问字段和调用方法：\",\"package com.example; import java.lang.reflect.Field; import java.lang.reflect.Method; public class ReflectionExample { private String secret = \\\"hidden\\\"; private void displaySecret() { System.out.println(\\\"Secret: \\\" + secret); } public static void main(String[] args) throws Exception { // 获取 Class 对象 Class<?> clazz = Class.forName(\\\"com.example.ReflectionExample\\\"); // 创建对象实例 Object obj = clazz.getDeclaredConstructor().newInstance(); // 访问私有字段 Field field = clazz.getDeclaredField(\\\"secret\\\"); field.setAccessible(true); System.out.println(\\\"Secret before modification: \\\" + field.get(obj)); // 修改私有字段 field.set(obj, \\\"newSecret\\\"); System.out.println(\\\"Secret after modification: \\\" + field.get(obj)); // 调用私有方法 Method method = clazz.getDeclaredMethod(\\\"displaySecret\\\"); method.setAccessible(true); method.invoke(obj); } }\"]},\"1652\":{\"h\":\"总结\",\"t\":[\"反射是 Java 的一种强大特性，可以在运行时动态地操作类和对象。尽管它提供了灵活性，但也带来了性能开销和安全风险。因此，在使用反射时，应谨慎对待，确保代码的安全性和可维护性。\"]},\"1653\":{\"h\":\"Java面向对象实践\",\"t\":[\"下面是一个 Java 面向对象的实践示例，综合了包、类、继承、接口、封装、枚举、反射等知识点。这个示例展示了一个简单的图书管理系统，包括图书的创建、分类、以及使用反射来动态访问和操作这些对象。\"]},\"1654\":{\"h\":\"1.\",\"t\":[\"首先，定义一个包 com.example.library，并在包内创建几个类和接口。\",\"// 文件路径: src/com/example/library/Book.java package com.example.library; public class Book { private String title; private String author; private BookType type; public Book(String title, String author, BookType type) { this.title = title; this.author = author; this.type = type; } public String getTitle() { return title; } public String getAuthor() { return author; } public BookType getType() { return type; } @Override public String toString() { return \\\"Book{\\\" + \\\"title='\\\" + title + '\\\\'' + \\\", author='\\\" + author + '\\\\'' + \\\", type=\\\" + type + '}'; } }\",\"// 文件路径: src/com/example/library/BookType.java package com.example.library; public enum BookType { FICTION, NON_FICTION, SCIENCE, HISTORY }\",\"// 文件路径: src/com/example/library/Readable.java package com.example.library; public interface Readable { void read(); }\",\"// 文件路径: src/com/example/library/EBook.java package com.example.library; public class EBook extends Book implements Readable { private String format; public EBook(String title, String author, BookType type, String format) { super(title, author, type); this.format = format; } public String getFormat() { return format; } @Override public void read() { System.out.println(\\\"Reading eBook in \\\" + format + \\\" format.\\\"); } @Override public String toString() { return super.toString() + \\\", EBook{\\\" + \\\"format='\\\" + format + '\\\\'' + '}'; } }\",\"// 文件路径: src/com/example/library/PrintedBook.java package com.example.library; public class PrintedBook extends Book { private int pages; public PrintedBook(String title, String author, BookType type, int pages) { super(title, author, type); this.pages = pages; } public int getPages() { return pages; } @Override public String toString() { return super.toString() + \\\", PrintedBook{\\\" + \\\"pages=\\\" + pages + '}'; } }\"]},\"1655\":{\"h\":\"2.\",\"t\":[\"创建一个主类来演示如何使用这些类和接口，并展示如何使用反射来操作这些对象。\",\"// 文件路径: src/com/example/library/Main.java package com.example.library; import java.lang.reflect.Field; import java.lang.reflect.Method; public class Main { public static void main(String[] args) throws Exception { // 创建对象实例 EBook eBook = new EBook(\\\"Digital Fortress\\\", \\\"Dan Brown\\\", BookType.FICTION, \\\"PDF\\\"); PrintedBook printedBook = new PrintedBook(\\\"Sapiens\\\", \\\"Yuval Noah Harari\\\", BookType.HISTORY, 443); // 打印对象信息 System.out.println(eBook); System.out.println(printedBook); // 使用接口方法 eBook.read(); // 使用反射来访问和修改字段 Class<?> ebookClass = eBook.getClass(); Field formatField = ebookClass.getDeclaredField(\\\"format\\\"); formatField.setAccessible(true); System.out.println(\\\"Original format: \\\" + formatField.get(eBook)); // 修改字段值 formatField.set(eBook, \\\"EPUB\\\"); System.out.println(\\\"Updated format: \\\" + formatField.get(eBook)); // 调用方法 Method readMethod = ebookClass.getMethod(\\\"read\\\"); readMethod.invoke(eBook); } }\"]},\"1656\":{\"h\":\"3.\"},\"1657\":{\"h\":\"3.1\",\"t\":[\"javac -d bin src/com/example/library/*.java\"]},\"1658\":{\"h\":\"3.2\",\"t\":[\"java -cp bin com.example.library.Main\"]},\"1659\":{\"h\":\"总结\",\"t\":[\"这个示例涵盖了以下知识点：\",\"包：组织代码文件。\",\"类和继承：定义 Book 类及其子类 EBook 和 PrintedBook。\",\"接口：定义 Readable 接口并在 EBook 中实现。\",\"封装：通过 private 和 public 访问控制来保护类的内部状态。\",\"枚举：定义 BookType 枚举来表示图书类型。\",\"反射：使用反射动态访问和修改字段，调用方法。\",\"下面是一个简单的Java面向对象编程（OOP）实践项目示例，该项目模拟了一个图书管理系统，涵盖了面向对象的核心知识点，如类、对象、继承、封装、多态和接口。\"]},\"1660\":{\"h\":\"项目概述\",\"t\":[\"图书管理系统：\",\"用户可以创建图书对象、添加图书到库存、借阅图书和查看库存中的图书。\",\"图书分为两类：普通图书和参考书。参考书无法被借出。\"]},\"1661\":{\"h\":\"Java代码示例\",\"t\":[\"// 定义一个接口，用于表示可以借阅的书籍 interface Borrowable { void borrowBook(); void returnBook(); } // 定义基类Book，包含书籍的基本属性 class Book { private String title; private String author; private int publicationYear; // 构造方法 public Book(String title, String author, int publicationYear) { this.title = title; this.author = author; this.publicationYear = publicationYear; } // 获取书籍标题 public String getTitle() { return title; } // 显示书籍信息 public void displayInfo() { System.out.println(\\\"Title: \\\" + title); System.out.println(\\\"Author: \\\" + author); System.out.println(\\\"Publication Year: \\\" + publicationYear); } } // 普通图书类，继承自Book，并实现Borrowable接口 class RegularBook extends Book implements Borrowable { private boolean isBorrowed; public RegularBook(String title, String author, int publicationYear) { super(title, author, publicationYear); this.isBorrowed = false; } @Override public void borrowBook() { if (isBorrowed) { System.out.println(getTitle() + \\\" is already borrowed.\\\"); } else { isBorrowed = true; System.out.println(getTitle() + \\\" has been borrowed.\\\"); } } @Override public void returnBook() { if (!isBorrowed) { System.out.println(getTitle() + \\\" was not borrowed.\\\"); } else { isBorrowed = false; System.out.println(getTitle() + \\\" has been returned.\\\"); } } @Override public void displayInfo() { super.displayInfo(); System.out.println(\\\"Borrowed: \\\" + (isBorrowed ? \\\"Yes\\\" : \\\"No\\\")); } } // 参考书类，继承自Book，但不可借阅 class ReferenceBook extends Book { public ReferenceBook(String title, String author, int publicationYear) { super(title, author, publicationYear); } @Override public void displayInfo() { super.displayInfo(); System.out.println(\\\"This is a reference book and cannot be borrowed.\\\"); } } // 图书库存类，用于管理图书集合 class Library { private List<Book> books; public Library() { books = new ArrayList<>(); } // 添加书籍到库存 public void addBook(Book book) { books.add(book); System.out.println(book.getTitle() + \\\" added to the library.\\\"); } // 展示库存中的所有书籍 public void displayBooks() { System.out.println(\\\"Books in the library:\\\"); for (Book book : books) { book.displayInfo(); System.out.println(); } } // 借阅指定书籍 public void borrowBook(Borrowable book) { book.borrowBook(); } // 归还指定书籍 public void returnBook(Borrowable book) { book.returnBook(); } } // 主类，用于测试图书管理系统 public class LibraryManagementSystem { public static void main(String[] args) { Library library = new Library(); // 创建图书对象 RegularBook book1 = new RegularBook(\\\"Java Programming\\\", \\\"John Doe\\\", 2020); ReferenceBook book2 = new ReferenceBook(\\\"Encyclopedia\\\", \\\"Jane Smith\\\", 2018); // 添加图书到库存 library.addBook(book1); library.addBook(book2); // 显示库存中的书籍 library.displayBooks(); // 借阅和归还书籍 library.borrowBook(book1); library.returnBook(book1); // 尝试借阅参考书 library.borrowBook((Borrowable) book2); // 这行代码会报错，因为ReferenceBook不能被借阅 } }\"]},\"1662\":{\"h\":\"代码说明\",\"t\":[\"类和对象：Book类是图书的基类，RegularBook和ReferenceBook是继承自Book的子类。Library类用于管理书籍的集合。\",\"继承：RegularBook和ReferenceBook类通过extends关键字继承自Book类，复用了书籍的基本属性和方法。\",\"封装：书籍的属性（如title、author等）使用private修饰符进行封装，提供public的getter方法获取数据。\",\"多态：通过Borrowable接口实现多态，RegularBook类实现了该接口，并提供了具体的借阅和归还方法。\",\"接口：Borrowable接口定义了可以借阅的行为，RegularBook类实现了这个接口。参考书类ReferenceBook由于不实现Borrowable接口，因此无法被借阅。\"]},\"1663\":{\"h\":\"运行结果\",\"t\":[\"执行代码后，会看到如下输出：\",\"Java Programming added to the library. Encyclopedia added to the library. Books in the library: Title: Java Programming Author: John Doe Publication Year: 2020 Borrowed: No Title: Encyclopedia Author: Jane Smith Publication Year: 2018 This is a reference book and cannot be borrowed. Java Programming has been borrowed. Java Programming has been returned.\",\"通过这个示例，涵盖了Java面向对象编程中的核心概念，适合作为学习OOP的入门项目。\"]},\"1664\":{\"h\":\"Java Object类\",\"t\":[\"Java Object 类是所有类的父类，也就是说 Java 的所有类都继承了 Object，子类可以使用 Object 的所有方法。 java.lang.Object 类是 Java 语言中所有类的根类，所有类都直接或间接继承自 Object 类。它提供了一组基本的方法，这些方法在所有 Java 对象中都是可用的。这些方法包括对象比较、哈希码生成、对象克隆、线程同步等功能。\",\"本文将详细介绍 Object 类的作用、常用方法及其使用方式。\"]},\"1665\":{\"h\":\"1.\",\"t\":[\"继承关系的根源：所有 Java 类都默认继承自 Object 类，如果一个类没有显式地继承其他类，那么它会自动继承自 Object。\",\"提供通用方法：Object 类提供了一组基本的方法，这些方法在所有 Java 对象中都是可用的，提供了对象之间基本交互的能力。\",\"多态性的支持：由于所有类都继承自 Object，因此可以在需要通用对象类型的地方使用 Object 引用，从而实现多态性。\"]},\"1666\":{\"h\":\"2.\"},\"1667\":{\"h\":\"2.1\",\"t\":[\"作用：返回对象的字符串表示形式。默认实现返回类的全限定名和对象的哈希码。\",\"方法签名：\",\"public String toString()\",\"默认实现：\",\"public String toString() { return getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode()); }\",\"用途：\",\"在打印对象时自动调用 toString() 方法。\",\"提供对象的可读性表示，便于调试和日志记录。\",\"示例：\",\"public class Person { private String name; private int age; // 构造函数和其他方法 @Override public String toString() { return \\\"Person{name='\\\" + name + \\\"', age=\\\" + age + \\\"}\\\"; } } public class Main { public static void main(String[] args) { Person person = new Person(\\\"Alice\\\", 30); System.out.println(person); // 输出：Person{name='Alice', age=30} } }\"]},\"1668\":{\"h\":\"2.2\",\"t\":[\"作用：比较两个对象是否“相等”。默认实现比较对象的引用是否指向同一对象。\",\"方法签名：\",\"public boolean equals(Object obj)\",\"默认实现：\",\"public boolean equals(Object obj) { return (this == obj); }\",\"用途：\",\"判断两个对象的内容是否相等，而不仅仅是引用是否相同。\",\"在集合（如 HashMap、HashSet）中用于判断对象的唯一性。\",\"重写建议：\",\"当需要根据对象的属性来判断相等性时，应重写 equals() 方法。\",\"重写时需要满足自反性、对称性、传递性、一致性和非空性等原则。\",\"示例：\",\"public class Person { private String name; private int age; // 构造函数和其他方法 @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null || getClass() != obj.getClass()) return false; Person person = (Person) obj; return age == person.age && Objects.equals(name, person.name); } }\"]},\"1669\":{\"h\":\"2.3\",\"t\":[\"作用：返回对象的哈希码，用于在基于哈希的数据结构中定位对象，如 HashMap、HashSet。\",\"方法签名：\",\"public int hashCode()\",\"默认实现：\",\"返回对象的内存地址转换而来的整数。\",\"重写建议：\",\"当重写 equals() 方法时，必须相应地重写 hashCode() 方法。\",\"确保相等的对象具有相同的哈希码。\",\"示例：\",\"public class Person { private String name; private int age; // 构造函数和其他方法 @Override public int hashCode() { return Objects.hash(name, age); } }\"]},\"1670\":{\"h\":\"2.4\",\"t\":[\"作用：返回对象的运行时类对象，即 Class 对象。\",\"方法签名：\",\"public final Class<?> getClass()\",\"用途：\",\"获取对象的类信息，用于反射机制。\",\"判断对象的类型。\",\"示例：\",\"public class Main { public static void main(String[] args) { String str = \\\"Hello\\\"; Class<?> clazz = str.getClass(); System.out.println(clazz.getName()); // 输出：java.lang.String } }\"]},\"1671\":{\"h\":\"2.5\",\"t\":[\"作用：创建并返回对象的一个副本（浅拷贝）。\",\"方法签名：\",\"protected Object clone() throws CloneNotSupportedException\",\"默认实现：\",\"如果对象的类实现了 Cloneable 接口，clone() 方法返回对象的浅拷贝；否则抛出 CloneNotSupportedException。\",\"用途：\",\"创建对象的副本，避免直接操作原始对象。\",\"使用注意：\",\"需要实现 Cloneable 接口，并重写 clone() 方法。\",\"默认是浅拷贝，深拷贝需要手动实现。\",\"示例：\",\"public class Person implements Cloneable { private String name; private int age; // 构造函数和其他方法 @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } public class Main { public static void main(String[] args) throws CloneNotSupportedException { Person person1 = new Person(\\\"Alice\\\", 30); Person person2 = (Person) person1.clone(); System.out.println(person1 == person2); // 输出：false } }\"]},\"1672\":{\"h\":\"2.6\",\"t\":[\"作用：在垃圾收集器回收对象之前调用，用于清理资源。\",\"方法签名：\",\"protected void finalize() throws Throwable\",\"注意事项：\",\"不建议依赖 finalize() 方法进行资源清理，可能导致性能问题和不可预知的行为。\",\"从 Java 9 开始，finalize() 方法已被标记为过时，推荐使用 try-with-resources 或显式的资源管理。\",\"示例：\",\"@Deprecated protected void finalize() throws Throwable { try { // 清理代码 } finally { super.finalize(); } }\"]},\"1673\":{\"h\":\"2.7\",\"t\":[\"作用：用于线程间的通信和同步，必须在同步块或方法内使用。\",\"方法签名：\",\"public final void wait() throws InterruptedException public final void notify() public final void notifyAll()\",\"用途：\",\"wait()：使线程等待，直到被唤醒或被中断。\",\"notify()：唤醒等待该对象监视器的单个线程。\",\"notifyAll()：唤醒等待该对象监视器的所有线程。\",\"使用注意：\",\"必须在同步上下文（synchronized）中调用。\",\"正确处理多线程的同步和通信，避免死锁和线程安全问题。\",\"示例：\",\"public class ProducerConsumer { private final List<Integer> buffer = new LinkedList<>(); private final int LIMIT = 10; public void produce() throws InterruptedException { synchronized (this) { while (buffer.size() == LIMIT) { wait(); } buffer.add(new Random().nextInt()); notify(); } } public void consume() throws InterruptedException { synchronized (this) { while (buffer.isEmpty()) { wait(); } buffer.remove(0); notify(); } } }\"]},\"1674\":{\"h\":\"3.\",\"t\":[\"正确地重写 Object 类的方法可以提高代码的可读性、可靠性和性能。\"]},\"1675\":{\"h\":\"3.1\",\"t\":[\"目的：\",\"提供对象的可读性表示，方便调试和日志记录。\",\"建议：\",\"包含对象的关键字段信息。\",\"避免包含敏感信息（如密码）。\",\"可以使用 StringBuilder 或格式化字符串。\",\"示例：\",\"@Override public String toString() { return String.format(\\\"Person{name='%s', age=%d}\\\", name, age); }\"]},\"1676\":{\"h\":\"3.2\",\"t\":[\"目的：\",\"正确地比较对象的逻辑相等性。\",\"支持在集合（如 HashSet、HashMap）中的正确行为。\",\"重写原则：\",\"equals() 方法应满足：\",\"自反性：x.equals(x) 应返回 true。\",\"对称性：x.equals(y) 与 y.equals(x) 结果应相同。\",\"传递性：x.equals(y) 且 y.equals(z)，则 x.equals(z) 应为 true。\",\"一致性：多次调用结果应一致。\",\"非空性：x.equals(null) 应返回 false。\",\"hashCode() 方法应满足：\",\"一致性：同一对象多次调用应返回相同结果。\",\"等价性：如果 x.equals(y) 为 true，则 x.hashCode() == y.hashCode()。\",\"不要求不等的对象具有不同的哈希码，但不同的哈希码可以提高哈希表的性能。\",\"实现建议：\",\"使用 Objects.equals() 和 Objects.hash() 方法。\",\"考虑所有用于 equals() 判断的字段。\",\"避免使用易变的字段（即对象状态改变后哈希码也改变）。\",\"示例：\",\"public class Person { private String name; private int age; // 构造函数和其他方法 @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person = (Person) o; return age == person.age && Objects.equals(name, person.name); } @Override public int hashCode() { return Objects.hash(name, age); } }\"]},\"1677\":{\"h\":\"4.\",\"t\":[\"以下是一个综合示例，展示了如何正确重写 toString()、equals() 和 hashCode() 方法，以及使用 getClass() 和 clone() 方法。\",\"package com.example; import java.util.Objects; public class Employee implements Cloneable { private int id; private String name; private String department; public Employee(int id, String name, String department) { this.id = id; this.name = name; this.department = department; } // 重写 toString() 方法 @Override public String toString() { return String.format(\\\"Employee{id=%d, name='%s', department='%s'}\\\", id, name, department); } // 重写 equals() 方法 @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Employee employee = (Employee) o; return id == employee.id && Objects.equals(name, employee.name) && Objects.equals(department, employee.department); } // 重写 hashCode() 方法 @Override public int hashCode() { return Objects.hash(id, name, department); } // 重写 clone() 方法 @Override protected Employee clone() throws CloneNotSupportedException { return (Employee) super.clone(); } // 主方法 public static void main(String[] args) throws CloneNotSupportedException { Employee emp1 = new Employee(101, \\\"Alice\\\", \\\"Engineering\\\"); Employee emp2 = new Employee(101, \\\"Alice\\\", \\\"Engineering\\\"); // 使用 toString() System.out.println(emp1); // 输出：Employee{id=101, name='Alice', department='Engineering'} // 使用 equals() System.out.println(emp1.equals(emp2)); // 输出：true // 使用 hashCode() System.out.println(emp1.hashCode() == emp2.hashCode()); // 输出：true // 使用 getClass() System.out.println(emp1.getClass().getName()); // 输出：com.example.Employee // 使用 clone() Employee emp3 = emp1.clone(); System.out.println(emp3); // 输出：Employee{id=101, name='Alice', department='Engineering'} System.out.println(emp1 == emp3); // 输出：false } }\",\"输出结果：\",\"Employee{id=101, name='Alice', department='Engineering'} true true com.example.Employee Employee{id=101, name='Alice', department='Engineering'} false\"]},\"1678\":{\"h\":\"5.\",\"t\":[\"java.lang.Object 类作为 Java 中所有类的根类，提供了一组基础且重要的方法。这些方法在 Java 应用程序中起着关键作用，正确理解和使用这些方法对于编写高质量、健壮的代码至关重要。\",\"toString()：提供对象的字符串表示，便于调试和日志记录。\",\"equals() 和 hashCode()：用于对象的比较和在哈希结构中的使用，重写时需遵循严格的契约。\",\"getClass()：获取对象的运行时类信息，支持反射等高级特性。\",\"clone()：创建对象的副本，需要实现 Cloneable 接口并正确处理深浅拷贝。\",\"wait()、notify()、notifyAll()：用于线程同步和通信，必须在同步上下文中使用。\",\"在实际开发中，正确重写和使用这些方法，可以提高代码的可读性、性能和可靠性。同时，需要注意一些方法（如 finalize()）已被弃用，应采用更现代和安全的替代方案。\"]},\"1679\":{\"h\":\"Java Bean\",\"t\":[\"Java Bean 是一种符合特定约定的 Java 类，通常用于表示可重用的组件，尤其在 Java 企业级开发（如 JSP、JSF 和 Spring 框架）中广泛使用。Java Bean 提供了一种标准化的方法来定义类的属性、方法和事件。下面是关于 Java Bean 的详细介绍。\"]},\"1680\":{\"h\":\"Java Bean 的特征\",\"t\":[\"公有的无参构造方法：\",\"Java Bean 必须有一个公有的无参构造方法。这使得框架或工具可以轻松地实例化该类。\",\"public class Person { public Person() { // 无参构造方法 } }\",\"私有的属性（字段）：\",\"Java Bean 的属性通常是私有的（private），以保证封装性。\",\"public class Person { private String name; private int age; }\",\"公共的 getter 和 setter 方法：\",\"每个属性都应提供公共的 getter 和 setter 方法，以允许外部代码访问和修改这些属性。getter 方法用于获取属性值，setter 方法用于设置属性值。\",\"public class Person { private String name; private int age; // Getter 和 Setter 方法 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } }\",\"可序列化（Serializable）：\",\"Java Bean 通常需要实现 Serializable 接口，以便它的状态可以被序列化和反序列化。这在将 Bean 的实例保存到文件、通过网络传输或在分布式系统中传递时非常有用。\",\"import java.io.Serializable; public class Person implements Serializable { private String name; private int age; public Person() { // 无参构造方法 } // Getter 和 Setter 方法 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } }\"]},\"1681\":{\"h\":\"Java Bean 的用途\",\"t\":[\"数据传输：\",\"Java Bean 常用于在不同层（如控制器层和视图层）之间传输数据。它们封装了数据，并通过 getter 和 setter 方法来访问这些数据。\",\"组件开发：\",\"在 Java EE 中，Java Bean 被广泛用于开发可重用的组件。比如在 JSP 中，Bean 可以通过 <jsp:useBean> 标签引入，并通过 EL 表达式或 JSP 标签访问它的属性。\",\"ORM 框架：\",\"在持久化框架（如 Hibernate、JPA）中，Java Bean 通常作为实体类，用于映射到数据库中的表。每个属性对应表中的一列。\",\"Spring Framework：\",\"在 Spring 框架中，Java Bean 代表 Spring 容器管理的对象。通过配置文件或注解，Spring 容器可以自动创建、管理和注入 Bean。\"]},\"1682\":{\"h\":\"Java Bean 示例\",\"t\":[\"下面是一个简单的 Java Bean 示例，表示一个 Person 对象：\",\"import java.io.Serializable; public class Person implements Serializable { private String name; private int age; // 无参构造方法 public Person() {} // Getter 和 Setter 方法 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } // 重写 toString() 方法 @Override public String toString() { return \\\"Person [name=\\\" + name + \\\", age=\\\" + age + \\\"]\\\"; } }\",\"在使用时，你可以通过创建 Person 的实例，调用它的 getter 和 setter 方法来操作对象的属性：\",\"public class Main { public static void main(String[] args) { Person person = new Person(); person.setName(\\\"John\\\"); person.setAge(30); System.out.println(\\\"Name: \\\" + person.getName()); System.out.println(\\\"Age: \\\" + person.getAge()); } }\"]},\"1683\":{\"h\":\"总结\",\"t\":[\"Java Bean 是 Java 平台中一个非常重要的概念，特别是在企业级开发中。它提供了一种标准化的方式来定义和使用类，使得代码更加清晰、可维护，并且能够与各种框架和工具无缝集成。通过遵循 Java Bean 的规范，你可以开发出可重用、易于管理的组件。\"]},\"1684\":{\"h\":\"Lambda\",\"t\":[\"Java中的Lambda表达式是Java 8引入的一项功能，它使得可以更加简洁、清晰地编写代码，特别是在处理函数式接口时。Lambda表达式提供了一种简洁的方式来表示匿名函数，即一段可以传递并执行的代码。Lambda表达式在Java中主要用于简化对接口的实现，尤其是在处理集合框架和并发编程时，非常有用。\"]},\"1685\":{\"h\":\"1. Lambda表达式的语法\",\"t\":[\"Lambda表达式的基本语法如下：\",\"(parameters) -> expression\",\"或\",\"(parameters) -> { statements; }\",\"参数部分： 用于指定输入参数，可以没有参数（()）、一个参数（(x)）、或多个参数（(x, y)）。\",\"箭头符号 ->： 分隔参数和方法体。\",\"方法体： 包含了Lambda表达式要执行的代码，可以是单个表达式或代码块。\",\"示例：\",\"(int a, int b) -> a + b\",\"上面的Lambda表达式接受两个int类型的参数，返回它们的和。\"]},\"1686\":{\"h\":\"2. Lambda表达式与函数式接口\",\"t\":[\"Lambda表达式通常与函数式接口一起使用。函数式接口是只包含一个抽象方法的接口。Java提供了几个内置的函数式接口，例如Runnable、Callable、Comparator等。你也可以自定义自己的函数式接口。\",\"示例：\",\"@FunctionalInterface interface MathOperation { int operation(int a, int b); }\",\"这个接口是一个函数式接口，因为它只包含一个抽象方法operation。我们可以用Lambda表达式来实现这个接口。\",\"Lambda表达式实现：\",\"MathOperation addition = (int a, int b) -> a + b;\"]},\"1687\":{\"h\":\"3. 使用Lambda表达式的场景\"},\"1688\":{\"h\":\"3.1 使用 接口\",\"t\":[\"Runnable r1 = () -> System.out.println(\\\"Hello, Lambda!\\\"); new Thread(r1).start();\",\"上面的代码使用Lambda表达式实现了Runnable接口中的run方法，相较于传统匿名类的实现方式，代码更加简洁。\"]},\"1689\":{\"h\":\"3.2 使用 接口\",\"t\":[\"List<String> names = Arrays.asList(\\\"John\\\", \\\"Jane\\\", \\\"Adam\\\", \\\"Eve\\\"); // 使用 Lambda 表达式排序 Collections.sort(names, (String a, String b) -> a.compareTo(b));\",\"这个例子中，Lambda表达式实现了Comparator接口中的compare方法，用于对字符串列表进行排序。\"]},\"1690\":{\"h\":\"4. 方法引用（Method References）\",\"t\":[\"Java 8中引入的方法引用是一种更简洁的Lambda表达式写法。它用来直接引用已有的方法，而不需要写出Lambda表达式的完整形式。\",\"示例：\",\"// 使用 Lambda 表达式 Consumer<String> printer1 = s -> System.out.println(s); // 使用方法引用 Consumer<String> printer2 = System.out::println;\",\"方法引用可以引用静态方法、实例方法、或构造器。\"]},\"1691\":{\"h\":\"5. 内置函数式接口\",\"t\":[\"Java 8 提供了一些常用的函数式接口，以方便使用Lambda表达式：\",\"Predicate<T>：接收一个输入参数，返回一个布尔值结果。\",\"Consumer<T>：接收一个输入参数，不返回结果。\",\"Function<T, R>：接收一个输入参数，返回一个结果。\",\"Supplier<T>：不接收任何参数，返回一个结果。\",\"BinaryOperator<T>：接收两个相同类型的参数，返回一个相同类型的结果。\",\"示例：\",\"// 使用 Predicate 接口 Predicate<Integer> isPositive = x -> x > 0; // 使用 Function 接口 Function<String, Integer> stringLength = s -> s.length();\"]},\"1692\":{\"h\":\"6. 流与Lambda表达式\",\"t\":[\"在Java 8中，流（Streams）是一个非常强大的工具，它与Lambda表达式结合使用，可以更简洁地操作集合。\",\"示例：\",\"List<String> names = Arrays.asList(\\\"John\\\", \\\"Jane\\\", \\\"Adam\\\", \\\"Eve\\\"); // 使用流和Lambda表达式过滤和排序 names.stream() .filter(name -> name.startsWith(\\\"J\\\")) .sorted() .forEach(System.out::println);\",\"上面的代码使用Lambda表达式和流操作，过滤掉不以\\\"J\\\"开头的名字，并对结果进行排序，然后打印出来。\"]},\"1693\":{\"h\":\"7. 捕获Lambda表达式中的变量\",\"t\":[\"Lambda表达式可以使用其外部范围内的变量（即闭包）。这些变量必须是final或者实际上是final的（即在Lambda表达式中不修改它们）。\",\"示例：\",\"int num = 2; MathOperation multiply = (a, b) -> a * b * num;\",\"在这个例子中，num变量被Lambda表达式捕获并使用。\"]},\"1694\":{\"h\":\"总结\",\"t\":[\"Lambda表达式提供了一种简洁的语法来表示匿名函数，尤其适用于函数式接口的实现。\",\"它使代码更加简洁、清晰，并且减少了样板代码。\",\"方法引用和内置函数式接口进一步增强了Lambda表达式的功能和可读性。\",\"与**流（Streams）**结合使用，Lambda表达式在处理集合数据时非常强大。\",\"Lambda表达式让Java编程更加现代化，并且与其他函数式编程语言接轨，使得编写高效、简洁的代码更加容易。\"]},\"1695\":{\"h\":\"包装类\",\"t\":[\"Java 的包装类（Wrapper Classes）用于将基本数据类型封装成对象，从而能够在需要对象的地方使用基本数据类型。这些包装类属于 java.lang 包，并且对每种基本数据类型都有一个对应的包装类。它们的使用贯穿于 Java 的集合框架、泛型以及多线程等众多场景中。\"]},\"1696\":{\"h\":\"一、Java 包装类有哪些\",\"t\":[\"Java 对每个基本数据类型提供了一个对应的包装类：\",\"基本数据类型\",\"包装类\",\"描述\",\"byte\",\"Byte\",\"封装 byte 类型的数据\",\"short\",\"Short\",\"封装 short 类型的数据\",\"int\",\"Integer\",\"封装 int 类型的数据\",\"long\",\"Long\",\"封装 long 类型的数据\",\"float\",\"Float\",\"封装 float 类型的数据\",\"double\",\"Double\",\"封装 double 类型的数据\",\"char\",\"Character\",\"封装 char 类型的数据\",\"boolean\",\"Boolean\",\"封装 boolean 类型的数据\"]},\"1697\":{\"h\":\"二、包装类的使用\",\"t\":[\"包装类的主要用途包括：\",\"存储在集合中：Java 的集合框架（如 ArrayList、HashMap 等）只能处理对象而不是基本数据类型。因此，需要将基本类型转换为包装类对象。\",\"实用方法：包装类提供了一些静态方法，用于基本类型与字符串之间的转换。\",\"自动装箱和拆箱：简化了基本类型和包装类之间的转换。\"]},\"1698\":{\"h\":\"三、装箱和拆箱\",\"t\":[\"Java 提供了自动装箱（Autoboxing）和自动拆箱（Unboxing）机制，这使得基本数据类型与其对应的包装类之间的转换更加简洁。\",\"装箱（Boxing）：将基本数据类型转换为对应的包装类对象。\",\"拆箱（Unboxing）：将包装类对象转换为对应的基本数据类型。\"]},\"1699\":{\"h\":\"1. 自动装箱（Autoboxing）\",\"t\":[\"在需要对象而不是基本数据类型的地方，Java 会自动将基本数据类型转换为对应的包装类。例如，将 int 类型转换为 Integer 对象。\",\"int num = 5; Integer numObj = num; // 自动装箱，等同于 Integer.valueOf(num)\"]},\"1700\":{\"h\":\"2. 自动拆箱（Unboxing）\",\"t\":[\"当需要基本数据类型而不是对象的地方，Java 会自动将包装类对象转换为对应的基本数据类型。例如，将 Integer 对象转换为 int 类型。\",\"Integer numObj = 5; int num = numObj; // 自动拆箱，等同于 numObj.intValue()\"]},\"1701\":{\"h\":\"四、手动装箱和拆箱\",\"t\":[\"除了自动装箱和拆箱，Java 也提供了方法来手动进行装箱和拆箱操作：\",\"手动装箱：使用包装类的 valueOf 方法。\",\"手动拆箱：使用包装类的 xxxValue() 方法。\"]},\"1702\":{\"h\":\"1. 手动装箱示例\",\"t\":[\"int num = 10; Integer numObj = Integer.valueOf(num); // 手动装箱\"]},\"1703\":{\"h\":\"2. 手动拆箱示例\",\"t\":[\"Integer numObj = Integer.valueOf(10); int num = numObj.intValue(); // 手动拆箱\"]},\"1704\":{\"h\":\"五、包装类的常用方法\",\"t\":[\"每个包装类都提供了很多实用方法，以下是一些常用方法：\",\"parse 方法：将字符串转换为基本数据类型。\",\"Integer.parseInt(String s)：将字符串转换为 int。\",\"Double.parseDouble(String s)：将字符串转换为 double。\",\"valueOf 方法：将基本数据类型或字符串转换为包装类对象。\",\"Integer.valueOf(int i)：将 int 类型转换为 Integer 对象。\",\"Boolean.valueOf(boolean b)：将 boolean 类型转换为 Boolean 对象。\",\"xxxValue 方法：将包装类对象转换为基本数据类型。\",\"intValue()、doubleValue()、floatValue() 等。\"]},\"1705\":{\"h\":\"六、示例代码\",\"t\":[\"public class WrapperExample { public static void main(String[] args) { // 自动装箱 Integer intObj = 100; // 相当于 Integer.valueOf(100) // 自动拆箱 int num = intObj; // 相当于 intObj.intValue() // 手动装箱 Double doubleObj = Double.valueOf(10.5); // 手动拆箱 double d = doubleObj.doubleValue(); // 使用 parse 方法 String str = \\\"200\\\"; int parsedInt = Integer.parseInt(str); // 使用 valueOf 方法 Float floatObj = Float.valueOf(\\\"5.5\\\"); // 显示转换结果 System.out.println(\\\"自动装箱后的 Integer 对象: \\\" + intObj); System.out.println(\\\"自动拆箱后的 int 值: \\\" + num); System.out.println(\\\"手动装箱后的 Double 对象: \\\" + doubleObj); System.out.println(\\\"手动拆箱后的 double 值: \\\" + d); System.out.println(\\\"使用 parseInt 方法转换后的 int 值: \\\" + parsedInt); System.out.println(\\\"使用 valueOf 方法转换后的 Float 对象: \\\" + floatObj); } }\"]},\"1706\":{\"h\":\"七、小结\",\"t\":[\"Java 包装类为基本数据类型提供了对象表示，并在需要对象的场合（如集合框架中）使用。了解如何使用包装类及其自动装箱和拆箱功能，可以更好地编写 Java 代码，提高开发效率。\"]},\"1707\":{\"h\":\"总结\",\"t\":[\"Java 是一种面向对象编程（OOP，Object-Oriented Programming）语言。面向对象编程是一种通过“对象”来组织代码的编程范式，具有模块化、可重用性和易于维护的特点。在 Java 中，面向对象的编程思想主要体现在以下几个核心概念上：类和对象、继承、多态、封装和抽象。以下是 Java 面向对象的总结文档。\"]},\"1708\":{\"h\":\"Java 面向对象编程总结\"},\"1709\":{\"h\":\"一、面向对象编程的四大基本特性\",\"t\":[\"封装（Encapsulation） 封装是将对象的属性和行为（方法）绑定在一起，并将其对外隐藏的过程。通过封装，可以实现对数据的保护，防止外部代码对其进行任意的修改。在 Java 中，封装通常通过 private 关键字将类的成员变量声明为私有，同时提供公共的 getter 和 setter 方法来访问和修改这些变量。\",\"public class Student { private String name; // 私有变量 private int age; // 公共的 getter 方法 public String getName() { return name; } // 公共的 setter 方法 public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } }\",\"继承（Inheritance） 继承是面向对象编程的一种机制，通过它，一个类可以继承另一个类的属性和方法，从而实现代码的重用。继承使用 extends 关键字来实现。子类可以继承父类的所有非私有属性和方法，并可以根据需要对其进行扩展和重写（override）。Java 是单继承语言，一个类只能继承一个直接父类。\",\"public class Animal { public void eat() { System.out.println(\\\"Animal is eating\\\"); } } public class Dog extends Animal { // Dog 类继承了 Animal 类的 eat() 方法 public void bark() { System.out.println(\\\"Dog is barking\\\"); } }\",\"多态（Polymorphism） 多态是指同一个方法在不同对象上会表现出不同的行为。Java 中的多态分为编译时多态（方法重载）和运行时多态（方法重写）。\",\"方法重载（Overloading）：在同一个类中，多个方法具有相同的名称但参数不同。\",\"方法重写（Overriding）：子类重新定义父类的方法，且方法签名相同。\",\"// 方法重载示例 public class MathUtils { public int add(int a, int b) { return a + b; } public double add(double a, double b) { return a + b; } } // 方法重写示例 public class Animal { public void sound() { System.out.println(\\\"Animal makes a sound\\\"); } } public class Dog extends Animal { @Override public void sound() { System.out.println(\\\"Dog barks\\\"); } }\",\"抽象（Abstraction） 抽象是指对现实世界的建模，通过隐藏具体实现细节而只展示必要特征。Java 提供了两种实现抽象的方式：抽象类和接口。\",\"抽象类（Abstract Class）：用 abstract 关键字声明的类。抽象类不能被实例化，且可以包含抽象方法和非抽象方法。\",\"接口（Interface）：用 interface 关键字定义。接口中只包含常量和抽象方法，所有的方法都是 public 和 abstract 的。类通过 implements 关键字实现接口，一个类可以实现多个接口。\",\"// 抽象类示例 abstract class Animal { public abstract void move(); // 抽象方法，没有方法体 public void eat() { System.out.println(\\\"Animal eats\\\"); } } // 接口示例 interface Flyable { void fly(); // 接口方法默认是 public abstract } // 实现接口 public class Bird extends Animal implements Flyable { @Override public void move() { System.out.println(\\\"Bird moves\\\"); } @Override public void fly() { System.out.println(\\\"Bird flies\\\"); } }\"]},\"1710\":{\"h\":\"二、类与对象\",\"t\":[\"类（Class）：类是对象的模板或蓝图，定义了对象的属性和行为。在 Java 中，类使用 class 关键字定义。类的组成包括成员变量（属性）和方法（行为）。\",\"对象（Object）：对象是类的实例，通过 new 关键字创建。每个对象都有自己的状态和行为，状态由成员变量的值决定，行为由方法实现。\"]},\"1711\":{\"h\":\"三、构造器（Constructor）\",\"t\":[\"构造器是一种特殊的方法，用于在创建对象时初始化对象的状态（属性）。构造器的名称必须与类名相同，并且没有返回类型。Java 提供了两种类型的构造器：\",\"无参构造器：没有参数，用于创建对象时提供默认值。\",\"有参构造器：带有参数，用于在创建对象时传递初始值。\",\"public class Car { private String model; private int year; // 无参构造器 public Car() { this.model = \\\"Unknown\\\"; this.year = 2000; } // 有参构造器 public Car(String model, int year) { this.model = model; this.year = year; } }\"]},\"1712\":{\"h\":\"四、访问控制修饰符\",\"t\":[\"Java 提供了四种访问控制修饰符来控制类、方法和变量的访问级别：\",\"public：对所有类可见。\",\"private：仅对定义它的类可见。\",\"protected：对同一包内的类和所有子类可见。\",\"默认（无修饰符）：对同一包内的类可见（包访问权限）。\"]},\"1713\":{\"h\":\"五、 关键字\",\"t\":[\"this 关键字在 Java 中引用当前对象。它可以用于区分成员变量和局部变量，或在类的构造器中调用另一个构造器。\",\"public class Student { private String name; private int age; public Student(String name, int age) { this.name = name; // 使用 this 来区分成员变量和局部变量 this.age = age; } public Student() { this(\\\"Unknown\\\", 0); // 使用 this 调用另一个构造器 } }\"]},\"1714\":{\"h\":\"六、 关键字\",\"t\":[\"super 关键字用于引用父类的成员（属性和方法），特别是当子类覆盖了父类的方法时，super 可以用于调用被覆盖的方法。super 也可以用来调用父类的构造器。\",\"public class Animal { public Animal() { System.out.println(\\\"Animal constructor\\\"); } public void eat() { System.out.println(\\\"Animal eats\\\"); } } public class Dog extends Animal { public Dog() { super(); // 调用父类构造器 System.out.println(\\\"Dog constructor\\\"); } @Override public void eat() { super.eat(); // 调用父类的 eat() 方法 System.out.println(\\\"Dog eats\\\"); } }\"]},\"1715\":{\"h\":\"七、接口与抽象类的区别\",\"t\":[\"接口：只能定义抽象方法（Java 8 之后可以有默认方法和静态方法），没有方法实现。一个类可以实现多个接口。\",\"抽象类：可以有抽象方法和非抽象方法。一个类只能继承一个抽象类。\"]},\"1716\":{\"h\":\"八、总结\",\"t\":[\"面向对象编程（OOP）是 Java 的核心概念，通过类和对象来组织代码，实现代码的模块化和重用性。封装、继承、多态和抽象是 Java 面向对象编程的四大基本特性，理解和掌握这些特性是编写高效 Java 程序的基础。合理使用面向对象的特性，可以帮助开发人员编写更易于维护、可扩展和重用的代码。\"]},\"1717\":{\"c\":[\"Java\"]},\"1718\":{\"c\":[\"Java面向对象\"]},\"1719\":{\"h\":\"Java高级内容\"},\"1720\":{\"h\":\"Java数据结构\",\"t\":[\"Java数据结构是存储和管理数据的方式，能够有效地组织数据以实现高效的访问和修改。Java 提供了内置的基础数据结构，以及通过集合框架提供的更复杂的数据结构，如列表、集合、队列、映射等。\"]},\"1721\":{\"h\":\"基本数据结构\"},\"1722\":{\"h\":\"1.\",\"t\":[\"定义：数组是固定大小的连续内存块，用于存储相同类型的元素。它们提供了快速的随机访问，但插入和删除操作较慢，尤其是在中间位置进行操作时。\",\"特点： \",\"索引从0开始。\",\"访问时间复杂度为O(1)，插入和删除平均时间复杂度为O(n)。\",\"int[] numbers = new int[5]; numbers[0] = 10; int first = numbers[0];\"]},\"1723\":{\"h\":\"2.\",\"t\":[\"定义：链表是一种线性数据结构，每个节点包含数据和指向下一个节点的指针。常见的链表类型有单向链表和双向链表。\",\"特点： \",\"插入和删除操作效率高（O(1)），但随机访问效率低（O(n)）。\",\"不要求连续内存块，适合频繁插入和删除操作。\",\"class Node { int data; Node next; Node(int data) { this.data = data; } } Node head = new Node(1); head.next = new Node(2);\"]},\"1724\":{\"h\":\"Java集合框架中的数据结构\"},\"1725\":{\"h\":\"1.\",\"t\":[\"List 是一种有序的、可以包含重复元素的集合。Java 中常见的 List 实现包括 ArrayList 和 LinkedList。\",\"ArrayList：基于动态数组实现，提供了快速的随机访问，但在中间插入和删除元素时效率较低。\",\"LinkedList：基于双向链表实现，插入和删除元素效率高，尤其是在列表中间操作时。\",\"List<String> arrayList = new ArrayList<>(); arrayList.add(\\\"A\\\"); arrayList.add(\\\"B\\\"); List<String> linkedList = new LinkedList<>(); linkedList.add(\\\"X\\\"); linkedList.add(\\\"Y\\\");\"]},\"1726\":{\"h\":\"2.\",\"t\":[\"Set 是一种不允许重复元素的集合，Java中常见的 Set 实现包括 HashSet、LinkedHashSet 和 TreeSet。\",\"HashSet：基于哈希表实现，元素无序，允许一个 null 元素，插入和查找操作速度快。\",\"LinkedHashSet：HashSet 的子类，保留插入顺序。\",\"TreeSet：基于红黑树实现，元素按自然顺序或指定的比较器排序。\",\"Set<String> hashSet = new HashSet<>(); hashSet.add(\\\"Apple\\\"); hashSet.add(\\\"Banana\\\"); Set<String> treeSet = new TreeSet<>(); treeSet.add(\\\"Cherry\\\"); treeSet.add(\\\"Date\\\");\"]},\"1727\":{\"h\":\"3.\",\"t\":[\"Queue 是一种先进先出（FIFO）的数据结构，常用于任务调度、缓冲区等场景。常见的 Queue 实现包括 LinkedList 和 PriorityQueue。\",\"LinkedList：实现了 Queue 接口，适合作为普通队列和双端队列（Deque）。\",\"PriorityQueue：基于堆实现，元素按优先级顺序出队。\",\"Queue<String> queue = new LinkedList<>(); queue.add(\\\"Task1\\\"); queue.add(\\\"Task2\\\"); PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(); priorityQueue.add(30); priorityQueue.add(20);\"]},\"1728\":{\"h\":\"4.\",\"t\":[\"Map 是一种键值对（key-value）数据结构，用于存储和快速查找数据。常见的 Map 实现包括 HashMap、LinkedHashMap 和 TreeMap。\",\"HashMap：基于哈希表实现，键无序，允许一个 null 键和多个 null 值。\",\"LinkedHashMap：HashMap 的子类，保留插入顺序。\",\"TreeMap：基于红黑树实现，键按自然顺序或比较器排序。\",\"Map<String, Integer> hashMap = new HashMap<>(); hashMap.put(\\\"One\\\", 1); hashMap.put(\\\"Two\\\", 2); Map<String, Integer> treeMap = new TreeMap<>(); treeMap.put(\\\"Apple\\\", 3); treeMap.put(\\\"Banana\\\", 4);\"]},\"1729\":{\"h\":\"特殊数据结构\"},\"1730\":{\"h\":\"1.\",\"t\":[\"栈是后进先出（LIFO）的数据结构，常用于递归算法、表达式求值等场景。Java中可以使用Stack类或Deque接口来实现栈。\",\"Stack<Integer> stack = new Stack<>(); stack.push(10); stack.push(20); int top = stack.pop(); // 20\"]},\"1731\":{\"h\":\"2.\",\"t\":[\"堆是一种特殊的二叉树，用于实现优先队列。Java中通过PriorityQueue类实现堆结构。\",\"PriorityQueue<Integer> heap = new PriorityQueue<>(); heap.add(15); heap.add(10); heap.add(20);\"]},\"1732\":{\"h\":\"3.\",\"t\":[\"图是由节点和边组成的复杂数据结构，广泛应用于网络、路径规划等领域。Java中没有直接的图类，但可以通过Map和List等类来自行实现图结构。\",\"Map<String, List<String>> graph = new HashMap<>(); graph.put(\\\"A\\\", Arrays.asList(\\\"B\\\", \\\"C\\\")); graph.put(\\\"B\\\", Arrays.asList(\\\"A\\\", \\\"D\\\"));\"]},\"1733\":{\"h\":\"自定义数据结构\",\"t\":[\"除了Java提供的内置数据结构，你也可以根据具体需求自定义数据结构。例如，实现一个平衡二叉树、跳表、Trie树等。\",\"Java中的数据结构是编程中非常重要的基础，掌握这些数据结构可以帮助你更高效地解决各种问题，并优化程序的性能。\"]},\"1734\":{\"h\":\"Java集合类\",\"t\":[\"Java 集合类（Collections）提供了一组处理对象集合的接口和类，用于存储、检索和操作数据。集合类主要位于 java.util 包中，支持的数据结构包括列表、集合、队列、映射等。\"]},\"1735\":{\"h\":\"集合框架的核心接口\",\"t\":[\"Java 集合框架由几个核心接口组成，每个接口定义了一组通用操作。主要接口包括：\",\"Collection<E>：最基本的集合接口，定义了一组对象的操作。子接口包括 List、Set 和 Queue。\",\"List<E>：有序集合，可以包含重复元素。常见实现类有 ArrayList、LinkedList、Vector。\",\"Set<E>：不允许包含重复元素的集合。常见实现类有 HashSet、LinkedHashSet、TreeSet。\",\"Queue<E>：用于按特定顺序保存一组待处理元素，通常用于实现队列结构。常见实现类有 LinkedList、PriorityQueue。\",\"Map<K, V>：键值对的集合，不允许重复的键。常见实现类有 HashMap、TreeMap、LinkedHashMap。\"]},\"1736\":{\"h\":\"常见集合类\"},\"1737\":{\"h\":\"1. 接口及其实现类\",\"t\":[\"ArrayList<E>：基于数组实现的动态列表，支持快速随机访问，适合频繁读取操作。\",\"List<String> list = new ArrayList<>(); list.add(\\\"A\\\"); list.add(\\\"B\\\"); list.add(\\\"C\\\");\",\"LinkedList<E>：基于链表实现，适合频繁插入和删除操作。\",\"List<String> linkedList = new LinkedList<>(); linkedList.add(\\\"X\\\"); linkedList.add(\\\"Y\\\");\",\"Vector<E>：类似 ArrayList，但线程安全，性能较低。Stack 是 Vector 的子类，表示后进先出（LIFO）堆栈。\",\"Vector<String> vector = new Vector<>(); vector.add(\\\"1\\\"); vector.add(\\\"2\\\");\"]},\"1738\":{\"h\":\"2. 接口及其实现类\",\"t\":[\"HashSet<E>：基于哈希表实现，不保证顺序，允许 null 元素，插入、删除、查找操作效率高。\",\"Set<String> set = new HashSet<>(); set.add(\\\"Apple\\\"); set.add(\\\"Banana\\\");\",\"LinkedHashSet<E>：HashSet 的子类，保留元素的插入顺序。\",\"Set<String> linkedSet = new LinkedHashSet<>(); linkedSet.add(\\\"First\\\"); linkedSet.add(\\\"Second\\\");\",\"TreeSet<E>：基于 TreeMap 实现，元素按自然顺序或指定的比较器排序，不允许 null 元素。\",\"Set<String> treeSet = new TreeSet<>(); treeSet.add(\\\"Alpha\\\"); treeSet.add(\\\"Beta\\\");\"]},\"1739\":{\"h\":\"3. 接口及其实现类\",\"t\":[\"LinkedList<E>：双向链表实现的队列，既可以作为 Queue 使用，也可以作为 Deque（双端队列）使用。\",\"Queue<String> queue = new LinkedList<>(); queue.add(\\\"Task1\\\"); queue.add(\\\"Task2\\\");\",\"PriorityQueue<E>：基于优先级堆的队列，元素按优先级顺序出队。\",\"Queue<Integer> priorityQueue = new PriorityQueue<>(); priorityQueue.add(10); priorityQueue.add(20);\"]},\"1740\":{\"h\":\"4. 接口及其实现类\",\"t\":[\"HashMap<K, V>：基于哈希表实现的键值对集合，不保证顺序，允许 null 键和值，适合快速插入和查找。\",\"Map<String, Integer> hashMap = new HashMap<>(); hashMap.put(\\\"One\\\", 1); hashMap.put(\\\"Two\\\", 2);\",\"LinkedHashMap<K, V>：HashMap 的子类，保留插入顺序或访问顺序。\",\"Map<String, Integer> linkedHashMap = new LinkedHashMap<>(); linkedHashMap.put(\\\"First\\\", 1); linkedHashMap.put(\\\"Second\\\", 2);\",\"TreeMap<K, V>：基于红黑树的实现，键按自然顺序或指定的比较器排序，不允许 null 键。\",\"Map<String, Integer> treeMap = new TreeMap<>(); treeMap.put(\\\"Key1\\\", 100); treeMap.put(\\\"Key2\\\", 200);\"]},\"1741\":{\"h\":\"集合工具类\",\"t\":[\"Java 提供了 Collections 工具类，提供了许多静态方法来操作集合，如排序、查找、同步化、不可变集合创建等。\",\"排序：Collections.sort(list)，对 List 进行自然排序。\",\"查找：Collections.binarySearch(list, key)，在排序列表中二分查找元素。\",\"同步化：Collections.synchronizedList(new ArrayList<>())，返回一个同步的集合。\"]},\"1742\":{\"h\":\"集合与线程安全\",\"t\":[\"同步集合：如 Vector、Hashtable 等集合类本身是线程安全的。\",\"非同步集合：如 ArrayList、HashMap 等，通常需要通过 Collections.synchronizedList() 等方法进行同步包装。\",\"并发集合：Java 还提供了 java.util.concurrent 包中的并发集合类，如 ConcurrentHashMap、CopyOnWriteArrayList，适合高并发环境下使用。\",\"Java 集合框架是 Java 核心库中最常用的部分之一，提供了丰富的数据结构和操作方法，是进行高效数据管理的基础。\"]},\"1743\":{\"h\":\"List\",\"t\":[\"在 Java 中，List 是一种有序的集合（Collection），它允许存储重复的元素。List 是一个接口，它继承自 Collection 接口，并提供了许多操作列表元素的方法。Java 提供了多个类来实现 List 接口，其中最常用的是 ArrayList 和 LinkedList。\"]},\"1744\":{\"h\":\"一、 接口的基本概念\",\"t\":[\"List 是一种数据结构，具有以下特点：\",\"有序性：List 中的元素是按插入顺序排序的。\",\"允许重复元素：List 可以包含重复的元素。\",\"基于索引：List 提供了基于索引（从 0 开始）的操作，可以通过索引来访问、更新或删除元素。\"]},\"1745\":{\"h\":\"二、 接口常用方法\",\"t\":[\"List 接口定义了许多常用的方法，包括但不限于以下这些：\",\"add(E e)：在列表的末尾添加指定的元素。\",\"add(int index, E element)：在指定的索引位置插入指定的元素。\",\"remove(Object o)：移除列表中第一次出现的指定元素。\",\"remove(int index)：移除指定索引位置的元素。\",\"get(int index)：返回指定索引位置的元素。\",\"set(int index, E element)：用指定的元素替换指定索引位置的元素。\",\"size()：返回列表中的元素数量。\",\"isEmpty()：如果列表不包含元素，则返回 true。\",\"contains(Object o)：如果列表包含指定的元素，则返回 true。\",\"indexOf(Object o)：返回列表中第一次出现的指定元素的索引；如果列表不包含该元素，则返回 -1。\"]},\"1746\":{\"h\":\"三、 类\",\"t\":[\"ArrayList 是 List 接口的一个常用实现类，它基于数组实现，适合频繁读取数据的场景。ArrayList 是非同步的（即线程不安全），如果需要在多线程环境中使用 ArrayList，则需要手动同步。\"]},\"1747\":{\"h\":\"1. 的特点\",\"t\":[\"动态数组：ArrayList 是一个可动态增长和缩减的数组。它会根据需要自动调整容量。\",\"随机访问：由于底层是数组，ArrayList 提供了快速的随机访问（通过索引访问元素）。\",\"插入和删除操作效率低：在中间插入或删除元素时，需要移动后续元素，效率较低。\"]},\"1748\":{\"h\":\"2. 示例：使用\",\"t\":[\"import java.util.ArrayList; import java.util.List; public class ArrayListExample { public static void main(String[] args) { List<String> list = new ArrayList<>(); // 添加元素 list.add(\\\"Apple\\\"); list.add(\\\"Banana\\\"); list.add(\\\"Orange\\\"); // 输出列表 System.out.println(\\\"List: \\\" + list); // 插入元素 list.add(1, \\\"Grapes\\\"); System.out.println(\\\"After inserting at index 1: \\\" + list); // 获取元素 String fruit = list.get(2); System.out.println(\\\"Element at index 2: \\\" + fruit); // 替换元素 list.set(2, \\\"Mango\\\"); System.out.println(\\\"After replacing element at index 2: \\\" + list); // 删除元素 list.remove(\\\"Apple\\\"); System.out.println(\\\"After removing 'Apple': \\\" + list); // 判断是否包含元素 boolean containsBanana = list.contains(\\\"Banana\\\"); System.out.println(\\\"Contains 'Banana': \\\" + containsBanana); // 列表大小 int size = list.size(); System.out.println(\\\"List size: \\\" + size); } }\"]},\"1749\":{\"h\":\"四、 类\",\"t\":[\"LinkedList 是 List 接口的另一个实现类，它基于双向链表实现，适合频繁插入和删除数据的场景。LinkedList 也是非同步的（线程不安全）。\"]},\"1750\":{\"h\":\"1. 的特点\",\"t\":[\"双向链表：LinkedList 底层是一个双向链表结构。\",\"插入和删除操作效率高：由于链表结构的特性，在列表的中间位置插入或删除元素时，不需要移动后续元素。\",\"随机访问效率低：由于没有索引，必须从头开始遍历链表来查找某个元素，效率较低。\",\"可以作为队列和双端队列（Deque）使用：LinkedList 还实现了 Deque 接口，支持先进先出（FIFO）队列操作和双端队列操作。\"]},\"1751\":{\"h\":\"2. 示例：使用\",\"t\":[\"import java.util.LinkedList; import java.util.List; public class LinkedListExample { public static void main(String[] args) { List<String> list = new LinkedList<>(); // 添加元素 list.add(\\\"Apple\\\"); list.add(\\\"Banana\\\"); list.add(\\\"Orange\\\"); // 输出列表 System.out.println(\\\"List: \\\" + list); // 插入元素 list.add(1, \\\"Grapes\\\"); System.out.println(\\\"After inserting at index 1: \\\" + list); // 获取元素 String fruit = list.get(2); System.out.println(\\\"Element at index 2: \\\" + fruit); // 替换元素 list.set(2, \\\"Mango\\\"); System.out.println(\\\"After replacing element at index 2: \\\" + list); // 删除元素 list.remove(\\\"Apple\\\"); System.out.println(\\\"After removing 'Apple': \\\" + list); // 判断是否包含元素 boolean containsBanana = list.contains(\\\"Banana\\\"); System.out.println(\\\"Contains 'Banana': \\\" + containsBanana); // 列表大小 int size = list.size(); System.out.println(\\\"List size: \\\" + size); } }\"]},\"1752\":{\"h\":\"五、 与 的对比\",\"t\":[\"特性\",\"ArrayList\",\"LinkedList\",\"底层实现\",\"动态数组\",\"双向链表\",\"是否允许随机访问\",\"是\",\"否\",\"插入/删除效率\",\"低（需要移动元素）\",\"高（只需调整链表指针）\",\"内存消耗\",\"相对较低，额外内存仅用于存储元素\",\"相对较高，需要存储额外的节点信息（指针）\",\"线程安全性\",\"非同步（需手动同步）\",\"非同步（需手动同步）\",\"适用场景\",\"频繁读取操作\",\"频繁插入和删除操作\"]},\"1753\":{\"h\":\"六、 类\",\"t\":[\"CopyOnWriteArrayList 是一个线程安全的 List 实现，适用于读操作远多于写操作的场景。它基于写时复制（Copy-on-Write）机制，写操作时会创建一个新的副本来进行修改，修改完成后再将引用指向新副本。\"]},\"1754\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.List; import java.util.concurrent.CopyOnWriteArrayList; public class CopyOnWriteArrayListExample { public static void main(String[] args) { List<String> list = new CopyOnWriteArrayList<>(); // 添加元素 list.add(\\\"Apple\\\"); list.add(\\\"Banana\\\"); list.add(\\\"Orange\\\"); // 遍历列表 for (String fruit : list) { System.out.println(fruit); } // 在遍历期间修改列表 list.add(\\\"Grapes\\\"); System.out.println(\\\"After adding 'Grapes': \\\" + list); } }\"]},\"1755\":{\"h\":\"七、总结\",\"t\":[\"Java 提供了多种 List 的实现类，以满足不同场景下的需求：\",\"ArrayList：适合频繁读取数据的场景，提供快速的随机访问。\",\"LinkedList：适合频繁插入和删除数据的场景，插入和删除效率高。\",\"CopyOnWriteArrayList：适合多线程环境下读操作多于写操作的场景，提供线程安全的 List 实现。\",\"通过选择合适的 List 实现类，可以提高程序的性能和稳定性。在实际应用中，根据需求选择合适的数据结构是编写高效代码的关键。\"]},\"1756\":{\"h\":\"Queue\",\"t\":[\"在 Java 中，Queue 是一种数据结构，用于存储需要按特定顺序处理的元素。Queue 接口是 Java 集合框架的一部分，位于 java.util 包中。Queue 主要用于按顺序访问元素，通常遵循先进先出（FIFO，First-In-First-Out）原则。\"]},\"1757\":{\"h\":\"一、 接口的基本概念\",\"t\":[\"Queue 是一种有序的集合，它支持在一端插入元素，在另一端删除元素的操作。它常用于任务调度、消息传递、请求处理等场景。\"]},\"1758\":{\"h\":\"1. 的特点\",\"t\":[\"先进先出（FIFO）：元素按照插入的顺序处理，第一个插入的元素最先被处理。\",\"不允许随机访问：只能通过队列的操作来访问队首或队尾的元素。\",\"可以为空：Queue 允许为空，调用 poll() 方法返回 null，调用 remove() 方法则抛出异常。\"]},\"1759\":{\"h\":\"2. 的常用方法\",\"t\":[\"add(E e)：将指定的元素插入到队列中，如果成功则返回 true，如果队列已满，则抛出异常。\",\"offer(E e)：将指定的元素插入到队列中，如果成功则返回 true，否则返回 false。\",\"remove()：移除并返回队列的头元素，如果队列为空则抛出异常。\",\"poll()：移除并返回队列的头元素，如果队列为空则返回 null。\",\"element()：返回队列的头元素但不移除它，如果队列为空则抛出异常。\",\"peek()：返回队列的头元素但不移除它，如果队列为空则返回 null。\"]},\"1760\":{\"h\":\"二、 的实现类\",\"t\":[\"Java 提供了多种 Queue 的实现类，可以满足不同的需求，包括：\",\"LinkedList：常用的 Queue 实现类，基于双向链表实现。\",\"PriorityQueue：一种基于优先级堆的队列，元素会按照自然顺序或指定的比较器排序。\",\"ArrayDeque：基于可变数组实现的双端队列，提供更高效的插入、删除操作。\",\"ConcurrentLinkedQueue：线程安全的队列，适用于高并发环境。\",\"BlockingQueue：支持阻塞操作的队列接口，适用于多线程环境中的生产者-消费者问题。\"]},\"1761\":{\"h\":\"三、 作为 的实现\",\"t\":[\"LinkedList 类不仅可以作为 List 使用，还实现了 Queue 接口，因此可以作为队列使用。\"]},\"1762\":{\"h\":\"示例：使用 实现\",\"t\":[\"import java.util.LinkedList; import java.util.Queue; public class LinkedListQueueExample { public static void main(String[] args) { Queue<String> queue = new LinkedList<>(); // 添加元素到队列 queue.offer(\\\"Apple\\\"); queue.offer(\\\"Banana\\\"); queue.offer(\\\"Orange\\\"); // 查看队列头部元素 System.out.println(\\\"Head of queue: \\\" + queue.peek()); // 取出并移除队列头部元素 System.out.println(\\\"Removed from queue: \\\" + queue.poll()); // 再次查看队列头部元素 System.out.println(\\\"Head of queue after removal: \\\" + queue.peek()); // 打印队列中的所有元素 System.out.println(\\\"Remaining elements in queue: \\\" + queue); } }\"]},\"1763\":{\"h\":\"四、 类\",\"t\":[\"PriorityQueue 是一个基于优先级堆的队列，元素按照自然顺序或提供的比较器顺序进行排序。默认情况下，它不保证插入顺序，但每次检索或移除操作将返回优先级最高的元素。\"]},\"1764\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.PriorityQueue; import java.util.Queue; public class PriorityQueueExample { public static void main(String[] args) { Queue<Integer> priorityQueue = new PriorityQueue<>(); // 添加元素 priorityQueue.offer(10); priorityQueue.offer(5); priorityQueue.offer(15); // 打印队列中的元素（按优先级顺序） System.out.println(\\\"PriorityQueue: \\\" + priorityQueue); // 取出并移除优先级最高的元素 System.out.println(\\\"Removed element: \\\" + priorityQueue.poll()); // 打印剩余元素 System.out.println(\\\"Remaining elements: \\\" + priorityQueue); } }\"]},\"1765\":{\"h\":\"五、 类\",\"t\":[\"ArrayDeque 是一个基于数组的双端队列（Deque），可以作为栈和队列使用。它没有容量限制，可以根据需要动态扩展。ArrayDeque 提供了比 LinkedList 更高效的插入和删除操作。\"]},\"1766\":{\"h\":\"示例：使用 实现\",\"t\":[\"import java.util.ArrayDeque; import java.util.Queue; public class ArrayDequeExample { public static void main(String[] args) { Queue<String> deque = new ArrayDeque<>(); // 添加元素到队列 deque.offer(\\\"Apple\\\"); deque.offer(\\\"Banana\\\"); deque.offer(\\\"Orange\\\"); // 查看队列头部元素 System.out.println(\\\"Head of queue: \\\" + deque.peek()); // 取出并移除队列头部元素 System.out.println(\\\"Removed from queue: \\\" + deque.poll()); // 打印剩余元素 System.out.println(\\\"Remaining elements in queue: \\\" + deque); } }\"]},\"1767\":{\"h\":\"六、 接口\",\"t\":[\"BlockingQueue 是一个支持线程安全操作的队列接口。它提供了阻塞的 put 和 take 操作，适用于多线程环境下的生产者-消费者模式。常见的实现类包括：\",\"ArrayBlockingQueue：一个有界的阻塞队列，基于数组实现。\",\"LinkedBlockingQueue：一个可选边界的阻塞队列，基于链表实现。\",\"PriorityBlockingQueue：一个基于优先级的阻塞队列。\",\"DelayQueue：一个延迟获取元素的阻塞队列，适用于任务调度。\"]},\"1768\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.concurrent.BlockingQueue; import java.util.concurrent.LinkedBlockingQueue; public class BlockingQueueExample { public static void main(String[] args) throws InterruptedException { BlockingQueue<String> blockingQueue = new LinkedBlockingQueue<>(3); // 向队列中添加元素 blockingQueue.put(\\\"Apple\\\"); blockingQueue.put(\\\"Banana\\\"); blockingQueue.put(\\\"Orange\\\"); System.out.println(\\\"BlockingQueue after adding elements: \\\" + blockingQueue); // 取出并移除队列头部元素 System.out.println(\\\"Removed element: \\\" + blockingQueue.take()); // 打印剩余元素 System.out.println(\\\"Remaining elements in BlockingQueue: \\\" + blockingQueue); } }\"]},\"1769\":{\"h\":\"七、总结\",\"t\":[\"Java 提供了丰富的 Queue 实现来满足不同的需求。常见的 Queue 实现类包括：\",\"LinkedList：通用队列实现，适合简单队列操作。\",\"PriorityQueue：适合需要优先级排序的场景。\",\"ArrayDeque：高效的双端队列实现，适合栈和队列操作。\",\"ConcurrentLinkedQueue：线程安全的无界非阻塞队列。\",\"BlockingQueue 实现类（如 ArrayBlockingQueue、LinkedBlockingQueue 等）：适合多线程环境下的任务调度和生产者-消费者模式。\",\"通过选择适合的队列实现类，可以根据实际需求实现更高效的应用程序。\"]},\"1770\":{\"h\":\"Stack\",\"t\":[\"在 Java 中，Stack 是一种用于存储和操作数据的线性数据结构，遵循后进先出（LIFO，Last-In-First-Out）原则。Java 提供了 Stack 类作为栈的实现，它继承自 Vector 类，位于 java.util 包中。\"]},\"1771\":{\"h\":\"一、 类的基本概念\",\"t\":[\"Stack 是一种数据结构，它的特性是新插入的元素位于栈顶，最先被移除的元素也是栈顶元素。栈通常用于解决递归、回溯、表达式求值等问题。\"]},\"1772\":{\"h\":\"1. 的特点\",\"t\":[\"后进先出（LIFO）：最近添加的元素最先被移除。\",\"基于数组的实现：Stack 类继承自 Vector，底层使用动态数组来存储元素。\",\"线程安全：Stack 类是同步的，因此可以在多线程环境中安全使用。\"]},\"1773\":{\"h\":\"2. 类的常用方法\",\"t\":[\"push(E item)：将元素推入栈顶。\",\"pop()：移除并返回栈顶元素，如果栈为空则抛出 EmptyStackException。\",\"peek()：返回栈顶元素但不移除它，如果栈为空则抛出 EmptyStackException。\",\"empty()：如果栈为空则返回 true，否则返回 false。\",\"search(Object o)：返回对象在栈中的位置（从 1 开始计数），如果不在栈中则返回 -1。\"]},\"1774\":{\"h\":\"二、 类的使用示例\",\"t\":[\"import java.util.Stack; public class StackExample { public static void main(String[] args) { Stack<Integer> stack = new Stack<>(); // 将元素推入栈 stack.push(10); stack.push(20); stack.push(30); System.out.println(\\\"Stack after pushes: \\\" + stack); // 查看栈顶元素 System.out.println(\\\"Top element is: \\\" + stack.peek()); // 从栈中移除元素 System.out.println(\\\"Popped element: \\\" + stack.pop()); // 查看栈的当前状态 System.out.println(\\\"Stack after pop: \\\" + stack); // 判断栈是否为空 System.out.println(\\\"Is stack empty? \\\" + stack.empty()); // 查找元素的位置 int position = stack.search(10); System.out.println(\\\"Position of element '10' in stack: \\\" + position); } }\"]},\"1775\":{\"h\":\"三、 的应用场景\",\"t\":[\"表达式求值：用于中缀表达式到后缀表达式的转换，以及后缀表达式的求值。\",\"括号匹配：用于检查表达式中的括号是否正确匹配。\",\"回溯算法：用于实现回溯算法，如深度优先搜索（DFS）。\",\"递归消除：用于将递归算法转换为迭代算法。\"]},\"1776\":{\"h\":\"四、 作为栈的替代\",\"t\":[\"虽然 Stack 类在 Java 中被广泛使用，但由于其继承自 Vector 并且是同步的，它在某些情况下性能可能不够理想。Java 提供了更现代的替代方案，如 Deque 接口及其实现类 ArrayDeque。Deque（双端队列）可以用作栈，因为它支持在两端插入和删除元素。\",\"ArrayDeque 作为栈的实现，具有更好的性能，因为它没有 Stack 类的同步开销。\"]},\"1777\":{\"h\":\"示例：使用 作为栈\",\"t\":[\"import java.util.ArrayDeque; import java.util.Deque; public class ArrayDequeAsStackExample { public static void main(String[] args) { Deque<Integer> stack = new ArrayDeque<>(); // 将元素推入栈 stack.push(10); stack.push(20); stack.push(30); System.out.println(\\\"Stack after pushes: \\\" + stack); // 查看栈顶元素 System.out.println(\\\"Top element is: \\\" + stack.peek()); // 从栈中移除元素 System.out.println(\\\"Popped element: \\\" + stack.pop()); // 查看栈的当前状态 System.out.println(\\\"Stack after pop: \\\" + stack); // 判断栈是否为空 System.out.println(\\\"Is stack empty? \\\" + stack.isEmpty()); } }\"]},\"1778\":{\"h\":\"五、 与 的对比\",\"t\":[\"特性\",\"Stack\",\"ArrayDeque\",\"底层实现\",\"基于 Vector（动态数组）\",\"基于动态数组\",\"是否同步\",\"是（线程安全）\",\"否（非线程安全）\",\"性能\",\"同步开销较大，性能稍差\",\"无同步开销，性能更高\",\"适用场景\",\"需要线程安全的场景\",\"性能敏感的单线程场景\",\"常用方法\",\"push(), pop(), peek()\",\"push(), pop(), peek()\"]},\"1779\":{\"h\":\"六、总结\",\"t\":[\"Java 提供了多种实现栈数据结构的方法，最常用的是 Stack 类和 ArrayDeque 类。虽然 Stack 类是经典的栈实现，但由于其同步性开销较大，在单线程环境中，ArrayDeque 通常是更好的选择。通过根据应用场景选择合适的栈实现，可以实现更高效和更简洁的代码。\"]},\"1780\":{\"h\":\"Set\",\"t\":[\"在 Java 中，Set 是一种不允许存储重复元素的集合接口。Set 接口是 Java 集合框架（Java Collections Framework）的一部分，位于 java.util 包中。Set 不保证元素的顺序，可以根据不同的实现类选择不同的排序策略。\"]},\"1781\":{\"h\":\"一、 接口的基本概念\",\"t\":[\"Set 接口继承自 Collection 接口，表示不包含重复元素的集合。它主要用于快速查找、去重、集合操作（如交集、并集、差集）等场景。\"]},\"1782\":{\"h\":\"1. 的特点\",\"t\":[\"不允许重复元素：Set 不允许存储重复的元素。如果尝试添加重复元素，则集合会保持不变。\",\"不保证元素顺序：不同的 Set 实现类对元素顺序有不同的处理方式，如 HashSet 不保证顺序，LinkedHashSet 按照插入顺序排序，TreeSet 按照元素的自然顺序排序。\",\"基于哈希表、红黑树或链表的实现：不同的 Set 实现类有不同的底层数据结构。\"]},\"1783\":{\"h\":\"2. 接口的常用方法\",\"t\":[\"Set 继承了 Collection 接口中的方法，因此提供了许多常用的集合操作方法，如：\",\"add(E e)：将元素添加到集合中，如果集合中不存在该元素则返回 true。\",\"remove(Object o)：从集合中移除指定元素，如果存在则返回 true。\",\"contains(Object o)：判断集合中是否包含指定的元素。\",\"size()：返回集合中的元素个数。\",\"isEmpty()：判断集合是否为空。\",\"clear()：清空集合中的所有元素。\",\"iterator()：返回集合的迭代器，用于遍历集合中的元素。\"]},\"1784\":{\"h\":\"二、 的实现类\",\"t\":[\"Java 提供了多个 Set 接口的实现类，每个实现类都有其独特的特性和适用场景：\",\"HashSet：基于哈希表的实现，允许 null 值，不保证元素的顺序，操作速度最快。\",\"LinkedHashSet：继承自 HashSet，但使用双向链表维护元素的插入顺序。\",\"TreeSet：基于红黑树的实现，元素按自然顺序排序（或根据提供的比较器排序），不允许 null 值。\",\"EnumSet：专门用于枚举类型的集合，所有元素必须是枚举类型。\"]},\"1785\":{\"h\":\"三、 类\",\"t\":[\"HashSet 是最常用的 Set 实现类，基于哈希表实现。它不保证元素的顺序，允许存储一个 null 元素。HashSet 的基本操作（如 add、remove、contains）的时间复杂度为 O(1)。\"]},\"1786\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.HashSet; import java.util.Set; public class HashSetExample { public static void main(String[] args) { Set<String> set = new HashSet<>(); // 添加元素 set.add(\\\"Apple\\\"); set.add(\\\"Banana\\\"); set.add(\\\"Orange\\\"); set.add(\\\"Apple\\\"); // 重复元素，不会添加 System.out.println(\\\"HashSet: \\\" + set); // 判断集合中是否包含某个元素 System.out.println(\\\"Contains 'Apple': \\\" + set.contains(\\\"Apple\\\")); // 移除元素 set.remove(\\\"Banana\\\"); System.out.println(\\\"HashSet after removing 'Banana': \\\" + set); // 遍历集合 for (String item : set) { System.out.println(\\\"Item: \\\" + item); } } }\"]},\"1787\":{\"h\":\"四、 类\",\"t\":[\"LinkedHashSet 是 HashSet 的子类，使用双向链表维护元素的插入顺序。它的性能稍慢于 HashSet，但在需要维持插入顺序的场景中非常有用。\"]},\"1788\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.LinkedHashSet; import java.util.Set; public class LinkedHashSetExample { public static void main(String[] args) { Set<String> set = new LinkedHashSet<>(); // 添加元素 set.add(\\\"Apple\\\"); set.add(\\\"Banana\\\"); set.add(\\\"Orange\\\"); set.add(\\\"Apple\\\"); // 重复元素，不会添加 System.out.println(\\\"LinkedHashSet: \\\" + set); // 遍历集合 for (String item : set) { System.out.println(\\\"Item: \\\" + item); } } }\"]},\"1789\":{\"h\":\"五、 类\",\"t\":[\"TreeSet 是基于红黑树的实现，保证元素按照自然顺序或指定的比较器顺序排序。由于 TreeSet 需要维护顺序，因此它的操作（如 add、remove、contains）的时间复杂度为 O(log n)。\"]},\"1790\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.Set; import java.util.TreeSet; public class TreeSetExample { public static void main(String[] args) { Set<String> set = new TreeSet<>(); // 添加元素 set.add(\\\"Banana\\\"); set.add(\\\"Apple\\\"); set.add(\\\"Orange\\\"); System.out.println(\\\"TreeSet (sorted): \\\" + set); // 判断集合中是否包含某个元素 System.out.println(\\\"Contains 'Apple': \\\" + set.contains(\\\"Apple\\\")); // 移除元素 set.remove(\\\"Banana\\\"); System.out.println(\\\"TreeSet after removing 'Banana': \\\" + set); // 遍历集合 for (String item : set) { System.out.println(\\\"Item: \\\" + item); } } }\"]},\"1791\":{\"h\":\"六、 类\",\"t\":[\"EnumSet 是一个专门用于枚举类型的集合，它的所有元素必须是同一个枚举类型。EnumSet 的性能非常高效，因为它内部使用位向量表示。\"]},\"1792\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.EnumSet; import java.util.Set; enum Fruit { APPLE, BANANA, ORANGE, PEAR } public class EnumSetExample { public static void main(String[] args) { Set<Fruit> set = EnumSet.of(Fruit.APPLE, Fruit.BANANA); // 添加元素 set.add(Fruit.ORANGE); System.out.println(\\\"EnumSet: \\\" + set); // 判断集合中是否包含某个元素 System.out.println(\\\"Contains APPLE: \\\" + set.contains(Fruit.APPLE)); // 移除元素 set.remove(Fruit.BANANA); System.out.println(\\\"EnumSet after removing BANANA: \\\" + set); } }\"]},\"1793\":{\"h\":\"七、 的常见操作和应用\",\"t\":[\"集合操作：Set 接口的实现类可以用于各种集合操作，例如并集、交集和差集。\",\"去重操作：在需要去除重复数据的场景下，使用 Set 非常方便。\",\"快速查找：HashSet 提供了高效的查找操作，适用于需要快速查找的场景。\"]},\"1794\":{\"h\":\"八、总结\",\"t\":[\"Set 接口是 Java 集合框架中一个重要的接口，用于存储不允许重复的元素集合。根据不同的场景和需求，Java 提供了不同的 Set 实现类，如 HashSet、LinkedHashSet、TreeSet 和 EnumSet。理解和使用这些实现类，可以更好地管理和操作数据集合，提高程序的性能和可维护性。\"]},\"1795\":{\"h\":\"Map\",\"t\":[\"在 Java 中，Map 接口表示一个键值对映射的集合，它提供了一种存储和操作键值对的方式。Map 不属于 Java Collection 框架的子接口，它是独立的接口，但同样位于 java.util 包中。Map 是一个非常常用的数据结构，适用于需要根据键快速查找、插入或删除值的场景。\"]},\"1796\":{\"h\":\"一、 接口的基本概念\",\"t\":[\"Map 是一种键值对（Key-Value Pair）映射的集合，其中键（Key）是唯一的，不能重复，而值（Value）则可以重复。Map 接口提供了很多方法用于基本的集合操作，如插入、删除、查找等。\"]},\"1797\":{\"h\":\"1. 的特点\",\"t\":[\"键唯一，值可重复：Map 中的每个键（Key）必须是唯一的，但对应的值（Value）可以重复。\",\"键不能为 null（部分实现类允许 null）：在某些实现中（如 HashMap），允许键为 null，而在其他实现（如 TreeMap）中则不允许。\",\"不保证顺序：大多数 Map 实现类不保证键值对的顺序，但也有一些实现（如 LinkedHashMap）可以维护插入顺序或访问顺序。\"]},\"1798\":{\"h\":\"2. 接口的常用方法\",\"t\":[\"put(K key, V value)：将指定的键值对插入到映射中，如果键已存在，则替换旧值。\",\"get(Object key)：返回与指定键关联的值，如果映射中不包含该键，则返回 null。\",\"remove(Object key)：移除指定键对应的键值对。\",\"containsKey(Object key)：判断映射中是否包含指定的键。\",\"containsValue(Object value)：判断映射中是否包含一个或多个指定的值。\",\"keySet()：返回映射中所有键的 Set 视图。\",\"values()：返回映射中所有值的 Collection 视图。\",\"entrySet()：返回映射中所有键值对的 Set 视图。\",\"size()：返回映射中键值对的数量。\",\"isEmpty()：判断映射是否为空。\",\"clear()：清空映射中的所有键值对。\"]},\"1799\":{\"h\":\"二、 的实现类\",\"t\":[\"Java 提供了多个 Map 接口的实现类，每个实现类都有其独特的特性和适用场景：\",\"HashMap：基于哈希表的实现，允许一个 null 键和多个 null 值，不保证键值对的顺序。\",\"LinkedHashMap：继承自 HashMap，使用双向链表维护元素的插入顺序（或访问顺序）。\",\"TreeMap：基于红黑树的实现，键值对按键的自然顺序或指定的比较器顺序排序，不允许 null 键。\",\"Hashtable：基于哈希表的实现，线程安全，不允许 null 键或值。\",\"ConcurrentHashMap：线程安全的 HashMap 实现，支持并发操作，分段锁机制。\"]},\"1800\":{\"h\":\"三、 类\",\"t\":[\"HashMap 是最常用的 Map 实现类，基于哈希表实现，允许一个 null 键和多个 null 值，不保证键值对的顺序。HashMap 的基本操作（如 put、get、remove）的时间复杂度为 O(1)。\"]},\"1801\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.HashMap; import java.util.Map; public class HashMapExample { public static void main(String[] args) { Map<String, Integer> map = new HashMap<>(); // 添加键值对 map.put(\\\"Apple\\\", 10); map.put(\\\"Banana\\\", 20); map.put(\\\"Orange\\\", 30); map.put(\\\"Apple\\\", 40); // 键 \\\"Apple\\\" 的值将被替换 // 打印整个映射 System.out.println(\\\"HashMap: \\\" + map); // 获取键对应的值 int value = map.get(\\\"Apple\\\"); System.out.println(\\\"Value for key 'Apple': \\\" + value); // 移除键值对 map.remove(\\\"Banana\\\"); System.out.println(\\\"HashMap after removing 'Banana': \\\" + map); // 遍历键值对 for (Map.Entry<String, Integer> entry : map.entrySet()) { System.out.println(\\\"Key: \\\" + entry.getKey() + \\\", Value: \\\" + entry.getValue()); } } }\"]},\"1802\":{\"h\":\"四、 类\",\"t\":[\"LinkedHashMap 是 HashMap 的子类，使用双向链表维护键值对的插入顺序（或访问顺序）。它的性能稍慢于 HashMap，但在需要维持顺序的场景中非常有用。\"]},\"1803\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.LinkedHashMap; import java.util.Map; public class LinkedHashMapExample { public static void main(String[] args) { Map<String, Integer> map = new LinkedHashMap<>(); // 添加键值对 map.put(\\\"Apple\\\", 10); map.put(\\\"Banana\\\", 20); map.put(\\\"Orange\\\", 30); System.out.println(\\\"LinkedHashMap: \\\" + map); // 遍历键值对（按插入顺序） for (Map.Entry<String, Integer> entry : map.entrySet()) { System.out.println(\\\"Key: \\\" + entry.getKey() + \\\", Value: \\\" + entry.getValue()); } } }\"]},\"1804\":{\"h\":\"五、 类\",\"t\":[\"TreeMap 是基于红黑树的实现，键值对按键的自然顺序或指定的比较器顺序排序。由于 TreeMap 需要维护顺序，其操作（如 put、get、remove）的时间复杂度为 O(log n)。\"]},\"1805\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.Map; import java.util.TreeMap; public class TreeMapExample { public static void main(String[] args) { Map<String, Integer> map = new TreeMap<>(); // 添加键值对 map.put(\\\"Banana\\\", 20); map.put(\\\"Apple\\\", 10); map.put(\\\"Orange\\\", 30); System.out.println(\\\"TreeMap (sorted): \\\" + map); // 遍历键值对（按自然顺序） for (Map.Entry<String, Integer> entry : map.entrySet()) { System.out.println(\\\"Key: \\\" + entry.getKey() + \\\", Value: \\\" + entry.getValue()); } } }\"]},\"1806\":{\"h\":\"六、 类\",\"t\":[\"Hashtable 是一个线程安全的 Map 实现类，它不允许 null 键或 null 值。由于其线程安全性，Hashtable 的性能相比 HashMap 较低。\"]},\"1807\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.Hashtable; import java.util.Map; public class HashtableExample { public static void main(String[] args) { Map<String, Integer> map = new Hashtable<>(); // 添加键值对 map.put(\\\"Apple\\\", 10); map.put(\\\"Banana\\\", 20); map.put(\\\"Orange\\\", 30); System.out.println(\\\"Hashtable: \\\" + map); // 遍历键值对 for (Map.Entry<String, Integer> entry : map.entrySet()) { System.out.println(\\\"Key: \\\" + entry.getKey() + \\\", Value: \\\" + entry.getValue()); } } }\"]},\"1808\":{\"h\":\"七、 类\",\"t\":[\"ConcurrentHashMap 是线程安全的 HashMap 实现类，支持高效的并发操作，采用分段锁机制来提高性能。它不允许 null 键或 null 值。\"]},\"1809\":{\"h\":\"示例：使用\",\"t\":[\"import java.util.Map; import java.util.concurrent.ConcurrentHashMap; public class ConcurrentHashMapExample { public static void main(String[] args) { Map<String, Integer> map = new ConcurrentHashMap<>(); // 添加键值对 map.put(\\\"Apple\\\", 10); map.put(\\\"Banana\\\", 20); map.put(\\\"Orange\\\", 30); System.out.println(\\\"ConcurrentHashMap: \\\" + map); // 遍历键值对 for (Map.Entry<String, Integer> entry : map.entrySet()) { System.out.println(\\\"Key: \\\" + entry.getKey() + \\\", Value: \\\" + entry.getValue()); } } }\"]},\"1810\":{\"h\":\"八、总结\",\"t\":[\"Map 接口在 Java 集合框架中用于键值对的映射操作。不同的 Map 实现类（如 HashMap、LinkedHashMap、TreeMap、Hashtable、ConcurrentHashMap）提供了不同的功能和特性，适用于各种场景。选择适合的 Map` 实现类可以大大提高程序的性能和效率。\"]},\"1811\":{\"h\":\"Iterator\",\"t\":[\"在 Java 中，生成器（Generator） 的概念并不像 Python 中那样明确，但 Java 提供了一种机制来实现类似生成器的功能。迭代器（Iterator） 是 Java 集合框架中的一个重要接口，提供了一种遍历集合元素的统一方式。\"]},\"1812\":{\"h\":\"一、Java 中的迭代器（Iterator）\",\"t\":[\"Iterator 是 Java 集合框架中用于遍历集合元素的接口，它位于 java.util 包中。几乎所有的 Java 集合类（如 List、Set 等）都实现了 Iterable 接口，该接口提供了一个 iterator() 方法，用于返回一个 Iterator 对象。\"]},\"1813\":{\"h\":\"1. 接口的基本方法\",\"t\":[\"Iterator 接口定义了一些方法，用于遍历和操作集合中的元素：\",\"boolean hasNext()：如果仍有元素可以迭代，则返回 true。\",\"E next()：返回下一个元素。\",\"void remove()：从集合中移除上一次调用 next() 方法返回的元素（可选操作）。\"]},\"1814\":{\"h\":\"2. 示例：使用 遍历集合\",\"t\":[\"import java.util.ArrayList; import java.util.Iterator; import java.util.List; public class IteratorExample { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"Apple\\\"); list.add(\\\"Banana\\\"); list.add(\\\"Orange\\\"); // 获取 Iterator 对象 Iterator<String> iterator = list.iterator(); // 使用 Iterator 遍历集合 while (iterator.hasNext()) { String element = iterator.next(); System.out.println(element); // 可选：移除元素 if (\\\"Banana\\\".equals(element)) { iterator.remove(); // 从列表中移除 \\\"Banana\\\" } } System.out.println(\\\"List after removal: \\\" + list); } }\"]},\"1815\":{\"h\":\"3. 循环与迭代器\",\"t\":[\"Java 的增强型 for 循环（for-each）实际上是基于 Iterator 实现的。所有实现了 Iterable 接口的类都可以使用 for-each 进行迭代。\",\"for (String item : list) { System.out.println(item); }\"]},\"1816\":{\"h\":\"二、Java 中的生成器（Generator）\",\"t\":[\"Java 中没有像 Python 那样的原生生成器（即使用 yield 关键字的函数），但我们可以通过 实现 Iterator 接口 和 使用 Stream API 实现类似生成器的功能。\"]},\"1817\":{\"h\":\"1. 使用 接口模拟生成器\",\"t\":[\"我们可以创建一个类实现 Iterator 接口，通过自定义逻辑生成序列元素，类似于生成器的行为。\"]},\"1818\":{\"h\":\"示例：创建一个生成斐波那契数列的生成器\",\"t\":[\"import java.util.Iterator; public class FibonacciGenerator implements Iterator<Integer> { private int limit; // 生成多少个斐波那契数 private int count; // 当前生成的个数 private int prev1; // 上一个数 private int prev2; // 上上一个数 public FibonacciGenerator(int limit) { this.limit = limit; this.count = 0; this.prev1 = 0; this.prev2 = 1; } @Override public boolean hasNext() { return count < limit; } @Override public Integer next() { if (!hasNext()) { throw new IllegalStateException(\\\"No more elements\\\"); } int current = prev1; prev1 = prev2; prev2 = prev1 + current; count++; return current; } public static void main(String[] args) { FibonacciGenerator generator = new FibonacciGenerator(10); while (generator.hasNext()) { System.out.print(generator.next() + \\\" \\\"); } } }\"]},\"1819\":{\"h\":\"2. 使用 API 实现生成器\",\"t\":[\"Java 8 引入的 Stream API 提供了一个新的方式来生成序列。Stream 可以是无限的，可以通过 limit 或其他方法来控制生成多少元素。\"]},\"1820\":{\"h\":\"示例：使用 生成斐波那契数列\",\"t\":[\"import java.util.stream.Stream; public class StreamGeneratorExample { public static void main(String[] args) { Stream.iterate(new int[]{0, 1}, arr -> new int[]{arr[1], arr[0] + arr[1]}) .limit(10) .map(arr -> arr[0]) .forEach(System.out::println); } }\",\"在上面的示例中，Stream.iterate() 方法接受一个种子值（初始值）和一个生成函数来生成序列。map() 方法将生成的数组转换为单个整数，然后使用 forEach() 方法输出每个元素。\"]},\"1821\":{\"h\":\"三、 接口\",\"t\":[\"除了 Iterator，Java 还提供了一个更加强大的迭代器接口 ListIterator，它支持在双向遍历 List 集合中的元素。\"]},\"1822\":{\"h\":\"1. 的基本方法\",\"t\":[\"boolean hasNext()：如果向前遍历仍有元素可迭代，则返回 true。\",\"E next()：返回下一个元素。\",\"boolean hasPrevious()：如果向后遍历仍有元素可迭代，则返回 true。\",\"E previous()：返回前一个元素。\",\"void add(E e)：在当前迭代位置添加一个元素。\",\"void set(E e)：更新最近一次 next() 或 previous() 返回的元素。\"]},\"1823\":{\"h\":\"2. 示例：使用 遍历集合\",\"t\":[\"import java.util.ArrayList; import java.util.List; import java.util.ListIterator; public class ListIteratorExample { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"Apple\\\"); list.add(\\\"Banana\\\"); list.add(\\\"Orange\\\"); // 获取 ListIterator 对象 ListIterator<String> iterator = list.listIterator(); System.out.println(\\\"Forward iteration:\\\"); while (iterator.hasNext()) { String element = iterator.next(); System.out.println(element); } System.out.println(\\\"Backward iteration:\\\"); while (iterator.hasPrevious()) { String element = iterator.previous(); System.out.println(element); } } }\"]},\"1824\":{\"h\":\"四、总结\",\"t\":[\"迭代器（Iterator） 是 Java 集合框架中的一个重要接口，用于遍历集合元素。Iterator 提供了统一的方式来遍历 List、Set 等集合。\",\"生成器（Generator） 在 Java 中没有直接的概念，但可以通过实现 Iterator 接口或使用 Stream API 来实现类似生成器的功能。\",\"ListIterator 是一个增强版的迭代器接口，提供了双向遍历和元素添加、更新等功能。\",\"通过熟练使用迭代器和类似生成器的工具，Java 开发者可以更高效地管理和处理集合中的数据。\"]},\"1825\":{\"h\":\"反射\",\"t\":[\"Java 反射（Reflection）是一种强大的特性，允许程序在运行时检查和操作类、方法、字段等的属性。通过反射，你可以动态地创建对象、调用方法、访问和修改字段等，这些操作在编译时是未知的。\"]},\"1826\":{\"h\":\"反射的基本概念\",\"t\":[\"反射的核心是 Java 的 java.lang.reflect 包，它提供了类和接口来访问类的内部结构，包括：\",\"Class<T>：表示一个类或接口的运行时类型。\",\"Field：表示类的字段（成员变量）。\",\"Method：表示类的方法。\",\"Constructor<T>：表示类的构造方法。\"]},\"1827\":{\"h\":\"获取 对象\",\"t\":[\"要使用反射，首先需要获取一个 Class 对象，代表某个类的运行时类型。可以通过以下几种方式获得：\",\"使用 Class.forName()：\",\"Class<?> clazz = Class.forName(\\\"com.example.MyClass\\\");\",\"使用 ClassName.class：\",\"Class<MyClass> clazz = MyClass.class;\",\"使用对象的 getClass() 方法：\",\"MyClass obj = new MyClass(); Class<?> clazz = obj.getClass();\"]},\"1828\":{\"h\":\"动态创建对象\",\"t\":[\"通过反射，你可以在运行时动态创建类的实例：\",\"Class<MyClass> clazz = MyClass.class; MyClass obj = clazz.newInstance(); // 调用无参构造方法\",\"如果类没有无参构造方法，或者你想使用特定的构造方法，可以使用 Constructor 类：\",\"Constructor<MyClass> constructor = clazz.getConstructor(String.class); MyClass obj = constructor.newInstance(\\\"Hello\\\");\"]},\"1829\":{\"h\":\"访问和修改字段\",\"t\":[\"反射允许你访问和修改对象的字段，包括私有字段：\",\"Class<MyClass> clazz = MyClass.class; MyClass obj = clazz.newInstance(); Field field = clazz.getDeclaredField(\\\"name\\\"); field.setAccessible(true); // 允许访问私有字段 field.set(obj, \\\"John\\\"); // 设置字段的值 String value = (String) field.get(obj); // 获取字段的值\"]},\"1830\":{\"h\":\"调用方法\",\"t\":[\"你可以通过反射调用对象的方法，包括私有方法：\",\"Class<MyClass> clazz = MyClass.class; MyClass obj = clazz.newInstance(); Method method = clazz.getDeclaredMethod(\\\"sayHello\\\", String.class); method.setAccessible(true); // 允许访问私有方法 method.invoke(obj, \\\"John\\\"); // 调用方法\"]},\"1831\":{\"h\":\"示例：使用反射获取类的信息\",\"t\":[\"以下示例展示了如何使用反射获取类的所有字段、方法和构造方法的信息：\",\"import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.Method; public class ReflectionExample { public static void main(String[] args) throws Exception { Class<MyClass> clazz = MyClass.class; // 获取所有字段 System.out.println(\\\"Fields:\\\"); for (Field field : clazz.getDeclaredFields()) { System.out.println(\\\" \\\" + field); } // 获取所有方法 System.out.println(\\\"Methods:\\\"); for (Method method : clazz.getDeclaredMethods()) { System.out.println(\\\" \\\" + method); } // 获取所有构造方法 System.out.println(\\\"Constructors:\\\"); for (Constructor<?> constructor : clazz.getDeclaredConstructors()) { System.out.println(\\\" \\\" + constructor); } } } class MyClass { private String name; private int age; public MyClass() {} public MyClass(String name) { this.name = name; } public void sayHello(String greeting) { System.out.println(greeting + \\\", \\\" + name); } }\"]},\"1832\":{\"h\":\"反射的用途\",\"t\":[\"框架和库：许多 Java 框架和库（如 Spring、Hibernate）大量使用反射来实现依赖注入、对象关系映射等功能。\",\"动态代理：通过反射，Java 可以动态创建代理对象，用于 AOP（面向切面编程）等技术。\",\"测试框架：像 JUnit 这样的测试框架使用反射来调用测试方法。\",\"工具类：反射用于开发通用工具类，能够处理各种类型的对象，而无需预先了解对象的类型。\"]},\"1833\":{\"h\":\"反射的局限性和注意事项\",\"t\":[\"性能开销：反射相比直接调用方法或访问字段要慢，特别是在频繁调用时，这种性能差异更加明显。\",\"安全性：反射可以绕过访问控制，访问私有字段和方法，这可能导致安全问题。\",\"类型安全：反射操作通常\"]},\"1834\":{\"h\":\"泛型\",\"t\":[\"Java 泛型（Generics）是Java编程语言中一种强大的功能，允许你在编写代码时使用类型参数。它可以使代码更加通用和灵活，同时提高类型安全性。\"]},\"1835\":{\"h\":\"基本概念\",\"t\":[\"泛型类：定义类时使用泛型参数，这样类可以处理不同类型的数据，而不必在类的每个具体实例中指定特定的数据类型。\",\"泛型方法：定义方法时使用泛型参数，使方法可以处理不同类型的参数，而无需编写多个方法来处理不同类型的数据。\",\"泛型接口：接口也可以定义泛型参数，允许接口的实现类具有不同的类型参数。\"]},\"1836\":{\"h\":\"语法\",\"t\":[\"使用尖括号 <> 来定义泛型参数，常见的泛型参数符号包括：\",\"T（Type）\",\"E（Element）\",\"K（Key）\",\"V（Value）\",\"// 泛型类 public class Box<T> { private T t; public void set(T t) { this.t = t; } public T get() { return t; } } // 泛型方法 public <U> void print(U u) { System.out.println(u); }\"]},\"1837\":{\"h\":\"常见用途\",\"t\":[\"集合框架：Java的集合框架广泛使用泛型，如 List<T>、Map<K, V> 等。\",\"类型安全：泛型确保在编译时检查类型，而不是在运行时抛出 ClassCastException。\",\"减少冗余代码：使用泛型可以避免编写重复的代码，同时处理多种数据类型。\"]},\"1838\":{\"h\":\"限定泛型\",\"t\":[\"你可以对泛型参数设置上限或下限。例如，<T extends Number> 限制 T 必须是 Number 或其子类。\",\"public <T extends Number> void processNumber(T number) { System.out.println(number.doubleValue()); }\"]},\"1839\":{\"h\":\"通配符\",\"t\":[\"通配符 ? 用于表示不确定的类型，可以用于方法参数、返回类型或局部变量中。\",\"public void printList(List<?> list) { for (Object elem : list) { System.out.println(elem); } }\",\"通配符还可以限定上下限，例如 <? extends Number> 表示某个类型是 Number 或其子类，<? super Integer> 表示某个类型是 Integer 或其父类。\"]},\"1840\":{\"h\":\"注意事项\",\"t\":[\"类型擦除：在运行时，所有的泛型信息都会被擦除，泛型类型会被替换为其边界类型（默认是 Object）。因此，不能直接在运行时检查泛型类型，如 if (obj instanceof T) 是非法的。\",\"静态成员：泛型类的静态成员不能使用泛型参数。\",\"泛型在Java中是非常重要的，它提高了代码的重用性、类型安全性和可读性。\"]},\"1841\":{\"h\":\"注解\",\"t\":[\"Java 注解（Annotations）是一种为代码提供元数据的机制。注解不会直接影响程序的逻辑，但它们可以用于给编译器、开发工具、框架或运行时环境提供指示。\"]},\"1842\":{\"h\":\"基本概念\",\"t\":[\"元数据：注解是附加在代码上的数据，用于描述代码的属性或行为。\",\"不会改变代码行为：注解不会改变编译后的代码行为，但它们可以用于生成代码、编译时检查、运行时处理等。\",\"注解类型：注解本质上是一个特殊的接口，方法名对应注解的元素，返回值对应元素的类型。\"]},\"1843\":{\"h\":\"常见的内置注解\",\"t\":[\"Java提供了一些内置注解，用于基本的编译时检查和指示：\",\"@Override：表示当前方法覆盖了父类或接口中的方法。编译器会检查方法签名是否正确。\",\"@Override public String toString() { return \\\"Example\\\"; }\",\"@Deprecated：标记一个方法、类或字段已过时，建议不再使用。使用时编译器会给出警告。\",\"@Deprecated public void oldMethod() { // ... }\",\"@SuppressWarnings：用于抑制编译器警告。\",\"@SuppressWarnings(\\\"unchecked\\\") public void someMethod() { List list = new ArrayList(); // unchecked warning suppressed }\",\"@SafeVarargs：用于抑制使用泛型可变参数方法的警告。\",\"@SafeVarargs public final void method(T... args) { // ... }\",\"@FunctionalInterface：表示该接口是一个函数式接口，编译器会检查该接口是否符合要求（只有一个抽象方法）。\",\"@FunctionalInterface public interface MyFunctionalInterface { void doSomething(); }\"]},\"1844\":{\"h\":\"自定义注解\",\"t\":[\"你可以创建自己的注解，类似于定义接口：\",\"import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; // 定义注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation { String value() default \\\"default value\\\"; } // 使用注解 public class MyClass { @MyAnnotation(value = \\\"custom value\\\") public void myMethod() { // ... } }\"]},\"1845\":{\"h\":\"注解的元注解\",\"t\":[\"注解可以使用元注解来控制它们的行为。常见的元注解包括：\",\"@Retention：定义注解的生命周期。\",\"RetentionPolicy.SOURCE：只在源码中保留，编译时会被忽略。\",\"RetentionPolicy.CLASS：在字节码中保留，但运行时不可见（默认）。\",\"RetentionPolicy.RUNTIME：在运行时保留，可以通过反射获取。\",\"@Target：定义注解可以使用的地方，如类、方法、字段等。\",\"ElementType.TYPE：类、接口（包括注解类型）、枚举。\",\"ElementType.METHOD：方法。\",\"ElementType.FIELD：字段。\",\"@Inherited：允许子类继承父类的注解。\",\"@Documented：表明注解应当被包含在 javadoc 中。\"]},\"1846\":{\"h\":\"处理注解\",\"t\":[\"注解可以在运行时通过反射进行处理：\",\"import java.lang.reflect.Method; public class AnnotationProcessor { public static void main(String[] args) throws Exception { Method method = MyClass.class.getMethod(\\\"myMethod\\\"); MyAnnotation annotation = method.getAnnotation(MyAnnotation.class); if (annotation != null) { System.out.println(\\\"Value: \\\" + annotation.value()); } } }\"]},\"1847\":{\"h\":\"注解的应用场景\",\"t\":[\"框架：如Spring、Hibernate使用注解配置Bean、事务等。\",\"测试：如JUnit中的@Test注解。\",\"依赖注入：通过注解配置依赖关系。\",\"代码生成和处理：如APT（Annotation Processing Tool）用于在编译时生成代码。\",\"Java注解是一种灵活且强大的工具，广泛应用于现代Java开发中，为代码提供了更多的可读性和扩展性。\"]},\"1848\":{\"h\":\"单元测试\",\"t\":[\"Java单元测试是用于验证代码中的单个方法或类是否按照预期工作的一种技术。它通过编写小的、可独立执行的测试代码来检测代码中的错误，并在代码更改后确保现有功能不被破坏。\"]},\"1849\":{\"h\":\"1. 什么是单元测试\",\"t\":[\"单元测试（Unit Testing）是软件测试的一部分，专注于测试软件的最小可测试单元（通常是一个类中的方法）。通过编写单元测试，可以确保每个单元功能正常，减少代码中的bug，提高代码质量和可维护性。\"]},\"1850\":{\"h\":\"2. Java 单元测试框架\",\"t\":[\"Java有几个流行的单元测试框架，最常用的是JUnit和TestNG。\"]},\"1851\":{\"h\":\"2.1 JUnit\",\"t\":[\"JUnit是Java平台最流行的单元测试框架之一。JUnit 4和5都是常用版本，其中JUnit 5是最新版本，提供了更强大的功能和灵活性。\",\"添加JUnit依赖： 如果你使用Maven构建工具，可以在pom.xml文件中添加以下依赖：\",\"<dependencies> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.10.0</version> <scope>test</scope> </dependency> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.10.0</version> <scope>test</scope> </dependency> </dependencies>\"]},\"1852\":{\"h\":\"3. 编写JUnit测试用例\",\"t\":[\"在JUnit中，测试用例通常是一个包含测试方法的类。每个测试方法用于测试一个特定的功能或方法。\"]},\"1853\":{\"h\":\"3.1 基本测试用例\",\"t\":[\"示例：\",\"import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; class CalculatorTest { @Test void testAdd() { Calculator calculator = new Calculator(); int result = calculator.add(2, 3); assertEquals(5, result, \\\"The addition result should be 5\\\"); } }\",\"在这个例子中：\",\"@Test：标记一个方法为测试方法。\",\"assertEquals(expected, actual)：断言expected值和actual值是否相等。\"]},\"1854\":{\"h\":\"3.2 运行测试\",\"t\":[\"可以通过IDE（如IntelliJ IDEA或Eclipse）或Maven命令运行测试。测试成功通过时，框架将显示绿色的进度条，表示所有测试都通过；如果有测试失败，将显示红色，并提供详细的错误信息。\"]},\"1855\":{\"h\":\"4. 测试常用注解\",\"t\":[\"@BeforeEach：在每个测试方法执行前运行，通常用于初始化。\",\"@AfterEach：在每个测试方法执行后运行，通常用于清理。\",\"@BeforeAll：在所有测试方法执行前运行，仅运行一次，通常用于一次性初始化。\",\"@AfterAll：在所有测试方法执行后运行，仅运行一次，通常用于一次性清理。\",\"@Disabled：标记测试方法为忽略，暂时不运行。\",\"示例：\",\"import org.junit.jupiter.api.*; class CalculatorTest { private Calculator calculator; @BeforeEach void setUp() { calculator = new Calculator(); } @AfterEach void tearDown() { calculator = null; } @Test void testAdd() { assertEquals(5, calculator.add(2, 3)); } @Test @Disabled(\\\"Disabled until bug #123 is fixed\\\") void testSubtract() { assertEquals(1, calculator.subtract(3, 2)); } }\"]},\"1856\":{\"h\":\"5. 断言（Assertions）\",\"t\":[\"断言是单元测试中用于验证测试结果是否符合预期的语句。JUnit提供了许多常用的断言方法：\",\"assertEquals(expected, actual)：验证两个值是否相等。\",\"assertNotEquals(unexpected, actual)：验证两个值是否不相等。\",\"assertTrue(condition)：验证条件是否为真。\",\"assertFalse(condition)：验证条件是否为假。\",\"assertNull(object)：验证对象是否为null。\",\"assertNotNull(object)：验证对象是否不为null。\",\"assertThrows(expectedType, executable)：验证执行代码是否抛出指定的异常类型。\",\"示例：\",\"@Test void testDivide() { ArithmeticException exception = assertThrows(ArithmeticException.class, () -> { calculator.divide(10, 0); }); assertEquals(\\\"/ by zero\\\", exception.getMessage()); }\"]},\"1857\":{\"h\":\"6. 参数化测试\",\"t\":[\"参数化测试允许使用不同的参数多次运行同一个测试方法。在JUnit 5中，使用@ParameterizedTest注解可以实现参数化测试。\",\"示例：\",\"import org.junit.jupiter.params.ParameterizedTest; import org.junit.jupiter.params.provider.ValueSource; class CalculatorTest { @ParameterizedTest @ValueSource(ints = { 1, 2, 3, 4, 5 }) void testIsPositive(int number) { assertTrue(calculator.isPositive(number)); } }\"]},\"1858\":{\"h\":\"7. Mocking 测试\",\"t\":[\"在单元测试中，有时需要对依赖项进行模拟，以隔离被测试的单元。Mockito是Java中最流行的Mocking框架之一，用于创建和管理模拟对象。\",\"添加Mockito依赖：\",\"<dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>4.0.0</version> <scope>test</scope> </dependency>\",\"示例：\",\"import org.junit.jupiter.api.Test; import org.mockito.Mockito; class UserServiceTest { @Test void testGetUserById() { UserRepository userRepository = Mockito.mock(UserRepository.class); UserService userService = new UserService(userRepository); User mockUser = new User(\\\"John\\\", \\\"Doe\\\"); Mockito.when(userRepository.findById(1)).thenReturn(mockUser); User user = userService.getUserById(1); assertEquals(\\\"John\\\", user.getFirstName()); } }\"]},\"1859\":{\"h\":\"总结\",\"t\":[\"Java单元测试是确保代码质量的重要手段。通过使用JUnit框架，可以轻松编写、运行和管理测试用例，从而有效地发现和修复代码中的问题。掌握JUnit的常用功能和工具（如Mocking、参数化测试）将有助于编写健壮且可维护的单元测试，提高整个项目的稳定性和可靠性。\"]},\"1860\":{\"h\":\"序列化\",\"t\":[\"Java 序列化（Serialization）是将对象的状态转换为字节流的过程，这个字节流可以保存到文件、数据库或者通过网络传输。反序列化（Deserialization）是将字节流恢复为对象的过程。\"]},\"1861\":{\"h\":\"序列化的用途\",\"t\":[\"持久化：将对象的状态保存到硬盘中，便于以后恢复。\",\"传输：在分布式系统中，通过网络传输对象的状态。\",\"缓存：将对象序列化后存储到缓存中，减少重新计算的时间。\"]},\"1862\":{\"h\":\"序列化的基本要求\",\"t\":[\"实现 Serializable 接口：要序列化的类必须实现 java.io.Serializable 接口。该接口是一个标记接口，不包含任何方法。\",\"serialVersionUID：每个可序列化类建议都定义一个 serialVersionUID 字段，用于标识类的版本。如果类的定义发生变化，而没有相应地修改 serialVersionUID，则在反序列化时可能会发生 InvalidClassException。\",\"public class MyClass implements Serializable { private static final long serialVersionUID = 1L; private String name; private int age; // Constructors, getters, setters }\"]},\"1863\":{\"h\":\"序列化和反序列化\",\"t\":[\"序列化：使用 ObjectOutputStream 类的 writeObject() 方法。\",\"反序列化：使用 ObjectInputStream 类的 readObject() 方法。\",\"import java.io.*; public class SerializationExample { public static void main(String[] args) { MyClass obj = new MyClass(\\\"John\\\", 30); // 序列化 try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\\\"object.ser\\\"))) { out.writeObject(obj); } catch (IOException e) { e.printStackTrace(); } // 反序列化 try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\\\"object.ser\\\"))) { MyClass deserializedObj = (MyClass) in.readObject(); System.out.println(\\\"Name: \\\" + deserializedObj.getName()); System.out.println(\\\"Age: \\\" + deserializedObj.getAge()); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } } } class MyClass implements Serializable { private static final long serialVersionUID = 1L; private String name; private int age; public MyClass(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public int getAge() { return age; } }\"]},\"1864\":{\"h\":\"关键字\",\"t\":[\"在序列化过程中，标记为 transient 的字段不会被序列化。这对于那些不需要或不能被序列化的字段非常有用，例如密码或其他敏感数据。\",\"public class MyClass implements Serializable { private static final long serialVersionUID = 1L; private String name; private transient int age; // 这个字段不会被序列化 // Constructors, getters, setters }\"]},\"1865\":{\"h\":\"接口\",\"t\":[\"Externalizable 接口提供了更细粒度的控制，可以通过实现 writeExternal() 和 readExternal() 方法来自定义序列化和反序列化过程。\",\"import java.io.*; public class MyExternalizableClass implements Externalizable { private String name; private int age; public MyExternalizableClass() { // No-arg constructor is required for Externalizable } public MyExternalizableClass(String name, int age) { this.name = name; this.age = age; } @Override public void writeExternal(ObjectOutput out) throws IOException { out.writeObject(name); out.writeInt(age); } @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { name = (String) in.readObject(); age = in.readInt(); } // Getters, setters }\"]},\"1866\":{\"h\":\"序列化的注意事项\",\"t\":[\"对象图：在序列化一个对象时，所有可达的对象（引用的对象）也会被序列化。这被称为对象图。\",\"serialVersionUID：如果没有显式声明，JVM 会自动生成一个，但建议手动声明以避免潜在的问题。\",\"版本兼容性：在反序列化时，类的版本必须兼容，否则会抛出异常。\",\"安全性：序列化和反序列化存在安全风险，特别是在反序列化未受信任的数据时，可能导致反序列化漏洞。\",\"Java 序列化是一个功能强大但也需要谨慎使用的机制，尤其在涉及安全和版本兼容性时。\"]},\"1867\":{\"h\":\"IO流\",\"t\":[\"Java IO（输入输出）流是 Java 中用于处理输入和输出操作的一套 API。它支持读写文件、读取用户输入、网络通信等多种场景。Java IO 流分为字节流和字符流，每种流都有输入流和输出流。理解 Java 的 IO 流机制是进行 Java 编程的基础。\"]},\"1868\":{\"h\":\"一、Java IO 流的分类\",\"t\":[\"Java IO 流主要分为以下几类：\",\"按数据单位划分：\",\"字节流（Byte Stream）：以字节（8 位）为单位进行输入输出操作，通常用于处理二进制数据（如图片、音频、视频等）。 \",\"输入流：InputStream 及其子类\",\"输出流：OutputStream 及其子类\",\"字符流（Character Stream）：以字符（16 位 Unicode）为单位进行输入输出操作，通常用于处理文本数据。 \",\"输入流：Reader 及其子类\",\"输出流：Writer 及其子类\",\"按流的方向划分：\",\"输入流（Input Stream/Reader）：用于读取数据\",\"输出流（Output Stream/Writer）：用于写入数据\",\"按功能划分：\",\"节点流（Node Stream）：直接与数据源或数据目的地相连的流，如 FileInputStream、FileOutputStream。\",\"处理流（Processing Stream）：对节点流进行包装，提供更高效或便捷的输入输出功能，如 BufferedInputStream、BufferedReader。\"]},\"1869\":{\"h\":\"二、字节流（Byte Streams）\",\"t\":[\"字节流用于处理所有类型的二进制数据。在 Java 中，所有的字节流类都是 InputStream 和 OutputStream 类的子类。\"]},\"1870\":{\"h\":\"1. 字节输入流（InputStream）\",\"t\":[\"InputStream：字节输入流的抽象基类，用于读取字节数据。常用子类包括： \",\"FileInputStream：从文件中读取字节流。\",\"ByteArrayInputStream：从字节数组中读取字节流。\",\"BufferedInputStream：为其他输入流提供缓冲功能，提高读取效率。\",\"示例：读取文件中的字节数据\",\"import java.io.FileInputStream; import java.io.IOException; public class ByteInputExample { public static void main(String[] args) { try (FileInputStream fis = new FileInputStream(\\\"example.txt\\\")) { int data; while ((data = fis.read()) != -1) { // 读取字节数据 System.out.print((char) data); // 将字节转换为字符 } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1871\":{\"h\":\"2. 字节输出流（OutputStream）\",\"t\":[\"OutputStream：字节输出流的抽象基类，用于写入字节数据。常用子类包括： \",\"FileOutputStream：将字节数据写入文件。\",\"ByteArrayOutputStream：将字节数据写入字节数组。\",\"BufferedOutputStream：为其他输出流提供缓冲功能，提高写入效率。\",\"示例：将字节数据写入文件\",\"import java.io.FileOutputStream; import java.io.IOException; public class ByteOutputExample { public static void main(String[] args) { String content = \\\"Hello, World!\\\"; try (FileOutputStream fos = new FileOutputStream(\\\"output.txt\\\")) { fos.write(content.getBytes()); // 写入字节数据 } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1872\":{\"h\":\"三、字符流（Character Streams）\",\"t\":[\"字符流用于处理文本数据（字符）。在 Java 中，所有的字符流类都是 Reader 和 Writer 类的子类。\"]},\"1873\":{\"h\":\"1. 字符输入流（Reader）\",\"t\":[\"Reader：字符输入流的抽象基类，用于读取字符数据。常用子类包括： \",\"FileReader：从文件中读取字符流。\",\"CharArrayReader：从字符数组中读取字符流。\",\"BufferedReader：为其他字符输入流提供缓冲功能，支持按行读取。\",\"示例：使用 BufferedReader 读取文件中的文本数据\",\"import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; public class CharInputExample { public static void main(String[] args) { try (BufferedReader br = new BufferedReader(new FileReader(\\\"example.txt\\\"))) { String line; while ((line = br.readLine()) != null) { // 读取每一行 System.out.println(line); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1874\":{\"h\":\"2. 字符输出流（Writer）\",\"t\":[\"Writer：字符输出流的抽象基类，用于写入字符数据。常用子类包括： \",\"FileWriter：将字符数据写入文件。\",\"CharArrayWriter：将字符数据写入字符数组。\",\"BufferedWriter：为其他字符输出流提供缓冲功能，支持按行写入。\",\"示例：使用 BufferedWriter 写入文本数据到文件\",\"import java.io.BufferedWriter; import java.io.FileWriter; import java.io.IOException; public class CharOutputExample { public static void main(String[] args) { String content = \\\"Hello, World!\\\"; try (BufferedWriter bw = new BufferedWriter(new FileWriter(\\\"output.txt\\\"))) { bw.write(content); // 写入字符数据 bw.newLine(); // 写入一个换行符 } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1875\":{\"h\":\"四、常用的 IO 流类\",\"t\":[\"以下是 Java 中一些常用的 IO 流类：\",\"类\",\"描述\",\"FileInputStream\",\"从文件中读取字节数据。\",\"FileOutputStream\",\"将字节数据写入文件。\",\"BufferedInputStream\",\"提供缓冲机制的字节输入流。\",\"BufferedOutputStream\",\"提供缓冲机制的字节输出流。\",\"FileReader\",\"从文件中读取字符数据。\",\"FileWriter\",\"将字符数据写入文件。\",\"BufferedReader\",\"提供缓冲机制的字符输入流，支持按行读取。\",\"BufferedWriter\",\"提供缓冲机制的字符输出流，支持按行写入。\",\"PrintWriter\",\"提供打印格式化数据的字符输出流。\",\"ObjectInputStream\",\"反序列化对象的字节输入流。\",\"ObjectOutputStream\",\"序列化对象的字节输出流。\"]},\"1876\":{\"h\":\"五、序列化与反序列化\",\"t\":[\"序列化：将对象转换为字节流的过程，以便存储或传输。\",\"反序列化：将字节流转换为对象的过程。\",\"在 Java 中，序列化和反序列化通常使用 ObjectOutputStream 和 ObjectInputStream 类来实现。类需要实现 Serializable 接口才能序列化。\",\"import java.io.*; // Serializable 类示例 class Person implements Serializable { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \\\"Person{name='\\\" + name + \\\"', age=\\\" + age + '}'; } } public class SerializationExample { public static void main(String[] args) { Person person = new Person(\\\"John\\\", 30); // 序列化 try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\\\"person.ser\\\"))) { oos.writeObject(person); // 将对象写入文件 } catch (IOException e) { e.printStackTrace(); } // 反序列化 try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\\\"person.ser\\\"))) { Person deserializedPerson = (Person) ois.readObject(); // 从文件读取对象 System.out.println(deserializedPerson); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } } }\"]},\"1877\":{\"h\":\"六、文件流与缓冲流的区别\",\"t\":[\"文件流（File Stream）：直接操作文件，速度较慢。\",\"缓冲流（Buffered Stream）：对文件流进行包装，提供缓冲区来提高读写效率。\"]},\"1878\":{\"h\":\"七、Java NIO（New IO）\",\"t\":[\"Java NIO（Non-blocking IO）是 Java 1.4 引入的一套新的 IO API，相比传统的 IO（BIO，Blocking IO），NIO 更加高效，支持非阻塞模式和多路复用。Java NIO\",\"包含 Channel、Buffer、Selector 等核心组件，适用于高性能的网络编程和文件操作。\"]},\"1879\":{\"h\":\"八、总结\",\"t\":[\"Java IO 提供了多种流类来满足不同的输入输出需求，字节流适合处理二进制数据，而字符流适合处理文本数据。Java 中的 IO 流设计遵循装饰器模式，通过处理流来增强基本流的功能。掌握这些 IO 基础对于构建 Java 应用程序至关重要。\"]},\"1880\":{\"h\":\"Java NIO\",\"t\":[\"Java NIO（New Input/Output）是 Java 1.4 中引入的一套新的 IO API，与传统的 Java IO（即“Old IO”或“Blocking IO”）相比，Java NIO 提供了更高效的 IO 操作方式，支持非阻塞 IO（Non-blocking IO）和多路复用。它适用于需要处理大量数据的高性能服务器、网络应用等场景。\"]},\"1881\":{\"h\":\"一、Java NIO 的主要组件\",\"t\":[\"Java NIO 的核心组件包括：\",\"Channel（通道）：负责数据的传输。\",\"Buffer（缓冲区）：用于存储数据。\",\"Selector（选择器）：用于管理多个通道的 I/O 操作。\"]},\"1882\":{\"h\":\"二、Channel（通道）\",\"t\":[\"通道（Channel）是 Java NIO 中的核心概念之一。它类似于传统 IO 中的流（Stream），但与流不同的是，通道是双向的，既可以用于读操作，也可以用于写操作。通道的常用实现类有：\",\"FileChannel：用于读取、写入、映射和操作文件的通道。\",\"DatagramChannel：用于通过 UDP 读取和写入网络中的数据。\",\"SocketChannel：用于通过 TCP 读取和写入网络中的数据。\",\"ServerSocketChannel：可以监听新进来的 TCP 连接，像传统的服务器套接字。\"]},\"1883\":{\"h\":\"创建 示例\",\"t\":[\"import java.io.RandomAccessFile; import java.nio.channels.FileChannel; import java.nio.ByteBuffer; public class FileChannelExample { public static void main(String[] args) throws Exception { RandomAccessFile file = new RandomAccessFile(\\\"example.txt\\\", \\\"rw\\\"); FileChannel fileChannel = file.getChannel(); // 获取 FileChannel // 创建一个容量为 48 字节的缓冲区 ByteBuffer buffer = ByteBuffer.allocate(48); // 从通道读取数据到缓冲区 int bytesRead = fileChannel.read(buffer); while (bytesRead != -1) { buffer.flip(); // 切换缓冲区为读取模式 while (buffer.hasRemaining()) { System.out.print((char) buffer.get()); // 逐字节读取 } buffer.clear(); // 清空缓冲区，准备下一次读取 bytesRead = fileChannel.read(buffer); } file.close(); } }\"]},\"1884\":{\"h\":\"三、Buffer（缓冲区）\",\"t\":[\"缓冲区（Buffer） 是一个对象，它包含一些要写入或要读出的数据。NIO 的所有数据都是用缓冲区处理的，数据是从通道读入到缓冲区中，或者从缓冲区写入到通道中的。\",\"缓冲区本质上是一个数组，它是一个包含数据的连续块，可以通过各种方式来操作这些数据。常用的缓冲区类型有：\",\"ByteBuffer：字节缓冲区。\",\"CharBuffer：字符缓冲区。\",\"IntBuffer：整数缓冲区。\",\"FloatBuffer：浮点缓冲区。\",\"DoubleBuffer：双精度浮点缓冲区。\",\"LongBuffer：长整数缓冲区。\",\"ShortBuffer：短整数缓冲区。\"]},\"1885\":{\"h\":\"Buffer 的基本操作\",\"t\":[\"Buffer 的核心属性和方法包括：\",\"capacity：缓冲区的容量，缓冲区能够容纳的最大数据量。\",\"position：当前读写位置。\",\"limit：表示缓冲区的可操作数据的大小，不能对 limit 之外的数据进行读写操作。\",\"缓冲区的常用方法有：\",\"flip()：将缓冲区从写模式切换到读模式。\",\"clear()：清空缓冲区，准备写入数据。\",\"rewind()：重绕缓冲区，从头开始读取数据。\",\"mark() 和 reset()：标记和重置缓冲区到特定位置。\"]},\"1886\":{\"h\":\"四、Selector（选择器）\",\"t\":[\"选择器（Selector） 是 Java NIO 中的一个对象，它用于检查一个或多个通道的状态，看是否有事件发生。Selector 是实现非阻塞 IO 的关键组件。通过 Selector，单个线程可以监视多个通道的 IO 状态，极大地提高了 IO 操作的效率。\"]},\"1887\":{\"h\":\"Selector 的使用步骤\",\"t\":[\"创建 Selector：\",\"Selector selector = Selector.open();\",\"注册通道到 Selector： 将一个通道（如 SocketChannel）注册到 Selector 上，并指定感兴趣的操作（如 OP_READ、OP_WRITE 等）。\",\"SocketChannel socketChannel = SocketChannel.open(); socketChannel.configureBlocking(false); // 设置为非阻塞模式 socketChannel.register(selector, SelectionKey.OP_READ); // 注册到 Selector 并指定感兴趣的操作\",\"轮询通道的状态： 使用 select() 方法阻塞等待，直到至少有一个通道准备好进行 IO 操作。\",\"while (true) { selector.select(); // 阻塞，直到至少有一个通道准备好 Set<SelectionKey> selectedKeys = selector.selectedKeys(); Iterator<SelectionKey> iterator = selectedKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); if (key.isReadable()) { // 处理读取操作 } else if (key.isWritable()) { // 处理写入操作 } iterator.remove(); // 移除已处理的键 } }\"]},\"1888\":{\"h\":\"五、Java NIO 的非阻塞模式\",\"t\":[\"Java NIO 的一个重要特性是支持非阻塞 IO。传统的 IO 操作是阻塞的，也就是说，当一个线程执行 IO 操作时，它会被阻塞，直到操作完成。而在 NIO 中，可以让一个线程发起一个 IO 操作，然后继续处理其他事情，直到 IO 操作完成。\"]},\"1889\":{\"h\":\"六、Java NIO 实现网络通信的示例\",\"t\":[\"以下是一个使用 Java NIO 实现简单的服务器和客户端的示例：\"]},\"1890\":{\"h\":\"1. NIO 服务器\",\"t\":[\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.ServerSocketChannel; import java.nio.channels.SocketChannel; public class NioServer { public static void main(String[] args) { try { ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.bind(new InetSocketAddress(8080)); serverSocketChannel.configureBlocking(false); // 设置为非阻塞模式 System.out.println(\\\"服务器已启动，等待客户端连接...\\\"); while (true) { SocketChannel socketChannel = serverSocketChannel.accept(); // 非阻塞模式，不会阻塞 if (socketChannel != null) { System.out.println(\\\"客户端已连接：\\\" + socketChannel.getRemoteAddress()); ByteBuffer buffer = ByteBuffer.allocate(1024); buffer.put(\\\"Hello from server!\\\".getBytes()); buffer.flip(); socketChannel.write(buffer); // 发送数据到客户端 socketChannel.close(); } } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1891\":{\"h\":\"2. NIO 客户端\",\"t\":[\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.SocketChannel; public class NioClient { public static void main(String[] args) { try { SocketChannel socketChannel = SocketChannel.open(); socketChannel.connect(new InetSocketAddress(\\\"localhost\\\", 8080)); ByteBuffer buffer = ByteBuffer.allocate(1024); socketChannel.read(buffer); buffer.flip(); System.out.println(\\\"从服务器收到消息: \\\" + new String(buffer.array(), 0, buffer.limit())); socketChannel.close(); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1892\":{\"h\":\"七、Java NIO 与传统 IO 的对比\",\"t\":[\"特性\",\"Java NIO\",\"传统 IO\",\"IO 模型\",\"非阻塞 IO，支持多路复用\",\"阻塞 IO\",\"数据处理方式\",\"基于缓冲区（Buffer）处理数据\",\"基于流（Stream）处理数据\",\"IO 方向\",\"双向（Channel）\",\"单向（InputStream 或 OutputStream）\",\"多线程支持\",\"支持单线程处理多个通道，提高效率\",\"一个线程处理一个流，效率较低\",\"适用场景\",\"高性能、大规模并发的网络应用\",\"简单的文件读写或少量数据处理\"]},\"1893\":{\"h\":\"八、总结\",\"t\":[\"Java NIO 提供了比传统 IO 更高效和灵活的 API，适用于高性能、高并发的网络编程场景。它通过 Channel、Buffer 和 Selector 等组件，使开发者能够编写出高效、非阻塞的 IO 代码。掌握 Java NIO 是构建高性能网络应用的重要技能。\"]},\"1894\":{\"h\":\"异常处理\",\"t\":[\"Java 的异常处理机制是一种处理程序运行期间可能出现的错误或异常情况的方式。它使得代码在出现错误时不会立即崩溃，而是可以捕获并处理异常，提供更可靠的程序运行方式。\"]},\"1895\":{\"h\":\"一、什么是异常？\",\"t\":[\"异常（Exception）是程序运行时出现的非正常情况或错误。Java 中的异常是通过类来表示的，所有异常类都是从 java.lang.Throwable 类派生的。Throwable 类有两个主要的子类：\",\"Error：错误，表示系统级别的严重问题，通常程序无法恢复（如 OutOfMemoryError）。Error 类及其子类不需要处理，程序通常无法捕获它们。\",\"Exception：异常，表示程序级别的异常情况，可以由程序本身处理，分为以下两类： \",\"受检异常（Checked Exception）：编译时异常，必须显式地捕获或声明抛出，例如 IOException、SQLException。\",\"非受检异常（Unchecked Exception）：运行时异常，程序员的逻辑错误导致的异常，例如 NullPointerException、ArrayIndexOutOfBoundsException。\"]},\"1896\":{\"h\":\"二、异常的继承体系\",\"t\":[\"Java 异常类的层次结构如下所示：\",\"java.lang.Object └── java.lang.Throwable ├── java.lang.Error └── java.lang.Exception ├── java.lang.RuntimeException └── 其他异常类（如 IOException、SQLException 等）\"]},\"1897\":{\"h\":\"三、异常处理的关键字\",\"t\":[\"Java 使用 5 个关键字来处理异常：\",\"try：用于包裹可能会引发异常的代码块。\",\"catch：用于捕获异常，并处理异常。\",\"finally：无论是否发生异常，都会执行的代码块，通常用于释放资源。\",\"throw：显式抛出一个异常。\",\"throws：用于声明一个方法可能抛出的异常。\"]},\"1898\":{\"h\":\"四、基本的异常处理机制\",\"t\":[\"在 Java 中，异常处理通常使用 try-catch-finally 结构。以下是一个简单的示例：\",\"public class ExceptionExample { public static void main(String[] args) { try { // 可能会引发异常的代码 int result = 10 / 0; // 这会引发 ArithmeticException } catch (ArithmeticException e) { // 捕获并处理异常 System.out.println(\\\"捕获到异常: \\\" + e.getMessage()); } finally { // 无论是否发生异常，都会执行 System.out.println(\\\"执行 finally 代码块\\\"); } } }\"]},\"1899\":{\"h\":\"输出：\",\"t\":[\"捕获到异常: / by zero 执行 finally 代码块\"]},\"1900\":{\"h\":\"五、异常处理的工作流程\",\"t\":[\"当程序在 try 块中执行时，遇到异常情况（如除以零）。\",\"异常被引发（即“抛出”），Java 运行时系统（JVM）查找能够处理该异常的 catch 块。\",\"如果找到匹配的 catch 块，则执行它。\",\"如果没有找到匹配的 catch 块，程序会终止，并且异常信息会被打印到控制台。\",\"无论异常是否被捕获，finally 块都会执行（除非 JVM 退出或线程被中断）。\"]},\"1901\":{\"h\":\"六、多个 块\",\"t\":[\"一个 try 块可以跟多个 catch 块，每个 catch 块处理不同类型的异常。异常处理按照从上到下的顺序进行，如果某个 catch 块匹配了异常类型，则执行该块，其后的 catch 块将被忽略。\",\"public class MultipleCatchExample { public static void main(String[] args) { try { int[] arr = new int[5]; arr[5] = 30 / 0; // 可能会引发 ArithmeticException 或 ArrayIndexOutOfBoundsException } catch (ArithmeticException e) { System.out.println(\\\"捕获到算术异常: \\\" + e.getMessage()); } catch (ArrayIndexOutOfBoundsException e) { System.out.println(\\\"捕获到数组索引越界异常: \\\" + e.getMessage()); } catch (Exception e) { System.out.println(\\\"捕获到异常: \\\" + e.getMessage()); } } }\"]},\"1902\":{\"h\":\"输出：\",\"t\":[\"捕获到算术异常: / by zero\"]},\"1903\":{\"h\":\"七、使用 块\",\"t\":[\"finally 块用于在代码执行后进行清理操作，例如关闭文件、释放资源、断开数据库连接等。finally 块总是会执行，无论是否发生异常，除非 JVM 退出或线程被中断。\",\"public class FinallyExample { public static void main(String[] args) { try { int data = 50 / 0; // 这会引发 ArithmeticException } catch (ArithmeticException e) { System.out.println(\\\"异常被捕获: \\\" + e.getMessage()); } finally { System.out.println(\\\"finally 块始终会执行\\\"); } } }\"]},\"1904\":{\"h\":\"输出：\",\"t\":[\"异常被捕获: / by zero finally 块始终会执行\"]},\"1905\":{\"h\":\"八、 和\",\"t\":[\"throw：用于显式地抛出一个异常，通常用于自定义异常处理。\",\"throws：用于声明一个方法可能抛出的异常类型，表示方法可能不会捕获这些异常，需要调用方处理。\"]},\"1906\":{\"h\":\"使用 抛出异常\",\"t\":[\"public class ThrowExample { public static void validateAge(int age) { if (age < 18) { throw new IllegalArgumentException(\\\"年龄必须大于或等于18岁\\\"); } } public static void main(String[] args) { try { validateAge(15); } catch (IllegalArgumentException e) { System.out.println(\\\"异常: \\\" + e.getMessage()); } } }\"]},\"1907\":{\"h\":\"输出：\",\"t\":[\"异常: 年龄必须大于或等于18岁\"]},\"1908\":{\"h\":\"使用 声明异常\",\"t\":[\"import java.io.IOException; public class ThrowsExample { public static void readFile() throws IOException { throw new IOException(\\\"文件未找到\\\"); } public static void main(String[] args) { try { readFile(); } catch (IOException e) { System.out.println(\\\"捕获到异常: \\\" + e.getMessage()); } } }\"]},\"1909\":{\"h\":\"九、自定义异常\",\"t\":[\"Java 允许创建自定义异常，继承自 Exception 或 RuntimeException 类。以下是一个自定义异常的示例：\",\"// 自定义异常类 class MyCustomException extends Exception { public MyCustomException(String message) { super(message); } } public class CustomExceptionExample { public static void main(String[] args) { try { // 手动抛出自定义异常 throw new MyCustomException(\\\"这是一个自定义异常\\\"); } catch (MyCustomException e) { System.out.println(\\\"捕获到自定义异常: \\\" + e.getMessage()); } } }\"]},\"1910\":{\"h\":\"十、最佳实践\",\"t\":[\"捕获特定异常：避免使用通用的 Exception 类来捕获所有异常，优先捕获特定的异常类型。\",\"异常信息明确：提供有意义的异常信息，以便更好地调试和排查问题。\",\"使用 finally 块进行资源清理：确保无论是否发生异常，都会正确释放资源。\",\"避免在循环中使用异常控制流：异常处理机制较为昂贵，应避免将其用作正常的控制流机制。\",\"使用自定义异常：当需要提供更具体的错误信息时，考虑使用自定义异常。\",\"记录异常日志：在处理异常时，通常需要记录异常日志，以便后续分析。\"]},\"1911\":{\"h\":\"十一、总结\",\"t\":[\"Java 异常处理机制提供了一种强大的方式来处理程序运行时的错误和异常情况。通过正确使用 try-catch-finally 结构、throw 和 throws 关键字，以及自定义异常，开发者可以编写健壮、稳定且易于调试的代码。\"]},\"1912\":{\"h\":\"日志\",\"t\":[\"Java 日志（Logging）是一种用于记录应用程序运行时信息的机制。日志是调试和监控应用程序的重要工具，它可以帮助开发人员发现问题、分析错误和记录重要的操作过程。\"]},\"1913\":{\"h\":\"一、Java 日志的重要性\",\"t\":[\"日志在应用程序开发和维护中有以下几个重要作用：\",\"调试和排查问题：记录程序运行过程中的关键信息，帮助快速定位和解决问题。\",\"监控和审计：记录用户行为、系统事件等信息，便于监控系统状态和进行安全审计。\",\"数据分析：日志数据可以用于分析系统性能和用户行为，帮助改进系统设计。\"]},\"1914\":{\"h\":\"二、Java 常用的日志框架\",\"t\":[\"Java 生态中有多种日志框架，它们提供了不同的功能和灵活性。常用的日志框架有：\",\"Java 内置日志框架（java.util.logging，简称 JUL）：Java 提供的内置日志工具，功能简单，适合入门使用。\",\"Apache Log4j：一个功能强大的日志记录框架，支持多种日志输出方式和配置。\",\"Log4j 2：Log4j 的升级版本，提供了更好的性能和更多功能。\",\"SLF4J（Simple Logging Facade for Java）：一个日志门面（Facade）框架，不提供日志实现本身，而是与其他日志框架（如 Log4j、JUL 等）结合使用。\",\"Logback：由 Log4j 的原作者设计，作为 Log4j 的继任者，功能强大，性能优越。\"]},\"1915\":{\"h\":\"三、Java 内置日志框架（ ）\",\"t\":[\"java.util.logging（JUL）是 Java 的内置日志框架，它无需额外引入第三方依赖，适合简单的日志记录需求。下面是 JUL 的基本用法。\"]},\"1916\":{\"h\":\"1. 类\",\"t\":[\"Logger 是 Java 内置日志框架的核心类。它负责记录日志信息，并将日志发送到 Handler 进行输出。\"]},\"1917\":{\"h\":\"2. 日志级别\",\"t\":[\"日志级别定义了日志的严重性，常见的日志级别有（从低到高）：\",\"SEVERE（最高级别，表示严重错误）\",\"WARNING（警告信息）\",\"INFO（一般信息）\",\"CONFIG（配置信息）\",\"FINE（详细信息）\",\"FINER（更详细的信息）\",\"FINEST（最低级别，最详细的信息）\"]},\"1918\":{\"h\":\"3. 创建 示例\",\"t\":[\"以下是一个简单的使用 Java 内置日志框架的示例：\",\"import java.util.logging.Level; import java.util.logging.Logger; public class JULExample { private static final Logger logger = Logger.getLogger(JULExample.class.getName()); public static void main(String[] args) { logger.setLevel(Level.ALL); // 设置日志级别为所有 logger.severe(\\\"这是一个 SEVERE 级别的日志消息\\\"); logger.warning(\\\"这是一个 WARNING 级别的日志消息\\\"); logger.info(\\\"这是一个 INFO 级别的日志消息\\\"); logger.config(\\\"这是一个 CONFIG 级别的日志消息\\\"); logger.fine(\\\"这是一个 FINE 级别的日志消息\\\"); logger.finer(\\\"这是一个 FINER 级别的日志消息\\\"); logger.finest(\\\"这是一个 FINEST 级别的日志消息\\\"); } }\"]},\"1919\":{\"h\":\"四、Log4j 2\",\"t\":[\"Log4j 2 是一个流行的 Java 日志框架，它是对 Log4j 的重大升级，提供了更好的性能和更灵活的配置。\"]},\"1920\":{\"h\":\"1. 引入依赖\",\"t\":[\"使用 Log4j 2 需要在项目中添加相应的依赖。如果你使用 Maven 项目，可以在 pom.xml 文件中添加以下依赖：\",\"<dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-core</artifactId> <version>2.17.1</version> </dependency> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-api</artifactId> <version>2.17.1</version> </dependency>\"]},\"1921\":{\"h\":\"2. 配置文件\",\"t\":[\"Log4j 2 支持多种配置格式（如 XML、JSON、YAML）。下面是一个简单的 XML 配置示例（log4j2.xml）：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Configuration status=\\\"WARN\\\"> <Appenders> <Console name=\\\"Console\\\" target=\\\"SYSTEM_OUT\\\"> <PatternLayout pattern=\\\"%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n\\\"/> </Console> </Appenders> <Loggers> <Root level=\\\"debug\\\"> <AppenderRef ref=\\\"Console\\\"/> </Root> </Loggers> </Configuration>\"]},\"1922\":{\"h\":\"3. 使用 Log4j 2 记录日志\",\"t\":[\"以下是使用 Log4j 2 记录日志的示例：\",\"import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class Log4j2Example { private static final Logger logger = LogManager.getLogger(Log4j2Example.class); public static void main(String[] args) { logger.trace(\\\"This is a TRACE level log message\\\"); logger.debug(\\\"This is a DEBUG level log message\\\"); logger.info(\\\"This is an INFO level log message\\\"); logger.warn(\\\"This is a WARN level log message\\\"); logger.error(\\\"This is an ERROR level log message\\\"); logger.fatal(\\\"This is a FATAL level log message\\\"); } }\"]},\"1923\":{\"h\":\"五、SLF4J 和 Logback\",\"t\":[\"SLF4J（Simple Logging Facade for Java） 是一个为各种日志框架提供统一接口的日志门面，常与 Logback 配合使用。Logback 是由 Log4j 的原作者开发的，作为 Log4j 的继任者，性能和功能更佳。\"]},\"1924\":{\"h\":\"1. 引入依赖\",\"t\":[\"如果你使用 SLF4J 和 Logback，可以在 pom.xml 中添加以下依赖：\",\"<dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.2.11</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>1.7.36</version> </dependency>\"]},\"1925\":{\"h\":\"2. 配置文件\",\"t\":[\"Logback 使用 logback.xml 文件进行配置，以下是一个简单的配置示例：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration> <appender name=\\\"STDOUT\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger{36} - %msg%n</pattern> </encoder> </appender> <root level=\\\"debug\\\"> <appender-ref ref=\\\"STDOUT\\\" /> </root> </configuration>\"]},\"1926\":{\"h\":\"3. 使用 SLF4J 和 Logback 记录日志\",\"t\":[\"import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class SLF4JLogbackExample { private static final Logger logger = LoggerFactory.getLogger(SLF4JLogbackExample.class); public static void main(String[] args) { logger.info(\\\"This is an INFO level log message\\\"); logger.debug(\\\"This is a DEBUG level log message\\\"); logger.warn(\\\"This is a WARN level log message\\\"); logger.error(\\\"This is an ERROR level log message\\\"); } }\"]},\"1927\":{\"h\":\"六、日志最佳实践\",\"t\":[\"选择合适的日志级别：根据不同的场景选择合适的日志级别（如 DEBUG、INFO、WARN、ERROR），避免过多或过少的日志信息。\",\"使用参数化日志：避免在日志语句中进行字符串拼接，而是使用参数化的日志语句，提升性能。\",\"logger.info(\\\"User {} has logged in\\\", username);\",\"合理配置日志输出：根据需要配置日志的输出位置（控制台、文件、远程服务器等）和日志文件的滚动策略。\",\"避免记录敏感信息：不要在日志中记录密码、密钥等敏感信息。\",\"统一日志格式：使用一致的日志格式，便于后续的日志分析和监控。\"]},\"1928\":{\"h\":\"七、总结\",\"t\":[\"Java 提供了多种日志框架供开发者选择，从内置的 java.util.logging 到功能强大的 Log4j、Logback 等。在实际项目中，根据需求和项目规模选择合适的日志框架，并遵循日志的最佳实践，可以帮助提高应用程序的可维护性和稳定性。\"]},\"1929\":{\"h\":\"网络编程\",\"t\":[\"Java 网络编程主要涉及如何在网络上建立通信，处理网络协议，以及如何编写客户端和服务器端程序。Java 提供了丰富的类库和 API 来支持网络编程，尤其是基于 TCP/IP 协议的编程。主要的类和接口位于 java.net 包中。\"]},\"1930\":{\"h\":\"一、Java 网络编程的基本概念\",\"t\":[\"IP 地址：互联网上每台计算机都有一个唯一的 IP 地址，用于标识网络中的计算机。\",\"端口（Port）：每台计算机有 0 到 65535 之间的端口，每个端口对应一个特定的服务。\",\"协议（Protocol）：定义了网络通信的规则和格式。常见的协议有 TCP（传输控制协议）和 UDP（用户数据报协议）。\",\"URL（Uniform Resource Locator）：统一资源定位符，用于表示互联网上资源的位置。\"]},\"1931\":{\"h\":\"二、Java 网络编程核心类和接口\",\"t\":[\"java.net 包提供了以下核心类和接口，用于实现 Java 网络编程：\",\"InetAddress：表示 IP 地址。\",\"URL 和 URLConnection：用于处理 URL 和与其相关的连接。\",\"Socket 和 ServerSocket：用于实现基于 TCP 的客户端-服务器通信。\",\"DatagramSocket 和 DatagramPacket：用于实现基于 UDP 的通信。\"]},\"1932\":{\"h\":\"三、使用 类处理 IP 地址\",\"t\":[\"InetAddress 类用于表示 IP 地址，可以是 IPv4 或 IPv6。它提供了一些静态方法来获取主机的 IP 地址和主机名。\"]},\"1933\":{\"h\":\"示例：获取主机的 IP 地址和主机名\",\"t\":[\"import java.net.InetAddress; import java.net.UnknownHostException; public class InetAddressExample { public static void main(String[] args) { try { // 获取本地主机的 IP 地址 InetAddress localHost = InetAddress.getLocalHost(); System.out.println(\\\"本地主机名: \\\" + localHost.getHostName()); System.out.println(\\\"本地主机地址: \\\" + localHost.getHostAddress()); // 获取指定主机的 IP 地址 InetAddress googleHost = InetAddress.getByName(\\\"www.google.com\\\"); System.out.println(\\\"Google 主机名: \\\" + googleHost.getHostName()); System.out.println(\\\"Google IP 地址: \\\" + googleHost.getHostAddress()); // 获取所有 IP 地址 InetAddress[] allAddresses = InetAddress.getAllByName(\\\"www.google.com\\\"); for (InetAddress address : allAddresses) { System.out.println(\\\"Google IP 地址（多地址）: \\\" + address.getHostAddress()); } } catch (UnknownHostException e) { e.printStackTrace(); } } }\"]},\"1934\":{\"h\":\"四、基于 TCP 的网络编程\",\"t\":[\"TCP（传输控制协议） 是一种面向连接的、可靠的、基于字节流的协议。Java 提供了 Socket 类用于实现 TCP 客户端，ServerSocket 类用于实现 TCP 服务器端。\"]},\"1935\":{\"h\":\"1. 实现 TCP 客户端\",\"t\":[\"Socket 类用于创建一个客户端，并连接到指定主机和端口。客户端通过 OutputStream 向服务器发送数据，通过 InputStream 接收服务器的数据。\",\"import java.io.*; import java.net.Socket; public class TCPClient { public static void main(String[] args) { String serverAddress = \\\"localhost\\\"; int port = 12345; try (Socket socket = new Socket(serverAddress, port); PrintWriter out = new PrintWriter(socket.getOutputStream(), true); BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) { // 向服务器发送请求 out.println(\\\"Hello, Server!\\\"); // 接收服务器的响应 String response = in.readLine(); System.out.println(\\\"来自服务器的响应: \\\" + response); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1936\":{\"h\":\"2. 实现 TCP 服务器端\",\"t\":[\"ServerSocket 类用于创建一个服务器端 socket，监听来自客户端的连接请求。服务器通过 accept() 方法接受客户端的连接，返回一个与客户端通信的 Socket 对象。\",\"import java.io.*; import java.net.ServerSocket; import java.net.Socket; public class TCPServer { public static void main(String[] args) { int port = 12345; try (ServerSocket serverSocket = new ServerSocket(port)) { System.out.println(\\\"服务器启动，正在监听端口: \\\" + port); while (true) { // 接受客户端连接 Socket clientSocket = serverSocket.accept(); System.out.println(\\\"新客户端连接: \\\" + clientSocket.getInetAddress().getHostAddress()); // 处理客户端请求 try (BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)) { String request = in.readLine(); System.out.println(\\\"接收到客户端请求: \\\" + request); // 响应客户端 out.println(\\\"Hello, Client!\\\"); } catch (IOException e) { e.printStackTrace(); } } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1937\":{\"h\":\"五、基于 UDP 的网络编程\",\"t\":[\"UDP（用户数据报协议） 是一种无连接的、不可靠的协议，适用于对速度要求高而对可靠性要求低的场合。Java 提供了 DatagramSocket 和 DatagramPacket 类来实现 UDP 编程。\"]},\"1938\":{\"h\":\"1. 实现 UDP 客户端\",\"t\":[\"DatagramSocket 类用于创建一个 UDP 套接字，DatagramPacket 用于发送和接收数据报文。\",\"import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; public class UDPClient { public static void main(String[] args) { String serverAddress = \\\"localhost\\\"; int port = 12345; String message = \\\"Hello, Server!\\\"; try (DatagramSocket socket = new DatagramSocket()) { byte[] sendBuffer = message.getBytes(); InetAddress serverInetAddress = InetAddress.getByName(serverAddress); DatagramPacket sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, serverInetAddress, port); // 发送数据报文 socket.send(sendPacket); System.out.println(\\\"已发送消息到服务器: \\\" + message); // 接收服务器的响应 byte[] receiveBuffer = new byte[1024]; DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length); socket.receive(receivePacket); String response = new String(receivePacket.getData(), 0, receivePacket.getLength()); System.out.println(\\\"来自服务器的响应: \\\" + response); } catch (Exception e) { e.printStackTrace(); } } }\"]},\"1939\":{\"h\":\"2. 实现 UDP 服务器端\",\"t\":[\"DatagramSocket 类用于在指定的端口上创建一个 UDP 套接字，用于接收客户端的请求。\",\"import java.net.DatagramPacket; import java.net.DatagramSocket; public class UDPServer { public static void main(String[] args) { int port = 12345; try (DatagramSocket socket = new DatagramSocket(port)) { System.out.println(\\\"UDP 服务器已启动，正在监听端口: \\\" + port); byte[] receiveBuffer = new byte[1024]; while (true) { DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length); socket.receive(receivePacket); String request = new String(receivePacket.getData(), 0, receivePacket.getLength()); System.out.println(\\\"接收到客户端请求: \\\" + request); // 响应客户端 String response = \\\"Hello, Client!\\\"; byte[] sendBuffer = response.getBytes(); DatagramPacket sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, receivePacket.getAddress(), receivePacket.getPort()); socket.send(sendPacket); System.out.println(\\\"已发送响应到客户端: \\\" + response); } } catch (Exception e) { e.printStackTrace(); } } }\"]},\"1940\":{\"h\":\"六、使用 URL 和 URLConnection 进行网络编程\",\"t\":[\"Java 提供了 URL 和 URLConnection 类，用于处理 HTTP、FTP 等协议。URL 类表示一个统一资源定位符，而 URLConnection 类表示与 URL 的通信链接。\"]},\"1941\":{\"h\":\"1. 使用 类\",\"t\":[\"URL 类可以用来创建一个 URL 对象，并获取 URL 的相关信息。\",\"import java.net.URL; public class URLExample { public static void main(String[] args) { try { URL url = new URL(\\\"https://www.example.com:443/path/to/resource?query=123#fragment\\\"); System.out.println(\\\"协议: \\\" + url.getProtocol()); System.out.println(\\\"主机名: \\\" + url.getHost()); System.out.println(\\\"端口号: \\\" + url.getPort()); System.out.println(\\\"路径: \\\" + url.getPath()); System.out.println(\\\"查询字符串: \\\" + url.getQuery()); System.out.println(\\\"片段: \\\" + url.getRef()); } catch ( Exception e) { e.printStackTrace(); } } }\"]},\"1942\":{\"h\":\"2. 使用 类\",\"t\":[\"URLConnection 类用于读取或写入数据到指定的 URL。\",\"import java.io.BufferedReader; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.URL; public class URLConnectionExample { public static void main(String[] args) { try { URL url = new URL(\\\"https://www.example.com\\\"); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(\\\"GET\\\"); BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(\\\"响应内容: \\\" + response.toString()); } catch (Exception e) { e.printStackTrace(); } } }\"]},\"1943\":{\"h\":\"七、Java 网络编程的高级特性\",\"t\":[\"多线程服务器：使用多线程来处理多个客户端的连接请求，提高服务器的性能。\",\"NIO（New Input/Output）：提供了非阻塞 I/O 和更高效的 I/O 操作，适用于高并发的网络应用。\",\"Java WebSockets：用于在客户端和服务器之间建立全双工通信通道，适合实时通信应用。\"]},\"1944\":{\"h\":\"八、总结\",\"t\":[\"Java 网络编程提供了丰富的类库和 API，可以方便地开发基于 TCP 和 UDP 协议的网络应用。掌握 Java 的网络编程知识，可以帮助开发者编写高效、可靠的网络应用程序。通过结合使用线程、NIO 和高级并发工具类，可以构建更强大和高效的网络系统。\"]},\"1945\":{\"h\":\"正则表达式\",\"t\":[\"Java 正则表达式是一种强大的文本处理工具，它允许开发者用一种简洁的方式来搜索、匹配和操作字符串。正则表达式在文本解析、数据验证、替换和格式化等方面非常有用。\"]},\"1946\":{\"h\":\"一、Java 正则表达式的基础\",\"t\":[\"Java 提供了 java.util.regex 包来处理正则表达式，主要有两个核心类：\",\"Pattern 类：表示编译后的正则表达式。使用 Pattern.compile() 方法创建 Pattern 对象。\",\"Matcher 类：表示对输入字符串进行解释和匹配的引擎。通过 Pattern.matcher() 方法创建 Matcher 对象。\"]},\"1947\":{\"h\":\"二、Java 正则表达式的语法\",\"t\":[\"正则表达式由一些特殊字符和字符序列组成，它们定义了一个搜索模式。以下是 Java 中常见的正则表达式语法：\",\"正则表达式\",\"描述\",\".\",\"匹配除换行符外的任何字符\",\"^\",\"匹配字符串的开始\",\"$\",\"匹配字符串的结束\",\"\\\\d\",\"匹配一个数字字符（0-9）\",\"\\\\D\",\"匹配一个非数字字符\",\"\\\\w\",\"匹配一个字母、数字或下划线字符\",\"\\\\W\",\"匹配一个非字母、数字或下划线字符\",\"\\\\s\",\"匹配任何空白字符（空格、制表符等）\",\"\\\\S\",\"匹配任何非空白字符\",\"*\",\"匹配前面的字符 0 次或多次\",\"+\",\"匹配前面的字符 1 次或多次\",\"?\",\"匹配前面的字符 0 次或 1 次\",\"{n}\",\"匹配前面的字符恰好 n 次\",\"{n,}\",\"匹配前面的字符至少 n 次\",\"{n,m}\",\"匹配前面的字符至少 n 次，至多 m 次\",\"[]\",\"匹配括号内的任意一个字符\",\"[^]\",\"匹配不在括号内的任意字符\",\"`(a\",\"b)`\",\"(…)\",\"捕获组\",\"(?:...)\",\"非捕获组\",\"\\\\\",\"转义字符，匹配特殊字符本身（如 \\\\. 匹配点）\"]},\"1948\":{\"h\":\"三、基本使用示例\"},\"1949\":{\"h\":\"1. 匹配和查找\",\"t\":[\"以下是一个简单的 Java 正则表达式使用示例，用于匹配和查找字符串中的模式。\",\"import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexExample { public static void main(String[] args) { String text = \\\"This is a sample text with 123 and more numbers like 456.\\\"; // 定义正则表达式 String regex = \\\"\\\\\\\\d+\\\"; // 创建 Pattern 对象 Pattern pattern = Pattern.compile(regex); // 创建 Matcher 对象 Matcher matcher = pattern.matcher(text); // 查找并输出所有匹配的子串 while (matcher.find()) { System.out.println(\\\"找到的数字: \\\" + matcher.group()); } } }\",\"输出：\",\"找到的数字: 123 找到的数字: 456\"]},\"1950\":{\"h\":\"2. 验证字符串格式\",\"t\":[\"以下示例使用正则表达式验证一个输入的字符串是否是一个有效的电子邮件地址：\",\"public class EmailValidation { public static void main(String[] args) { String email = \\\"example@domain.com\\\"; String regex = \\\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\\\"; if (email.matches(regex)) { System.out.println(\\\"有效的电子邮件地址\\\"); } else { System.out.println(\\\"无效的电子邮件地址\\\"); } } }\"]},\"1951\":{\"h\":\"四、使用 和 类的常用方法\",\"t\":[\"Pattern 类的常用方法：\",\"Pattern.compile(String regex)：编译正则表达式，返回 Pattern 对象。\",\"Pattern.compile(String regex, int flags)：编译带有标志的正则表达式。\",\"Matcher 类的常用方法：\",\"boolean matches()：整个输入序列是否匹配正则表达式。\",\"boolean find()：是否找到与正则表达式匹配的子字符串。\",\"String group()：返回上一次匹配操作中匹配的子字符串。\",\"int start()：返回上一次匹配操作中匹配的子字符串的开始索引。\",\"int end()：返回上一次匹配操作中匹配的子字符串的结束索引。\",\"String replaceAll(String replacement)：将所有匹配的子字符串替换为给定的字符串。\"]},\"1952\":{\"h\":\"替换示例\",\"t\":[\"使用正则表达式替换字符串中的所有非数字字符：\",\"public class RegexReplaceExample { public static void main(String[] args) { String text = \\\"Hello123World456\\\"; String regex = \\\"\\\\\\\\D\\\"; // 匹配非数字字符 // 将非数字字符替换为空字符串 String result = text.replaceAll(regex, \\\"\\\"); System.out.println(result); // 输出：123456 } }\"]},\"1953\":{\"h\":\"五、正则表达式的标志（Flags）\",\"t\":[\"在 Java 中，可以通过 Pattern 类的 compile() 方法中的第二个参数来指定正则表达式的标志。常见的标志有：\",\"Pattern.CASE_INSENSITIVE：忽略大小写匹配。\",\"Pattern.MULTILINE：启用多行模式。\",\"Pattern.DOTALL：使 . 匹配包括换行符在内的所有字符。\",\"Pattern.UNICODE_CASE：在匹配时考虑 Unicode 大小写。\",\"Pattern.COMMENTS：忽略正则表达式中的空白和注释。\"]},\"1954\":{\"h\":\"示例：忽略大小写匹配\",\"t\":[\"import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexFlagExample { public static void main(String[] args) { String text = \\\"Java is fun. JAVA is powerful.\\\"; String regex = \\\"java\\\"; // 使用 CASE_INSENSITIVE 标志 Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(text); while (matcher.find()) { System.out.println(\\\"匹配到: \\\" + matcher.group()); } } }\",\"输出：\",\"匹配到: Java 匹配到: JAVA\"]},\"1955\":{\"h\":\"六、分组与捕获\",\"t\":[\"正则表达式支持使用圆括号 () 来分组和捕获匹配的子模式。捕获组可以在匹配后用于提取信息。\"]},\"1956\":{\"h\":\"示例：捕获组\",\"t\":[\"public class RegexGroupExample { public static void main(String[] args) { String text = \\\"John Doe, 30 years old\\\"; String regex = \\\"(\\\\\\\\w+) (\\\\\\\\w+), (\\\\\\\\d+) years old\\\"; Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(text); if (matcher.find()) { System.out.println(\\\"名字: \\\" + matcher.group(1)); // John System.out.println(\\\"姓氏: \\\" + matcher.group(2)); // Doe System.out.println(\\\"年龄: \\\" + matcher.group(3)); // 30 } } }\"]},\"1957\":{\"h\":\"七、总结\",\"t\":[\"Java 正则表达式提供了强大的文本处理功能，通过 Pattern 和 Matcher 类，可以方便地对字符串进行搜索、匹配和操作。掌握正则表达式语法和使用方法，有助于开发人员编写更加灵活和高效的 Java 应用程序。在实际应用中，正则表达式广泛用于数据验证、日志分析、字符串替换等场景。\"]},\"1958\":{\"h\":\"多线程\",\"t\":[\"Java 多线程编程是开发高性能和响应迅速应用程序的关键技术之一。通过多线程，程序可以同时执行多个任务，从而提高效率、改善用户体验。Java 提供了强大的多线程支持，主要通过 java.lang.Thread 类和 java.util.concurrent 包来实现。\"]},\"1959\":{\"h\":\"一、什么是线程？\",\"t\":[\"线程（Thread） 是操作系统能够调度的最小执行单元。一个进程可以包含多个线程，这些线程共享进程的资源（如内存、文件句柄等）。\",\"多线程 是指在一个程序中同时运行多个线程。每个线程执行一个独立的任务，可以与其他线程并发执行。\"]},\"1960\":{\"h\":\"二、Java 多线程的实现方式\",\"t\":[\"Java 中有两种创建线程的主要方式：\",\"继承 Thread 类。\",\"实现 Runnable 接口。\",\"此外，还有使用 Callable 和 Future 接口的方式，这种方式支持返回结果和抛出异常。\"]},\"1961\":{\"h\":\"1. 继承 类\",\"t\":[\"通过继承 Thread 类，可以创建一个新的线程类，并重写 run() 方法。\",\"class MyThread extends Thread { @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName() + \\\" 正在执行: \\\" + i); } } } public class ThreadExample { public static void main(String[] args) { MyThread thread1 = new MyThread(); MyThread thread2 = new MyThread(); thread1.start(); // 启动线程 thread2.start(); // 启动线程 } }\"]},\"1962\":{\"h\":\"2. 实现 接口\",\"t\":[\"实现 Runnable 接口是更常用的方法，因为 Java 不支持多重继承，通过实现接口的方式可以避免类继承的限制。\",\"class MyRunnable implements Runnable { @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName() + \\\" 正在执行: \\\" + i); } } } public class RunnableExample { public static void main(String[] args) { Thread thread1 = new Thread(new MyRunnable()); Thread thread2 = new Thread(new MyRunnable()); thread1.start(); // 启动线程 thread2.start(); // 启动线程 } }\"]},\"1963\":{\"h\":\"3. 使用 和 接口\",\"t\":[\"Runnable 接口不返回结果，也不能抛出异常，而 Callable 接口可以做到。Callable 使用 call() 方法，返回一个结果并允许抛出异常。\",\"import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; class MyCallable implements Callable<Integer> { @Override public Integer call() throws Exception { int sum = 0; for (int i = 1; i <= 5; i++) { sum += i; System.out.println(Thread.currentThread().getName() + \\\" 计算中: \\\" + sum); } return sum; } } public class CallableExample { public static void main(String[] args) { ExecutorService executor = Executors.newFixedThreadPool(2); Future<Integer> future1 = executor.submit(new MyCallable()); Future<Integer> future2 = executor.submit(new MyCallable()); try { System.out.println(\\\"Future1 结果: \\\" + future1.get()); System.out.println(\\\"Future2 结果: \\\" + future2.get()); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } executor.shutdown(); } }\"]},\"1964\":{\"h\":\"三、线程的生命周期\",\"t\":[\"Java 中的线程有五个基本状态：\",\"新建（New）：线程对象被创建但尚未启动。\",\"就绪（Runnable）：线程已启动并等待调度器分配 CPU 时间。\",\"运行（Running）：线程正在执行。\",\"阻塞（Blocked）：线程正在等待资源（如 I/O 操作）或者被另一个线程锁定。\",\"终止（Terminated）：线程执行完毕或者异常退出。\",\"线程的状态转换如下图所示：\",\"New -> Runnable -> Running -> Blocked -> Runnable -> Running -> Terminated\"]},\"1965\":{\"h\":\"四、线程控制方法\",\"t\":[\"Java 提供了一些控制线程的方法，用于管理线程的生命周期和行为。\",\"start()：启动线程，使其进入就绪状态。\",\"run()：线程执行的入口方法，不直接调用 run() 方法，使用 start() 方法来启动线程。\",\"sleep(long millis)：使当前线程进入休眠状态 millis 毫秒。\",\"join()：等待调用 join() 方法的线程执行完毕。\",\"yield()：让出当前 CPU 使用权，线程从运行状态变为就绪状态。\",\"interrupt()：中断线程，设置线程的中断状态标志。\",\"isAlive()：检查线程是否处于活动状态。\"]},\"1966\":{\"h\":\"示例：使用 和 方法\",\"t\":[\"class MyThread extends Thread { @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName() + \\\" 正在执行: \\\" + i); try { Thread.sleep(1000); // 线程休眠 1 秒 } catch (InterruptedException e) { e.printStackTrace(); } } } } public class ThreadControlExample { public static void main(String[] args) { MyThread thread1 = new MyThread(); MyThread thread2 = new MyThread(); thread1.start(); try { thread1.join(); // 主线程等待 thread1 完成 } catch (InterruptedException e) { e.printStackTrace(); } thread2.start(); } }\"]},\"1967\":{\"h\":\"五、线程同步\",\"t\":[\"当多个线程同时访问共享资源时，可能会引起数据不一致问题。线程同步是解决这一问题的常用方式。\"]},\"1968\":{\"h\":\"1. 使用 关键字\",\"t\":[\"Synchronized 关键字可以修饰方法或代码块，确保同一时间只有一个线程可以访问这些资源。\",\"同步方法：在方法声明中使用 synchronized 关键字。\",\"class Counter { private int count = 0; public synchronized void increment() { count++; } public synchronized int getCount() { return count; } }\",\"同步代码块：在方法内部使用 synchronized 关键字。\",\"class Counter { private int count = 0; public void increment() { synchronized (this) { count++; } } public int getCount() { return count; } }\"]},\"1969\":{\"h\":\"2. 使用 类\",\"t\":[\"ReentrantLock 是 Java 提供的一种显示锁机制，比 synchronized 更灵活。\",\"import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; class Counter { private int count = 0; private final Lock lock = new ReentrantLock(); public void increment() { lock.lock(); try { count++; } finally { lock.unlock(); } } public int getCount() { return count; } }\"]},\"1970\":{\"h\":\"六、线程间通信\",\"t\":[\"Java 提供了 wait()、notify() 和 notifyAll() 方法，用于在多个线程之间进行通信，通常与同步代码块或方法一起使用。\",\"wait()：使当前线程等待，直到另一个线程调用 notify() 或 notifyAll()。\",\"notify()：唤醒等待的单个线程。\",\"notifyAll()：唤醒等待的所有线程。\",\"class Message { private String message; public synchronized void write(String message) { this.message = message; notify(); // 唤醒等待的读取线程 } public synchronized String read() { try { wait(); // 等待写入线程调用 notify() } catch (InterruptedException e) { e.printStackTrace(); } return message; } } public class ThreadCommunicationExample { public static void main(String[] args) { Message message = new Message(); // 写入线程 new Thread(() -> { try { Thread.sleep(1000); message.write(\\\"你好，线程间通信！\\\"); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); // 读取线程 new Thread(() -> { System.out.println(\\\"读取消息: \\\" + message.read()); }).start(); } }\"]},\"1971\":{\"h\":\"七、Java 并发工具类\",\"t\":[\"Java 提供了 java.util.concurrent 包，包含了一些更高级的并发工具类：\",\"ExecutorService：用于管理线程池。\",\"CountDownLatch：允许一个或多个线程等待其他线程完成操作\",\"。\",\"CyclicBarrier：允许一组线程互相等待，直到所有线程都到达屏障点。\",\"Semaphore：控制对资源的访问。\",\"BlockingQueue：支持阻塞操作的线程安全队列。\"]},\"1972\":{\"h\":\"八、总结\",\"t\":[\"Java 的多线程编程为开发者提供了丰富的工具和 API，帮助解决并发问题，提高应用程序的性能和响应速度。通过正确使用线程同步、线程间通信和并发工具类，可以有效避免线程安全问题，确保程序的稳定性和高效性。\"]},\"1973\":{\"h\":\"JDBC\",\"t\":[\"Java JDBC（Java Database Connectivity） 是 Java 用于连接和操作数据库的标准 API。JDBC 提供了一种统一的方式来访问不同类型的关系型数据库，使开发人员可以编写独立于数据库的应用程序。\"]},\"1974\":{\"h\":\"一、JDBC 简介\",\"t\":[\"JDBC 是一种用于执行 SQL 语句的 Java API，可以与各种数据库（如 MySQL、PostgreSQL、Oracle、SQL Server 等）进行交互。通过 JDBC，开发人员可以执行 SQL 查询、更新语句，调用存储过程，处理结果集等操作。JDBC 的核心组件包括 DriverManager、Connection、Statement、PreparedStatement、ResultSet 等。\"]},\"1975\":{\"h\":\"二、JDBC 架构\",\"t\":[\"JDBC 的架构主要包括两层：\",\"JDBC API 层：为应用程序提供标准的接口。\",\"JDBC Driver 层：负责将 JDBC API 调用转换为特定数据库的操作。驱动程序可以是原生的、网络协议的、数据库协议的等。\"]},\"1976\":{\"h\":\"三、JDBC 的基本操作步骤\",\"t\":[\"使用 JDBC 操作数据库的步骤通常包括以下几个步骤：\",\"加载数据库驱动程序。\",\"建立数据库连接。\",\"创建 SQL 语句对象。\",\"执行 SQL 语句。\",\"处理结果集（如果是查询操作）。\",\"关闭连接。\"]},\"1977\":{\"h\":\"四、JDBC 代码示例\",\"t\":[\"以下是一个使用 JDBC 连接 MySQL 数据库的示例代码。\"]},\"1978\":{\"h\":\"1. 加载数据库驱动程序\",\"t\":[\"要使用 JDBC 连接数据库，首先需要加载数据库驱动程序。驱动程序通常由数据库供应商提供（例如 MySQL 的 mysql-connector-java）。Java 提供了 Class.forName() 方法来加载驱动程序类。\",\"try { Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); // 加载 MySQL JDBC 驱动程序 } catch (ClassNotFoundException e) { e.printStackTrace(); }\"]},\"1979\":{\"h\":\"2. 建立数据库连接\",\"t\":[\"使用 DriverManager.getConnection() 方法建立与数据库的连接。该方法需要传递数据库 URL、用户名和密码。\",\"String url = \\\"jdbc:mysql://localhost:3306/testdb\\\"; // 数据库 URL String user = \\\"root\\\"; // 数据库用户名 String password = \\\"password\\\"; // 数据库密码 Connection connection = null; try { connection = DriverManager.getConnection(url, user, password); // 建立连接 System.out.println(\\\"数据库连接成功！\\\"); } catch (SQLException e) { e.printStackTrace(); }\"]},\"1980\":{\"h\":\"3. 创建 SQL 语句对象\",\"t\":[\"使用 Connection 对象的 createStatement() 方法创建 Statement 对象，该对象用于发送 SQL 语句到数据库。\",\"Statement statement = null; try { statement = connection.createStatement(); // 创建 Statement 对象 } catch (SQLException e) { e.printStackTrace(); }\"]},\"1981\":{\"h\":\"4. 执行 SQL 语句\",\"t\":[\"使用 Statement 对象的 executeQuery() 方法执行 SQL 查询语句，或使用 executeUpdate() 方法执行插入、更新或删除操作。\",\"try { // 查询操作 String query = \\\"SELECT * FROM users\\\"; ResultSet resultSet = statement.executeQuery(query); // 执行查询并返回结果集 // 插入操作 String insertQuery = \\\"INSERT INTO users (name, age) VALUES ('John Doe', 30)\\\"; int rowsAffected = statement.executeUpdate(insertQuery); // 执行插入操作 System.out.println(\\\"影响的行数: \\\" + rowsAffected); } catch (SQLException e) { e.printStackTrace(); }\"]},\"1982\":{\"h\":\"5. 处理结果集\",\"t\":[\"当执行查询操作时，会返回一个 ResultSet 对象，包含查询的结果数据。可以使用 ResultSet 对象的各种方法来访问结果集中的数据。\",\"try { ResultSet resultSet = statement.executeQuery(\\\"SELECT * FROM users\\\"); while (resultSet.next()) { // 遍历结果集 int id = resultSet.getInt(\\\"id\\\"); String name = resultSet.getString(\\\"name\\\"); int age = resultSet.getInt(\\\"age\\\"); System.out.println(\\\"ID: \\\" + id + \\\", Name: \\\" + name + \\\", Age: \\\" + age); } } catch (SQLException e) { e.printStackTrace(); }\"]},\"1983\":{\"h\":\"6. 关闭连接\",\"t\":[\"为了防止资源泄露，必须关闭 ResultSet、Statement 和 Connection 对象。通常在 finally 块中执行这些操作。\",\"try { if (resultSet != null) resultSet.close(); if (statement != null) statement.close(); if (connection != null) connection.close(); } catch (SQLException e) { e.printStackTrace(); }\"]},\"1984\":{\"h\":\"五、使用 PreparedStatement 进行查询和更新\",\"t\":[\"PreparedStatement 是 Statement 的子接口，提供了预编译的 SQL 语句，有效地防止了 SQL 注入攻击并提高了性能。推荐在任何数据库查询和更新中使用 PreparedStatement。\",\"String query = \\\"SELECT * FROM users WHERE age > ?\\\"; PreparedStatement preparedStatement = connection.prepareStatement(query); preparedStatement.setInt(1, 25); // 设置第一个参数的值 ResultSet resultSet = preparedStatement.executeQuery(); while (resultSet.next()) { System.out.println(\\\"Name: \\\" + resultSet.getString(\\\"name\\\")); }\"]},\"1985\":{\"h\":\"六、事务管理\",\"t\":[\"在 JDBC 中，可以使用 Connection 对象的 setAutoCommit(false) 方法来开启事务，并在需要时使用 commit() 或 rollback() 方法提交或回滚事务。\",\"try { connection.setAutoCommit(false); // 关闭自动提交，开启事务 String updateQuery1 = \\\"UPDATE accounts SET balance = balance - 100 WHERE id = 1\\\"; statement.executeUpdate(updateQuery1); String updateQuery2 = \\\"UPDATE accounts SET balance = balance + 100 WHERE id = 2\\\"; statement.executeUpdate(updateQuery2); connection.commit(); // 提交事务 } catch (SQLException e) { connection.rollback(); // 回滚事务 e.printStackTrace(); }\"]},\"1986\":{\"h\":\"七、JDBC 驱动类型\",\"t\":[\"JDBC 驱动分为四种类型：\",\"类型 1（JDBC-ODBC 桥驱动）：使用 ODBC 驱动与数据库进行通信。\",\"类型 2（本地 API 驱动）：通过 Java 本地接口（JNI）调用数据库的本地客户端库。\",\"类型 3（网络协议驱动）：客户端使用 JDBC 驱动连接中间件，中间件再连接数据库。\",\"类型 4（本地协议驱动）：纯 Java 驱动程序，直接使用数据库的原生协议与数据库进行通信。推荐使用类型 4 驱动，因为它不依赖于本地库。\"]},\"1987\":{\"h\":\"八、总结\",\"t\":[\"JDBC 是 Java 应用程序与数据库交互的标准 API，具有跨平台、可移植性和数据库无关性。通过 JDBC，可以方便地执行 SQL 语句，处理结果集，管理数据库连接等操作。掌握 JDBC 是学习 Java 企业级开发和数据库编程的基础。\"]},\"1988\":{\"h\":\"Java8新特性\",\"t\":[\"Java 8 是 Java 语言的一个重要版本，带来了许多新的特性和改进，使得Java编程更加简洁、灵活和高效。以下是Java 8中一些主要的新特性：\"]},\"1989\":{\"h\":\"1. Lambda 表达式\",\"t\":[\"Lambda表达式是Java 8最重要的特性之一，它使得可以以更简洁的方式来表达函数或匿名类。\",\"示例：\",\"// 使用Lambda表达式代替匿名内部类 List<String> names = Arrays.asList(\\\"Alice\\\", \\\"Bob\\\", \\\"Charlie\\\"); // 使用Lambda表达式进行排序 names.sort((s1, s2) -> s1.compareTo(s2)); // 另一种写法：使用方法引用 names.sort(String::compareTo);\",\"Lambda表达式的语法形式如下：\",\"(parameters) -> expression // 或 (parameters) -> { statements; }\"]},\"1990\":{\"h\":\"2. 函数式接口\",\"t\":[\"函数式接口是仅有一个抽象方法的接口，通常用于Lambda表达式。Java 8引入了@FunctionalInterface注解来标识函数式接口，并提供了几个常用的函数式接口，如 Function、Predicate、Consumer、Supplier 等。\",\"示例：\",\"@FunctionalInterface interface MyFunctionalInterface { void myMethod(); } // 使用Lambda表达式来实现接口方法 MyFunctionalInterface func = () -> System.out.println(\\\"Hello, Lambda!\\\"); func.myMethod();\"]},\"1991\":{\"h\":\"3. 方法引用\",\"t\":[\"方法引用是一种简洁的Lambda表达式写法，主要用于简化Lambda表达式的定义。方法引用的主要类型有：\",\"静态方法引用：ClassName::methodName\",\"实例方法引用：instance::methodName\",\"构造方法引用：ClassName::new\",\"示例：\",\"List<String> names = Arrays.asList(\\\"Alice\\\", \\\"Bob\\\", \\\"Charlie\\\"); // 使用静态方法引用 names.forEach(System.out::println);\"]},\"1992\":{\"h\":\"4. Stream API\",\"t\":[\"Stream API 是用于处理集合的强大工具，支持声明性的数据处理，类似于SQL查询语句。通过Stream API，开发者可以以一种流式操作的方式来处理集合数据，如过滤、排序、映射、规约等。\",\"示例：\",\"List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6); // 使用Stream API进行数据处理 List<Integer> evenNumbers = numbers.stream() .filter(n -> n % 2 == 0) .collect(Collectors.toList()); System.out.println(evenNumbers); // 输出 [2, 4, 6]\"]},\"1993\":{\"h\":\"5. 默认方法和静态方法\",\"t\":[\"Java 8允许在接口中定义默认方法和静态方法。默认方法可以有方法体，实现类可以选择性地重写它们，而静态方法则只能通过接口调用。\",\"示例：\",\"interface MyInterface { // 默认方法 default void defaultMethod() { System.out.println(\\\"This is a default method.\\\"); } // 静态方法 static void staticMethod() { System.out.println(\\\"This is a static method.\\\"); } } class MyClass implements MyInterface { // 可以选择性地重写默认方法 } public class Main { public static void main(String[] args) { MyClass myClass = new MyClass(); myClass.defaultMethod(); // 调用默认方法 MyInterface.staticMethod(); // 调用静态方法 } }\"]},\"1994\":{\"h\":\"6. 新的日期和时间 API (java.time)\",\"t\":[\"Java 8 引入了全新的日期和时间API，位于java.time包下，它解决了java.util.Date和java.util.Calendar的许多问题。新API是不可变且线程安全的，设计更加合理和易用。\",\"示例：\",\"LocalDate date = LocalDate.now(); LocalDate specificDate = LocalDate.of(2023, Month.AUGUST, 28); LocalTime time = LocalTime.now(); LocalDateTime dateTime = LocalDateTime.of(date, time); System.out.println(\\\"Current date: \\\" + date); System.out.println(\\\"Current time: \\\" + time); System.out.println(\\\"Current datetime: \\\" + dateTime);\"]},\"1995\":{\"h\":\"7. Optional 类\",\"t\":[\"Optional 是一个容器类，用于表示可能为空的值。通过Optional，可以更优雅地处理null值，避免出现NullPointerException。\",\"示例：\",\"Optional<String> optional = Optional.ofNullable(\\\"Hello\\\"); if (optional.isPresent()) { System.out.println(optional.get()); } // 使用orElse提供默认值 String result = optional.orElse(\\\"Default Value\\\"); System.out.println(result);\"]},\"1996\":{\"h\":\"8. Nashorn JavaScript 引擎\",\"t\":[\"Java 8引入了一个新的JavaScript引擎——Nashorn，它允许开发者在Java代码中直接嵌入和执行JavaScript代码。\",\"示例：\",\"import javax.script.ScriptEngine; import javax.script.ScriptEngineManager; import javax.script.ScriptException; public class Main { public static void main(String[] args) throws ScriptException { ScriptEngineManager manager = new ScriptEngineManager(); ScriptEngine engine = manager.getEngineByName(\\\"nashorn\\\"); engine.eval(\\\"print('Hello, Nashorn');\\\"); } }\"]},\"1997\":{\"h\":\"9. 其它改进\",\"t\":[\"Base64 API：提供了对Base64编码和解码的支持。\",\"JavaFX：Java 8 将 JavaFX 集成到了JDK中，成为标准UI工具包。\",\"并行数组：引入了一些新的并行处理数组的工具，如Arrays.parallelSort()。\"]},\"1998\":{\"h\":\"总结\",\"t\":[\"Java 8 带来了许多新的特性和改进，使得Java开发更加高效和灵活。Lambda表达式和Stream API是最受欢迎的特性，它们极大地简化了集合的处理和函数式编程。此外，新的日期和时间API、Optional类和默认方法等功能，增强了Java语言的表达能力，改进了代码的可读性和安全性。\"]},\"1999\":{\"h\":\"文档注释\",\"t\":[\"在Java中，文档注释（Documentation Comments）是一种特殊的注释类型，用于生成程序的API文档。Java提供了一个工具称为javadoc，它能够解析源代码中的文档注释并生成HTML格式的文档。\"]},\"2000\":{\"h\":\"1. 什么是文档注释\",\"t\":[\"文档注释是以 /** 开头，*/ 结尾的注释块，通常用于类、方法、字段、构造函数等声明之前。文档注释支持使用HTML标签、javadoc特定的标签来描述代码的功能、参数、返回值、异常等。\",\"示例：\",\"/** * The `Calculator` class provides methods to perform * basic arithmetic operations such as addition, subtraction, * multiplication, and division. * * @author YourName * @version 1.0 */ public class Calculator { /** * Adds two numbers together. * * @param a the first number * @param b the second number * @return the sum of a and b */ public int add(int a, int b) { return a + b; } /** * Divides one number by another. * * @param a the numerator * @param b the denominator * @return the result of division * @throws ArithmeticException if b is zero */ public int divide(int a, int b) throws ArithmeticException { if (b == 0) { throw new ArithmeticException(\\\"Division by zero\\\"); } return a / b; } }\"]},\"2001\":{\"h\":\"2. 常用的Javadoc标签\",\"t\":[\"以下是一些常用的Javadoc标签，它们通常用于文档注释中，帮助生成更详细的API文档：\",\"@author：指定类或接口的作者。\",\"@version：指定类或接口的版本信息。\",\"@param：描述方法的参数，格式为@param 参数名 描述。\",\"@return：描述方法的返回值，适用于非void返回类型的方法。\",\"@throws或@exception：描述方法可能抛出的异常。\",\"@see：提供一个链接到相关类或方法的参考。\",\"@since：指定该功能从哪个版本开始可用。\",\"@deprecated：标记已废弃的类、方法或字段，并提供替代方案的说明。\",\"示例：\",\"/** * Calculates the square root of a number. * * @param x the number to calculate the square root of * @return the square root of x * @throws IllegalArgumentException if x is negative * @see Math#sqrt(double) * @since 1.0 */ public double sqrt(double x) { if (x < 0) { throw new IllegalArgumentException(\\\"Cannot calculate the square root of a negative number\\\"); } return Math.sqrt(x); }\"]},\"2002\":{\"h\":\"3. 使用 工具生成文档\",\"t\":[\"使用javadoc工具可以自动生成HTML格式的API文档。通常在命令行中使用以下命令：\",\"javadoc -d doc_directory YourClass.java\",\"-d doc_directory：指定生成文档的输出目录。\",\"YourClass.java：包含文档注释的Java源文件。\",\"生成的文档通常包含类的说明、方法的详细描述、参数和返回值的信息等，是开发人员之间传递代码信息的重要工具。\"]},\"2003\":{\"h\":\"4. 文档注释的最佳实践\",\"t\":[\"简洁明了：文档注释应简洁明了，准确描述类、方法或字段的用途和行为。\",\"覆盖全面：为每个公开的类、接口、方法、构造函数和字段添加文档注释，确保用户能够全面理解API。\",\"更新及时：随着代码的更新，及时更新文档注释，保持文档与代码一致。\",\"遵循标准格式：使用标准的Javadoc标签和格式，确保生成的文档清晰、易读。\"]},\"2004\":{\"h\":\"总结\",\"t\":[\"Java的文档注释是一种强大的工具，帮助开发人员生成易于理解的API文档。通过使用Javadoc注释和javadoc工具，开发人员可以提供详细的代码说明，提高代码的可维护性和可读性。\"]},\"2005\":{\"h\":\"设计模式\"},\"2006\":{\"h\":\"单例模式\",\"t\":[\"单例模式（Singleton Pattern）是一种创建型设计模式，它确保一个类只有一个实例，并提供全局访问点来访问该实例。单例模式在需要一个类只存在一个对象（如数据库连接、配置管理器、线程池等）的情况下非常有用。\"]},\"2007\":{\"h\":\"1. 单例模式的关键点\",\"t\":[\"唯一实例：单例模式通过限制实例化次数，确保一个类只有一个实例存在。\",\"全局访问：单例模式提供一个全局访问点，通过该访问点可以获取唯一的实例。\"]},\"2008\":{\"h\":\"2. 实现单例模式的几种方法\",\"t\":[\"单例模式在Java中有多种实现方式，主要包括以下几种：\"]},\"2009\":{\"h\":\"2.1 饿汉式（Eager Initialization）\",\"t\":[\"饿汉式单例在类加载时就创建了实例，因此线程安全，且无需同步。\",\"示例：\",\"public class Singleton { // 在类加载时就创建实例 private static final Singleton instance = new Singleton(); // 私有构造函数，防止外部实例化 private Singleton() {} // 提供全局访问点 public static Singleton getInstance() { return instance; } }\",\"优点：\",\"实现简单，线程安全。\",\"缺点：\",\"如果单例实例占用资源较多，但始终未被使用，会造成资源浪费。\"]},\"2010\":{\"h\":\"2.2 懒汉式（Lazy Initialization）\",\"t\":[\"懒汉式单例在第一次调用getInstance()方法时才创建实例，节约资源。\",\"示例：\",\"public class Singleton { // 初始时不创建实例 private static Singleton instance; // 私有构造函数 private Singleton() {} // 提供全局访问点，并在第一次使用时创建实例 public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } }\",\"优点：\",\"实例在需要时才创建，节约资源。\",\"缺点：\",\"在多线程环境下不安全，可能会创建多个实例。\"]},\"2011\":{\"h\":\"2.3 线程安全的懒汉式（Synchronized Method）\",\"t\":[\"为了解决懒汉式的线程安全问题，可以对getInstance()方法进行同步。\",\"示例：\",\"public class Singleton { private static Singleton instance; private Singleton() {} // 使用 synchronized 关键字保证线程安全 public static synchronized Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } }\",\"优点：\",\"线程安全。\",\"缺点：\",\"synchronized带来一定的性能开销，特别是在频繁调用时。\"]},\"2012\":{\"h\":\"2.4 双重检查锁（Double-Checked Locking）\",\"t\":[\"双重检查锁在确保线程安全的同时，减少了同步的开销。\",\"示例：\",\"public class Singleton { private static volatile Singleton instance; private Singleton() {} public static Singleton getInstance() { if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } }\",\"优点：\",\"线程安全，且性能较好。\",\"缺点：\",\"实现稍微复杂，容易出错。\"]},\"2013\":{\"h\":\"2.5 静态内部类（Bill Pugh Singleton）\",\"t\":[\"静态内部类方式利用了类加载的特性，只有在实际使用内部类时，才会加载和创建实例，线程安全且实现简单。\",\"示例：\",\"public class Singleton { private Singleton() {} // 静态内部类，只有在调用 getInstance() 时才会加载 private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } public static Singleton getInstance() { return SingletonHolder.INSTANCE; } }\",\"优点：\",\"实现简单，线程安全，且延迟加载实例。\",\"缺点：\",\"无明显缺点，是一种推荐的单例实现方式。\"]},\"2014\":{\"h\":\"2.6 枚举单例（Enum Singleton）\",\"t\":[\"使用枚举实现单例是一种极为简洁的方式，且天然支持序列化和线程安全。\",\"示例：\",\"public enum Singleton { INSTANCE; public void someMethod() { // 方法实现 } }\",\"优点：\",\"实现最简单，线程安全，防止反序列化创建新的对象。\",\"缺点：\",\"灵活性较差，枚举的写法不适合懒加载。\"]},\"2015\":{\"h\":\"3. 单例模式的优缺点\",\"t\":[\"优点：\",\"内存节省：避免创建多余的对象，节省内存。\",\"全局访问：提供一个全局访问点，方便使用。\",\"可控实例化：集中控制实例化过程，避免重复创建。\",\"缺点：\",\"扩展困难：单例类较难扩展，因为它的结构决定了只有一个实例。\",\"隐藏依赖：单例的全局访问可能导致不良的依赖关系，增加代码的耦合度。\"]},\"2016\":{\"h\":\"4. 单例模式的应用场景\",\"t\":[\"资源管理器：如线程池、数据库连接池等，确保资源唯一且被全局访问。\",\"配置管理器：读取配置文件并在应用程序中共享配置数据。\",\"日志记录器：确保整个应用程序中的日志输出统一管理。\"]},\"2017\":{\"h\":\"总结\",\"t\":[\"单例模式是一种常用的设计模式，通过确保类只有一个实例，可以避免重复创建对象带来的资源浪费。实现单例模式有多种方式，各有优缺点，开发者应根据具体场景选择合适的实现方式。枚举单例被认为是最简洁和推荐的方式，特别是在涉及序列化和反射攻击的情况下。\"]},\"2018\":{\"h\":\"GUI\",\"t\":[\"Java GUI（图形用户界面）编程主要使用两大库：AWT（Abstract Window Toolkit） 和 Swing，其中 Swing 是 AWT 的扩展和增强，提供了更丰富的组件和更好的跨平台支持。\"]},\"2019\":{\"h\":\"一、Java GUI 编程概述\",\"t\":[\"AWT：Java 的早期 GUI 工具包，依赖于本地操作系统的 GUI 实现，使用重量级组件。AWT 的组件通常与操作系统的原生窗口小部件一一对应，因此其外观和行为依赖于操作系统。\",\"Swing：基于 AWT 的轻量级 GUI 工具包，提供更丰富的 UI 组件（如按钮、文本框、表格等）和更好的可移植性。Swing 独立于操作系统，可以跨平台运行，并且有自己的绘图机制来渲染组件。\",\"在实际开发中，Swing 是最常用的 Java GUI 框架，它为构建桌面应用程序提供了强大的工具。\"]},\"2020\":{\"h\":\"二、Swing 编程基础\",\"t\":[\"Swing 是 Java 基础类库（JFC，Java Foundation Classes）的一部分，提供了丰富的组件和容器类。所有 Swing 组件都位于 javax.swing 包中。\"]},\"2021\":{\"h\":\"1. Swing 的核心类\",\"t\":[\"JFrame：顶层容器，代表一个窗口。\",\"JPanel：中间容器，用于组织和布局组件。\",\"JButton、JLabel、JTextField、JTextArea：基本组件，分别表示按钮、标签、文本框和多行文本区。\",\"JMenuBar、JMenu、JMenuItem：用于创建菜单栏和菜单项。\"]},\"2022\":{\"h\":\"2. 创建一个简单的 Swing 应用程序\",\"t\":[\"下面是一个简单的 Java Swing 应用程序，它创建了一个窗口，并在窗口中添加了一个按钮：\",\"import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JOptionPane; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; public class SimpleSwingApp { public static void main(String[] args) { // 创建一个 JFrame 窗口 JFrame frame = new JFrame(\\\"简单的 Swing 应用程序\\\"); frame.setSize(400, 300); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); // 使用绝对布局 // 创建一个按钮 JButton button = new JButton(\\\"点击我\\\"); button.setBounds(150, 100, 100, 50); // 设置按钮位置和大小 // 添加按钮点击事件监听器 button.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog(frame, \\\"按钮被点击了！\\\"); } }); // 将按钮添加到 JFrame 中 frame.add(button); // 显示窗口 frame.setVisible(true); } }\"]},\"2023\":{\"h\":\"代码说明：\",\"t\":[\"JFrame：创建一个窗口对象，并设置其大小、标题和关闭操作。\",\"JButton：创建一个按钮组件，并通过 setBounds() 方法设置其在窗口中的位置和大小。\",\"ActionListener：添加按钮的点击事件监听器，当按钮被点击时，会弹出一个消息对话框。\"]},\"2024\":{\"h\":\"三、Swing 组件和布局管理器\",\"t\":[\"Swing 提供了丰富的 GUI 组件和布局管理器，用于构建复杂的用户界面。\"]},\"2025\":{\"h\":\"1. 常用 Swing 组件\",\"t\":[\"JButton：按钮。\",\"JLabel：标签，用于显示文本或图像。\",\"JTextField：单行文本输入框。\",\"JTextArea：多行文本输入框。\",\"JCheckBox：复选框。\",\"JRadioButton：单选按钮。\",\"JComboBox：下拉列表。\",\"JList：列表。\",\"JTable：表格。\",\"JTree：树形结构。\",\"JProgressBar：进度条。\"]},\"2026\":{\"h\":\"2. 布局管理器\",\"t\":[\"布局管理器负责管理组件在容器中的排列方式。Swing 提供了多种布局管理器，如下所示：\",\"FlowLayout：按顺序从左到右排列组件，默认情况下在 JPanel 中使用。\",\"BorderLayout：将容器分为东南西北中五个区域，每个区域最多只能添加一个组件，默认在 JFrame 中使用。\",\"GridLayout：将容器划分为网格，每个单元格大小相同。\",\"BoxLayout：按水平或垂直方向排列组件。\",\"GridBagLayout：最复杂和最强大的布局管理器，允许精确控制组件的布局。\"]},\"2027\":{\"h\":\"布局管理示例：\",\"t\":[\"import javax.swing.JButton; import javax.swing.JFrame; import java.awt.FlowLayout; public class FlowLayoutExample { public static void main(String[] args) { JFrame frame = new JFrame(\\\"FlowLayout 示例\\\"); frame.setSize(300, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置布局管理器为 FlowLayout frame.setLayout(new FlowLayout()); // 添加按钮 frame.add(new JButton(\\\"按钮 1\\\")); frame.add(new JButton(\\\"按钮 2\\\")); frame.add(new JButton(\\\"按钮 3\\\")); // 显示窗口 frame.setVisible(true); } }\"]},\"2028\":{\"h\":\"布局管理示例：\",\"t\":[\"import javax.swing.JButton; import javax.swing.JFrame; import java.awt.BorderLayout; public class BorderLayoutExample { public static void main(String[] args) { JFrame frame = new JFrame(\\\"BorderLayout 示例\\\"); frame.setSize(400, 300); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 设置布局管理器为 BorderLayout frame.setLayout(new BorderLayout()); // 添加按钮到不同区域 frame.add(new JButton(\\\"北\\\"), BorderLayout.NORTH); frame.add(new JButton(\\\"南\\\"), BorderLayout.SOUTH); frame.add(new JButton(\\\"东\\\"), BorderLayout.EAST); frame.add(new JButton(\\\"西\\\"), BorderLayout.WEST); frame.add(new JButton(\\\"中\\\"), BorderLayout.CENTER); // 显示窗口 frame.setVisible(true); } }\"]},\"2029\":{\"h\":\"四、事件处理\",\"t\":[\"Java 使用事件驱动机制来处理 GUI 组件的用户交互。每个 GUI 组件都有相应的事件监听器接口来处理特定的用户事件。\"]},\"2030\":{\"h\":\"1. 常见事件监听器接口\",\"t\":[\"ActionListener：用于处理按钮、菜单项等组件的点击事件。\",\"MouseListener：用于处理鼠标点击、进入、退出等事件。\",\"KeyListener：用于处理键盘按键事件。\",\"WindowListener：用于处理窗口事件（如窗口关闭、最小化等）。\"]},\"2031\":{\"h\":\"2. 添加事件监听器\",\"t\":[\"通过调用组件的 addXXXListener() 方法来注册事件监听器，如 addActionListener() 注册按钮点击事件监听器。\",\"JButton button = new JButton(\\\"点击我\\\"); button.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.out.println(\\\"按钮被点击了！\\\"); } });\"]},\"2032\":{\"h\":\"五、JavaFX：Java 的现代 GUI 框架\",\"t\":[\"尽管 Swing 仍然被广泛使用，但 JavaFX 是 Java 的现代 GUI 框架，提供了更丰富的 GUI 组件、动画支持和更强大的样式功能（CSS）。JavaFX 已成为构建现代 Java 桌面应用程序的首选工具。\"]},\"2033\":{\"h\":\"示例：JavaFX 简单应用\",\"t\":[\"import javafx.application.Application; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.layout.StackPane; import javafx.stage.Stage; public class JavaFXExample extends Application { @Override public void start(Stage primaryStage) { primaryStage.setTitle(\\\"JavaFX 示例\\\"); Button button = new Button(\\\"点击我\\\"); button.setOnAction(e -> System.out.println(\\\"按钮被点击了！\\\")); StackPane root = new StackPane(); root.getChildren().add(button); Scene scene = new Scene(root, 300, 250); primaryStage.setScene(scene); primaryStage.show(); } public static void main(String[] args) { launch(args); } }\"]},\"2034\":{\"h\":\"六、总结\",\"t\":[\"Java 提供了多种 GUI 编程工具和框架。Swing 是经典的 GUI 框架，适用于构建跨平台的桌面应用程序，而 JavaFX 提供了更现代的 GUI 设计和更强大的功能。根据需求和项目特点，选择合适的框架进行开发。\"]},\"2035\":{\"h\":\"Java 常用类和API\",\"t\":[\"Java 提供了丰富的类库和 API，涵盖了各种常用功能和工具类。这些类库和 API 是 Java 开发的基础，帮助开发者完成诸如字符串处理、集合操作、日期时间处理、文件 I/O 操作、网络编程等各种任务。下面将详细介绍一些 Java 常用的类和 API。\"]},\"2036\":{\"h\":\"一、Java 核心类库\",\"t\":[\"Java 核心类库主要位于 java.lang、java.util、java.io、java.net、java.time 等包中，这些类库提供了基本的编程功能。\"]},\"2037\":{\"h\":\"1. 包\",\"t\":[\"java.lang 包是 Java 语言的基础包，包含了 Java 语言的核心类，如 Object、String、Math 等。\",\"Object 类：所有 Java 类的超类，提供了 equals()、hashCode()、toString()、clone() 等方法。\",\"String 类：不可变的字符串类，用于表示和操作字符串。常用方法有 substring()、indexOf()、replace()、split()、toUpperCase() 等。\",\"StringBuilder 和 StringBuffer 类：用于可变字符串的操作。StringBuilder 非线程安全，性能更高；StringBuffer 线程安全，适用于多线程环境。\",\"Math 类：提供数学运算方法，如 abs()、max()、min()、pow()、sqrt()、sin()、cos()、random() 等。\",\"System 类：提供系统相关功能，如标准输入输出、环境变量、系统属性等。常用方法有 System.out.println()、System.currentTimeMillis()、System.arraycopy() 等。\",\"Thread 类：用于多线程编程，提供了创建和管理线程的功能。\"]},\"2038\":{\"h\":\"2. 包\",\"t\":[\"java.util 包包含了集合框架、日期时间、随机数生成器等实用工具类。\",\"集合框架： \",\"List 接口及其实现类：如 ArrayList、LinkedList，用于存储有序的元素集合。\",\"Set 接口及其实现类：如 HashSet、LinkedHashSet、TreeSet，用于存储无序且唯一的元素集合。\",\"Map 接口及其实现类：如 HashMap、LinkedHashMap、TreeMap，用于存储键值对。\",\"Queue 接口及其实现类：如 LinkedList（双端队列）、PriorityQueue，用于存储按照某种顺序进行处理的元素集合。\",\"日期时间类： \",\"Date 类：表示特定的瞬间（已过时，不推荐使用）。\",\"Calendar 类：用于操作日期时间（已过时，不推荐使用）。\",\"TimeZone 类：用于表示时区。\",\"Locale 类：用于表示地区、语言环境。\",\"工具类： \",\"Random 类：用于生成随机数。\",\"Collections 类：包含用于操作集合（如排序、查找、线程安全等）的静态方法。\",\"Arrays 类：包含用于操作数组（如排序、查找等）的静态方法。\"]},\"2039\":{\"h\":\"3. 包\",\"t\":[\"java.io 包提供了输入输出（I/O）相关的类，支持文件 I/O、网络 I/O、序列化等功能。\",\"输入流和输出流： \",\"字节流：InputStream、OutputStream 及其子类（如 FileInputStream、FileOutputStream、BufferedInputStream、BufferedOutputStream）。\",\"字符流：Reader、Writer 及其子类（如 FileReader、FileWriter、BufferedReader、BufferedWriter）。\",\"文件操作类： \",\"File 类：用于表示文件和目录，提供了创建、删除、重命名文件等功能。\",\"FileReader 和 FileWriter 类：用于读取和写入字符文件。\",\"BufferedReader 和 BufferedWriter 类：用于高效读取和写入字符文件。\",\"序列化： \",\"Serializable 接口：用于表示一个类的对象可以序列化（将对象转换为字节流）。\",\"ObjectInputStream 和 ObjectOutputStream 类：用于对象的序列化和反序列化。\"]},\"2040\":{\"h\":\"4. 包\",\"t\":[\"java.net 包提供了进行网络编程的类，支持 TCP、UDP、HTTP 等协议。\",\"URL 类：表示一个统一资源定位符（Uniform Resource Locator），用于访问网络资源。\",\"URLConnection 类：表示一个到 URL 所引用的远程对象的通信链接。\",\"Socket 类：实现客户端的套接字，支持 TCP 网络通信。\",\"ServerSocket 类：实现服务器端的套接字，支持 TCP 网络通信。\",\"DatagramSocket 类：实现无连接的 UDP 网络通信。\"]},\"2041\":{\"h\":\"5. 包\",\"t\":[\"java.time 包是 Java 8 引入的用于处理日期和时间的类库，替代了过时的 java.util.Date 和 java.util.Calendar 类。\",\"LocalDate 类：表示一个没有时间的日期。\",\"LocalTime 类：表示一个不带日期的时间。\",\"LocalDateTime 类：表示一个日期时间。\",\"ZonedDateTime 类：表示带有时区的日期时间。\",\"Period 类：表示日期的差异。\",\"Duration 类：表示时间的差异。\",\"DateTimeFormatter 类：用于格式化和解析日期时间。\"]},\"2042\":{\"h\":\"二、Java 常用工具类和 API\"},\"2043\":{\"h\":\"1. 包\",\"t\":[\"java.util.regex 包提供了正则表达式 API，用于模式匹配和文本操作。\",\"Pattern 类：表示编译后的正则表达式。\",\"Matcher 类：用于在输入字符串中匹配正则表达式。\",\"PatternSyntaxException 类：表示正则表达式的语法错误。\"]},\"2044\":{\"h\":\"2. 包\",\"t\":[\"java.util.concurrent 包提供了线程安全的集合、执行器框架、同步工具和原子变量等，用于并发编程。\",\"线程池：Executor、ExecutorService、ScheduledExecutorService、ThreadPoolExecutor 等。\",\"同步工具：CountDownLatch、CyclicBarrier、Semaphore、Exchanger 等。\",\"原子变量：AtomicInteger、AtomicLong、AtomicReference 等。\",\"并发集合：ConcurrentHashMap、CopyOnWriteArrayList、CopyOnWriteArraySet 等。\"]},\"2045\":{\"h\":\"3. 包\",\"t\":[\"java.security 包提供了加密、数字签名、密钥生成和验证、消息摘要等安全功能。\",\"消息摘要：MessageDigest 类用于计算消息的摘要（如 SHA-256）。\",\"密钥生成：KeyGenerator 类用于生成对称加密密钥。\",\"数字签名：Signature 类用于生成和验证数字签名。\",\"加密/解密：Cipher 类用于加密和解密数据。\"]},\"2046\":{\"h\":\"三、示例代码\"},\"2047\":{\"h\":\"示例：使用 和\",\"t\":[\"import java.time.LocalDate; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; public class DateTimeExample { public static void main(String[] args) { // 获取当前日期 LocalDate date = LocalDate.now(); System.out.println(\\\"Current Date: \\\" + date); // 获取当前日期时间 LocalDateTime dateTime = LocalDateTime.now(); System.out.println(\\\"Current DateTime: \\\" + dateTime); // 自定义格式化日期时间 DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\"); String formattedDateTime = dateTime.format(formatter); System.out.println(\\\"Formatted DateTime: \\\" + formattedDateTime); } }\"]},\"2048\":{\"h\":\"示例：使用 和 进行正则表达式匹配\",\"t\":[\"import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexExample { public static void main(String[] args) { String text = \\\"The quick brown fox jumps over the lazy dog.\\\"; String patternString = \\\"\\\\\\\\b[a-zA-Z]{4}\\\\\\\\b\\\"; // 匹配长度为4的单词 Pattern pattern = Pattern.compile(patternString); Matcher matcher = pattern.matcher(text); while (matcher.find()) { System.out.println (\\\"Found: \\\" + matcher.group()); } } }\"]},\"2049\":{\"h\":\"四、总结\",\"t\":[\"Java 提供了广泛的类库和 API，涵盖了几乎所有常见的编程需求。掌握这些类和 API 是成为 Java 开发者的基础，通过熟悉它们可以提高开发效率和代码质量。建议在实际开发中多加练习和应用这些类库，深入理解其工作原理和最佳实践。\"]},\"2050\":{\"c\":[\"Java\"]},\"2051\":{\"c\":[\"Java高级内容\"]},\"2052\":{\"h\":\"IDEA\"},\"2053\":{\"h\":\"下载安装\"},\"2054\":{\"h\":\"配置环境\"},\"2055\":{\"h\":\"快捷键\"},\"2056\":{\"h\":\"项目管理\"},\"2057\":{\"h\":\"调试程序\"},\"2058\":{\"c\":[\"Java\"]},\"2059\":{\"c\":[\"IDEA\",\"IDE\"]},\"2060\":{\"h\":\"Maven\"},\"2061\":{\"c\":[\"Java\"]},\"2062\":{\"c\":[\"Maven\",\"项目管理\"]},\"2063\":{\"h\":\"Java并发编程\"},\"2064\":{\"c\":[\"Java\"]},\"2065\":{\"c\":[\"并发\",\"多线程\"]},\"2066\":{\"h\":\"Java数据结构与算法\"},\"2067\":{\"h\":\"线性表\"},\"2068\":{\"h\":\"队列\"},\"2069\":{\"h\":\"栈\"},\"2070\":{\"h\":\"树\"},\"2071\":{\"h\":\"图\"},\"2072\":{\"h\":\"查找\"},\"2073\":{\"h\":\"排序\"},\"2074\":{\"c\":[\"Java\"]},\"2075\":{\"c\":[\"Java数据结构与算法\"]},\"2076\":{\"h\":\"Java设计模式\"},\"2077\":{\"h\":\"设计原则\"},\"2078\":{\"h\":\"设计模式\"},\"2079\":{\"c\":[\"Java\"]},\"2080\":{\"c\":[\"Java设计模式\"]},\"2081\":{\"h\":\"JVM\"},\"2082\":{\"c\":[\"Java\"]},\"2083\":{\"c\":[\"Java虚拟机\"]},\"2084\":{\"h\":\"Cookie&Session\"},\"2085\":{\"c\":[\"JavaWeb\"]},\"2086\":{\"c\":[\"Cookie&Session\"]},\"2087\":{\"h\":\"Filter&Listener\"},\"2088\":{\"c\":[\"JavaWeb\"]},\"2089\":{\"c\":[\"Filter&Listener\"]},\"2090\":{\"h\":\"JSP\"},\"2091\":{\"c\":[\"Java\"]},\"2092\":{\"c\":[\"JSP\"]},\"2093\":{\"h\":\"Linux环境\"},\"2094\":{\"c\":[\"JavaWeb\"]},\"2095\":{\"c\":[\"Linux服务器环境\"]},\"2096\":{\"h\":\"Nginx\"},\"2097\":{\"c\":[\"Java\"]},\"2098\":{\"c\":[\"Nginx\",\"服务器\"]},\"2099\":{\"h\":\"Servlet\"},\"2100\":{\"c\":[\"Java\"]},\"2101\":{\"c\":[\"Servlet\"]},\"2102\":{\"h\":\"Tomcat\"},\"2103\":{\"c\":[\"Java开发工具\"]},\"2104\":{\"c\":[\"tomcat\",\"服务器\"]},\"2105\":{\"h\":\"MyBatis\"},\"2106\":{\"c\":[\"Java框架\"]},\"2107\":{\"c\":[\"MyBatis\",\"SSM\"]},\"2108\":{\"h\":\"Spring\"},\"2109\":{\"c\":[\"Java框架\"]},\"2110\":{\"c\":[\"spring\",\"SSM\"]},\"2111\":{\"h\":\"SpringBoot\"},\"2112\":{\"c\":[\"Java框架\"]},\"2113\":{\"c\":[\"springboot\"]},\"2114\":{\"h\":\"SpringMVC\"},\"2115\":{\"c\":[\"Java框架\"]},\"2116\":{\"c\":[\"springmvc\",\"SSM\"]},\"2117\":{\"h\":\"Python Web开发\"},\"2118\":{\"c\":[\"Python\"]},\"2119\":{\"c\":[\"Python\",\"Web开发\"]},\"2120\":{\"h\":\"Matplotlib\"},\"2121\":{\"c\":[\"python\"]},\"2122\":{\"c\":[\"matplotlib\",\"python\",\"数据分析\"]},\"2123\":{\"h\":\"NumPy\"},\"2124\":{\"h\":\"Numpy\"},\"2125\":{\"c\":[\"python\"]},\"2126\":{\"c\":[\"numpy\",\"python\",\"数据分析\"]},\"2127\":{\"h\":\"Pandas\"},\"2128\":{\"c\":[\"python\"]},\"2129\":{\"c\":[\"pandas\",\"python\",\"数据分析\"]},\"2130\":{\"h\":\"一个基于python的图像编辑器\"},\"2131\":{\"h\":\"设想\"},\"2132\":{\"h\":\"功能\"},\"2133\":{\"h\":\"模块\"},\"2134\":{\"h\":\"界面\"},\"2135\":{\"h\":\"核心\"},\"2136\":{\"c\":[\"python\"]},\"2137\":{\"c\":[\"图像处理\",\"python项目\"]},\"2138\":{\"h\":\"PHP\"},\"2139\":{\"c\":[\"PHP\"]},\"2140\":{\"c\":[\"PHP\",\"Web开发\"]},\"2141\":{\"h\":\"Vue\"},\"2142\":{\"c\":[\"Vue\"]},\"2143\":{\"c\":[\"Vue\",\"MVVM\",\"前端框架\"]},\"2144\":{\"h\":\"Taro\"},\"2145\":{\"c\":[\"小程序\"]},\"2146\":{\"c\":[\"Taro\",\"多端解决方案\"]},\"2147\":{\"h\":\"微信小程序\"},\"2148\":{\"c\":[\"小程序\"]},\"2149\":{\"c\":[\"微信小程序\"]},\"2150\":{\"h\":\"数据结构与算法\"},\"2151\":{\"h\":\"1.数据结构\"},\"2152\":{\"h\":\"1.1数据结构是什么\",\"t\":[\"数据结构（data structure）是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法，它具有以下设计目标。\",\"空间占用尽量少，以节省计算机内存。\",\"数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。\",\"提供简洁的数据表示和逻辑信息，以便算法高效运行。 数据结构设计是一个充满权衡的过程。如果想在某方面取得提升，往往需要在另一方面作出妥协。下面举两个例子。\",\"链表相较于数组，在数据添加和删除操作上更加便捷，但牺牲了数据访问速度。\",\"图相较于链表，提供了更丰富的逻辑信息，但需要占用更大的内存空间。\"]},\"2153\":{\"h\":\"1.2数据结构的分类\",\"t\":[\"1️⃣ 逻辑结构的分类\",\"线性结构：数组，链表，栈，队列，哈希表\",\"非线性结构：树，堆，图 \",\"2️⃣ 物理结构的分类\",\"顺序结构：划分连续内存空间（元素顺序访问）\",\"链式结构：使用分散内存空间（内存寻址访问） \"]},\"2154\":{\"h\":\"1.3数字编码格式\",\"t\":[\"原码：数字的二进制表示的最高位视为符号位，其中 表示0正数，1表示负数，其余位表示数字的值。\",\"补码：正数的补码与其原码相同，负数的补码是在其反码的基础上加1。\",\"反码：正数的反码与其原码相同，负数的反码是对其原码除符号位外的所有位取反。 \",\"浮点数编码: IEEE 754 是一种广泛使用的浮点数编码格式标准，它定义了浮点数的编码格式、运算规则和异常处理机制。IEEE 754 浮点数编码格式包括以下几种：\",\"单精度浮点数（Single Precision） 单精度浮点数使用 32 位二进制代码来表示实数，包括：\",\"符号位（Sign bit）：1 位，表示数的符号（正或负）\",\"指数位（Exponent bits）：8 位，表示指数的值\",\"尾数位（Mantissa bits）：23 位，表示尾数的值\",\"双精度浮点数（Double Precision） 双精度浮点数使用 64 位二进制代码来表示实数，包括：\",\"符号位（Sign bit）：1 位，表示数的符号（正或负）\",\"指数位（Exponent bits）：11 位，表示指数的值\",\"尾数位（Mantissa bits）：52 位，表示尾数的值\",\"扩展精度浮点数（Extended Precision） 扩展精度浮点数使用 80 位二进制代码来表示实数，包括：\",\"符号位（Sign bit）：1 位，表示数的符号（正或负）\",\"指数位（Exponent bits）：15 位，表示指数的值\",\"尾数位（Mantissa bits）：64 位，表示尾数的值\"]},\"2155\":{\"h\":\"2.算法\"},\"2156\":{\"h\":\"2.1算法是什么\",\"t\":[\"算法是解决特定问题的一系列步骤或规则。它可以被看作是一个清晰的指令集合，用于完成特定的任务或计算。算法通常涉及以下几个方面：\",\"输入：算法接收某些数据或参数作为输入。\",\"处理：算法通过一系列步骤对输入数据进行处理。\",\"输出：算法产生结果或输出，完成任务。\",\"算法可以用来解决各种问题，如排序、搜索、计算、图像处理等。它们可以用不同的编程语言实现，并且在计算机科学中，算法是编程和数据处理的核心。\"]},\"2157\":{\"h\":\"2.2算法效率的评估\",\"t\":[\"在算法设计中，我们先后追求以下两个层面的目标。\",\"**找到问题解法：**算法需要在规定的输入范围内可靠地求得问题的正确解。\",\"**寻求最优解法：**同一个问题可能存在多种解法，我们希望找到尽可能高效的算法。 也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度。\",\"时间效率：算法运行时间的长短。\",\"空间效率：算法占用内存空间的大小。 简而言之，我们的目标是设计“既快又省”的数据结构与算法。而有效地评估算法效率至关重要，因为只有这样，我们才能将各种算法进行对比，进而指导算法设计与优化过程。\",\"效率评估方法主要分为两种：实际测试、理论估算。\"]},\"2158\":{\"h\":\"2.3算法中的迭代与递归\",\"t\":[\"在算法中，重复执行某个任务是很常见的，它与复杂度分析息息相关。因此，在介绍时间复杂度和空间复杂度之前，我们先来了解如何在程序中实现重复执行任务，即两种基本的程序控制结构：迭代、递归。\"]},\"2159\":{\"h\":\"2.3.1迭代\",\"t\":[\"迭代（iteration）是一种重复执行某个任务的控制结构。在迭代中，程序会在满足一定的条件下重复执行某段代码，直到这个条件不再满足。\",\"for循环\",\"while循环\"]},\"2160\":{\"h\":\"2.3.2递归\",\"t\":[\"递归（recursion）是一种算法策略，通过函数调用自身来解决问题。它主要包含两个阶段。\",\"递：程序不断深入地调用自身，通常传入更小或更简化的参数，直到达到“终止条件”。\",\"归：触发“终止条件”后，程序从最深层的递归函数开始逐层返回，汇聚每一层的结果。 而从实现的角度看，递归代码主要包含三个要素。\",\"终止条件：用于决定什么时候由“递”转“归”。\",\"递归调用：对应“递”，函数调用自身，通常输入更小或更简化的参数。\",\"返回结果：对应“归”，将当前递归层级的结果返回至上一层。\"]},\"2161\":{\"h\":\"2.3.3选择迭代还是递归\",\"t\":[\"迭代：适用于大多数简单的循环任务，通常更高效，且没有栈溢出风险。\",\"递归：适用于问题可以自然地分解为更小的相似问题的情况，如树结构遍历、图遍历、数学归纳法问题等。\"]},\"2162\":{\"h\":\"2.4时间复杂度\",\"t\":[\"算法的时间复杂度是衡量算法执行所需时间的指标，它反映了算法在处理输入数据时，随着数据规模的增大，执行时间的增长速度。时间复杂度通常用大O符号表示（O-notation），常见的时间复杂度有：\",\"O(1)：常数时间复杂度，不论输入数据规模多大，算法的执行时间都是固定的。例如，访问数组的某个元素。\",\"O(log n)：对数时间复杂度，通常出现在二分查找等算法中，数据规模增加，时间复杂度的增长速度较慢。例如，二分查找在有序数组中的查找。\",\"O(n)：线性时间复杂度，算法的执行时间与输入数据规模成正比。例如，遍历一个数组。\",\"O(n log n)：线性对数时间复杂度，常见于许多高效的排序算法，如快速排序和归并排序。\",\"O(n²)：平方时间复杂度，常见于一些简单的排序算法，如冒泡排序和选择排序，以及双层循环的情况。\",\"O(2^n)：指数时间复杂度，通常出现在一些递归算法中，例如求解斐波那契数列的朴素递归解法。\",\"O(n!)：阶乘时间复杂度，通常出现在一些组合问题中，例如旅行商问题的暴力解法。\",\"理解时间复杂度有助于评估算法在处理大规模数据时的表现，并选择最适合的算法和优化策略。\"]},\"2163\":{\"h\":\"2.5空间复杂度\",\"t\":[\"空间复杂度是衡量算法在执行过程中所占用的存储空间的指标。它反映了随着输入数据规模的增大，算法所需存储空间的增长速度。空间复杂度同样使用大O符号表示，常见的空间复杂度包括：\",\"O(1)：常数空间复杂度，算法所需的空间不随输入数据规模的增大而增加。例如，简单的变量赋值操作或对数组元素的直接访问。\",\"O(n)：线性空间复杂度，算法所需的空间与输入数据规模成正比。例如，将输入数据复制到另一个数组或列表中。\",\"O(log n)：对数空间复杂度，通常出现在递归算法中，递归深度为log n时，所需的额外空间也是log n。\",\"O(n log n)：线性对数空间复杂度，通常出现在一些需要额外临时存储的递归或分治算法中。\",\"O(n²)：平方空间复杂度，算法所需的空间与输入数据规模的平方成正比。例如，在矩阵运算中，需要存储一个n x n的矩阵。\"]},\"2164\":{\"h\":\"空间复杂度的考虑因素\",\"t\":[\"辅助空间（Auxiliary Space）：除了输入数据之外，算法执行过程中所需的额外空间。例如，排序算法中的临时存储空间。\",\"输入数据空间：算法处理输入数据时所占用的空间。\"]},\"2165\":{\"h\":\"典型例子\",\"t\":[\"递归调用：递归算法的空间复杂度通常与递归深度有关，因为每次递归调用都会占用栈空间。\",\"动态规划：某些动态规划算法需要使用额外的数组来存储中间结果，其空间复杂度通常为O(n)或O(n²)。\",\"理解空间复杂度有助于优化算法，尤其在处理大数据或内存受限的环境中，空间复杂度是选择合适算法的重要考虑因素之一。\"]},\"2166\":{\"h\":\"线性表\"},\"2167\":{\"h\":\"数组\"},\"2168\":{\"h\":\"链表\"},\"2169\":{\"h\":\"栈和队列\"},\"2170\":{\"h\":\"哈希表\"},\"2171\":{\"h\":\"树\"},\"2172\":{\"h\":\"堆\"},\"2173\":{\"h\":\"图\"},\"2174\":{\"h\":\"搜索\"},\"2175\":{\"h\":\"排序\"},\"2176\":{\"h\":\"递归\"},\"2177\":{\"h\":\"分治\"},\"2178\":{\"h\":\"回溯\"},\"2179\":{\"h\":\"动态规划\"},\"2180\":{\"h\":\"贪心\"},\"2181\":{\"c\":[\"数据结构\"]},\"2182\":{\"c\":[\"数据结构\",\"算法\",\"Java实现\"]},\"2183\":{\"h\":\"算法\"},\"2184\":{\"c\":[\"算法\"]},\"2185\":{\"c\":[\"算法\"]},\"2186\":{\"h\":\"操作系统\"},\"2187\":{\"h\":\"操作系统导论\"},\"2188\":{\"h\":\"操作系统是什么\",\"t\":[\"操作系统（Operating System，OS）是计算机系统中的一个重要软件，它管理计算机硬件和软件资源，并为用户和应用程序提供基本的操作接口。操作系统作为计算机系统的基础，负责协调和管理计算机中的各项资源（如CPU、内存、存储设备、输入输出设备等），以确保各个程序和用户之间能够高效、安全地共享这些资源。\"]},\"2189\":{\"h\":\"操作系统的作用\",\"t\":[\"操作系统的作用可以概括为以下几点：\",\"资源管理：操作系统负责管理计算机的各种硬件资源，如CPU、内存、磁盘和I/O设备等。它确保这些资源能够有效地分配和使用。\",\"提供用户界面：操作系统为用户提供了一个友好的界面，通过命令行或图形用户界面（GUI）与计算机进行交互。\",\"文件管理：操作系统提供文件系统，用于管理文件的存储、检索、命名和保护。它负责处理文件的读写、删除、复制和权限控制等操作。\",\"进程管理：操作系统管理正在运行的程序（称为进程），负责进程的创建、调度、同步和终止，确保系统的并发执行和资源分配合理。\",\"设备驱动管理：操作系统通过设备驱动程序与硬件设备进行交互，隐藏硬件的复杂性，为应用程序提供统一的接口。\",\"安全和保护：操作系统负责对系统资源和数据进行保护，防止未经授权的访问和恶意攻击。它提供用户认证、访问控制和加密等安全机制。\"]},\"2190\":{\"h\":\"操作系统的历史\",\"t\":[\"操作系统的发展经历了以下几个阶段：\",\"无操作系统阶段（1940年代-1950年代）：最早的计算机没有操作系统，程序员需要直接操作硬件。每个程序都独占整个计算机。\",\"批处理系统阶段（1950年代-1960年代）：随着计算机的发展，批处理操作系统出现，能够一次执行多个作业（批次），提高了计算机的利用率。\",\"分时操作系统阶段（1960年代-1970年代）：分时操作系统的出现使得多个用户可以通过终端同时使用一台计算机，支持多任务和多用户环境。\",\"个人计算机操作系统阶段（1970年代-1980年代）：随着个人计算机的普及，操作系统开始在个人电脑上得到广泛应用，如MS-DOS、Windows、Mac OS等。\",\"网络操作系统阶段（1980年代-1990年代）：随着计算机网络的快速发展，网络操作系统出现，支持计算机联网和远程访问。\",\"现代操作系统阶段（1990年代至今）：现代操作系统支持多核处理器、虚拟化技术、多任务、多用户以及分布式计算，代表性系统有Windows、Linux、macOS、Android等。\"]},\"2191\":{\"h\":\"操作系统的特性\",\"t\":[\"并发性：操作系统能够同时管理多个进程，使得多个程序可以并发执行。\",\"共享性：操作系统允许多个用户或程序共享系统资源（如CPU、内存、文件等）。\",\"虚拟性：操作系统通过抽象和虚拟化技术，将物理资源虚拟为逻辑资源，简化了资源的使用和管理。\",\"异步性：操作系统中的进程执行是不可预测的，即进程执行的速度和顺序是不确定的。\",\"持久性：操作系统能够长时间运行并保持状态，即使系统出现故障也能恢复。\"]},\"2192\":{\"h\":\"操作系统的功能\",\"t\":[\"进程管理：创建和终止进程，调度进程的执行，提供进程间通信和同步机制。\",\"内存管理：内存分配和回收，提供内存保护机制，支持虚拟内存管理。\",\"文件系统管理：文件的存储、访问、共享和保护，管理文件目录结构。\",\"设备管理：提供设备驱动程序，管理硬件设备的输入输出操作。\",\"用户管理：支持多用户环境，提供用户认证和权限管理功能。\",\"安全管理：保护系统资源和数据安全，防止未经授权的访问和操作。\",\"网络管理：支持网络通信和资源共享，管理网络协议和服务。\",\"操作系统在计算机系统中扮演着核心角色，其功能和特性决定了计算机的性能和使用体验。\"]},\"2193\":{\"h\":\"进程\"},\"2194\":{\"h\":\"处理机\"},\"2195\":{\"h\":\"存储器\"},\"2196\":{\"h\":\"虚拟存储器\"},\"2197\":{\"h\":\"IO\"},\"2198\":{\"h\":\"文件系统\"},\"2199\":{\"h\":\"持久化\"},\"2200\":{\"h\":\"系统接口\"},\"2201\":{\"h\":\"多处理机\"},\"2202\":{\"h\":\"多媒体系统\"},\"2203\":{\"h\":\"安全\"},\"2204\":{\"c\":[\"计算机基础\"]},\"2205\":{\"c\":[\"操作系统\",\"OS\"]},\"2206\":{\"h\":\"计算机科学导论\",\"t\":[\"“计算机科学导论”通常是计算机科学专业学生学习的第一门课程，旨在提供计算机科学的基本概念和工具，帮助学生理解计算机的工作原理、编程基础、以及计算科学问题的基本方法。这门课的内容广泛且基础，涵盖计算机科学领域中的多个核心主题。以下是一些典型的主题和内容概述：\"]},\"2207\":{\"h\":\"1.\",\"t\":[\"计算机的组成：理解计算机硬件的基本组成部分，如中央处理器（CPU）、内存（RAM）、存储设备（硬盘、SSD）、输入输出设备（键盘、显示器、网络接口）。\",\"二进制与数据表示：计算机使用二进制表示数据，了解二进制、十进制、十六进制的转换，以及如何用二进制表示数字、字符、图像等信息。\"]},\"2208\":{\"h\":\"2.\",\"t\":[\"算法：算法是解决问题的步骤集合。学习如何设计、分析和优化算法，如排序算法（快速排序、合并排序等）、搜索算法（二分搜索等）。\",\"数据结构：数据结构是数据的存储方式。常见的数据结构包括数组、链表、栈、队列、树和图。了解它们的用途和性能是计算机科学的核心技能。\"]},\"2209\":{\"h\":\"3.\",\"t\":[\"编程语言：学习一种或几种编程语言的基础，如Python、Java、C++等。内容包括变量、数据类型、控制结构（条件语句、循环语句）、函数、类和对象（面向对象编程）。\",\"软件开发：介绍基本的软件开发流程，包括编码、调试、测试和版本控制（如使用Git进行代码管理）。\"]},\"2210\":{\"h\":\"4.\",\"t\":[\"图灵机与计算模型：介绍计算的理论基础，如图灵机、有限状态机等。这些模型帮助理解什么是计算和计算的局限性。\",\"复杂性理论：介绍算法的时间复杂性和空间复杂性（如Big-O符号），理解如何分析算法的效率。\"]},\"2211\":{\"h\":\"5.\",\"t\":[\"操作系统概念：操作系统管理计算机硬件和软件资源，提供用户与计算机交互的接口。学习操作系统的基本功能，如进程管理、内存管理、文件系统和设备管理。\",\"并发与并行：理解多线程、多进程的概念，以及如何在程序中实现并发和并行计算。\"]},\"2212\":{\"h\":\"6.\",\"t\":[\"计算机网络基础：学习网络的基本概念，包括互联网的工作原理、协议（如TCP/IP）、网络层次结构（应用层、传输层、网络层、数据链路层）等。\",\"网络安全：介绍基本的网络安全概念，如加密、身份验证、攻击和防御机制。\"]},\"2213\":{\"h\":\"7.\",\"t\":[\"关系数据库：学习数据库管理系统（DBMS）的基础知识，了解如何使用SQL语言对数据进行查询、插入、更新和删除操作。\",\"数据建模：介绍关系模型、实体-关系（ER）模型，学习如何设计有效的数据库结构。\"]},\"2214\":{\"h\":\"8.\",\"t\":[\"人工智能简介：介绍人工智能的基本概念和应用，如机器学习、自然语言处理、计算机视觉等。\",\"机器学习基础：学习基本的机器学习算法，如线性回归、决策树、支持向量机（SVM）等。\"]},\"2215\":{\"h\":\"9.\",\"t\":[\"用户界面设计：了解如何设计有效的人机交互界面，保证用户体验（UX）的友好性和可用性。\",\"可用性测试：学习如何测试和改进用户界面的可用性。\"]},\"2216\":{\"h\":\"10.\",\"t\":[\"计算机伦理：探讨计算机技术在社会中的影响，涉及隐私、知识产权、计算机犯罪、伦理与法律等问题。\",\"技术对社会的影响：分析计算机技术对就业、经济、文化等方面的影响。\"]},\"2217\":{\"h\":\"学习计算机科学导论的建议\",\"t\":[\"动手实践：编程是计算机科学的核心技能，动手编写代码和构建项目是学习的关键。\",\"理解基础概念：扎实的理论基础对深入学习计算机科学的其他领域至关重要。\",\"多做练习：通过大量的编程练习、算法题和项目，可以强化所学的知识。\",\"参与社区：加入学习小组或在线社区（如GitHub、Stack Overflow），与他人交流学习经验和问题。\"]},\"2218\":{\"c\":[\"计算机基础\"]},\"2219\":{\"c\":[\"计算机导论\"]},\"2220\":{\"h\":\"计算机组成原理\"},\"2221\":{\"c\":[\"计算机基础\"]},\"2222\":{\"c\":[\"计算机组成\",\"计算机硬件系统\"]},\"2223\":{\"h\":\"汇编语言\"},\"2224\":{\"c\":[\"计算机基础\"]},\"2225\":{\"c\":[\"汇编\",\"低级语言\"]},\"2226\":{\"h\":\"编译原理\"},\"2227\":{\"c\":[\"计算机基础\"]},\"2228\":{\"c\":[\"编译原理\",\"机器语言\"]},\"2229\":{\"h\":\"HTTP协议\"},\"2230\":{\"c\":[\"计算机基础\"]},\"2231\":{\"c\":[\"计算机网络\",\"HTTP协议\"]},\"2232\":{\"h\":\"TCP/IP协议\"},\"2233\":{\"c\":[\"计算机基础\"]},\"2234\":{\"c\":[\"计算机网络\",\"网络原理\"]},\"2235\":{\"h\":\"计算机网络\"},\"2236\":{\"c\":[\"计算机基础\"]},\"2237\":{\"c\":[\"计算机网络\",\"TCP/IP协议\"]},\"2238\":{\"h\":\"Python描述微积分\"},\"2239\":{\"c\":[\"数学\"]},\"2240\":{\"c\":[\"微积分\"]},\"2241\":{\"h\":\"导数\"},\"2242\":{\"c\":[\"数学\"]},\"2243\":{\"c\":[\"微积分\"]},\"2244\":{\"h\":\"微积分导论\"},\"2245\":{\"h\":\"导数\"},\"2246\":{\"h\":\"微分\"},\"2247\":{\"h\":\"积分\"},\"2248\":{\"h\":\"导数和微分\"},\"2249\":{\"h\":\"导数和积分\"},\"2250\":{\"h\":\"微分和积分\"},\"2251\":{\"c\":[\"数学\"]},\"2252\":{\"c\":[\"微积分\"]},\"2253\":{\"h\":\"读研\"},\"2254\":{\"c\":[\"Study\"]},\"2255\":{\"h\":\"纪念我的读研--before the start\"},\"2256\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"2257\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"2258\":{\"c\":[\"Study\"]},\"2259\":{\"c\":[\"福建农林大学\",\"农业工程\"]},\"2260\":{\"h\":\"Ajax\"},\"2261\":{\"c\":[\"JavaWeb\"]},\"2262\":{\"c\":[\"Ajax\"]},\"2263\":{\"h\":\"Axios\"},\"2264\":{\"c\":[\"JavaWeb\"]},\"2265\":{\"c\":[\"Axios\"]},\"2266\":{\"h\":\"CSS\"},\"2267\":{\"c\":[\"JavaWeb\"]},\"2268\":{\"c\":[\"CSS\"]},\"2269\":{\"h\":\"HTML\"},\"2270\":{\"c\":[\"JavaWeb\"]},\"2271\":{\"c\":[\"HTML\"]},\"2272\":{\"h\":\"JavaScript\"},\"2273\":{\"c\":[\"JavaWeb\"]},\"2274\":{\"c\":[\"JavaScript\"]},\"2275\":{\"h\":\"ElementUI\"},\"2276\":{\"c\":[\"JavaWeb\"]},\"2277\":{\"c\":[\"ElementUI\"]},\"2278\":{\"h\":\"Vite\"},\"2279\":{\"c\":[\"JavaWeb\"]},\"2280\":{\"c\":[\"Vite\"]},\"2281\":{\"h\":\"Vue3\"},\"2282\":{\"c\":[\"JavaWeb\"]},\"2283\":{\"c\":[\"Vue3\"]},\"2284\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"2285\":{\"h\":\"Learning English\"},\"2286\":{\"h\":\"农业信息技术\"},\"2287\":{\"h\":\"太赫兹生物传感\"},\"2288\":{\"h\":\"文献阅读\"},\"2289\":{\"h\":\"科研入门\"},\"2290\":{\"h\":\"科研工具\"},\"2291\":{\"h\":\"Java基础\"},\"2292\":{\"h\":\"Java开发工具\"},\"2293\":{\"h\":\"Java进阶\"},\"2294\":{\"h\":\"Java Web\"},\"2295\":{\"h\":\"Spring\"},\"2296\":{\"h\":\"中间件\"},\"2297\":{\"h\":\"分布式微服务\"},\"2298\":{\"h\":\"Python Web\"},\"2299\":{\"h\":\"Python数据分析\"},\"2300\":{\"h\":\"Python项目\"},\"2301\":{\"h\":\"小程序\"},\"2302\":{\"h\":\"数据结构与算法\"},\"2303\":{\"h\":\"操作系统\"},\"2304\":{\"h\":\"计算机组成原理\"},\"2305\":{\"h\":\"汇编和编译\"},\"2306\":{\"h\":\"计算机网络\"},\"2307\":{\"h\":\"微积分\"},\"2308\":{\"h\":\"前端基础\"},\"2309\":{\"h\":\"Vue\"}},\"dirtCount\":0,\"index\":[[\"纪念我的读研\",{\"0\":{\"2255\":1}}],[\"扎实的理论基础对深入学习计算机科学的其他领域至关重要\",{\"1\":{\"2217\":1}}],[\"伦理与法律等问题\",{\"1\":{\"2216\":1}}],[\"探讨计算机技术在社会中的影响\",{\"1\":{\"2216\":1}}],[\"探索新事物\",{\"0\":{\"1003\":1}}],[\"攻击和防御机制\",{\"1\":{\"2212\":1}}],[\"攻读农业工程与信息技术领域农业硕士专业学位研究生必须完成培养方案中规定的所有环节\",{\"1\":{\"1038\":1}}],[\"身份验证\",{\"1\":{\"2212\":1}}],[\"身份运算符\",{\"0\":{\"199\":1}}],[\"介绍人工智能的基本概念和应用\",{\"1\":{\"2214\":1}}],[\"介绍关系模型\",{\"1\":{\"2213\":1}}],[\"介绍基本的网络安全概念\",{\"1\":{\"2212\":1}}],[\"介绍基本的软件开发流程\",{\"1\":{\"2209\":1}}],[\"介绍算法的时间复杂性和空间复杂性\",{\"1\":{\"2210\":1}}],[\"介绍计算的理论基础\",{\"1\":{\"2210\":1}}],[\"硬盘\",{\"1\":{\"2207\":1}}],[\"共享和保护\",{\"1\":{\"2192\":1}}],[\"共享性\",{\"1\":{\"2191\":1}}],[\"持久性\",{\"1\":{\"2191\":1}}],[\"持久化\",{\"0\":{\"2199\":1},\"1\":{\"1861\":1}}],[\"批次\",{\"1\":{\"2190\":1}}],[\"批处理操作系统出现\",{\"1\":{\"2190\":1}}],[\"批处理系统阶段\",{\"1\":{\"2190\":1}}],[\"批判旧事物\",{\"0\":{\"1002\":1}}],[\"磁盘和i\",{\"1\":{\"2189\":1}}],[\"磁场等现象\",{\"1\":{\"885\":1}}],[\"贪心\",{\"0\":{\"2180\":1}}],[\"贪心算法\",{\"1\":{\"416\":1}}],[\"某些动态规划算法需要使用额外的数组来存储中间结果\",{\"1\":{\"2165\":1}}],[\"某些情况下\",{\"1\":{\"614\":1}}],[\"典型例子\",{\"0\":{\"2165\":1}}],[\"辅助空间\",{\"1\":{\"2164\":1}}],[\"辅助指标\",{\"1\":{\"757\":1}}],[\"阶乘时间复杂度\",{\"1\":{\"2162\":1}}],[\"汇编和编译\",{\"0\":{\"2305\":1}}],[\"汇编\",{\"2\":{\"2225\":1}}],[\"汇编语言\",{\"0\":{\"2223\":1}}],[\"汇聚每一层的结果\",{\"1\":{\"2160\":1}}],[\"汇点\",{\"1\":{\"396\":1,\"398\":1,\"399\":1}}],[\"触发\",{\"1\":{\"2160\":1}}],[\"触角等\",{\"1\":{\"683\":1}}],[\"递\",{\"1\":{\"2160\":3}}],[\"递归算法的空间复杂度通常与递归深度有关\",{\"1\":{\"2165\":1}}],[\"递归深度为log\",{\"1\":{\"2163\":1}}],[\"递归调用\",{\"1\":{\"2160\":1,\"2165\":1}}],[\"递归代码主要包含三个要素\",{\"1\":{\"2160\":1}}],[\"递归消除\",{\"1\":{\"1775\":1}}],[\"递归方法是指一个方法在其内部调用自身\",{\"1\":{\"1345\":1}}],[\"递归方法\",{\"0\":{\"1345\":1}}],[\"递归神经网络适用于处理序列数据\",{\"1\":{\"655\":1}}],[\"递归神经网络\",{\"0\":{\"655\":1}}],[\"递归函数必须有一个基本条件以防止无限递归\",{\"1\":{\"213\":1}}],[\"递归是指函数在其定义中调用自身\",{\"1\":{\"213\":1}}],[\"递归\",{\"0\":{\"213\":1,\"2176\":1},\"1\":{\"2158\":1,\"2160\":1,\"2161\":1}}],[\"尾数位\",{\"1\":{\"2154\":3}}],[\"尾下标\",{\"1\":{\"138\":1}}],[\"补码\",{\"1\":{\"2154\":1}}],[\"补修课程考试不合格者不得进入中期考核\",{\"1\":{\"1031\":1}}],[\"补修课程以70分为合格\",{\"1\":{\"1031\":1}}],[\"补修课程\",{\"0\":{\"1031\":1}}],[\"划分连续内存空间\",{\"1\":{\"2153\":1}}],[\"划分训练集和测试集\",{\"1\":{\"524\":1,\"535\":1}}],[\"哈希表\",{\"0\":{\"2170\":1},\"1\":{\"2153\":1}}],[\"哈希码生成\",{\"1\":{\"1664\":1}}],[\"往往需要在另一方面作出妥协\",{\"1\":{\"2152\":1}}],[\"涵盖计算机科学领域中的多个核心主题\",{\"1\":{\"2206\":1}}],[\"涵盖数据访问\",{\"1\":{\"2152\":1}}],[\"涵盖数据内容\",{\"1\":{\"2152\":1}}],[\"涵盖了几乎所有常见的编程需求\",{\"1\":{\"2049\":1}}],[\"涵盖了各种常用功能和工具类\",{\"1\":{\"2035\":1}}],[\"涵盖了java面向对象编程中的核心概念\",{\"1\":{\"1663\":1}}],[\"涵盖了面向对象的核心知识点\",{\"1\":{\"1659\":1}}],[\"涵盖了从基本编辑到高级分析的各个方面\",{\"1\":{\"793\":1}}],[\"涵盖了\",{\"1\":{\"456\":1}}],[\"界面\",{\"0\":{\"2134\":1}}],[\"快捷键\",{\"0\":{\"2055\":1}}],[\"快速排序\",{\"1\":{\"2208\":1}}],[\"快速查找\",{\"1\":{\"1793\":1}}],[\"快速傅里叶变换等\",{\"1\":{\"1119\":1}}],[\"密钥生成\",{\"1\":{\"2045\":1}}],[\"密钥生成和验证\",{\"1\":{\"2045\":1}}],[\"密钥等敏感信息\",{\"1\":{\"1927\":1}}],[\"桌面应用程序的首选工具\",{\"1\":{\"2032\":1}}],[\"仍然被广泛使用\",{\"1\":{\"2032\":1}}],[\"菜单项等组件的点击事件\",{\"1\":{\"2030\":1}}],[\"西\",{\"1\":{\"2028\":1}}],[\"东\",{\"1\":{\"2028\":1}}],[\"南\",{\"1\":{\"2028\":1}}],[\"南京航空航天大学\",{\"1\":{\"1040\":1}}],[\"北\",{\"1\":{\"2028\":1}}],[\"布局管理示例\",{\"0\":{\"2027\":1,\"2028\":1}}],[\"布局管理器负责管理组件在容器中的排列方式\",{\"1\":{\"2026\":1}}],[\"布局管理器\",{\"0\":{\"2026\":1}}],[\"布尔型变量的默认值是\",{\"1\":{\"1302\":1}}],[\"布尔常量\",{\"1\":{\"1292\":2}}],[\"布尔值转换为整数\",{\"1\":{\"185\":1}}],[\"布尔\",{\"1\":{\"137\":1}}],[\"布尔类型也可以被转换成其他数据类型\",{\"1\":{\"139\":1}}],[\"布尔类型可以和逻辑运算符一起使用\",{\"1\":{\"139\":1}}],[\"布尔类型可以和其他数据类型进行比较\",{\"1\":{\"139\":1}}],[\"布尔类型可以用来控制程序的流程\",{\"1\":{\"139\":1}}],[\"布尔类型只有两个值\",{\"1\":{\"139\":1}}],[\"布尔类型特点\",{\"1\":{\"139\":1}}],[\"布尔类型即\",{\"1\":{\"139\":1}}],[\"布尔类型\",{\"0\":{\"139\":1,\"1289\":1},\"1\":{\"136\":1}}],[\"窗口\",{\"1\":{\"2022\":1}}],[\"顶层容器\",{\"1\":{\"2021\":1}}],[\"顶点的数量多\",{\"1\":{\"963\":1}}],[\"顶点1到顶点4的最短路径长度\",{\"1\":{\"955\":1}}],[\"顶点和边表示\",{\"1\":{\"673\":1}}],[\"顶点和边的序列\",{\"1\":{\"389\":1,\"953\":1}}],[\"顶点集\",{\"1\":{\"391\":1}}],[\"顶点\",{\"1\":{\"389\":2,\"392\":1,\"953\":1}}],[\"独立于操作系统\",{\"1\":{\"2019\":1}}],[\"独立成分分析\",{\"1\":{\"541\":1,\"594\":1}}],[\"各有优缺点\",{\"1\":{\"2017\":1}}],[\"各指标的最优值\",{\"1\":{\"773\":1}}],[\"才会加载和创建实例\",{\"1\":{\"2013\":1}}],[\"节省内存\",{\"1\":{\"2015\":1}}],[\"节约资源\",{\"1\":{\"2010\":2}}],[\"节点流\",{\"1\":{\"1868\":1}}],[\"节点\",{\"1\":{\"388\":1,\"438\":1,\"653\":1,\"952\":1}}],[\"懒汉式单例在第一次调用getinstance\",{\"1\":{\"2010\":1}}],[\"懒汉式\",{\"0\":{\"2010\":1}}],[\"饿汉式单例在类加载时就创建了实例\",{\"1\":{\"2009\":1}}],[\"饿汉式\",{\"0\":{\"2009\":1}}],[\"唯一实例\",{\"1\":{\"2007\":1}}],[\"唯一的区别是stringbuilder的操作没有同步\",{\"1\":{\"1376\":1}}],[\"改进了代码的可读性和安全性\",{\"1\":{\"1998\":1}}],[\"改善用户体验\",{\"1\":{\"1958\":1}}],[\"灵活和高效\",{\"1\":{\"1988\":1}}],[\"灵活性较差\",{\"1\":{\"2014\":1}}],[\"灵活性\",{\"1\":{\"1531\":1}}],[\"纯\",{\"1\":{\"1986\":1}}],[\"纯整数规划模型\",{\"0\":{\"724\":1}}],[\"桥驱动\",{\"1\":{\"1986\":1}}],[\"驱动连接中间件\",{\"1\":{\"1986\":1}}],[\"驱动\",{\"1\":{\"1986\":2}}],[\"驱动与数据库进行通信\",{\"1\":{\"1986\":1}}],[\"驱动分为四种类型\",{\"1\":{\"1986\":1}}],[\"驱动类型\",{\"0\":{\"1986\":1}}],[\"驱动程序\",{\"1\":{\"1978\":1,\"1986\":1}}],[\"驱动程序通常由数据库供应商提供\",{\"1\":{\"1978\":1}}],[\"驱动程序可以是原生的\",{\"1\":{\"1975\":1}}],[\"影响的行数\",{\"1\":{\"1981\":1}}],[\"影响目标函数的值\",{\"1\":{\"840\":1}}],[\"层\",{\"1\":{\"1975\":2}}],[\"层次分析法\",{\"1\":{\"754\":1,\"758\":1,\"763\":1}}],[\"层次聚类可以使用linkage和cluster函数实现\",{\"1\":{\"556\":1}}],[\"层次聚类可以生成一个聚类树\",{\"1\":{\"550\":1}}],[\"层次聚类和dbscan\",{\"1\":{\"554\":1}}],[\"层次聚类\",{\"0\":{\"512\":1,\"550\":1,\"556\":1},\"1\":{\"540\":1,\"548\":1,\"550\":1,\"553\":1,\"559\":1,\"586\":1,\"594\":1}}],[\"架构\",{\"0\":{\"1975\":1}}],[\"唤醒等待的读取线程\",{\"1\":{\"1970\":1}}],[\"唤醒等待的所有线程\",{\"1\":{\"1970\":1}}],[\"唤醒等待的单个线程\",{\"1\":{\"1970\":1}}],[\"唤醒等待该对象监视器的所有线程\",{\"1\":{\"1673\":1}}],[\"唤醒等待该对象监视器的单个线程\",{\"1\":{\"1673\":1}}],[\"毫秒\",{\"1\":{\"1965\":1}}],[\"姓氏\",{\"1\":{\"1956\":1}}],[\"忽略正则表达式中的空白和注释\",{\"1\":{\"1953\":1}}],[\"忽略大小写匹配\",{\"0\":{\"1954\":1},\"1\":{\"1953\":1}}],[\"次\",{\"1\":{\"1947\":5}}],[\"次或\",{\"1\":{\"1947\":1}}],[\"次或多次\",{\"1\":{\"1947\":2}}],[\"响应内容\",{\"1\":{\"1942\":1}}],[\"响应客户端\",{\"1\":{\"1936\":1,\"1939\":1}}],[\"片段\",{\"1\":{\"1941\":1}}],[\"套接字\",{\"1\":{\"1938\":1,\"1939\":1}}],[\"套索回归\",{\"1\":{\"531\":1}}],[\"端口号\",{\"1\":{\"1941\":1}}],[\"端口\",{\"1\":{\"1930\":1}}],[\"互联网上每台计算机都有一个唯一的\",{\"1\":{\"1930\":1}}],[\"互信息\",{\"1\":{\"515\":1}}],[\"远程服务器等\",{\"1\":{\"1927\":1}}],[\"远程方法激活\",{\"1\":{\"1259\":1}}],[\"级别的日志消息\",{\"1\":{\"1918\":7}}],[\"详细信息\",{\"1\":{\"1917\":1}}],[\"详细解释\",{\"0\":{\"728\":1,\"734\":1,\"740\":1}}],[\"警告信息\",{\"1\":{\"1917\":1}}],[\"稳定且易于调试的代码\",{\"1\":{\"1911\":1}}],[\"稳定性因子\",{\"1\":{\"903\":1,\"904\":1,\"911\":1,\"912\":1}}],[\"十六进制的转换\",{\"1\":{\"2207\":1}}],[\"十进制\",{\"1\":{\"2207\":1}}],[\"十一\",{\"0\":{\"1911\":1}}],[\"十\",{\"0\":{\"1910\":1}}],[\"十年后\",{\"0\":{\"992\":1},\"1\":{\"992\":1}}],[\"九\",{\"0\":{\"1909\":1}}],[\"断开数据库连接等\",{\"1\":{\"1903\":1}}],[\"断言是单元测试中用于验证测试结果是否符合预期的语句\",{\"1\":{\"1856\":1}}],[\"断言\",{\"0\":{\"1856\":1}}],[\"断言expected值和actual值是否相等\",{\"1\":{\"1853\":1}}],[\"释放资源\",{\"1\":{\"1903\":1}}],[\"块中执行这些操作\",{\"1\":{\"1983\":1}}],[\"块中执行时\",{\"1\":{\"1900\":1}}],[\"块进行资源清理\",{\"1\":{\"1910\":1}}],[\"块始终会执行\",{\"1\":{\"1903\":1,\"1904\":1}}],[\"块总是会执行\",{\"1\":{\"1903\":1}}],[\"块用于在代码执行后进行清理操作\",{\"1\":{\"1903\":1}}],[\"块将被忽略\",{\"1\":{\"1901\":1}}],[\"块匹配了异常类型\",{\"1\":{\"1901\":1}}],[\"块处理不同类型的异常\",{\"1\":{\"1901\":1}}],[\"块可以跟多个\",{\"1\":{\"1901\":1}}],[\"块都会执行\",{\"1\":{\"1900\":1}}],[\"块\",{\"0\":{\"1901\":1,\"1903\":1},\"1\":{\"1900\":3,\"1901\":1}}],[\"遇到异常情况\",{\"1\":{\"1900\":1}}],[\"遇刺\",{\"0\":{\"63\":1}}],[\"├──\",{\"1\":{\"1896\":2}}],[\"受检异常\",{\"1\":{\"1895\":1}}],[\"受线性约束条件的限制\",{\"1\":{\"415\":2}}],[\"服务器启动\",{\"1\":{\"1936\":1}}],[\"服务器通过\",{\"1\":{\"1936\":1}}],[\"服务器通信\",{\"1\":{\"1931\":1}}],[\"服务器端\",{\"0\":{\"1936\":1,\"1939\":1},\"1\":{\"1934\":1}}],[\"服务器已启动\",{\"1\":{\"1890\":1,\"1939\":1}}],[\"服务器\",{\"0\":{\"1890\":1},\"2\":{\"2098\":1,\"2104\":1}}],[\"服务器关系\",{\"1\":{\"1122\":1}}],[\"阻塞\",{\"1\":{\"1887\":1,\"1892\":1,\"1964\":1}}],[\"阻尼振动等\",{\"1\":{\"850\":1}}],[\"看是否有事件发生\",{\"1\":{\"1886\":1}}],[\"速度较慢\",{\"1\":{\"1877\":1}}],[\"版本兼容性\",{\"1\":{\"1866\":1}}],[\"缓存\",{\"1\":{\"1861\":1}}],[\"缓冲区的常用方法有\",{\"1\":{\"1885\":1}}],[\"缓冲区的容量\",{\"1\":{\"1885\":1}}],[\"缓冲区能够容纳的最大数据量\",{\"1\":{\"1885\":1}}],[\"缓冲区本质上是一个数组\",{\"1\":{\"1884\":1}}],[\"缓冲区\",{\"0\":{\"1884\":1},\"1\":{\"1881\":1,\"1884\":1}}],[\"缓冲区等场景\",{\"1\":{\"1727\":1}}],[\"缓冲流\",{\"1\":{\"1441\":1,\"1877\":1}}],[\"暂时不运行\",{\"1\":{\"1855\":1}}],[\"暂时上升\",{\"1\":{\"421\":1}}],[\"什么是文档注释\",{\"0\":{\"2000\":1}}],[\"什么是线程\",{\"0\":{\"1959\":1}}],[\"什么是线性规划模型\",{\"0\":{\"714\":1}}],[\"什么是异常\",{\"0\":{\"1895\":1}}],[\"什么是单元测试\",{\"0\":{\"1849\":1}}],[\"事件处理\",{\"0\":{\"2029\":1}}],[\"事务管理\",{\"0\":{\"1985\":1}}],[\"事务等\",{\"1\":{\"1847\":1}}],[\"事实上\",{\"1\":{\"1259\":1}}],[\"限制\",{\"1\":{\"1838\":1}}],[\"限定泛型\",{\"0\":{\"1838\":1}}],[\"那样的原生生成器\",{\"1\":{\"1816\":1}}],[\"那么它会自动继承自\",{\"1\":{\"1665\":1}}],[\"那么应该放在\",{\"1\":{\"1477\":1}}],[\"那么\",{\"1\":{\"1477\":2}}],[\"那么源文件应该命名为employee\",{\"1\":{\"1477\":1}}],[\"那么每个单词的首字母应该大写\",{\"1\":{\"1275\":1}}],[\"那么通常会在花括号前用方括号标出\",{\"1\":{\"1106\":1}}],[\"那么这个数据集可以被认为是处于\",{\"1\":{\"614\":1}}],[\"采用分段锁机制来提高性能\",{\"1\":{\"1808\":1}}],[\"采用有限差分法\",{\"1\":{\"893\":1}}],[\"视频等\",{\"1\":{\"1868\":1}}],[\"视图\",{\"1\":{\"1798\":3}}],[\"视为\",{\"1\":{\"139\":2}}],[\"映射\",{\"1\":{\"1992\":1}}],[\"映射和操作文件的通道\",{\"1\":{\"1882\":1}}],[\"映射的集合\",{\"1\":{\"1796\":1}}],[\"映射等\",{\"1\":{\"1720\":1,\"1734\":1}}],[\"括号匹配\",{\"1\":{\"1775\":1}}],[\"频繁插入和删除操作\",{\"1\":{\"1752\":1}}],[\"频繁读取操作\",{\"1\":{\"1752\":1}}],[\"额外内存仅用于存储元素\",{\"1\":{\"1752\":1}}],[\"低级语言\",{\"2\":{\"2225\":1}}],[\"低\",{\"1\":{\"1752\":1}}],[\"低位补0\",{\"1\":{\"1315\":1}}],[\"否\",{\"1\":{\"1752\":1,\"1778\":1}}],[\"否则会抛出异常\",{\"1\":{\"1866\":1}}],[\"否则返回\",{\"1\":{\"1759\":1,\"1773\":1}}],[\"否则返回表达式2的值\",{\"1\":{\"1316\":1}}],[\"否则抛出\",{\"1\":{\"1671\":1}}],[\"否则\",{\"1\":{\"433\":1,\"737\":1,\"858\":1}}],[\"否则进入下一步\",{\"1\":{\"409\":1}}],[\"底层使用动态数组来存储元素\",{\"1\":{\"1772\":1}}],[\"底层实现\",{\"1\":{\"1752\":1,\"1778\":1}}],[\"底层是一个双向链表结构\",{\"1\":{\"1750\":1}}],[\"移除已处理的键\",{\"1\":{\"1887\":1}}],[\"移除键值对\",{\"1\":{\"1801\":1}}],[\"移除指定键对应的键值对\",{\"1\":{\"1798\":1}}],[\"移除指定索引位置的元素\",{\"1\":{\"1745\":1}}],[\"移除元素\",{\"1\":{\"1786\":1,\"1790\":1,\"1792\":1,\"1814\":1}}],[\"移除并返回栈顶元素\",{\"1\":{\"1773\":1}}],[\"移除并返回队列的头元素\",{\"1\":{\"1759\":2}}],[\"移除列表中第一次出现的指定元素\",{\"1\":{\"1745\":1}}],[\"既快又省\",{\"1\":{\"2157\":1}}],[\"既可以用于读操作\",{\"1\":{\"1882\":1}}],[\"既可以作为\",{\"1\":{\"1739\":1}}],[\"既要考虑成本\",{\"1\":{\"711\":1}}],[\"跳表\",{\"1\":{\"1733\":1}}],[\"跳过当i等于j时的循环\",{\"1\":{\"1331\":1}}],[\"跳过剩余循环体\",{\"1\":{\"1330\":1}}],[\"跳过\",{\"1\":{\"1168\":2}}],[\"链式结构\",{\"1\":{\"2153\":1}}],[\"链表\",{\"0\":{\"2168\":1},\"1\":{\"2153\":1,\"2208\":1}}],[\"链表相较于数组\",{\"1\":{\"2152\":1}}],[\"链表是一种线性数据结构\",{\"1\":{\"1723\":1}}],[\"链接地址\",{\"1\":{\"23\":1}}],[\"链接\",{\"0\":{\"23\":1},\"1\":{\"388\":1,\"952\":1}}],[\"队列操作和双端队列操作\",{\"1\":{\"1750\":1}}],[\"队列\",{\"0\":{\"2068\":1},\"1\":{\"1720\":1,\"1734\":1,\"2153\":1,\"2208\":1}}],[\"八\",{\"0\":{\"1716\":1,\"1794\":1,\"1810\":1,\"1879\":1,\"1893\":1,\"1905\":1,\"1944\":1,\"1972\":1,\"1987\":1}}],[\"带来了许多新的特性和改进\",{\"1\":{\"1988\":1,\"1998\":1}}],[\"带有参数\",{\"1\":{\"1711\":1}}],[\"带标题的散点图\",{\"1\":{\"459\":1}}],[\"状态\",{\"1\":{\"1886\":1}}],[\"状态由成员变量的值决定\",{\"1\":{\"1710\":1}}],[\"状态空间\",{\"1\":{\"646\":1}}],[\"绑定在一起\",{\"1\":{\"1709\":1}}],[\"拆箱\",{\"1\":{\"1698\":1}}],[\"箭头符号\",{\"1\":{\"1685\":1}}],[\"框架将显示绿色的进度条\",{\"1\":{\"1854\":1}}],[\"框架或运行时环境提供指示\",{\"1\":{\"1841\":1}}],[\"框架的子接口\",{\"1\":{\"1795\":1}}],[\"框架中\",{\"1\":{\"1681\":1}}],[\"框架\",{\"0\":{\"2032\":1},\"1\":{\"1679\":1,\"1681\":1,\"1847\":1,\"1914\":1,\"2019\":1,\"2032\":1,\"2034\":1}}],[\"框架和库\",{\"1\":{\"1649\":1,\"1832\":2}}],[\"已过时\",{\"1\":{\"2038\":2}}],[\"已成为构建现代\",{\"1\":{\"2032\":1}}],[\"已发送响应到客户端\",{\"1\":{\"1939\":1}}],[\"已发送消息到服务器\",{\"1\":{\"1938\":1}}],[\"已被弃用\",{\"1\":{\"1678\":1}}],[\"已知数据点\",{\"1\":{\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1}}],[\"已知如下数据\",{\"1\":{\"720\":1}}],[\"健壮的代码至关重要\",{\"1\":{\"1678\":1}}],[\"深入理解其工作原理和最佳实践\",{\"1\":{\"2049\":1}}],[\"深拷贝需要手动实现\",{\"1\":{\"1671\":1}}],[\"深度思想\",{\"2\":{\"1005\":1,\"1008\":1}}],[\"深度信念网络\",{\"1\":{\"598\":1}}],[\"深度学习\",{\"0\":{\"973\":1}}],[\"深度学习模型的集成等高级功能\",{\"1\":{\"800\":1}}],[\"深度学习在图像处理\",{\"1\":{\"598\":1}}],[\"深度学习是神经网络的一种形式\",{\"1\":{\"598\":1}}],[\"深度q网络\",{\"1\":{\"596\":1}}],[\"深度优先搜索\",{\"1\":{\"392\":1}}],[\"浅拷贝\",{\"1\":{\"1671\":1}}],[\"书籍的属性\",{\"1\":{\"1662\":1}}],[\"书签记录\",{\"1\":{\"1110\":1}}],[\"归\",{\"1\":{\"2160\":3}}],[\"归还指定书籍\",{\"1\":{\"1661\":1}}],[\"归一化数据\",{\"1\":{\"659\":1}}],[\"归一化或标准化数据\",{\"1\":{\"532\":1}}],[\"借阅和归还书籍\",{\"1\":{\"1661\":1}}],[\"借阅指定书籍\",{\"1\":{\"1661\":1}}],[\"借阅图书和查看库存中的图书\",{\"1\":{\"1660\":1}}],[\"借鉴已有研究中使用的指标体系\",{\"1\":{\"758\":1}}],[\"安全\",{\"0\":{\"2203\":1}}],[\"安全管理\",{\"1\":{\"2192\":1}}],[\"安全和保护\",{\"1\":{\"2189\":1}}],[\"安全地共享这些资源\",{\"1\":{\"2188\":1}}],[\"安全性\",{\"1\":{\"1650\":1,\"1833\":1,\"1866\":1}}],[\"安装latex编辑器\",{\"1\":{\"1103\":1}}],[\"安装编辑器\",{\"1\":{\"1100\":1,\"1101\":1,\"1102\":1}}],[\"安装tex发行版\",{\"1\":{\"1100\":1,\"1101\":1,\"1102\":1,\"1103\":1}}],[\"安装\",{\"0\":{\"914\":1},\"1\":{\"800\":1,\"801\":1,\"802\":1,\"803\":1,\"804\":1,\"805\":1,\"914\":1}}],[\"安装一个模块\",{\"1\":{\"230\":1}}],[\"安装第三方模块\",{\"1\":{\"230\":1}}],[\"安装模块\",{\"0\":{\"230\":1}}],[\"面向切面编程\",{\"1\":{\"1649\":1,\"1832\":1}}],[\"面向对象的总结文档\",{\"1\":{\"1707\":1}}],[\"面向对象的编程思想主要体现在以下几个核心概念上\",{\"1\":{\"1707\":1}}],[\"面向对象的实践示例\",{\"1\":{\"1653\":1}}],[\"面向对象的关键字\",{\"0\":{\"1496\":1}}],[\"面向对象\",{\"1\":{\"1457\":1}}],[\"面向对象程序设计语言和\",{\"1\":{\"1258\":1}}],[\"面向对象编程的四大基本特性\",{\"0\":{\"1709\":1},\"1\":{\"1716\":1}}],[\"面向对象编程的核心特性之一\",{\"1\":{\"1516\":1}}],[\"面向对象编程的核心概念包括类\",{\"1\":{\"241\":1}}],[\"面向对象编程总结\",{\"0\":{\"1708\":1}}],[\"面向对象编程是一种通过\",{\"1\":{\"1707\":1}}],[\"面向对象编程中使用的关键字及其作用\",{\"1\":{\"1496\":1}}],[\"面向对象编程\",{\"1\":{\"241\":1,\"1716\":1,\"2209\":1}}],[\"└──\",{\"1\":{\"1626\":8,\"1896\":3}}],[\"固定的集合值\",{\"1\":{\"1602\":1}}],[\"外部类可以控制内部类的可见性\",{\"1\":{\"1599\":1}}],[\"匿名内部类使得创建简单类的实例变得方便\",{\"1\":{\"1599\":1}}],[\"匿名内部类的特性\",{\"0\":{\"1598\":1}}],[\"匿名内部类在new关键字后立即定义并实例化\",{\"1\":{\"1597\":1}}],[\"匿名内部类在创建时即定义并实例化\",{\"1\":{\"1596\":1}}],[\"匿名内部类是没有名字的局部内部类\",{\"1\":{\"1596\":1}}],[\"匿名内部类\",{\"0\":{\"1596\":1},\"1\":{\"1586\":1}}],[\"匿名函数是一个简单的\",{\"1\":{\"1176\":1}}],[\"匿名函数\",{\"0\":{\"212\":1},\"1\":{\"212\":1}}],[\"私有构造函数\",{\"1\":{\"2009\":1,\"2010\":1}}],[\"私有变量\",{\"1\":{\"1709\":1}}],[\"私有的属性\",{\"1\":{\"1680\":1}}],[\"私有属性\",{\"1\":{\"1568\":1}}],[\"私有成员\",{\"1\":{\"1564\":1}}],[\"普通图书类\",{\"1\":{\"1661\":1}}],[\"普通图书和参考书\",{\"1\":{\"1660\":1}}],[\"普通方法\",{\"1\":{\"1554\":1}}],[\"普通代码块是最常见的代码块\",{\"1\":{\"1545\":1}}],[\"普通代码块\",{\"0\":{\"1545\":1},\"1\":{\"1544\":1,\"1545\":1,\"1550\":1}}],[\"供子类继承和实现\",{\"1\":{\"1552\":1}}],[\"供应链设计\",{\"1\":{\"716\":1}}],[\"供应链管理等\",{\"1\":{\"768\":1}}],[\"供应链管理\",{\"1\":{\"711\":1,\"712\":1,\"716\":1}}],[\"供应链等领域有广泛应用\",{\"1\":{\"395\":1}}],[\"向服务器发送请求\",{\"1\":{\"1935\":1}}],[\"向服务器发送数据\",{\"1\":{\"1935\":1}}],[\"向队列中添加元素\",{\"1\":{\"1768\":1}}],[\"向下转型虽然强大\",{\"1\":{\"1543\":1}}],[\"向下转型在实现多态和处理多态对象集合时非常有用\",{\"1\":{\"1543\":1}}],[\"向下转型前应使用instanceof检查对象的类型\",{\"1\":{\"1543\":1}}],[\"向下转型前的类型检查\",{\"0\":{\"1538\":1}}],[\"向下转型允许将父类类型的引用转换为子类类型的引用\",{\"1\":{\"1543\":1}}],[\"向下转型也非常常见\",{\"1\":{\"1542\":1}}],[\"向下转型通常用于实现多态\",{\"1\":{\"1541\":1}}],[\"向下转型通常是在父类引用实际指向的是子类对象的情况下进行的\",{\"1\":{\"1535\":1}}],[\"向下转型的应用场景\",{\"0\":{\"1540\":1}}],[\"向下转型的注意事项\",{\"0\":{\"1537\":1}}],[\"向下转型的基本概念\",{\"0\":{\"1536\":1}}],[\"向下转型必须手动进行\",{\"1\":{\"1536\":1}}],[\"向下转型\",{\"0\":{\"1535\":1},\"1\":{\"1535\":1,\"1536\":2}}],[\"向上转型是自动进行的\",{\"1\":{\"1536\":1}}],[\"向上转型\",{\"1\":{\"1516\":1,\"1536\":2}}],[\"向量叉乘\",{\"1\":{\"1221\":1}}],[\"向量点乘\",{\"1\":{\"1221\":1}}],[\"向量点积\",{\"1\":{\"1155\":1}}],[\"向量减法\",{\"1\":{\"1221\":1}}],[\"向量加减\",{\"1\":{\"1221\":1}}],[\"向量加法\",{\"1\":{\"1155\":1,\"1221\":1}}],[\"向量运算\",{\"0\":{\"1221\":1}}],[\"向量的范数\",{\"1\":{\"1155\":1}}],[\"向量长度\",{\"1\":{\"1155\":1}}],[\"向量操作\",{\"1\":{\"1155\":1}}],[\"向量是特殊的一维数组\",{\"1\":{\"1155\":1}}],[\"向量\",{\"0\":{\"1155\":1}}],[\"向量标准化\",{\"1\":{\"759\":1,\"763\":1}}],[\"派生类\",{\"1\":{\"1508\":1}}],[\"父类方法\",{\"1\":{\"1509\":1}}],[\"父类属性\",{\"1\":{\"1509\":1}}],[\"父类\",{\"1\":{\"1507\":1,\"1508\":1}}],[\"父代\",{\"1\":{\"432\":1}}],[\"几乎所有的\",{\"1\":{\"1812\":1}}],[\"几个关键字是至关重要的\",{\"1\":{\"1496\":1}}],[\"几何和物理\",{\"1\":{\"1397\":1}}],[\"几何变换\",{\"1\":{\"802\":1}}],[\"几何模型是基础工具\",{\"1\":{\"670\":1}}],[\"几何模型是指通过数学和计算技术来描述和表示几何对象或形状的数学模型\",{\"1\":{\"670\":1}}],[\"几何模型\",{\"0\":{\"669\":1,\"670\":1},\"1\":{\"378\":1}}],[\"里面只能包含抽象方法和常量\",{\"1\":{\"1474\":1}}],[\"抽象是指对现实世界的建模\",{\"1\":{\"1709\":1}}],[\"抽象是面向对象编程的一个重要概念\",{\"1\":{\"1551\":1}}],[\"抽象是将对象的复杂性隐藏\",{\"1\":{\"1473\":1}}],[\"抽象类示例\",{\"1\":{\"1709\":1}}],[\"抽象类提供了一种代码重用的方法\",{\"1\":{\"1562\":1}}],[\"抽象类\",{\"1\":{\"1558\":1,\"1559\":1,\"1584\":1,\"1709\":1,\"1715\":1}}],[\"抽象类可以包含抽象方法和普通方法\",{\"1\":{\"1553\":1}}],[\"抽象类可以包含抽象方法和非抽象方法\",{\"1\":{\"1552\":1}}],[\"抽象类是不能被实例化的类\",{\"1\":{\"1552\":1}}],[\"抽象类是不能实例化的类\",{\"1\":{\"1473\":1}}],[\"抽象类和接口是\",{\"1\":{\"1551\":1,\"1562\":1}}],[\"抽象类和接口可以被用来定义多态行为\",{\"1\":{\"1534\":1}}],[\"抽象类和接口\",{\"1\":{\"1534\":1,\"1709\":1}}],[\"抽象类不能被实例化\",{\"1\":{\"1501\":1,\"1709\":1}}],[\"抽象\",{\"0\":{\"1473\":1,\"1551\":1},\"1\":{\"1709\":1}}],[\"抽象方法在抽象类中没有实现\",{\"1\":{\"1553\":1}}],[\"抽象方法没有具体实现\",{\"1\":{\"1501\":1}}],[\"抽象方法\",{\"1\":{\"1308\":1,\"1347\":1,\"1554\":1,\"1575\":1,\"1579\":1,\"1581\":1,\"1709\":1}}],[\"停止\",{\"1\":{\"1468\":1}}],[\"停止matlab\",{\"1\":{\"1125\":1}}],[\"至多\",{\"1\":{\"1947\":1}}],[\"至关重要\",{\"1\":{\"1467\":1}}],[\"至少阅读60篇研究文献\",{\"1\":{\"1038\":1}}],[\"泛型在java中是非常重要的\",{\"1\":{\"1840\":1}}],[\"泛型确保在编译时检查类型\",{\"1\":{\"1837\":1}}],[\"泛型接口\",{\"1\":{\"1835\":1}}],[\"泛型方法\",{\"1\":{\"1835\":1,\"1836\":1}}],[\"泛型类的静态成员不能使用泛型参数\",{\"1\":{\"1840\":1}}],[\"泛型类型会被替换为其边界类型\",{\"1\":{\"1840\":1}}],[\"泛型类\",{\"1\":{\"1835\":1,\"1836\":1}}],[\"泛型以及多线程等众多场景中\",{\"1\":{\"1695\":1}}],[\"泛型\",{\"0\":{\"1834\":1},\"1\":{\"1457\":1,\"1834\":1}}],[\"枚举的写法不适合懒加载\",{\"1\":{\"2014\":1}}],[\"枚举的每个实例都是该枚举类型的唯一实例\",{\"1\":{\"1605\":1}}],[\"枚举单例被认为是最简洁和推荐的方式\",{\"1\":{\"2017\":1}}],[\"枚举单例\",{\"0\":{\"2014\":1}}],[\"枚举来表示图书类型\",{\"1\":{\"1659\":1}}],[\"枚举等组织在一起\",{\"1\":{\"1617\":1}}],[\"枚举在\",{\"1\":{\"1615\":1}}],[\"枚举比传统的\",{\"1\":{\"1613\":1}}],[\"枚举可以用来表示固定的\",{\"1\":{\"1614\":1}}],[\"枚举可以用于控制流语句\",{\"1\":{\"1605\":1}}],[\"枚举可以实现接口\",{\"1\":{\"1611\":1}}],[\"枚举可以包含字段\",{\"1\":{\"1607\":1}}],[\"枚举类可以包含字段\",{\"1\":{\"1603\":1}}],[\"枚举类使用\",{\"1\":{\"1603\":1}}],[\"枚举提供了一种类型安全的方式来表示有限的\",{\"1\":{\"1602\":1}}],[\"枚举\",{\"0\":{\"1602\":1},\"1\":{\"1457\":1,\"1602\":1,\"1653\":1,\"1659\":1,\"1845\":1}}],[\"枚举所有可能的路径\",{\"1\":{\"410\":1}}],[\"顺序结构\",{\"1\":{\"2153\":1}}],[\"顺序\",{\"1\":{\"1457\":1,\"1527\":1}}],[\"抛出异常\",{\"0\":{\"1906\":1}}],[\"抛出\",{\"1\":{\"1443\":1,\"1900\":1}}],[\"抛物型偏微分方程\",{\"1\":{\"897\":1}}],[\"抛物型偏微分\",{\"0\":{\"897\":1}}],[\"抛物型\",{\"1\":{\"880\":1}}],[\"验证字符串格式\",{\"0\":{\"1950\":1}}],[\"验证执行代码是否抛出指定的异常类型\",{\"1\":{\"1856\":1}}],[\"验证对象是否不为null\",{\"1\":{\"1856\":1}}],[\"验证对象是否为null\",{\"1\":{\"1856\":1}}],[\"验证条件是否为假\",{\"1\":{\"1856\":1}}],[\"验证条件是否为真\",{\"1\":{\"1856\":1}}],[\"验证两个值是否不相等\",{\"1\":{\"1856\":1}}],[\"验证两个值是否相等\",{\"1\":{\"1856\":1}}],[\"验证电子邮件地址\",{\"0\":{\"1418\":1}}],[\"验证输入\",{\"1\":{\"1417\":1}}],[\"验证模型的合理性\",{\"1\":{\"381\":1}}],[\"量词等定义匹配模式\",{\"1\":{\"1419\":1}}],[\"量词\",{\"0\":{\"1413\":1}}],[\"量表等测量工具质量的重要手段\",{\"1\":{\"467\":1}}],[\"匹配长度为4的单词\",{\"1\":{\"2048\":1}}],[\"匹配到\",{\"1\":{\"1954\":3}}],[\"匹配包括换行符在内的所有字符\",{\"1\":{\"1953\":1}}],[\"匹配非数字字符\",{\"1\":{\"1952\":1}}],[\"匹配和操作\",{\"1\":{\"1957\":1}}],[\"匹配和操作字符串\",{\"1\":{\"1945\":1}}],[\"匹配和查找\",{\"0\":{\"1949\":1}}],[\"匹配点\",{\"1\":{\"1947\":1}}],[\"匹配特殊字符本身\",{\"1\":{\"1947\":1}}],[\"匹配不在括号内的任意字符\",{\"1\":{\"1947\":1}}],[\"匹配括号内的任意一个字符\",{\"1\":{\"1947\":1}}],[\"匹配前面的字符至少\",{\"1\":{\"1947\":2}}],[\"匹配前面的字符恰好\",{\"1\":{\"1947\":1}}],[\"匹配前面的字符\",{\"1\":{\"1947\":3}}],[\"匹配前面的子表达式至少n次\",{\"1\":{\"1413\":2}}],[\"匹配前面的子表达式恰好n次\",{\"1\":{\"1413\":1}}],[\"匹配前面的子表达式零次或一次\",{\"1\":{\"1413\":1}}],[\"匹配前面的子表达式零次或多次\",{\"1\":{\"1413\":1}}],[\"匹配前面的子表达式一次或多次\",{\"1\":{\"1413\":1}}],[\"匹配一个非字母\",{\"1\":{\"1947\":1}}],[\"匹配一个非数字字符\",{\"1\":{\"1947\":1}}],[\"匹配一个字母\",{\"1\":{\"1947\":1}}],[\"匹配一个数字字符\",{\"1\":{\"1947\":1}}],[\"匹配字符串的结束\",{\"1\":{\"1947\":1}}],[\"匹配字符串的开始\",{\"1\":{\"1947\":1}}],[\"匹配字符a\",{\"1\":{\"1412\":1}}],[\"匹配除换行符外的任何字符\",{\"1\":{\"1947\":1}}],[\"匹配货币格式\",{\"1\":{\"1416\":1}}],[\"匹配其中的任何一个字符\",{\"1\":{\"1412\":1}}],[\"匹配输入的结束位置\",{\"1\":{\"1412\":1}}],[\"匹配输入的开始位置\",{\"1\":{\"1412\":1}}],[\"匹配任何空白字符\",{\"1\":{\"1412\":1,\"1947\":1}}],[\"匹配任何非空白字符\",{\"1\":{\"1412\":1,\"1947\":1}}],[\"匹配任何非字母数字字符\",{\"1\":{\"1412\":1}}],[\"匹配任何非数字字符\",{\"1\":{\"1412\":1}}],[\"匹配任何字母数字字符\",{\"1\":{\"1412\":1}}],[\"匹配任何数字\",{\"1\":{\"1412\":1}}],[\"匹配任何单个字符\",{\"1\":{\"1412\":1}}],[\"匹配器\",{\"1\":{\"1410\":1}}],[\"易读\",{\"1\":{\"2003\":1}}],[\"易于管理的组件\",{\"1\":{\"1683\":1}}],[\"易于实现\",{\"1\":{\"425\":1}}],[\"易用的日期时间操作功能\",{\"1\":{\"1408\":1}}],[\"旧的日期时间类\",{\"1\":{\"1408\":1}}],[\"秒\",{\"1\":{\"1404\":2,\"1966\":1}}],[\"然而\",{\"1\":{\"1401\":1}}],[\"然后继续处理其他事情\",{\"1\":{\"1888\":1}}],[\"然后使用\",{\"1\":{\"1820\":1}}],[\"然后打印出来\",{\"1\":{\"1692\":1}}],[\"然后才能创建内部类的实例\",{\"1\":{\"1589\":1}}],[\"然后再进行安全的向下转型\",{\"1\":{\"1538\":1}}],[\"然后再检查条件\",{\"1\":{\"1327\":1}}],[\"然后在\",{\"1\":{\"1179\":1}}],[\"然后可以在实现这个\",{\"1\":{\"1259\":2}}],[\"然后可以在\",{\"1\":{\"1172\":1}}],[\"然后终止\",{\"1\":{\"1167\":1}}],[\"然后从这些最基础的概念出发\",{\"1\":{\"998\":1}}],[\"然后根据具体需求和偏好进行分析和选择\",{\"1\":{\"841\":1}}],[\"然后计算每个方案的综合得分\",{\"1\":{\"766\":1}}],[\"然后逐对比较各个指标\",{\"1\":{\"754\":1}}],[\"然后回到城市1\",{\"1\":{\"739\":1}}],[\"然后通过instanceof检查并向下转型\",{\"1\":{\"1541\":1}}],[\"然后通过最小化目标偏差的方式来进行优化\",{\"1\":{\"841\":1}}],[\"然后通过逆累加生成\",{\"1\":{\"634\":1}}],[\"然后通过反向传播更新权重\",{\"1\":{\"447\":1}}],[\"然后\",{\"1\":{\"409\":1}}],[\"然后输出\",{\"1\":{\"208\":1}}],[\"日为单位\",{\"1\":{\"1406\":1}}],[\"日\",{\"1\":{\"1404\":2}}],[\"日期和时间的处理是一个重要的主题\",{\"1\":{\"1399\":1}}],[\"日期时间类\",{\"1\":{\"2038\":1}}],[\"日期时间处理\",{\"1\":{\"2035\":1}}],[\"日期时间格式化\",{\"0\":{\"1407\":1}}],[\"日期时间\",{\"0\":{\"1399\":1},\"1\":{\"1630\":1,\"2038\":1}}],[\"日志记录器\",{\"1\":{\"2016\":1}}],[\"日志分析\",{\"1\":{\"1957\":1}}],[\"日志最佳实践\",{\"0\":{\"1927\":1}}],[\"日志框架\",{\"1\":{\"1919\":1}}],[\"日志级别定义了日志的严重性\",{\"1\":{\"1917\":1}}],[\"日志级别\",{\"0\":{\"1917\":1}}],[\"日志数据可以用于分析系统性能和用户行为\",{\"1\":{\"1913\":1}}],[\"日志在应用程序开发和维护中有以下几个重要作用\",{\"1\":{\"1913\":1}}],[\"日志的重要性\",{\"0\":{\"1913\":1}}],[\"日志是调试和监控应用程序的重要工具\",{\"1\":{\"1912\":1}}],[\"日志\",{\"0\":{\"1912\":1},\"1\":{\"1110\":2,\"1912\":1}}],[\"距离\",{\"1\":{\"1397\":1}}],[\"距离最小的方案为最优方案\",{\"1\":{\"773\":1}}],[\"幂等\",{\"1\":{\"1397\":1}}],[\"幂运算和随机数生成等\",{\"1\":{\"1398\":1}}],[\"幂运算\",{\"1\":{\"1146\":1,\"1216\":1}}],[\"角度转换为弧度\",{\"1\":{\"1393\":1}}],[\"角点检测\",{\"1\":{\"790\":1,\"813\":1}}],[\"若超出范围则抛出异常\",{\"1\":{\"1392\":1}}],[\"若溢出则抛出异常\",{\"1\":{\"1392\":3}}],[\"意味着可以通过math类直接调用\",{\"1\":{\"1390\":1}}],[\"拼接字符串\",{\"1\":{\"1370\":1}}],[\"替代了过时的\",{\"1\":{\"2041\":1}}],[\"替代文本\",{\"1\":{\"24\":1}}],[\"替换示例\",{\"0\":{\"1952\":1}}],[\"替换和格式化等方面非常有用\",{\"1\":{\"1945\":1}}],[\"替换元素\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"替换操作\",{\"1\":{\"1416\":1}}],[\"替换部分字符串\",{\"1\":{\"1373\":1,\"1376\":1}}],[\"替换\",{\"1\":{\"1369\":1}}],[\"属于类本身\",{\"1\":{\"1347\":1}}],[\"属性\",{\"1\":{\"1497\":1,\"1563\":1,\"1710\":1,\"1711\":1}}],[\"属性和方法\",{\"1\":{\"1183\":1,\"1714\":1}}],[\"属性或变量\",{\"1\":{\"575\":1}}],[\"斐波那契数列\",{\"1\":{\"1345\":1}}],[\"乘后赋值\",{\"1\":{\"1312\":1}}],[\"乘法赋值\",{\"1\":{\"197\":1}}],[\"乘法\",{\"1\":{\"193\":1,\"1146\":1,\"1216\":2,\"1311\":1}}],[\"规约等\",{\"1\":{\"1992\":1}}],[\"规范命名\",{\"1\":{\"1631\":1}}],[\"规则\",{\"1\":{\"1294\":1,\"1295\":1}}],[\"规划问题\",{\"0\":{\"705\":1},\"1\":{\"705\":1}}],[\"换页符\",{\"1\":{\"1292\":1}}],[\"换行符等\",{\"1\":{\"1412\":1}}],[\"换行符\",{\"1\":{\"1292\":1}}],[\"换行\",{\"1\":{\"1108\":1}}],[\"制表符等\",{\"1\":{\"1947\":1}}],[\"制表符\",{\"1\":{\"1292\":1,\"1412\":1}}],[\"制定个人培养计划\",{\"0\":{\"1034\":1}}],[\"制定库存策略\",{\"1\":{\"712\":1}}],[\"像传统的服务器套接字\",{\"1\":{\"1882\":1}}],[\"像\",{\"1\":{\"1832\":1}}],[\"像其他语言一样\",{\"1\":{\"1277\":1}}],[\"像素\",{\"1\":{\"785\":1}}],[\"首先需要加载数据库驱动程序\",{\"1\":{\"1978\":1}}],[\"首先需要获取一个\",{\"1\":{\"1827\":1}}],[\"首先\",{\"1\":{\"1654\":1}}],[\"首先通过层次分析法确定指标的主观权重\",{\"1\":{\"775\":1}}],[\"首字符之后可以是字母\",{\"1\":{\"1276\":1}}],[\"美元符号\",{\"1\":{\"1305\":1}}],[\"美元符\",{\"1\":{\"1276\":2}}],[\"吃等\",{\"1\":{\"1273\":1}}],[\"叫\",{\"1\":{\"1273\":1}}],[\"摇尾巴\",{\"1\":{\"1273\":1}}],[\"名字\",{\"1\":{\"1273\":1,\"1956\":1}}],[\"性能和功能更佳\",{\"1\":{\"1923\":1}}],[\"性能和可靠性\",{\"1\":{\"1678\":1}}],[\"性能优越\",{\"1\":{\"1914\":1}}],[\"性能敏感的单线程场景\",{\"1\":{\"1778\":1}}],[\"性能更高\",{\"1\":{\"1778\":1,\"2037\":1}}],[\"性能稍差\",{\"1\":{\"1778\":1}}],[\"性能较低\",{\"1\":{\"1737\":1}}],[\"性能开销\",{\"1\":{\"1650\":1,\"1833\":1}}],[\"性能\",{\"1\":{\"1377\":1,\"1778\":1}}],[\"性能调优通常涉及垃圾回收\",{\"1\":{\"1269\":1}}],[\"性能瓶颈\",{\"1\":{\"1269\":1}}],[\"监听来自客户端的连接请求\",{\"1\":{\"1936\":1}}],[\"监控和审计\",{\"1\":{\"1913\":1}}],[\"监控工具\",{\"1\":{\"1267\":1}}],[\"监督学习是指模型在训练时需要提供已标注的训练数据\",{\"1\":{\"593\":1}}],[\"监督学习是一种机器学习方法\",{\"1\":{\"527\":1}}],[\"监督学习在实际应用中非常广泛\",{\"1\":{\"536\":1}}],[\"监督学习依赖大量标注数据\",{\"1\":{\"536\":1}}],[\"监督学习中的关键概念\",{\"0\":{\"533\":1}}],[\"监督学习的挑战与发展\",{\"0\":{\"536\":1}}],[\"监督学习的python实现示例\",{\"0\":{\"535\":1}}],[\"监督学习的应用场景\",{\"0\":{\"534\":1}}],[\"监督学习的工作流程\",{\"0\":{\"532\":1}}],[\"监督学习的类型\",{\"0\":{\"529\":1}}],[\"监督学习的基本概念\",{\"0\":{\"528\":1}}],[\"监督学习广泛应用于分类和回归问题中\",{\"1\":{\"527\":1}}],[\"监督学习\",{\"0\":{\"368\":1,\"372\":1,\"527\":1}}],[\"栈和队列\",{\"0\":{\"2169\":1}}],[\"栈通常用于解决递归\",{\"1\":{\"1771\":1}}],[\"栈是后进先出\",{\"1\":{\"1730\":1}}],[\"栈中保存了局部变量\",{\"1\":{\"1265\":1}}],[\"栈\",{\"0\":{\"2069\":1},\"1\":{\"1265\":1,\"2153\":1,\"2208\":1}}],[\"堆栈\",{\"1\":{\"1737\":1}}],[\"堆是一种特殊的二叉树\",{\"1\":{\"1731\":1}}],[\"堆\",{\"0\":{\"2172\":1},\"1\":{\"1265\":1,\"2153\":1}}],[\"堆叠法\",{\"1\":{\"597\":1}}],[\"静态成员\",{\"1\":{\"1840\":1}}],[\"静态嵌套类\",{\"0\":{\"1590\":1},\"1\":{\"1586\":1}}],[\"静态内部类方式利用了类加载的特性\",{\"1\":{\"2013\":1}}],[\"静态内部类通常不会有这个问题\",{\"1\":{\"1600\":1}}],[\"静态内部类的实例使用语法\",{\"1\":{\"1592\":1}}],[\"静态内部类的特性\",{\"0\":{\"1592\":1}}],[\"静态内部类staticinnerclass可以访问外部类的静态字段outerstaticfield\",{\"1\":{\"1591\":1}}],[\"静态内部类是使用static关键字修饰的内部类\",{\"1\":{\"1590\":1}}],[\"静态内部类\",{\"0\":{\"1590\":1,\"2013\":1},\"1\":{\"1586\":1,\"1591\":1,\"2013\":1}}],[\"静态代码块与构造块的区别\",{\"0\":{\"1549\":1}}],[\"静态代码块可以有多个\",{\"1\":{\"1547\":1}}],[\"静态代码块在类加载时执行\",{\"1\":{\"1547\":1}}],[\"静态代码块在类第一次加载时执行\",{\"1\":{\"1547\":1}}],[\"静态代码块用于在类加载时初始化静态数据\",{\"1\":{\"1547\":1}}],[\"静态代码块\",{\"0\":{\"1547\":1},\"1\":{\"1547\":1,\"1549\":3,\"1550\":1}}],[\"静态代码块和同步代码块\",{\"1\":{\"1544\":1}}],[\"静态多态在编译时决定调用哪个方法\",{\"1\":{\"1526\":1}}],[\"静态多态\",{\"1\":{\"1526\":1}}],[\"静态方法引用\",{\"1\":{\"1991\":1}}],[\"静态方法等\",{\"1\":{\"1558\":1}}],[\"静态方法不能访问非静态成员变量或调用非静态方法\",{\"1\":{\"1344\":1}}],[\"静态方法属于类\",{\"1\":{\"1344\":1}}],[\"静态方法\",{\"0\":{\"1344\":1},\"1\":{\"1308\":1,\"1336\":1,\"1347\":1,\"1390\":1,\"1581\":1,\"1993\":1}}],[\"静态变量\",{\"1\":{\"1278\":1,\"1308\":1}}],[\"静态变量和方法字节码\",{\"1\":{\"1265\":1}}],[\"静态博弈\",{\"1\":{\"746\":1}}],[\"静态博弈与动态博弈\",{\"1\":{\"746\":1}}],[\"瘦身版\",{\"1\":{\"1261\":2}}],[\"消费者模式\",{\"1\":{\"1767\":1,\"1769\":1}}],[\"消费者问题\",{\"1\":{\"1760\":1}}],[\"消息摘要\",{\"1\":{\"2045\":1}}],[\"消息摘要等安全功能\",{\"1\":{\"2045\":1}}],[\"消息传递\",{\"1\":{\"1757\":1}}],[\"消息服务等\",{\"1\":{\"1261\":1}}],[\"消除噪声\",{\"1\":{\"614\":1}}],[\"孙\",{\"1\":{\"1259\":1}}],[\"让出当前\",{\"1\":{\"1965\":1}}],[\"让类可以实现这些规范\",{\"1\":{\"1572\":1}}],[\"让我们详细了解它们的特性和用法\",{\"1\":{\"1367\":1}}],[\"让\",{\"1\":{\"1259\":1}}],[\"垃圾回收\",{\"1\":{\"1266\":1,\"1267\":1}}],[\"垃圾的自动收集等是\",{\"1\":{\"1259\":1}}],[\"垃圾邮件检测\",{\"1\":{\"530\":1}}],[\"令人迷惑的那些特性\",{\"1\":{\"1259\":1}}],[\"很难理解的\",{\"1\":{\"1259\":1}}],[\"很多问题不仅仅有一个目标\",{\"1\":{\"839\":1}}],[\"丢弃了\",{\"1\":{\"1259\":1}}],[\"月\",{\"1\":{\"1258\":1,\"1404\":2,\"1406\":1}}],[\"月推出的\",{\"1\":{\"1258\":1}}],[\"年龄\",{\"1\":{\"1956\":1}}],[\"年龄必须大于或等于18岁\",{\"1\":{\"1906\":1,\"1907\":1}}],[\"年正式推出\",{\"1\":{\"1258\":1}}],[\"年\",{\"1\":{\"1258\":2,\"1404\":2}}],[\"句柄图形对象\",{\"0\":{\"1241\":1}}],[\"上\",{\"1\":{\"1887\":1}}],[\"上上一个数\",{\"1\":{\"1818\":1}}],[\"上一个数\",{\"1\":{\"1818\":1}}],[\"上面的代码使用lambda表达式和流操作\",{\"1\":{\"1692\":1}}],[\"上面的代码使用lambda表达式实现了runnable接口中的run方法\",{\"1\":{\"1688\":1}}],[\"上面的lambda表达式接受两个int类型的参数\",{\"1\":{\"1685\":1}}],[\"上的定积分\",{\"1\":{\"1226\":1}}],[\"上界为1\",{\"1\":{\"734\":1}}],[\"上界可以为空\",{\"1\":{\"728\":1}}],[\"余弦函数\",{\"1\":{\"1218\":1}}],[\"余成波\",{\"1\":{\"1040\":1}}],[\"误差棒图等\",{\"1\":{\"1212\":1}}],[\"另一种写法\",{\"1\":{\"1989\":1}}],[\"另一方面\",{\"1\":{\"1259\":1}}],[\"另外\",{\"1\":{\"1259\":2}}],[\"另存为\",{\"1\":{\"1211\":1}}],[\"另类\",{\"1\":{\"1053\":1}}],[\"蓝色\",{\"1\":{\"1210\":1}}],[\"蓝色海洋\",{\"2\":{\"68\":1}}],[\"饼图\",{\"1\":{\"1204\":1}}],[\"散点图\",{\"1\":{\"1202\":1}}],[\"轴标签\",{\"1\":{\"1201\":2}}],[\"轴\",{\"1\":{\"1201\":2,\"1202\":2,\"1206\":3,\"1210\":2}}],[\"轴数据\",{\"1\":{\"1201\":2,\"1207\":1}}],[\"官方文档\",{\"0\":{\"1197\":1,\"1234\":1}}],[\"演示如何从文件读取数据\",{\"1\":{\"1196\":1}}],[\"格式为\",{\"1\":{\"2001\":1}}],[\"格式\",{\"1\":{\"1211\":2}}],[\"格式化输出等\",{\"1\":{\"1429\":1}}],[\"格式化输出\",{\"1\":{\"1194\":1,\"1425\":1,\"1426\":1}}],[\"格式来添加图片\",{\"1\":{\"24\":1}}],[\"格式来添加链接\",{\"1\":{\"23\":1}}],[\"请求处理等场景\",{\"1\":{\"1757\":1}}],[\"请输入一个数值\",{\"1\":{\"1191\":1}}],[\"请注意\",{\"1\":{\"947\":1,\"948\":1}}],[\"手动抛出自定义异常\",{\"1\":{\"1909\":1}}],[\"手动拆箱后的\",{\"1\":{\"1705\":1}}],[\"手动拆箱示例\",{\"0\":{\"1703\":1}}],[\"手动拆箱\",{\"1\":{\"1701\":1,\"1703\":1,\"1705\":1}}],[\"手动装箱后的\",{\"1\":{\"1705\":1}}],[\"手动装箱示例\",{\"0\":{\"1702\":1}}],[\"手动装箱\",{\"1\":{\"1701\":1,\"1702\":1,\"1705\":1}}],[\"手动装箱和拆箱\",{\"0\":{\"1701\":1}}],[\"手动输入\",{\"1\":{\"1191\":1}}],[\"手写数字数据集\",{\"1\":{\"588\":1,\"590\":1,\"608\":2}}],[\"嵌套循环和分支\",{\"0\":{\"1331\":1}}],[\"嵌套函数可以访问其外部函数的变量\",{\"1\":{\"1175\":1}}],[\"嵌入式\",{\"0\":{\"313\":1},\"2\":{\"314\":1}}],[\"局部内部类不能有static成员\",{\"1\":{\"1595\":1}}],[\"局部内部类的特性\",{\"0\":{\"1595\":1}}],[\"局部内部类localinnerclass只能在display\",{\"1\":{\"1594\":1}}],[\"局部内部类是定义在方法或代码块中的类\",{\"1\":{\"1593\":1}}],[\"局部内部类\",{\"0\":{\"1593\":1},\"1\":{\"1586\":1,\"1594\":1}}],[\"局部变量在声明后不会被自动初始化\",{\"1\":{\"1301\":1}}],[\"局部变量的作用域只限于其声明所在的块或方法\",{\"1\":{\"1301\":1}}],[\"局部变量是在方法\",{\"1\":{\"1301\":1}}],[\"局部变量\",{\"0\":{\"1301\":1},\"1\":{\"1174\":1,\"1278\":1,\"1300\":1}}],[\"局限性\",{\"0\":{\"546\":1},\"1\":{\"526\":1}}],[\"部分实现类允许\",{\"1\":{\"1797\":1}}],[\"部分的代码将被执行\",{\"1\":{\"1160\":1}}],[\"部分信息已知\",{\"1\":{\"633\":1}}],[\"全局访问\",{\"1\":{\"2007\":1,\"2015\":1}}],[\"全局变量\",{\"1\":{\"1174\":1}}],[\"全一数组\",{\"1\":{\"1156\":1}}],[\"全零数组\",{\"1\":{\"1156\":1}}],[\"垂直连接\",{\"1\":{\"1154\":1}}],[\"短整数缓冲区\",{\"1\":{\"1884\":1}}],[\"短路逻辑与\",{\"1\":{\"1148\":1}}],[\"短标题\",{\"1\":{\"336\":1}}],[\"左除\",{\"1\":{\"1146\":1}}],[\"左移运算\",{\"1\":{\"1315\":1}}],[\"左移赋值\",{\"1\":{\"197\":1}}],[\"左移\",{\"1\":{\"196\":1,\"1149\":1,\"1315\":1}}],[\"声明异常\",{\"0\":{\"1908\":1}}],[\"声明一个数组\",{\"1\":{\"1351\":1}}],[\"声明和初始化\",{\"0\":{\"1351\":1}}],[\"声明本地方法\",{\"1\":{\"1308\":1}}],[\"声明\",{\"1\":{\"1304\":1}}],[\"声明变量后\",{\"1\":{\"1304\":1}}],[\"声明变量时必须指定变量的类型\",{\"1\":{\"1300\":1}}],[\"声明变量为全局变量\",{\"1\":{\"1125\":1}}],[\"声学等\",{\"1\":{\"885\":1}}],[\"清晰\",{\"1\":{\"1694\":1}}],[\"清晰地编写代码\",{\"1\":{\"1684\":1}}],[\"清理代码\",{\"1\":{\"1672\":1}}],[\"清除无效输入\",{\"1\":{\"1428\":1}}],[\"清除命令窗口\",{\"1\":{\"1125\":1}}],[\"清空缓冲区\",{\"1\":{\"1883\":1,\"1885\":1}}],[\"清空映射中的所有键值对\",{\"1\":{\"1798\":1}}],[\"清空字典\",{\"1\":{\"171\":1}}],[\"清空集合中的所有元素\",{\"1\":{\"1783\":1}}],[\"清空集合\",{\"1\":{\"162\":1}}],[\"贝济埃函数\",{\"1\":{\"1119\":1}}],[\"贝叶斯预测\",{\"1\":{\"631\":1}}],[\"贝叶斯判别分析\",{\"0\":{\"522\":1}}],[\"口\",{\"1\":{\"1117\":1}}],[\"序列化等功能\",{\"1\":{\"2039\":1}}],[\"序列化与反序列化\",{\"0\":{\"1876\":1}}],[\"序列化对象的字节输出流\",{\"1\":{\"1875\":1}}],[\"序列化是一个功能强大但也需要谨慎使用的机制\",{\"1\":{\"1866\":1}}],[\"序列化和反序列化通常使用\",{\"1\":{\"1876\":1}}],[\"序列化和反序列化存在安全风险\",{\"1\":{\"1866\":1}}],[\"序列化和反序列化\",{\"0\":{\"1863\":1}}],[\"序列化的注意事项\",{\"0\":{\"1866\":1}}],[\"序列化的基本要求\",{\"0\":{\"1862\":1}}],[\"序列化的用途\",{\"0\":{\"1861\":1}}],[\"序列化\",{\"0\":{\"1860\":1},\"1\":{\"1860\":1,\"1863\":2,\"1876\":2,\"2039\":1}}],[\"序\",{\"1\":{\"1117\":1}}],[\"序号\",{\"1\":{\"1040\":1}}],[\"程序员需要直接操作硬件\",{\"1\":{\"2190\":1}}],[\"程序员的逻辑错误导致的异常\",{\"1\":{\"1895\":1}}],[\"程序从最深层的递归函数开始逐层返回\",{\"1\":{\"2160\":1}}],[\"程序不断深入地调用自身\",{\"1\":{\"2160\":1}}],[\"程序会在满足一定的条件下重复执行某段代码\",{\"1\":{\"2159\":1}}],[\"程序会终止\",{\"1\":{\"1900\":1}}],[\"程序会输出找到的最优解及其对应的目标函数值\",{\"1\":{\"430\":1,\"436\":1}}],[\"程序通常无法捕获它们\",{\"1\":{\"1895\":1}}],[\"程序的基础\",{\"1\":{\"1716\":1}}],[\"程序的执行流程\",{\"1\":{\"1163\":1}}],[\"程序能够动态地访问和修改对象的属性和方法\",{\"1\":{\"1633\":1}}],[\"程序时\",{\"1\":{\"1627\":1}}],[\"程序可以同时执行多个任务\",{\"1\":{\"1958\":1}}],[\"程序可以捕获\",{\"1\":{\"1442\":1}}],[\"程序可以认为是一系列对象的集合\",{\"1\":{\"1273\":1}}],[\"程序由\",{\"1\":{\"1275\":1}}],[\"程序计数器\",{\"1\":{\"1265\":1}}],[\"程序需要的类能够动态地被载入到运行环境\",{\"1\":{\"1259\":1}}],[\"程序在\",{\"1\":{\"1259\":1}}],[\"程序\",{\"1\":{\"1259\":1}}],[\"程序健壮性的重要保证\",{\"1\":{\"1259\":1}}],[\"程\",{\"1\":{\"1117\":1}}],[\"言\",{\"1\":{\"1117\":1}}],[\"函\",{\"1\":{\"1117\":1}}],[\"函数式接口是仅有一个抽象方法的接口\",{\"1\":{\"1990\":1}}],[\"函数式接口是只包含一个抽象方法的接口\",{\"1\":{\"1686\":1}}],[\"函数式接口\",{\"0\":{\"1990\":1}}],[\"函数进行数值积分\",{\"1\":{\"1227\":1}}],[\"函数将绘制的图保存为不同的图像格式\",{\"1\":{\"1211\":1}}],[\"函数将其他可迭代对象\",{\"1\":{\"188\":1,\"189\":1,\"190\":1}}],[\"函数将其他可迭代对象转换为集合\",{\"1\":{\"159\":1}}],[\"函数将其他数据类型转换为字典\",{\"1\":{\"191\":1}}],[\"函数将其他数据类型转换为字符串\",{\"1\":{\"187\":1}}],[\"函数将其他数据类型转换为浮点数\",{\"1\":{\"186\":1}}],[\"函数将其他数据类型转换为整数\",{\"1\":{\"185\":1}}],[\"函数将其他类型的值转换为布尔值\",{\"1\":{\"139\":1}}],[\"函数从用户处获取输入\",{\"1\":{\"1191\":1}}],[\"函数适合用于重复使用的代码逻辑\",{\"1\":{\"1184\":1}}],[\"函数文件的文件名必须与函数名相同\",{\"1\":{\"1182\":1}}],[\"函数文件通常有输入和输出参数\",{\"1\":{\"1182\":1}}],[\"函数文件是包含\",{\"1\":{\"1182\":1}}],[\"函数定义的\",{\"1\":{\"1182\":1}}],[\"函数定义的基本语法如下\",{\"1\":{\"1172\":1}}],[\"函数提供了灵活的编程能力\",{\"1\":{\"1179\":1}}],[\"函数内部的变量默认是局部变量\",{\"1\":{\"1174\":1}}],[\"函数可以定义可变数量的输入和输出参数\",{\"1\":{\"1178\":1}}],[\"函数可以返回一个或多个输出\",{\"1\":{\"1173\":1}}],[\"函数可以接受多个输入参数\",{\"1\":{\"1173\":1}}],[\"函数可以接受不同类型的参数\",{\"1\":{\"211\":1}}],[\"函数体\",{\"1\":{\"1172\":1}}],[\"函数通常存储在独立的\",{\"1\":{\"1172\":1}}],[\"函数的主要内容\",{\"1\":{\"1171\":1}}],[\"函数的参数\",{\"0\":{\"211\":1}}],[\"函数是用于封装一段可重复使用的代码的方式\",{\"1\":{\"1171\":1}}],[\"函数是python编程中的核心组成部分\",{\"1\":{\"209\":1}}],[\"函数句柄是一种可以引用函数的变量\",{\"1\":{\"1177\":1}}],[\"函数句柄\",{\"1\":{\"1127\":1}}],[\"函数求解0\",{\"1\":{\"734\":1,\"740\":1}}],[\"函数求解整数线性规划问题\",{\"1\":{\"728\":1}}],[\"函数来求解\",{\"1\":{\"738\":1}}],[\"函数来求解0\",{\"1\":{\"732\":1}}],[\"函数来求解整数线性规划问题\",{\"1\":{\"726\":1}}],[\"函数用于最小化目标函数\",{\"1\":{\"728\":1,\"734\":1}}],[\"函数\",{\"0\":{\"1171\":1,\"1333\":1},\"1\":{\"650\":1,\"1120\":1,\"1177\":1,\"1184\":1,\"1188\":1,\"1192\":2,\"1194\":1,\"1195\":3,\"1201\":1,\"1202\":1,\"1203\":1,\"1204\":1,\"1206\":1,\"1207\":1,\"1209\":1,\"1210\":1,\"1426\":1,\"2209\":1}}],[\"函数优化\",{\"1\":{\"437\":1}}],[\"函数总是返回一个字符串\",{\"1\":{\"262\":1}}],[\"函数实现\",{\"1\":{\"261\":1,\"262\":1}}],[\"函数打开文件\",{\"1\":{\"251\":1}}],[\"函数装饰器\",{\"0\":{\"216\":1}}],[\"函数调用自身\",{\"1\":{\"2160\":1}}],[\"函数调用\",{\"1\":{\"210\":1}}],[\"函数调用用于执行函数中的代码\",{\"1\":{\"210\":1}}],[\"函数声明\",{\"1\":{\"210\":1}}],[\"函数声明用于定义一个函数\",{\"1\":{\"210\":1}}],[\"函数声明和调用\",{\"0\":{\"210\":1}}],[\"函数编程\",{\"0\":{\"209\":1}}],[\"函数创建字典\",{\"1\":{\"168\":1}}],[\"函数返回多个值\",{\"0\":{\"157\":1}}],[\"境\",{\"1\":{\"1117\":1}}],[\"统一资源定位符\",{\"1\":{\"1930\":1}}],[\"统一日志格式\",{\"1\":{\"1927\":1}}],[\"统\",{\"1\":{\"1117\":2}}],[\"统计和概率\",{\"1\":{\"1397\":1}}],[\"统计模型\",{\"1\":{\"382\":1}}],[\"统计分析\",{\"0\":{\"464\":1},\"1\":{\"378\":1,\"460\":1}}],[\"统计分析方法是一系列用于收集\",{\"1\":{\"464\":1}}],[\"统计分析方法\",{\"0\":{\"463\":1},\"1\":{\"378\":1}}],[\"统计单词出现的次数\",{\"0\":{\"176\":1}}],[\"统计某个元素在元组中出现的次数\",{\"1\":{\"155\":1}}],[\"统计某个元素在列表中出现的次数\",{\"1\":{\"147\":1}}],[\"系\",{\"1\":{\"1117\":2}}],[\"系统接口\",{\"0\":{\"2200\":1}}],[\"系统属性等\",{\"1\":{\"2037\":1}}],[\"系统事件等信息\",{\"1\":{\"1913\":1}}],[\"系统本身也具有很强的可移植性\",{\"1\":{\"1259\":1}}],[\"系统命令\",{\"0\":{\"1126\":1}}],[\"系统学习\",{\"0\":{\"1060\":1}}],[\"系统工程理论与实践\",{\"1\":{\"1040\":1}}],[\"系统化专业知识\",{\"1\":{\"1025\":1}}],[\"系统建模\",{\"1\":{\"867\":1}}],[\"系统达到平稳状态\",{\"1\":{\"647\":1}}],[\"系统最初处于各状态的概率分布\",{\"1\":{\"646\":1}}],[\"系统可能处于的所有状态的集合\",{\"1\":{\"646\":1}}],[\"附加的工具箱扩展了matlab的使用环境\",{\"1\":{\"1116\":1}}],[\"附录\",{\"1\":{\"780\":1}}],[\"宏包生成的\",{\"1\":{\"1110\":1}}],[\"宏包文件\",{\"1\":{\"1110\":1}}],[\"花括号用于标记命令的必选参数\",{\"1\":{\"1109\":1}}],[\"甚至是\",{\"1\":{\"1128\":1}}],[\"甚至是其他复杂对象\",{\"1\":{\"140\":1}}],[\"甚至可能产生错误\",{\"1\":{\"1109\":1}}],[\"间的内容\",{\"1\":{\"1106\":1}}],[\"间都有路径\",{\"1\":{\"389\":1}}],[\"质疑\",{\"0\":{\"1062\":1}}],[\"质量\",{\"1\":{\"842\":2}}],[\"质量管理\",{\"1\":{\"770\":1}}],[\"质量和生产时间\",{\"1\":{\"710\":1}}],[\"知识产权\",{\"1\":{\"2216\":1}}],[\"知识点\",{\"0\":{\"378\":1}}],[\"知行合一\",{\"0\":{\"1061\":1}}],[\"理论估算\",{\"1\":{\"2157\":1}}],[\"理论基础\",{\"2\":{\"1046\":1}}],[\"理论基础扎实\",{\"1\":{\"522\":1,\"526\":1}}],[\"理解基础概念\",{\"1\":{\"2217\":1}}],[\"理解多线程\",{\"1\":{\"2211\":1}}],[\"理解如何分析算法的效率\",{\"1\":{\"2210\":1}}],[\"理解计算机硬件的基本组成部分\",{\"1\":{\"2207\":1}}],[\"理解空间复杂度有助于优化算法\",{\"1\":{\"2165\":1}}],[\"理解时间复杂度有助于评估算法在处理大规模数据时的表现\",{\"1\":{\"2162\":1}}],[\"理解\",{\"1\":{\"1867\":1}}],[\"理解和使用这些实现类\",{\"1\":{\"1794\":1}}],[\"理解和掌握这些特性是编写高效\",{\"1\":{\"1716\":1}}],[\"理解和合理使用包可以帮助你设计结构良好的\",{\"1\":{\"1632\":1}}],[\"理解这些不同类型的代码块及其用途有助于更好地管理和组织代码\",{\"1\":{\"1550\":1}}],[\"理解继承及其应用可以帮助你设计更灵活和可维护的程序\",{\"1\":{\"1516\":1}}],[\"理解面向对象编程\",{\"1\":{\"1467\":1}}],[\"理解它们的区别和用法对于编写高效的代码至关重要\",{\"1\":{\"1153\":1}}],[\"理\",{\"1\":{\"1117\":1}}],[\"理性认知\",{\"0\":{\"1060\":1}}],[\"感性认知\",{\"0\":{\"1059\":1}}],[\"感染者和康复者随时间变化的曲线\",{\"1\":{\"853\":1}}],[\"感染者和康复者的比例\",{\"1\":{\"853\":1}}],[\"感染者和康复者的变化率\",{\"1\":{\"853\":1}}],[\"感染者\",{\"1\":{\"851\":1,\"852\":1}}],[\"了解它们的用途和性能是计算机科学的核心技能\",{\"1\":{\"2208\":1}}],[\"了解二进制\",{\"1\":{\"2207\":1}}],[\"了解如何设计有效的人机交互界面\",{\"1\":{\"2215\":1}}],[\"了解如何使用sql语言对数据进行查询\",{\"1\":{\"2213\":1}}],[\"了解如何使用包装类及其自动装箱和拆箱功能\",{\"1\":{\"1706\":1}}],[\"了解如何读取和写入文件\",{\"1\":{\"249\":1}}],[\"了解和掌握math类的使用\",{\"1\":{\"1398\":1}}],[\"了解每种类的特点和应用场景\",{\"1\":{\"1379\":1}}],[\"了解一个全新的研究领域\",{\"0\":{\"1057\":1}}],[\"英文文献\",{\"0\":{\"1070\":1}}],[\"英文\",{\"1\":{\"1053\":1}}],[\"英语阅读\",{\"0\":{\"1016\":1}}],[\"英语\",{\"1\":{\"1052\":1},\"2\":{\"1014\":1,\"1017\":1,\"1018\":1,\"1020\":1}}],[\"亚毫米波段\",{\"1\":{\"1052\":1}}],[\"此外\",{\"1\":{\"1960\":1,\"1998\":1}}],[\"此时\",{\"1\":{\"1258\":1}}],[\"此频段属远红外光\",{\"1\":{\"1052\":1}}],[\"此模型用于在一个系统中考虑多个影响因素\",{\"1\":{\"635\":1}}],[\"武利勤\",{\"1\":{\"1051\":1}}],[\"亓丽梅\",{\"1\":{\"1051\":1}}],[\"杨君\",{\"1\":{\"1051\":1}}],[\"杨青\",{\"1\":{\"1040\":1}}],[\"张晓菊\",{\"1\":{\"1051\":1}}],[\"张某的证言不可信\",{\"1\":{\"856\":1}}],[\"张某的证言是可信的\",{\"1\":{\"856\":1}}],[\"张某离开办公室时间\",{\"1\":{\"855\":1}}],[\"崔子健\",{\"1\":{\"1051\":1}}],[\"王玥\",{\"1\":{\"1051\":1}}],[\"太赫辐射\",{\"1\":{\"1052\":1}}],[\"太赫兹生物传感\",{\"0\":{\"2287\":1}}],[\"太赫兹的概念\",{\"0\":{\"1052\":1}}],[\"太赫兹超材料生物传感器的应用研究进展\",{\"1\":{\"1051\":1}}],[\"太赫兹理论基础\",{\"0\":{\"1044\":1}}],[\"太赫兹\",{\"2\":{\"1042\":1,\"1043\":1,\"1045\":1,\"1046\":1,\"1048\":1,\"1049\":1,\"1056\":1}}],[\"太赫兹传感器\",{\"0\":{\"1041\":1}}],[\"太阳能学报\",{\"1\":{\"1040\":1}}],[\"太阳能等可再生能源的利用\",{\"1\":{\"716\":1}}],[\"辽宁省能源研究所\",{\"1\":{\"1040\":1}}],[\"佟明安译\",{\"1\":{\"1040\":1}}],[\"卢伯英\",{\"1\":{\"1040\":1}}],[\"陶红艳\",{\"1\":{\"1040\":1}}],[\"朱秀昌\",{\"1\":{\"1040\":1}}],[\"刘卫国\",{\"1\":{\"1040\":1}}],[\"刘木华\",{\"1\":{\"1040\":1}}],[\"刘刚等\",{\"1\":{\"1040\":1}}],[\"洪添胜\",{\"1\":{\"1040\":1}}],[\"何勇\",{\"1\":{\"1040\":1}}],[\"何东健\",{\"1\":{\"1040\":1}}],[\"精度丢失\",{\"1\":{\"1299\":1}}],[\"精细农业\",{\"1\":{\"1040\":1}}],[\"精确到毫秒\",{\"1\":{\"1401\":1}}],[\"精确农业基础\",{\"1\":{\"1040\":1}}],[\"精确率和召回率\",{\"1\":{\"586\":1}}],[\"精确率和召回率的调和平均数\",{\"1\":{\"582\":1}}],[\"精确率\",{\"1\":{\"532\":1,\"582\":1}}],[\"李晓莹\",{\"1\":{\"1040\":1}}],[\"李道亮\",{\"1\":{\"1040\":1}}],[\"李建良\",{\"1\":{\"1040\":1}}],[\"曹卫星\",{\"1\":{\"1040\":1}}],[\"光谱学与光谱分析\",{\"1\":{\"1040\":1,\"1051\":1}}],[\"光波和水波\",{\"1\":{\"905\":1}}],[\"光波\",{\"1\":{\"881\":1}}],[\"国际农业生物工程学报\",{\"1\":{\"1040\":1}}],[\"黑龙江省农业机械学会\",{\"1\":{\"1040\":1}}],[\"黑色系统\",{\"1\":{\"633\":1}}],[\"振动工程学报\",{\"1\":{\"1040\":1}}],[\"仪器仪表学报\",{\"1\":{\"1040\":2}}],[\"蒋勇\",{\"1\":{\"1040\":1}}],[\"蒋文科\",{\"1\":{\"1040\":1}}],[\"雷金贵\",{\"1\":{\"1040\":1}}],[\"汪纪锋\",{\"1\":{\"1040\":1}}],[\"谷耀新\",{\"1\":{\"1040\":1}}],[\"倪洪启\",{\"1\":{\"1040\":1}}],[\"韩东海\",{\"1\":{\"1040\":1}}],[\"邝朴生\",{\"1\":{\"1040\":1}}],[\"沈在春\",{\"1\":{\"1040\":1}}],[\"农机化研究\",{\"1\":{\"1040\":1}}],[\"农产品质量安全光学无损检测技术及应用\",{\"1\":{\"1040\":1}}],[\"农产品无损检测技术\",{\"1\":{\"1040\":1}}],[\"农产品加工机械与设备\",{\"1\":{\"1040\":1}}],[\"农业部沼气科学研究所\",{\"1\":{\"1040\":1}}],[\"农业部南京农业机械化研究所\",{\"1\":{\"1040\":1}}],[\"农业物联网导论\",{\"1\":{\"1040\":1}}],[\"农业物料学\",{\"1\":{\"1040\":1}}],[\"农业信息学\",{\"1\":{\"1040\":1}}],[\"农业信息系统原理及其应用\",{\"1\":{\"1040\":1}}],[\"农业信息技术\",{\"0\":{\"2286\":1},\"1\":{\"1027\":1}}],[\"农业设施化方面问题的能力\",{\"1\":{\"1038\":1}}],[\"农业设施化等方面问题的能力\",{\"1\":{\"1038\":1}}],[\"农业设施化等方面的技术研究\",{\"1\":{\"1024\":1}}],[\"农业机械学报\",{\"1\":{\"1040\":1}}],[\"农业机械技术及智能装备\",{\"1\":{\"1025\":1,\"1027\":1}}],[\"农业机械化\",{\"1\":{\"1024\":1,\"1038\":2}}],[\"农业工程学报\",{\"1\":{\"1040\":1}}],[\"农业工程与信息技术领域硕士专业学位研究生文献阅读主要书目和期刊目录\",{\"1\":{\"1040\":1}}],[\"农业工程与信息技术领域农业硕士专业实践时间安排在第三个学期开始\",{\"1\":{\"1035\":1}}],[\"农业工程与信息技术领域农业硕士是与该领域任职资格相联系的专业学位\",{\"1\":{\"1024\":1}}],[\"农业工程与信息技术专业学位硕士研究生的学制为3年\",{\"1\":{\"1026\":1}}],[\"农业工程与信息技术\",{\"0\":{\"1022\":1}}],[\"农业工程\",{\"2\":{\"49\":1,\"54\":1,\"2259\":1}}],[\"冯学民\",{\"1\":{\"1040\":1}}],[\"试验与统计\",{\"1\":{\"1040\":1}}],[\"试验设计与统计分析\",{\"1\":{\"1040\":1}}],[\"金益主\",{\"1\":{\"1040\":1}}],[\"金融数学\",{\"1\":{\"885\":1}}],[\"金融投资\",{\"1\":{\"716\":1}}],[\"金融\",{\"1\":{\"631\":1}}],[\"金融预测\",{\"1\":{\"534\":1}}],[\"金融领域\",{\"1\":{\"523\":1}}],[\"金融领域的预测\",{\"1\":{\"382\":1}}],[\"金融学等领域具有广泛应用\",{\"1\":{\"475\":1}}],[\"马云海\",{\"1\":{\"1040\":1}}],[\"马尔科夫模型不仅限于天气预测\",{\"1\":{\"652\":1}}],[\"马尔科夫模型在许多领域都有应用\",{\"1\":{\"645\":1}}],[\"马尔科夫链的性质\",{\"0\":{\"647\":1}}],[\"马尔科夫链的基本概念\",{\"0\":{\"646\":1}}],[\"马尔科夫性\",{\"1\":{\"645\":1}}],[\"马尔科夫预测模型是一种基于马尔科夫链的统计模型\",{\"1\":{\"645\":1}}],[\"马尔科夫预测模型\",{\"0\":{\"645\":1}}],[\"郑丽敏\",{\"1\":{\"1040\":1}}],[\"必读\",{\"1\":{\"1040\":16}}],[\"必读或选读\",{\"1\":{\"1040\":1}}],[\"必须关闭\",{\"1\":{\"1983\":1}}],[\"必须显式地捕获或声明抛出\",{\"1\":{\"1895\":1}}],[\"必须是\",{\"1\":{\"1838\":1}}],[\"必须是唯一的\",{\"1\":{\"1797\":1}}],[\"必须是整数\",{\"1\":{\"725\":2}}],[\"必须从头开始遍历链表来查找某个元素\",{\"1\":{\"1750\":1}}],[\"必须有一个公有的无参构造方法\",{\"1\":{\"1680\":1}}],[\"必须相应地重写\",{\"1\":{\"1669\":1}}],[\"必须调用\",{\"1\":{\"1641\":1,\"1644\":1}}],[\"必须先创建外部类的实例\",{\"1\":{\"1589\":1}}],[\"必须实现所有抽象方法\",{\"1\":{\"1558\":1}}],[\"必须由子类提供具体实现\",{\"1\":{\"1553\":1}}],[\"必须由子类继承并实现其抽象方法\",{\"1\":{\"1485\":1}}],[\"必须在同步上下文中使用\",{\"1\":{\"1678\":1}}],[\"必须在同步上下文\",{\"1\":{\"1673\":1}}],[\"必须在同步块或方法内使用\",{\"1\":{\"1673\":1}}],[\"必须在子类中实现\",{\"1\":{\"1501\":1}}],[\"必须在声明时或通过构造函数初始化\",{\"1\":{\"1308\":1}}],[\"必须要么捕获这些异常\",{\"1\":{\"1450\":1}}],[\"必须指定变量的类型\",{\"1\":{\"1304\":1}}],[\"必须保证不少于一年的实践训练\",{\"1\":{\"1035\":1}}],[\"必须为非负数\",{\"1\":{\"728\":1}}],[\"必须满足\",{\"1\":{\"396\":1,\"904\":1,\"912\":1}}],[\"必须满足容量限制和流量守恒条件\",{\"1\":{\"396\":1}}],[\"备注\",{\"1\":{\"1040\":1}}],[\"著作或期刊的名称\",{\"1\":{\"1040\":1}}],[\"七\",{\"0\":{\"1040\":1,\"1706\":1,\"1715\":1,\"1755\":1,\"1769\":1,\"1793\":1,\"1808\":1,\"1878\":1,\"1892\":1,\"1903\":1,\"1928\":1,\"1943\":1,\"1957\":1,\"1971\":1,\"1986\":1}}],[\"申请学位获得学术成果的要求\",{\"1\":{\"1039\":1}}],[\"硕士生毕业\",{\"1\":{\"1039\":1}}],[\"硕士生要用不少于一年的时间从事科学研究和学位论文工作\",{\"1\":{\"1037\":1}}],[\"毕业与学位授予\",{\"0\":{\"1039\":1}}],[\"毕业并申请学位\",{\"1\":{\"1026\":1}}],[\"审查学位论文工作的技术难度和工作量\",{\"1\":{\"1038\":1}}],[\"案例分析\",{\"1\":{\"1038\":1}}],[\"答辩委员会应由3\",{\"1\":{\"1038\":1}}],[\"答辩\",{\"1\":{\"1038\":1}}],[\"创新性和应用性\",{\"1\":{\"1037\":1}}],[\"创建和终止进程\",{\"1\":{\"2192\":1}}],[\"创建和初始化二维数组\",{\"0\":{\"1359\":1}}],[\"创建并返回对象的一个副本\",{\"1\":{\"1671\":1}}],[\"创建对象的副本\",{\"1\":{\"1671\":1,\"1678\":1}}],[\"创建对象的过程称为实例化\",{\"1\":{\"242\":1}}],[\"创建对象实例\",{\"1\":{\"1651\":1,\"1655\":1}}],[\"创建局部内部类实例\",{\"1\":{\"1594\":1}}],[\"创建静态内部类实例\",{\"1\":{\"1591\":1}}],[\"创建内部类实例\",{\"1\":{\"1588\":1}}],[\"创建多个线程来访问\",{\"1\":{\"1548\":1}}],[\"创建多项式回归模型并进行训练\",{\"1\":{\"501\":1}}],[\"创建多项式特征转换器\",{\"1\":{\"501\":1}}],[\"创建新文件\",{\"1\":{\"1439\":2}}],[\"创建新目录\",{\"1\":{\"232\":1}}],[\"创建scanner对象来读取输入\",{\"1\":{\"1422\":1}}],[\"创建svm模型并进行训练\",{\"1\":{\"578\":1,\"588\":1,\"602\":1}}],[\"创建指定日期\",{\"1\":{\"1404\":1}}],[\"创建两行一列的子图\",{\"1\":{\"1209\":1}}],[\"创建函数句柄的方法\",{\"1\":{\"1177\":1}}],[\"创建向量\",{\"1\":{\"1155\":1,\"1221\":1}}],[\"创建矩阵\",{\"0\":{\"1129\":1},\"1\":{\"1144\":1,\"1222\":1}}],[\"创建结构元素\",{\"1\":{\"825\":1}}],[\"创建线性规划问题\",{\"1\":{\"700\":1}}],[\"创建线性回归模型并进行训练\",{\"1\":{\"497\":1,\"606\":1}}],[\"创建卷积神经网络模型\",{\"1\":{\"610\":1}}],[\"创建xgboost模型并进行训练\",{\"1\":{\"609\":1}}],[\"创建梯度提升机模型并进行训练\",{\"1\":{\"609\":1}}],[\"创建神经网络模型\",{\"1\":{\"608\":1}}],[\"创建神经网络模型并进行训练\",{\"1\":{\"608\":1}}],[\"创建pca模型并进行特征降维\",{\"1\":{\"590\":1}}],[\"创建朴素贝叶斯模型并进行训练\",{\"1\":{\"589\":1,\"607\":1}}],[\"创建knn模型并进行训练\",{\"1\":{\"581\":1,\"605\":1}}],[\"创建随机森林模型并进行训练\",{\"1\":{\"580\":1,\"604\":1}}],[\"创建决策树模型并进行训练\",{\"1\":{\"579\":1,\"603\":1}}],[\"创建决策树回归模型并进行训练\",{\"1\":{\"503\":1}}],[\"创建逻辑回归模型并进行训练\",{\"1\":{\"577\":1,\"601\":1}}],[\"创建qda模型并进行训练\",{\"1\":{\"571\":1}}],[\"创建lda模型并进行训练\",{\"1\":{\"569\":1}}],[\"创建lasso回归模型并进行训练\",{\"1\":{\"499\":1}}],[\"创建支持向量回归模型并进行训练\",{\"1\":{\"502\":1}}],[\"创建弹性网回归模型并进行训练\",{\"1\":{\"500\":1}}],[\"创建岭回归模型并进行训练\",{\"1\":{\"498\":1}}],[\"创建二维数组\",{\"1\":{\"457\":1}}],[\"创建一维数组\",{\"1\":{\"457\":1}}],[\"创建一个窗口对象\",{\"1\":{\"2023\":1}}],[\"创建一个按钮组件\",{\"1\":{\"2023\":1}}],[\"创建一个按钮\",{\"1\":{\"2022\":1}}],[\"创建一个简单的\",{\"0\":{\"2022\":1}}],[\"创建一个简单的迭代器\",{\"1\":{\"224\":1}}],[\"创建一个容量为\",{\"1\":{\"1883\":1}}],[\"创建一个生成斐波那契数列的生成器\",{\"0\":{\"1818\":1}}],[\"创建一个生成器函数\",{\"1\":{\"225\":1}}],[\"创建一个主类来演示如何使用这些类和接口\",{\"1\":{\"1655\":1}}],[\"创建一个匹配器来匹配给定的输入序列\",{\"1\":{\"1415\":1}}],[\"创建一个表示从1970年1月1日00\",{\"1\":{\"1401\":1}}],[\"创建一个表示当前时间的date对象\",{\"1\":{\"1401\":1}}],[\"创建一个3x3的二维数组\",{\"1\":{\"1359\":1}}],[\"创建一个包含5个元素的int数组\",{\"1\":{\"1352\":1}}],[\"创建一个包含1到10平方数的集合\",{\"1\":{\"222\":1}}],[\"创建一个包含1到10平方数的列表\",{\"1\":{\"221\":1}}],[\"创建一个长度为5的int数组\",{\"1\":{\"1351\":2}}],[\"创建一个名为\",{\"1\":{\"1181\":1,\"1182\":1,\"1183\":1,\"1185\":1}}],[\"创建一个\",{\"1\":{\"1130\":1,\"1131\":4,\"2022\":1}}],[\"创建一个结构元素\",{\"1\":{\"812\":1}}],[\"创建一个范围数组\",{\"1\":{\"457\":1}}],[\"创建一个全一的数组\",{\"1\":{\"457\":1}}],[\"创建一个全零的数组\",{\"1\":{\"457\":1}}],[\"创建一个无向图\",{\"1\":{\"394\":2,\"955\":1}}],[\"创建一个数据框\",{\"1\":{\"239\":1}}],[\"创建一个数组来存储每个时间步的位移分布\",{\"1\":{\"912\":1}}],[\"创建一个数组来存储每个时间步的温度分布\",{\"1\":{\"890\":1,\"904\":1}}],[\"创建一个数组\",{\"1\":{\"238\":1}}],[\"创建一个二维数组\",{\"1\":{\"238\":1}}],[\"创建一个特定日期\",{\"1\":{\"234\":1}}],[\"创建一个键为数字\",{\"1\":{\"223\":1}}],[\"创建一个字典\",{\"1\":{\"173\":1}}],[\"创建一个集合\",{\"1\":{\"163\":1}}],[\"创建数组\",{\"0\":{\"1350\":1},\"1\":{\"457\":1,\"1154\":1}}],[\"创建有向图\",{\"1\":{\"393\":1,\"955\":1}}],[\"创建无向图\",{\"1\":{\"393\":1,\"955\":1}}],[\"创建图书对象\",{\"1\":{\"1661\":1}}],[\"创建图\",{\"1\":{\"393\":1,\"955\":1}}],[\"创建目录\",{\"1\":{\"256\":1}}],[\"创建简单的折线图\",{\"1\":{\"240\":1}}],[\"创建偏函数\",{\"1\":{\"217\":1}}],[\"创建\",{\"0\":{\"1883\":1,\"1918\":1,\"1980\":1},\"1\":{\"217\":1,\"458\":3,\"619\":1,\"1568\":1,\"1887\":1,\"1949\":2,\"1976\":1,\"1980\":1}}],[\"创建闭包\",{\"1\":{\"215\":1}}],[\"创建字典\",{\"0\":{\"168\":1}}],[\"创建集合\",{\"0\":{\"159\":1}}],[\"创建单个元素的元组\",{\"1\":{\"150\":1}}],[\"创建包含元素的字典\",{\"1\":{\"168\":1}}],[\"创建包含元素的集合\",{\"1\":{\"159\":1}}],[\"创建包含元素的元组\",{\"1\":{\"150\":1}}],[\"创建包含元素的列表\",{\"1\":{\"141\":1}}],[\"创建空字典\",{\"1\":{\"168\":1}}],[\"创建空集合\",{\"1\":{\"159\":1}}],[\"创建空元组\",{\"1\":{\"150\":1}}],[\"创建空列表\",{\"1\":{\"141\":1}}],[\"创建元组\",{\"0\":{\"150\":1}}],[\"创建列表\",{\"0\":{\"141\":1}}],[\"论文写作\",{\"2\":{\"1113\":1}}],[\"论文评审与答辩\",{\"1\":{\"1038\":1}}],[\"论文形式\",{\"1\":{\"1038\":1}}],[\"论文要有一定的技术难度\",{\"1\":{\"1038\":1}}],[\"论文选题应来源于农业工程与信息技术领域的技术革新\",{\"1\":{\"1038\":1}}],[\"论文选题开题\",{\"0\":{\"1038\":1}}],[\"论文研究内容应体现系统性\",{\"1\":{\"1037\":1}}],[\"论文组成\",{\"0\":{\"780\":1}}],[\"及时更新文档注释\",{\"1\":{\"2003\":1}}],[\"及其子类\",{\"1\":{\"1868\":4,\"2039\":2}}],[\"及以后可以有默认方法和静态方法\",{\"1\":{\"1584\":1}}],[\"及以后版本\",{\"1\":{\"1573\":1}}],[\"及以后的版本也允许接口中包含默认方法和静态方法\",{\"1\":{\"1555\":1}}],[\"及以上\",{\"1\":{\"174\":1}}],[\"及格和不及格\",{\"1\":{\"1035\":1}}],[\"良好\",{\"1\":{\"1035\":1}}],[\"撰写实践学习总结报告\",{\"1\":{\"1035\":1}}],[\"练就兴农本领\",{\"1\":{\"1035\":1}}],[\"激励研究生厚植爱农情怀\",{\"1\":{\"1035\":1}}],[\"激活函数\",{\"1\":{\"440\":1}}],[\"鼓励涉农专业依托科技小院等扎根一线的专业实践基地开展实践工作\",{\"1\":{\"1035\":1}}],[\"读研\",{\"0\":{\"2253\":1}}],[\"读书计划\",{\"1\":{\"1034\":1}}],[\"读取配置文件并在应用程序中共享配置数据\",{\"1\":{\"2016\":1}}],[\"读取消息\",{\"1\":{\"1970\":1}}],[\"读取线程\",{\"1\":{\"1970\":1}}],[\"读取和写入网络中的数据\",{\"1\":{\"1882\":2}}],[\"读取和显示图像文件\",{\"1\":{\"807\":1}}],[\"读取每一行\",{\"1\":{\"1873\":1}}],[\"读取字节数据\",{\"1\":{\"1870\":1}}],[\"读取字段值\",{\"1\":{\"1642\":1}}],[\"读取用户输入\",{\"1\":{\"1427\":1,\"1867\":1}}],[\"读取下一个布尔值\",{\"1\":{\"1423\":1}}],[\"读取下一个双精度浮点数\",{\"1\":{\"1423\":1}}],[\"读取下一个整数\",{\"1\":{\"1423\":1}}],[\"读取下一个标记\",{\"1\":{\"1423\":1}}],[\"读取整行输入\",{\"1\":{\"1423\":1}}],[\"读取整个文件或指定大小的字节数\",{\"1\":{\"252\":1}}],[\"读取一个浮点数\",{\"1\":{\"1422\":1}}],[\"读取一个整数\",{\"1\":{\"1422\":1}}],[\"读取一个字符串\",{\"1\":{\"1422\":1}}],[\"读取一行\",{\"1\":{\"252\":1}}],[\"读取数据的便利工具\",{\"1\":{\"1421\":1}}],[\"读取\",{\"1\":{\"1126\":1,\"1192\":1}}],[\"读取音频文件\",{\"1\":{\"948\":1}}],[\"读取二值图像\",{\"1\":{\"825\":1}}],[\"读取彩色图像\",{\"1\":{\"818\":1}}],[\"读取图像并转换为灰度\",{\"1\":{\"820\":1,\"823\":1,\"824\":1,\"826\":1,\"827\":1}}],[\"读取图像\",{\"1\":{\"807\":1,\"819\":1,\"821\":1,\"822\":1,\"947\":1}}],[\"读取文本文件\",{\"1\":{\"259\":1}}],[\"读取文件中的文本数据\",{\"1\":{\"1873\":1}}],[\"读取文件中的字节数据\",{\"1\":{\"1870\":1}}],[\"读取文件\",{\"0\":{\"252\":1},\"1\":{\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1440\":1}}],[\"读取json文件\",{\"1\":{\"258\":1}}],[\"读取csv文件\",{\"1\":{\"257\":1}}],[\"读取所有行并返回列表\",{\"1\":{\"252\":1}}],[\"六\",{\"0\":{\"1033\":1,\"1063\":1,\"1705\":1,\"1714\":1,\"1753\":1,\"1767\":1,\"1779\":1,\"1791\":1,\"1806\":1,\"1877\":1,\"1889\":1,\"1901\":1,\"1927\":1,\"1940\":1,\"1955\":1,\"1970\":1,\"1985\":1,\"2034\":1}}],[\"六级标题\",{\"1\":{\"17\":1}}],[\"入学前两年内\",{\"1\":{\"1032\":1}}],[\"含\",{\"1\":{\"1032\":1}}],[\"含必修课和选修课\",{\"1\":{\"1030\":1}}],[\"含休学和保留学籍\",{\"1\":{\"1026\":1}}],[\"本地协议驱动\",{\"1\":{\"1986\":1}}],[\"本地接口\",{\"1\":{\"1986\":1}}],[\"本地\",{\"1\":{\"1986\":1}}],[\"本地主机地址\",{\"1\":{\"1933\":1}}],[\"本地主机名\",{\"1\":{\"1933\":1}}],[\"本地方法栈\",{\"1\":{\"1265\":1}}],[\"本文将详细介绍\",{\"1\":{\"1664\":1}}],[\"本学科主要文献和书目\",{\"0\":{\"1040\":1}}],[\"本专业硕士研究生应修读完成的各环节课程总学分要求不低于30学分\",{\"1\":{\"1030\":1}}],[\"本领域包括农业信息技术\",{\"1\":{\"1025\":1}}],[\"课程设置及学分要求\",{\"0\":{\"1029\":1}}],[\"课程学习一般在校内完成\",{\"1\":{\"1028\":1}}],[\"课程学习\",{\"1\":{\"1028\":1}}],[\"坚守学术研究的社会责任\",{\"1\":{\"1025\":1}}],[\"严谨的学术态度\",{\"1\":{\"1025\":1}}],[\"遵循标准格式\",{\"1\":{\"2003\":1}}],[\"遵循后进先出\",{\"1\":{\"1770\":1}}],[\"遵循学术伦理\",{\"1\":{\"1025\":1}}],[\"遵纪守法\",{\"1\":{\"1025\":1}}],[\"恪守学术道德标准和学术规范\",{\"1\":{\"1025\":1}}],[\"机制\",{\"1\":{\"1698\":1,\"1753\":1}}],[\"机制也是开发分布式应用的重要手段\",{\"1\":{\"1259\":1}}],[\"机械工程学报\",{\"1\":{\"1040\":1}}],[\"机械化和新农村建设与发展服务\",{\"1\":{\"1025\":1}}],[\"机器语言\",{\"2\":{\"2228\":1}}],[\"机器翻译等\",{\"1\":{\"534\":1}}],[\"机器\",{\"1\":{\"409\":1}}],[\"机器学习基础\",{\"1\":{\"2214\":1}}],[\"机器学习和工程建模中有广泛应用\",{\"1\":{\"938\":1}}],[\"机器学习模型\",{\"1\":{\"631\":1}}],[\"机器学习算法实现\",{\"0\":{\"600\":1}}],[\"机器学习算法有很多种\",{\"1\":{\"592\":1}}],[\"机器学习的算法\",{\"0\":{\"592\":1}}],[\"机器学习的分类问题\",{\"0\":{\"574\":1}}],[\"机器学习的第一个应用\",{\"0\":{\"371\":1}}],[\"机器学习的工具\",{\"0\":{\"370\":1}}],[\"机器学习\",{\"0\":{\"274\":1,\"367\":1,\"375\":1},\"1\":{\"367\":1,\"414\":1,\"419\":1,\"426\":1,\"437\":1,\"614\":1},\"2\":{\"373\":1,\"374\":1}}],[\"积极参与课程教学\",{\"1\":{\"1028\":1}}],[\"积极为我国农业现代化\",{\"1\":{\"1025\":1}}],[\"积分示例\",{\"1\":{\"460\":1}}],[\"积分\",{\"0\":{\"919\":1,\"1226\":1,\"2247\":1},\"1\":{\"460\":1}}],[\"艰苦奋斗\",{\"1\":{\"1025\":1}}],[\"品牌\",{\"1\":{\"1468\":1}}],[\"品种\",{\"1\":{\"1273\":1}}],[\"品德良好\",{\"1\":{\"1025\":1}}],[\"品红色\",{\"1\":{\"785\":1}}],[\"拥护党的基本路线\",{\"1\":{\"1025\":1}}],[\"拥有丰富的库和工具来处理和分析图像\",{\"1\":{\"799\":1}}],[\"拥有丰富的统计和图形工具\",{\"1\":{\"383\":1}}],[\"拥有强大的图像处理工具箱\",{\"1\":{\"794\":1}}],[\"掌握正则表达式语法和使用方法\",{\"1\":{\"1957\":1}}],[\"掌握\",{\"1\":{\"1893\":1,\"1944\":1,\"1987\":1}}],[\"掌握junit的常用功能和工具\",{\"1\":{\"1859\":1}}],[\"掌握方法的定义\",{\"1\":{\"1348\":1}}],[\"掌握这些类和\",{\"1\":{\"2049\":1}}],[\"掌握这些\",{\"1\":{\"1879\":1}}],[\"掌握这些数据结构可以帮助你更高效地解决各种问题\",{\"1\":{\"1733\":1}}],[\"掌握这些语句后\",{\"1\":{\"1332\":1}}],[\"掌握这些内容可以帮助你高效地编写和格式化文档\",{\"1\":{\"35\":1}}],[\"掌握如何使用脚本\",{\"1\":{\"1188\":1}}],[\"掌握一门外国语\",{\"1\":{\"1025\":1}}],[\"掌握农业信息技术或农业机械技术或农业设施技术等方向的坚实基础理论\",{\"1\":{\"1025\":1}}],[\"掌握中国特色社会主义理论\",{\"1\":{\"1025\":1}}],[\"现代操作系统支持多核处理器\",{\"1\":{\"2190\":1}}],[\"现代操作系统阶段\",{\"1\":{\"2190\":1}}],[\"现代控制工程\",{\"1\":{\"1040\":1}}],[\"现代控制理论\",{\"1\":{\"1040\":1}}],[\"现代机械设计方法\",{\"1\":{\"1040\":1}}],[\"现代农业教育等企事业单位和管理部门培养应用型\",{\"1\":{\"1024\":1}}],[\"现在是\",{\"1\":{\"143\":1,\"146\":1,\"171\":2,\"174\":1,\"176\":1}}],[\"新api是不可变且线程安全的\",{\"1\":{\"1994\":1}}],[\"新的日期和时间api\",{\"1\":{\"1998\":1}}],[\"新的日期和时间\",{\"0\":{\"1994\":1}}],[\"新的java\",{\"1\":{\"1408\":1}}],[\"新建\",{\"1\":{\"1964\":1}}],[\"新客户端连接\",{\"1\":{\"1936\":1}}],[\"新增字段和方法\",{\"1\":{\"1499\":1}}],[\"新农村发展\",{\"1\":{\"1024\":1}}],[\"新类继承自现有类\",{\"1\":{\"242\":1}}],[\"培养方式\",{\"0\":{\"1028\":1}}],[\"培养方案\",{\"0\":{\"1022\":1}}],[\"培养要求如下\",{\"1\":{\"1025\":1}}],[\"培养要求\",{\"0\":{\"1025\":1}}],[\"培养目标\",{\"0\":{\"1024\":1}}],[\"培养目标和要求\",{\"0\":{\"1023\":1}}],[\"思考\",{\"2\":{\"1004\":1,\"1007\":1}}],[\"思考感悟\",{\"2\":{\"982\":1,\"993\":1}}],[\"寻求最优解法\",{\"1\":{\"2157\":1}}],[\"寻求本质\",{\"0\":{\"1001\":1}}],[\"寻找一条经过每个城市一次且仅一次\",{\"1\":{\"736\":1}}],[\"寻找最优解的过程\",{\"1\":{\"705\":1}}],[\"寻找增广路径\",{\"1\":{\"397\":1}}],[\"历史文化\",{\"2\":{\"994\":1}}],[\"敢于斗争的民族\",{\"1\":{\"992\":1}}],[\"怎么定义中国人\",{\"1\":{\"992\":1}}],[\"百分号开头的行是注释\",{\"1\":{\"1108\":1}}],[\"百年后\",{\"0\":{\"992\":1},\"1\":{\"992\":1}}],[\"百度\",{\"1\":{\"23\":1}}],[\"帝国的军队和古罗马一样在征战四方\",{\"0\":{\"989\":1}}],[\"四个等级评定成绩\",{\"1\":{\"1035\":1}}],[\"四\",{\"0\":{\"1028\":1,\"1037\":1,\"1061\":1,\"1701\":1,\"1712\":1,\"1749\":1,\"1763\":1,\"1776\":1,\"1787\":1,\"1802\":1,\"1824\":1,\"1875\":1,\"1886\":1,\"1898\":1,\"1919\":1,\"1934\":1,\"1951\":1,\"1965\":1,\"1977\":1,\"2029\":1,\"2049\":1}}],[\"四千年前\",{\"0\":{\"987\":1}}],[\"四级标题\",{\"1\":{\"17\":1}}],[\"五大部分构成\",{\"1\":{\"1117\":1}}],[\"五\",{\"0\":{\"1029\":1,\"1039\":1,\"1062\":1,\"1704\":1,\"1713\":1,\"1752\":1,\"1765\":1,\"1778\":1,\"1789\":1,\"1804\":1,\"1876\":1,\"1888\":1,\"1900\":1,\"1923\":1,\"1937\":1,\"1953\":1,\"1967\":1,\"1984\":1,\"2032\":1}}],[\"五十年后\",{\"0\":{\"992\":1},\"1\":{\"992\":1}}],[\"五千年前\",{\"0\":{\"986\":1}}],[\"五级标题\",{\"1\":{\"17\":1}}],[\"甲骨文\",{\"1\":{\"985\":1,\"1258\":1}}],[\"荣辱\",{\"1\":{\"981\":1}}],[\"条件语句\",{\"1\":{\"2209\":1}}],[\"条件\",{\"1\":{\"1324\":1,\"1326\":1}}],[\"条件为真时执行\",{\"1\":{\"1321\":1}}],[\"条件不满足时\",{\"1\":{\"1160\":1}}],[\"条件分支\",{\"0\":{\"201\":1}}],[\"条边\",{\"1\":{\"964\":1}}],[\"尝试借阅参考书\",{\"1\":{\"1661\":1}}],[\"尝试查找与正则表达式匹配的子字符串\",{\"1\":{\"1416\":1}}],[\"尝试更新其终点的距离\",{\"1\":{\"959\":1}}],[\"尝试找到一个最佳的超平面将不同类别分开\",{\"1\":{\"586\":1}}],[\"社交网络分析和生物网络研究\",{\"1\":{\"955\":1}}],[\"社会选择等\",{\"1\":{\"774\":1}}],[\"社会调查等\",{\"1\":{\"770\":1}}],[\"社会性\",{\"1\":{\"761\":1}}],[\"社会性指标\",{\"1\":{\"757\":1}}],[\"社会接受度等\",{\"1\":{\"757\":1}}],[\"社会科学等领域具有广泛应用\",{\"1\":{\"470\":1}}],[\"社会学\",{\"2\":{\"86\":1}}],[\"研究方向\",{\"0\":{\"1095\":1},\"2\":{\"1097\":1}}],[\"研究方向的检索词\",{\"0\":{\"1071\":1}}],[\"研究方法\",{\"1\":{\"1038\":1}}],[\"研究领域\",{\"2\":{\"1065\":1}}],[\"研究生在学位论文开题论证前应广泛阅读本学科近5\",{\"1\":{\"1038\":1}}],[\"研究生要提交专业实践计划\",{\"1\":{\"1035\":1}}],[\"研究生个人培养计划含学习计划\",{\"1\":{\"1034\":1}}],[\"研究图的性质和应用\",{\"1\":{\"952\":1}}],[\"研究者们正在探索更多的算法来处理复杂的数据结构\",{\"1\":{\"547\":1}}],[\"缩短音频信号\",{\"1\":{\"948\":1}}],[\"缩放图像\",{\"1\":{\"821\":1}}],[\"缩放\",{\"1\":{\"800\":1,\"815\":1}}],[\"逼近数据趋势\",{\"1\":{\"938\":1}}],[\"拟合线\",{\"1\":{\"941\":1}}],[\"拟合方法\",{\"0\":{\"939\":1}}],[\"拟合方法可以分为插值\",{\"1\":{\"938\":1}}],[\"拟合在统计学\",{\"1\":{\"938\":1}}],[\"拟合是一种通过数学模型逼近数据点的方法\",{\"1\":{\"938\":1}}],[\"拟合\",{\"0\":{\"938\":1}}],[\"样条拟合使用低阶多项式片段在各个数据点之间进行拟合\",{\"1\":{\"939\":1}}],[\"样条拟合\",{\"0\":{\"944\":1},\"1\":{\"939\":1,\"944\":1}}],[\"样条插值使用低阶多项式\",{\"1\":{\"933\":1}}],[\"样条插值\",{\"0\":{\"936\":1},\"1\":{\"933\":1,\"936\":1}}],[\"样本之间的差异最小\",{\"1\":{\"561\":1}}],[\"牛顿插值公式\",{\"1\":{\"933\":1}}],[\"牛顿法\",{\"1\":{\"834\":1}}],[\"概率分布\",{\"0\":{\"1230\":1}}],[\"概率统计等领域\",{\"1\":{\"1214\":1}}],[\"概率随着温度的下降而降低\",{\"1\":{\"422\":1}}],[\"概念\",{\"1\":{\"933\":3,\"939\":5}}],[\"显式抛出一个异常\",{\"1\":{\"1897\":1}}],[\"显式转换\",{\"1\":{\"1293\":1}}],[\"显式差分法\",{\"1\":{\"928\":1}}],[\"显式差分法求解反应扩散方程\",{\"1\":{\"927\":1}}],[\"显示器\",{\"1\":{\"2207\":1}}],[\"显示窗口\",{\"1\":{\"2022\":1,\"2027\":1,\"2028\":1}}],[\"显示转换结果\",{\"1\":{\"1705\":1}}],[\"显示库存中的书籍\",{\"1\":{\"1661\":1}}],[\"显示书籍信息\",{\"1\":{\"1661\":1}}],[\"显示结果\",{\"1\":{\"1181\":1}}],[\"显示文件的内容\",{\"1\":{\"1126\":1}}],[\"显示文本\",{\"1\":{\"23\":1}}],[\"显示当前目录\",{\"1\":{\"1126\":1}}],[\"显示当前日期\",{\"1\":{\"1126\":1}}],[\"显示搜索路径\",{\"1\":{\"1126\":1}}],[\"显示增强后的图像\",{\"1\":{\"809\":1}}],[\"显示灰度图像\",{\"1\":{\"808\":1}}],[\"显示图像的基本信息\",{\"1\":{\"807\":1}}],[\"显示图像\",{\"1\":{\"807\":1}}],[\"显示\",{\"1\":{\"800\":1}}],[\"∂t∂u​=d∂x2∂2u​+ru\",{\"1\":{\"927\":1}}],[\"∂t∂u​=d∂x2∂2u​+r\",{\"1\":{\"926\":1}}],[\"∂x2∂2u​+∂y2∂2u​=0\",{\"1\":{\"892\":1}}],[\"∂x2​∂u​\",{\"1\":{\"880\":1}}],[\"∂x12​∂2u​\",{\"1\":{\"880\":1}}],[\"∂x1​∂u​\",{\"1\":{\"880\":1}}],[\"符号位\",{\"1\":{\"2154\":3}}],[\"符号位保持不变\",{\"1\":{\"1315\":1}}],[\"符号计算\",{\"0\":{\"1224\":1}}],[\"符号定义\",{\"0\":{\"916\":1}}],[\"符号1️⃣\",{\"0\":{\"12\":1}}],[\"πy\",{\"1\":{\"894\":1}}],[\"πx\",{\"1\":{\"888\":1,\"890\":1,\"904\":1,\"912\":1}}],[\"δ\",{\"1\":{\"892\":1}}],[\"δu=f\",{\"1\":{\"881\":1,\"892\":1}}],[\"δu=0\",{\"1\":{\"880\":1,\"881\":1,\"884\":1,\"892\":1}}],[\"处\",{\"1\":{\"1117\":1}}],[\"处设定初始温度分布为\",{\"1\":{\"890\":1,\"904\":1}}],[\"处理机\",{\"0\":{\"2194\":1}}],[\"处理客户端请求\",{\"1\":{\"1936\":1}}],[\"处理网络协议\",{\"1\":{\"1929\":1}}],[\"处理写入操作\",{\"1\":{\"1887\":1}}],[\"处理读取操作\",{\"1\":{\"1887\":1}}],[\"处理流\",{\"1\":{\"1868\":1}}],[\"处理注解\",{\"0\":{\"1846\":1}}],[\"处理集合中的多态对象\",{\"0\":{\"1542\":1}}],[\"处理异常的过程\",{\"1\":{\"1443\":1}}],[\"处理和恢复错误\",{\"1\":{\"1442\":1}}],[\"处理原始的字节数据\",{\"1\":{\"1431\":1}}],[\"处理字符数据\",{\"1\":{\"1431\":1}}],[\"处理各种不同的编程任务\",{\"1\":{\"1332\":1}}],[\"处理各种文件格式\",{\"1\":{\"249\":1}}],[\"处理结果集\",{\"0\":{\"1982\":1},\"1\":{\"1976\":1,\"1987\":1}}],[\"处理结果集等操作\",{\"1\":{\"1974\":1}}],[\"处理结果\",{\"1\":{\"1196\":1}}],[\"处理二值图像的形态特征\",{\"1\":{\"812\":1}}],[\"处理\",{\"1\":{\"794\":1,\"1178\":1,\"2156\":1}}],[\"处理综合评价数据时的注意事项\",{\"0\":{\"764\":1}}],[\"处理缺失值\",{\"1\":{\"532\":1}}],[\"处理输入数据\",{\"1\":{\"439\":1}}],[\"处理文件以及与其他程序通信的基本功能\",{\"1\":{\"259\":1}}],[\"处理数据并将结果保存到新文件中\",{\"1\":{\"1196\":1}}],[\"处理数据并写入到新的csv文件中\",{\"1\":{\"259\":1}}],[\"处理数据\",{\"1\":{\"259\":1,\"1892\":2}}],[\"处理json文件\",{\"0\":{\"258\":1}}],[\"处理csv文件\",{\"0\":{\"257\":1}}],[\"α\",{\"1\":{\"887\":1,\"890\":1,\"898\":1,\"904\":1}}],[\"αtt\",{\"1\":{\"884\":1}}],[\"扩散系数\",{\"1\":{\"927\":1}}],[\"扩散模型等\",{\"1\":{\"885\":1}}],[\"扩展精度浮点数使用\",{\"1\":{\"2154\":1}}],[\"扩展精度浮点数\",{\"1\":{\"2154\":1}}],[\"扩展困难\",{\"1\":{\"2015\":1}}],[\"扩展类\",{\"1\":{\"1508\":1}}],[\"扩展\",{\"0\":{\"691\":1},\"1\":{\"1104\":1,\"1161\":1}}],[\"扩展应用\",{\"0\":{\"652\":1,\"663\":1}}],[\"扩展了传统的线性回归模型\",{\"1\":{\"495\":1}}],[\"扩展一元线性回归\",{\"1\":{\"492\":1}}],[\"扩展和修改父类的行为\",{\"1\":{\"242\":1}}],[\"期权定价\",{\"1\":{\"885\":1}}],[\"期的生产量\",{\"1\":{\"873\":1}}],[\"期的库存量\",{\"1\":{\"873\":1}}],[\"期的被捕食者和捕食者的数量\",{\"1\":{\"871\":1}}],[\"期的存款金额\",{\"1\":{\"870\":1}}],[\"期的人口数量\",{\"1\":{\"869\":1}}],[\"热力图\",{\"1\":{\"1212\":1}}],[\"热力图等\",{\"1\":{\"763\":1}}],[\"热爱三农\",{\"1\":{\"1025\":1}}],[\"热爱祖国\",{\"1\":{\"1025\":1}}],[\"热爱和平的民族\",{\"1\":{\"992\":1}}],[\"热扩散系数\",{\"1\":{\"889\":1,\"903\":1}}],[\"热传导方程的形式为\",{\"1\":{\"887\":1}}],[\"热传导方程\",{\"0\":{\"898\":1},\"1\":{\"881\":1}}],[\"右除\",{\"1\":{\"1146\":1}}],[\"右端项\",{\"1\":{\"881\":1}}],[\"右移运算\",{\"1\":{\"1315\":1}}],[\"右移赋值\",{\"1\":{\"197\":1}}],[\"右移\",{\"1\":{\"196\":1,\"1149\":1,\"1315\":1}}],[\"泊松方程\",{\"1\":{\"881\":1,\"892\":1}}],[\"泊松分布等\",{\"1\":{\"495\":1}}],[\"引擎\",{\"0\":{\"1996\":1}}],[\"引入了一些新的并行处理数组的工具\",{\"1\":{\"1997\":1}}],[\"引入了全新的日期和时间api\",{\"1\":{\"1994\":1}}],[\"引入依赖\",{\"0\":{\"1920\":1,\"1924\":1}}],[\"引入的用于处理日期和时间的类库\",{\"1\":{\"2041\":1}}],[\"引入的一套新的\",{\"1\":{\"1878\":1}}],[\"引入的\",{\"1\":{\"1819\":1}}],[\"引导\",{\"1\":{\"1035\":1}}],[\"引力场等\",{\"1\":{\"881\":1}}],[\"引用的对象\",{\"1\":{\"1866\":1}}],[\"引用类型指向一个对象\",{\"1\":{\"1291\":1}}],[\"引用类型的变量非常类似于c\",{\"1\":{\"1291\":1}}],[\"引用类型\",{\"0\":{\"1291\":1}}],[\"引用\",{\"0\":{\"25\":1},\"1\":{\"1665\":1}}],[\"椭圆型偏微分方程\",{\"1\":{\"891\":1}}],[\"椭圆型偏微分\",{\"0\":{\"891\":1}}],[\"椭圆型\",{\"1\":{\"880\":1}}],[\"椭圆或任意形状的多边形\",{\"1\":{\"679\":1}}],[\"波速\",{\"1\":{\"911\":1}}],[\"波动方程\",{\"0\":{\"906\":1},\"1\":{\"881\":1}}],[\"波动\",{\"1\":{\"879\":1,\"885\":1}}],[\"波士顿房价数据集\",{\"1\":{\"497\":1,\"606\":1}}],[\"依赖注入\",{\"1\":{\"1847\":1}}],[\"依赖于本地操作系统的\",{\"1\":{\"2019\":1}}],[\"依赖于专家的主观判断\",{\"1\":{\"766\":1}}],[\"依赖于专家判断\",{\"1\":{\"754\":1}}],[\"依赖于参数设置\",{\"1\":{\"425\":1}}],[\"依次选择权重最小的边\",{\"1\":{\"964\":1}}],[\"依次选择每一个顶点作为中间顶点\",{\"1\":{\"960\":1}}],[\"依此类推\",{\"1\":{\"875\":1}}],[\"时才会加载\",{\"1\":{\"2013\":1}}],[\"时\",{\"1\":{\"1386\":1,\"1404\":2}}],[\"时的输出\",{\"1\":{\"1168\":1}}],[\"时终止\",{\"1\":{\"1167\":1}}],[\"时刻的药物浓度\",{\"1\":{\"872\":1}}],[\"时间效率\",{\"1\":{\"2157\":1}}],[\"时间离散点数\",{\"1\":{\"927\":1}}],[\"时间步长\",{\"1\":{\"889\":1,\"903\":1,\"911\":1,\"927\":1}}],[\"时间步数\",{\"1\":{\"889\":1,\"903\":1,\"911\":1}}],[\"时间区间长度\",{\"1\":{\"889\":1,\"890\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1,\"927\":1}}],[\"时间往前偏移50分钟\",{\"1\":{\"856\":1}}],[\"时间范围\",{\"1\":{\"853\":1}}],[\"时间的限制等\",{\"1\":{\"840\":1}}],[\"时间因素起作用\",{\"1\":{\"746\":1}}],[\"时间序列预测\",{\"1\":{\"442\":1}}],[\"时间序列分析在经济学\",{\"1\":{\"475\":1}}],[\"时间序列分析是一种专门用于分析时间序列数据的统计方法\",{\"1\":{\"475\":1}}],[\"时间序列分析\",{\"0\":{\"475\":1,\"488\":1},\"1\":{\"382\":1,\"631\":1,\"867\":1}}],[\"时间复杂度的增长速度较慢\",{\"1\":{\"2162\":1}}],[\"时间复杂度通常用大o符号表示\",{\"1\":{\"2162\":1}}],[\"时间复杂度比暴力法低\",{\"1\":{\"410\":1}}],[\"时间复杂度为o\",{\"1\":{\"410\":2}}],[\"时间复杂度为\",{\"1\":{\"397\":1,\"957\":1}}],[\"时间线包含\",{\"1\":{\"336\":1}}],[\"时间\",{\"1\":{\"69\":1,\"77\":1,\"336\":1,\"753\":1,\"757\":1,\"1964\":1}}],[\"药物在体内的浓度随时间变化可以用差分方程来描述\",{\"1\":{\"872\":1}}],[\"捕获组可以在匹配后用于提取信息\",{\"1\":{\"1955\":1}}],[\"捕获组\",{\"0\":{\"1956\":1},\"1\":{\"1947\":1}}],[\"捕获特定异常\",{\"1\":{\"1910\":1}}],[\"捕获到自定义异常\",{\"1\":{\"1909\":1}}],[\"捕获到数组索引越界异常\",{\"1\":{\"1901\":1}}],[\"捕获到算术异常\",{\"1\":{\"1901\":1,\"1902\":1}}],[\"捕获到异常\",{\"1\":{\"1898\":1,\"1899\":1,\"1901\":1,\"1908\":1}}],[\"捕获并处理异常\",{\"1\":{\"1898\":1}}],[\"捕获lambda表达式中的变量\",{\"0\":{\"1693\":1}}],[\"捕获\",{\"1\":{\"1443\":1}}],[\"捕食\",{\"1\":{\"871\":1}}],[\"捕捉到了训练数据中的噪声\",{\"1\":{\"533\":1}}],[\"银行存款的积累可以用差分方程来描述\",{\"1\":{\"870\":1}}],[\"代表性系统有windows\",{\"1\":{\"2190\":1}}],[\"代表一个窗口\",{\"1\":{\"2021\":1}}],[\"代表某个类的运行时类型\",{\"1\":{\"1827\":1}}],[\"代表\",{\"1\":{\"1681\":1}}],[\"代入非齐次方程\",{\"1\":{\"866\":1}}],[\"代码示例\",{\"0\":{\"1977\":1}}],[\"代码生成和处理\",{\"1\":{\"1847\":1}}],[\"代码更加简洁\",{\"1\":{\"1688\":1}}],[\"代码重用\",{\"1\":{\"1531\":1}}],[\"代码可以处理父类引用的不同子类对象\",{\"1\":{\"1531\":1}}],[\"代码的标准格式文件\",{\"1\":{\"1180\":1}}],[\"代码的语法不符合python的语法规则\",{\"1\":{\"245\":1}}],[\"代码展示了如何对音频信号进行下采样\",{\"1\":{\"948\":1}}],[\"代码后\",{\"1\":{\"727\":1,\"733\":1,\"739\":1}}],[\"代码运行后\",{\"1\":{\"690\":1}}],[\"代码解释\",{\"0\":{\"681\":1,\"689\":1,\"853\":1,\"857\":1,\"890\":1,\"896\":1,\"904\":1,\"912\":1}}],[\"代码说明\",{\"0\":{\"429\":1,\"435\":1,\"650\":1,\"662\":1,\"928\":1,\"1662\":1,\"2023\":1}}],[\"代码没有按预期工作\",{\"1\":{\"245\":1}}],[\"代码在运行时发生错误\",{\"1\":{\"245\":1}}],[\"代码内容\",{\"1\":{\"28\":1}}],[\"代码块外无法访问\",{\"1\":{\"1545\":1}}],[\"代码块内再嵌套一个分支语句\",{\"1\":{\"1163\":1}}],[\"代码块\",{\"0\":{\"28\":1,\"1544\":1},\"1\":{\"1489\":1,\"1544\":1,\"1898\":1,\"1899\":1}}],[\"代码\",{\"0\":{\"26\":1,\"726\":1,\"732\":1,\"738\":1},\"1\":{\"1706\":1,\"1893\":1}}],[\"齐次方程\",{\"1\":{\"866\":1}}],[\"齐次解与特解法\",{\"1\":{\"865\":1}}],[\"$100\",{\"1\":{\"1416\":1}}],[\"$123\",{\"1\":{\"1416\":1}}],[\"$salary\",{\"1\":{\"1276\":1}}],[\"$\",{\"1\":{\"866\":3,\"1109\":1,\"1276\":2,\"1305\":1,\"1412\":1,\"1416\":1,\"1418\":1,\"1947\":1}}],[\"$a\",{\"1\":{\"866\":1}}],[\"$$\",{\"1\":{\"34\":3}}],[\"先进先出\",{\"1\":{\"1758\":1}}],[\"先进性和工作量\",{\"1\":{\"1038\":1}}],[\"先执行循环体\",{\"1\":{\"1327\":1}}],[\"先使用后增加\",{\"1\":{\"1311\":1}}],[\"先增加后使用\",{\"1\":{\"1311\":1}}],[\"先入为主\",{\"0\":{\"1059\":1}}],[\"先求齐次解\",{\"1\":{\"865\":1}}],[\"先编写测试用例\",{\"1\":{\"247\":1}}],[\"项的值\",{\"1\":{\"863\":1}}],[\"项目管理\",{\"0\":{\"2056\":1},\"2\":{\"2062\":1}}],[\"项目概述\",{\"0\":{\"1660\":1}}],[\"项目\",{\"1\":{\"1038\":1,\"1920\":1}}],[\"项目选择\",{\"1\":{\"773\":1}}],[\"项目优选等\",{\"1\":{\"772\":1}}],[\"项目评估\",{\"1\":{\"766\":1}}],[\"项目评价\",{\"1\":{\"761\":1}}],[\"项目投资决策\",{\"1\":{\"755\":1}}],[\"项目2\",{\"1\":{\"21\":3,\"35\":1}}],[\"项目1\",{\"1\":{\"21\":3,\"35\":1}}],[\"控制对资源的访问\",{\"1\":{\"1971\":1}}],[\"控制台\",{\"1\":{\"1927\":1}}],[\"控制访问级别\",{\"1\":{\"1632\":1}}],[\"控制访问\",{\"1\":{\"1569\":1,\"1631\":1}}],[\"控制结构\",{\"1\":{\"1457\":1,\"2209\":1}}],[\"控制方法的访问范围\",{\"1\":{\"1335\":1}}],[\"控制循环的语句\",{\"0\":{\"1328\":1},\"1\":{\"1332\":1}}],[\"控制系统设计\",{\"1\":{\"1116\":1}}],[\"控制系统\",{\"1\":{\"862\":1,\"867\":1}}],[\"控制信号的传递强度\",{\"1\":{\"440\":1}}],[\"°c\",{\"1\":{\"856\":1}}],[\"搬走时的尸体温度等\",{\"1\":{\"857\":1}}],[\"搬走时间为8\",{\"1\":{\"856\":1}}],[\"搬走时间\",{\"1\":{\"856\":1}}],[\"搬走时测得尸体温度\",{\"1\":{\"855\":1}}],[\"法医测得的尸体温度\",{\"1\":{\"857\":1}}],[\"法医测得尸体温度\",{\"1\":{\"855\":1}}],[\"法医到达时的温度\",{\"1\":{\"856\":1}}],[\"法医到达时间为7\",{\"1\":{\"856\":1}}],[\"法医到达时间\",{\"1\":{\"856\":1}}],[\"法医到达时尸体温度\",{\"1\":{\"856\":1}}],[\"法医到达1小时后\",{\"1\":{\"855\":1}}],[\"法医到达现场时间\",{\"1\":{\"855\":1}}],[\"晚上\",{\"1\":{\"855\":2}}],[\"尸体搬走时温度\",{\"1\":{\"856\":1}}],[\"尸体搬走时间\",{\"1\":{\"855\":1}}],[\"尸体发现时间\",{\"1\":{\"855\":1}}],[\"尸体冷却常用的模型是newton冷却定律\",{\"1\":{\"854\":1}}],[\"要序列化的类必须实现\",{\"1\":{\"1862\":1}}],[\"要使用\",{\"1\":{\"1978\":1}}],[\"要使用反射\",{\"1\":{\"1827\":1}}],[\"要使用其他包中的类\",{\"1\":{\"1620\":1}}],[\"要么在方法签名中声明它们\",{\"1\":{\"1450\":1}}],[\"要有明确的应用价值\",{\"1\":{\"1038\":1}}],[\"要具备相应的技术要求和较充足的工作量\",{\"1\":{\"1037\":1}}],[\"要解决这个问题\",{\"1\":{\"854\":1}}],[\"要最小化的目标函数\",{\"1\":{\"435\":1}}],[\"康复率\",{\"1\":{\"852\":1,\"853\":1}}],[\"康复者比例\",{\"1\":{\"852\":1}}],[\"传统\",{\"1\":{\"1892\":1}}],[\"传统的\",{\"1\":{\"1888\":1}}],[\"传输层\",{\"1\":{\"2212\":1}}],[\"传输控制协议\",{\"1\":{\"1930\":1,\"1934\":1}}],[\"传输\",{\"1\":{\"1861\":1}}],[\"传递性\",{\"1\":{\"1668\":1,\"1676\":1}}],[\"传感器与现代检测技术\",{\"1\":{\"1040\":1}}],[\"传感器与测试技术\",{\"1\":{\"1040\":1}}],[\"传播率\",{\"1\":{\"852\":1,\"853\":1}}],[\"传染病模型\",{\"1\":{\"850\":1}}],[\"传染病传播等\",{\"1\":{\"849\":1}}],[\"失业率等随时间的变化\",{\"1\":{\"850\":1}}],[\"被广泛用于开发可重用的组件\",{\"1\":{\"1681\":1}}],[\"被继承的类\",{\"1\":{\"1508\":1}}],[\"被捕食模型\",{\"1\":{\"850\":1,\"871\":1}}],[\"被分配给任务\",{\"1\":{\"409\":1}}],[\"化学反应速率\",{\"1\":{\"849\":1}}],[\"化学\",{\"1\":{\"849\":1}}],[\"化工过程优化\",{\"1\":{\"716\":1}}],[\"海参轨迹追踪及生理特征信号识别的研究中\",{\"1\":{\"844\":1}}],[\"水平连接\",{\"1\":{\"1154\":1}}],[\"水平线和垂直线\",{\"1\":{\"409\":1}}],[\"水平线\",{\"1\":{\"28\":1}}],[\"水土保持学报\",{\"1\":{\"1040\":1}}],[\"水波等\",{\"1\":{\"881\":1}}],[\"水质分析\",{\"1\":{\"844\":1}}],[\"≤bi​\",{\"1\":{\"842\":2}}],[\"≤0\",{\"1\":{\"832\":1}}],[\"就绪\",{\"1\":{\"1964\":1}}],[\"就需要进行向下转型\",{\"1\":{\"1542\":1}}],[\"就会导致这个异常\",{\"1\":{\"1539\":1}}],[\"就是没有其他解在不使一个目标变差的情况下使得其他目标变得更好\",{\"1\":{\"840\":1}}],[\"就业效应\",{\"1\":{\"761\":1}}],[\"β\",{\"1\":{\"837\":3}}],[\"σ0​\",{\"1\":{\"836\":1}}],[\"σi​\",{\"1\":{\"836\":1}}],[\"σ=n−11​xtx\",{\"1\":{\"616\":1}}],[\"拉丁语词根\",{\"1\":{\"1053\":1}}],[\"拉格朗日插值\",{\"0\":{\"937\":1},\"1\":{\"937\":1}}],[\"拉格朗日插值公式\",{\"1\":{\"933\":1}}],[\"拉格朗日乘数法\",{\"1\":{\"834\":1}}],[\"拉普拉斯变换\",{\"0\":{\"924\":1},\"1\":{\"924\":1}}],[\"拉普拉斯方程和泊松方程\",{\"0\":{\"892\":1}}],[\"拉普拉斯方程\",{\"1\":{\"881\":1,\"892\":1}}],[\"拉普拉斯滤波\",{\"1\":{\"787\":1}}],[\"罚函数法\",{\"1\":{\"834\":1}}],[\"梯度下降法\",{\"1\":{\"834\":1}}],[\"梯度提升决策树\",{\"1\":{\"597\":1}}],[\"梯度提升机\",{\"0\":{\"609\":1},\"1\":{\"593\":1}}],[\"凸规划问题通常较易求解\",{\"1\":{\"833\":1}}],[\"凸规划问题\",{\"1\":{\"833\":1}}],[\"膨胀图像\",{\"1\":{\"825\":1}}],[\"膨胀与腐蚀\",{\"0\":{\"825\":1}}],[\"膨胀和腐蚀\",{\"1\":{\"789\":1}}],[\"灰度转换\",{\"0\":{\"818\":1}}],[\"灰色关联度法\",{\"1\":{\"763\":1}}],[\"灰色关联分析法\",{\"1\":{\"754\":1}}],[\"灰色关联分析用于评估不同因素对系统行为的影响\",{\"1\":{\"638\":1}}],[\"灰色系统\",{\"1\":{\"633\":1}}],[\"灰色系统理论由中国学者邓聚龙在20世纪80年代提出\",{\"1\":{\"633\":1}}],[\"灰色预测的核心思想是利用有限的信息生成差分方程\",{\"1\":{\"632\":1}}],[\"灰色预测模型是一种适用于小样本\",{\"1\":{\"632\":1}}],[\"灰色预测模型\",{\"0\":{\"632\":1}}],[\"灰色预测\",{\"1\":{\"631\":1}}],[\"周长等\",{\"1\":{\"816\":1}}],[\"仿射变换等\",{\"1\":{\"815\":1}}],[\"仿真模型\",{\"1\":{\"382\":1}}],[\"闭运算等\",{\"1\":{\"825\":1}}],[\"闭运算等形态学操作\",{\"1\":{\"812\":1}}],[\"闭包示例\",{\"1\":{\"215\":1}}],[\"闭包是指一个函数返回另一个函数\",{\"1\":{\"215\":1}}],[\"腐蚀图像\",{\"1\":{\"825\":1}}],[\"腐蚀\",{\"1\":{\"812\":1,\"825\":1}}],[\"都会正确释放资源\",{\"1\":{\"1910\":1}}],[\"都会执行\",{\"1\":{\"1898\":1}}],[\"都会执行的代码块\",{\"1\":{\"1897\":1}}],[\"都会输出\",{\"1\":{\"1546\":1}}],[\"都实现了\",{\"1\":{\"1812\":1}}],[\"都可以通过\",{\"1\":{\"803\":1}}],[\"都是关键字\",{\"1\":{\"139\":1}}],[\"许多\",{\"1\":{\"1832\":1}}],[\"许多框架\",{\"1\":{\"1649\":1}}],[\"许多软件和工具可以用于求解非线性规划问题\",{\"1\":{\"838\":1}}],[\"许多图像处理操作\",{\"1\":{\"803\":1}}],[\"许多数学软件如matlab\",{\"1\":{\"718\":1}}],[\"虽然\",{\"1\":{\"1776\":1,\"1779\":1}}],[\"虽然内部类可以提高代码的封装性\",{\"1\":{\"1600\":1}}],[\"虽然数组大小在声明时是固定的\",{\"1\":{\"1366\":1}}],[\"虽然它们的名字相似\",{\"1\":{\"1517\":1}}],[\"虽然它主要用于数据可视化\",{\"1\":{\"804\":1}}],[\"虽然它不是专门用于图像处理的\",{\"1\":{\"803\":1}}],[\"虽然使用with语句可以自动关闭文件\",{\"1\":{\"254\":1}}],[\"剪裁\",{\"1\":{\"800\":1,\"801\":1}}],[\"功能强大\",{\"1\":{\"1914\":1}}],[\"功能简单\",{\"1\":{\"1914\":1}}],[\"功能的类\",{\"1\":{\"1630\":1}}],[\"功能\",{\"0\":{\"2132\":1},\"1\":{\"800\":1,\"801\":1,\"802\":1,\"803\":1,\"804\":1,\"805\":1,\"807\":1,\"808\":1,\"809\":1,\"810\":1,\"811\":1,\"812\":1,\"813\":1,\"814\":1,\"815\":1,\"816\":1}}],[\"功能测试\",{\"1\":{\"247\":1}}],[\"修饰符的详细解释\",{\"1\":{\"1478\":1}}],[\"修饰符的组合\",{\"0\":{\"1309\":1}}],[\"修饰符可以组合使用\",{\"1\":{\"1309\":1,\"1495\":1}}],[\"修饰符主要分为两大类\",{\"1\":{\"1306\":1}}],[\"修饰符\",{\"0\":{\"1277\":1,\"1306\":1},\"1\":{\"1306\":1,\"1471\":1}}],[\"修复\",{\"1\":{\"795\":1}}],[\"修改完成后再将引用指向新副本\",{\"1\":{\"1753\":1}}],[\"修改私有字段\",{\"1\":{\"1651\":1}}],[\"修改字段值\",{\"1\":{\"1642\":1,\"1655\":1}}],[\"修改字典元素\",{\"0\":{\"170\":1}}],[\"修改第三个元素的值\",{\"1\":{\"1353\":1}}],[\"修改向量元素\",{\"1\":{\"1155\":1}}],[\"修改数组元素\",{\"1\":{\"1154\":1}}],[\"修改矩阵中的元素\",{\"1\":{\"1138\":1}}],[\"修改变量的值\",{\"1\":{\"180\":1}}],[\"修改现有键的值\",{\"1\":{\"170\":1}}],[\"修改列表中的元素\",{\"1\":{\"143\":1}}],[\"修改列表元素\",{\"0\":{\"143\":1}}],[\"滤镜应用\",{\"1\":{\"801\":1}}],[\"滤镜应用等\",{\"1\":{\"794\":1,\"796\":1}}],[\"滤波器设计\",{\"1\":{\"867\":1}}],[\"滤波\",{\"1\":{\"787\":1,\"800\":1,\"803\":1}}],[\"双重检查锁在确保线程安全的同时\",{\"1\":{\"2012\":1}}],[\"双重检查锁\",{\"0\":{\"2012\":1}}],[\"双重指数平滑和霍尔特\",{\"1\":{\"631\":1}}],[\"双向\",{\"1\":{\"1892\":1}}],[\"双向链表\",{\"1\":{\"1750\":1,\"1752\":1}}],[\"双向链表实现的队列\",{\"1\":{\"1739\":1}}],[\"双精度浮点数使用\",{\"1\":{\"2154\":1}}],[\"双精度浮点数\",{\"1\":{\"2154\":1}}],[\"双精度浮点缓冲区\",{\"1\":{\"1884\":1}}],[\"双精度数值数据\",{\"1\":{\"1127\":1}}],[\"双端队列\",{\"1\":{\"1739\":1,\"1776\":1,\"2038\":1}}],[\"双引号字符\",{\"1\":{\"1292\":1}}],[\"双线性插值和双三次插值等\",{\"1\":{\"947\":1}}],[\"双线性插值\",{\"1\":{\"933\":1,\"947\":1}}],[\"双曲型偏微分方程\",{\"1\":{\"905\":1}}],[\"双曲型偏微分\",{\"0\":{\"905\":1}}],[\"双曲型\",{\"1\":{\"880\":1}}],[\"双三次插值\",{\"1\":{\"791\":1,\"947\":1}}],[\"噪声等引起的图像退化\",{\"1\":{\"791\":1}}],[\"噪声数据可能严重影响结果\",{\"1\":{\"546\":1}}],[\"维护性\",{\"1\":{\"1650\":1}}],[\"维纳滤波等方法恢复因模糊\",{\"1\":{\"791\":1}}],[\"维空间投影到2d空间进行可视化\",{\"1\":{\"618\":1}}],[\"维空间中\",{\"1\":{\"614\":1}}],[\"纹理等特征\",{\"1\":{\"813\":1}}],[\"纹理分析\",{\"1\":{\"790\":1}}],[\"纹理生成\",{\"1\":{\"677\":1}}],[\"填补空洞或突出物体的形态特征\",{\"1\":{\"789\":1}}],[\"填充和裁剪等步骤\",{\"1\":{\"685\":1}}],[\"填充空值\",{\"1\":{\"458\":1}}],[\"点乘和叉乘\",{\"1\":{\"1221\":1}}],[\"点击我\",{\"1\":{\"2022\":1,\"2031\":1,\"2033\":1}}],[\"点击\",{\"1\":{\"1186\":1}}],[\"点\",{\"1\":{\"788\":1}}],[\"点云数据可以用于重建曲面模型或拟合几何形状\",{\"1\":{\"674\":1}}],[\"点云模型使用大量的离散点来表示三维形状\",{\"1\":{\"674\":1}}],[\"种子\",{\"1\":{\"788\":1}}],[\"种群增长率\",{\"1\":{\"927\":1}}],[\"种群动态\",{\"1\":{\"885\":1}}],[\"种群初始化\",{\"1\":{\"435\":1}}],[\"种群大小\",{\"1\":{\"434\":1}}],[\"种群\",{\"1\":{\"432\":1,\"433\":1}}],[\"区分字段和参数\",{\"1\":{\"1505\":1}}],[\"区域生长或分水岭算法对图像进行分割\",{\"1\":{\"811\":1}}],[\"区域增长\",{\"1\":{\"788\":1}}],[\"区间归一化\",{\"1\":{\"763\":1}}],[\"阈值分割\",{\"1\":{\"788\":1,\"811\":1}}],[\"去除重复元素\",{\"1\":{\"1150\":1}}],[\"去除图像中的噪声和模糊\",{\"1\":{\"814\":1}}],[\"去除噪声或增强边缘\",{\"1\":{\"787\":1}}],[\"去噪等\",{\"1\":{\"802\":1}}],[\"去噪和超分辨率重建等\",{\"1\":{\"792\":1}}],[\"去模糊\",{\"1\":{\"791\":1}}],[\"去重操作\",{\"1\":{\"1793\":1}}],[\"去重\",{\"0\":{\"165\":1},\"1\":{\"1781\":1}}],[\"傅里叶变换\",{\"0\":{\"925\":1},\"1\":{\"786\":1,\"883\":1,\"925\":1}}],[\"傅里叶变换和信号处理等\",{\"1\":{\"460\":1}}],[\"黄色和黑色\",{\"1\":{\"785\":1}}],[\"青色\",{\"1\":{\"785\":1}}],[\"红黑树或链表的实现\",{\"1\":{\"1782\":1}}],[\"红色\",{\"1\":{\"1210\":1}}],[\"红色革命\",{\"2\":{\"89\":1}}],[\"红绿蓝\",{\"1\":{\"785\":1}}],[\"颜色\",{\"1\":{\"1273\":1}}],[\"颜色通道处理等\",{\"1\":{\"803\":1}}],[\"颜色空间处理\",{\"1\":{\"802\":1}}],[\"颜色调整等操作\",{\"1\":{\"801\":1}}],[\"颜色模型\",{\"1\":{\"785\":1}}],[\"颜色默认是浅灰色\",{\"1\":{\"689\":1}}],[\"参与社区\",{\"1\":{\"2217\":1}}],[\"参考书类referencebook由于不实现borrowable接口\",{\"1\":{\"1662\":1}}],[\"参考书类\",{\"1\":{\"1661\":1}}],[\"参考书无法被借出\",{\"1\":{\"1660\":1}}],[\"参考文献数据文件\",{\"1\":{\"1110\":1}}],[\"参考文献\",{\"1\":{\"780\":1}}],[\"参数和返回值的信息等\",{\"1\":{\"2002\":1}}],[\"参数和函数体\",{\"1\":{\"210\":1}}],[\"参数名\",{\"1\":{\"2001\":1}}],[\"参数化测试允许使用不同的参数多次运行同一个测试方法\",{\"1\":{\"1857\":1}}],[\"参数化测试\",{\"0\":{\"1857\":1},\"1\":{\"1859\":1}}],[\"参数部分\",{\"1\":{\"1685\":1}}],[\"参数的数量\",{\"1\":{\"1522\":1}}],[\"参数的类型\",{\"1\":{\"1476\":1}}],[\"参数类型或参数个数不同\",{\"1\":{\"1343\":1}}],[\"参数传递\",{\"0\":{\"1338\":1},\"1\":{\"1348\":1}}],[\"参数列表和返回类型\",{\"1\":{\"1515\":1,\"1519\":1}}],[\"参数列表的定义类似于变量的声明\",{\"1\":{\"1337\":1}}],[\"参数列表\",{\"1\":{\"1335\":1,\"1522\":1}}],[\"参数\",{\"1\":{\"852\":1,\"853\":1,\"2000\":1}}],[\"参数识别与模型求解\",{\"1\":{\"780\":1}}],[\"参数设置\",{\"1\":{\"680\":1,\"688\":1,\"889\":1,\"890\":1,\"895\":1,\"896\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1,\"927\":1,\"928\":1}}],[\"参数曲面\",{\"1\":{\"672\":1}}],[\"参数估计\",{\"1\":{\"634\":1}}],[\"参数调优等\",{\"1\":{\"437\":1}}],[\"放在正文当中论述\",{\"1\":{\"780\":1}}],[\"放松lda中对相同协方差矩阵的假设\",{\"1\":{\"521\":1}}],[\"摘要\",{\"1\":{\"780\":1}}],[\"再次查看队列头部元素\",{\"1\":{\"1762\":1}}],[\"再检查条件\",{\"1\":{\"1327\":1}}],[\"再加上花括号内的参数构成的\",{\"1\":{\"1106\":1}}],[\"再结合初始条件和边界条件\",{\"1\":{\"884\":1}}],[\"再通过逆变换得到解\",{\"1\":{\"883\":1}}],[\"再通过熵权法计算客观权重\",{\"1\":{\"775\":1}}],[\"再求特解\",{\"1\":{\"865\":1}}],[\"再编写实现代码\",{\"1\":{\"247\":1}}],[\"获胜次数最多的方案即为最优方案\",{\"1\":{\"774\":1}}],[\"获取指定主机的\",{\"1\":{\"1933\":1}}],[\"获取指定字段的值\",{\"1\":{\"1402\":1}}],[\"获取本地主机的\",{\"1\":{\"1933\":1}}],[\"获取主机的\",{\"0\":{\"1933\":1}}],[\"获取所有\",{\"1\":{\"1933\":1}}],[\"获取所有构造方法\",{\"1\":{\"1831\":1}}],[\"获取所有方法\",{\"1\":{\"1831\":1}}],[\"获取所有字段\",{\"1\":{\"1831\":1}}],[\"获取键对应的值\",{\"1\":{\"1801\":1}}],[\"获取对象的运行时类信息\",{\"1\":{\"1678\":1}}],[\"获取对象的类信息\",{\"1\":{\"1670\":1}}],[\"获取书籍标题\",{\"1\":{\"1661\":1}}],[\"获取\",{\"0\":{\"1827\":1},\"1\":{\"1651\":1,\"1814\":1,\"1823\":1,\"1883\":1}}],[\"获取另一个类\",{\"1\":{\"1507\":1}}],[\"获取表示当前日期和时间的date对象\",{\"1\":{\"1402\":1}}],[\"获取时间戳\",{\"1\":{\"1401\":1}}],[\"获取时间和温度数据\",{\"1\":{\"856\":1}}],[\"获取字段的值\",{\"1\":{\"1829\":1}}],[\"获取字符串长度\",{\"1\":{\"1370\":1}}],[\"获取字典的所有值\",{\"1\":{\"172\":1}}],[\"获取字典的所有键值对\",{\"1\":{\"172\":1}}],[\"获取字典的所有键\",{\"1\":{\"172\":1}}],[\"获取更多信息\",{\"1\":{\"1212\":1}}],[\"获取二维数组的第二行第三列的元素\",{\"1\":{\"1154\":1}}],[\"获取一维数组的第三个元素\",{\"1\":{\"1154\":1}}],[\"获取矩阵的大小\",{\"1\":{\"1141\":1,\"1144\":1}}],[\"获取图像尺寸\",{\"1\":{\"947\":1}}],[\"获取图的邻接矩阵\",{\"1\":{\"393\":1,\"955\":1}}],[\"获取带有标签的训练数据\",{\"1\":{\"532\":1}}],[\"获取数值输入\",{\"1\":{\"262\":1}}],[\"获取用户输入\",{\"1\":{\"262\":1}}],[\"获取当前日期时间\",{\"1\":{\"2047\":1}}],[\"获取当前日期\",{\"1\":{\"2047\":1}}],[\"获取当前日期和时间\",{\"1\":{\"234\":1}}],[\"获取当前时间的日历对象\",{\"1\":{\"1402\":1}}],[\"获取当前工作目录\",{\"1\":{\"232\":1,\"255\":1}}],[\"获取命令行参数\",{\"1\":{\"233\":1}}],[\"获取集合长度\",{\"1\":{\"162\":1}}],[\"获取元素\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"获取元素的索引\",{\"1\":{\"155\":1}}],[\"获取元组长度\",{\"1\":{\"155\":1}}],[\"获取元组的一部分\",{\"1\":{\"152\":1}}],[\"获取列表长度\",{\"1\":{\"147\":1}}],[\"获取列表的一部分\",{\"1\":{\"144\":1}}],[\"战略规划\",{\"1\":{\"772\":1}}],[\"效率评估方法主要分为两种\",{\"1\":{\"2157\":1}}],[\"效率较低\",{\"1\":{\"1747\":1,\"1750\":1,\"1892\":1}}],[\"效率分析等\",{\"1\":{\"771\":1}}],[\"效率等\",{\"1\":{\"757\":1}}],[\"绩效评价\",{\"1\":{\"771\":1}}],[\"绩效评估\",{\"1\":{\"767\":1}}],[\"隶属函数的选取对结果有较大影响\",{\"1\":{\"770\":1}}],[\"考虑使用自定义异常\",{\"1\":{\"1910\":1}}],[\"考虑所有用于\",{\"1\":{\"1676\":1}}],[\"考虑固定的需求和生产\",{\"1\":{\"873\":1}}],[\"考虑\",{\"1\":{\"866\":2}}],[\"考虑了各指标的相对距离\",{\"1\":{\"768\":1}}],[\"考虑到各指标的相对距离\",{\"1\":{\"754\":1}}],[\"离散化后求解\",{\"1\":{\"883\":1}}],[\"离散余弦变换\",{\"1\":{\"786\":1}}],[\"离散度越大\",{\"1\":{\"767\":1}}],[\"离散事件模拟\",{\"1\":{\"382\":1}}],[\"企业级开发和数据库编程的基础\",{\"1\":{\"1987\":1}}],[\"企业级开发\",{\"1\":{\"1679\":1}}],[\"企业的库存管理也可以用差分方程来建模\",{\"1\":{\"873\":1}}],[\"企业决策\",{\"1\":{\"766\":1}}],[\"企业生产优化\",{\"1\":{\"706\":1}}],[\"敏感性分析\",{\"1\":{\"764\":1}}],[\"避免重复创建\",{\"1\":{\"2015\":1}}],[\"避免创建多余的对象\",{\"1\":{\"2015\":1}}],[\"避免出现nullpointerexception\",{\"1\":{\"1995\":1}}],[\"避免记录敏感信息\",{\"1\":{\"1927\":1}}],[\"避免在日志语句中进行字符串拼接\",{\"1\":{\"1927\":1}}],[\"避免在循环中使用异常控制流\",{\"1\":{\"1910\":1}}],[\"避免使用通用的\",{\"1\":{\"1910\":1}}],[\"避免使用易变的字段\",{\"1\":{\"1676\":1}}],[\"避免包含敏感信息\",{\"1\":{\"1675\":1}}],[\"避免死锁和线程安全问题\",{\"1\":{\"1673\":1}}],[\"避免直接操作原始对象\",{\"1\":{\"1671\":1}}],[\"避免命名冲突\",{\"1\":{\"1616\":1,\"1632\":1}}],[\"避免内存泄漏\",{\"1\":{\"1600\":1}}],[\"避免滥用\",{\"1\":{\"1600\":1}}],[\"避免过多或过少的日志信息\",{\"1\":{\"1927\":1}}],[\"避免过度使用异常\",{\"1\":{\"1452\":1}}],[\"避免过拟合\",{\"1\":{\"493\":1}}],[\"避免因数据质量问题导致评价结果偏差\",{\"1\":{\"764\":1}}],[\"柱状图\",{\"1\":{\"763\":1,\"1203\":1}}],[\"报告等形式呈现\",{\"1\":{\"763\":1}}],[\"得\",{\"1\":{\"866\":2}}],[\"得分最高的方案通常为最优方案\",{\"1\":{\"763\":1}}],[\"得到一系列特解的叠加形式\",{\"1\":{\"884\":1}}],[\"得到两个常微分方程\",{\"1\":{\"884\":2}}],[\"得到\",{\"1\":{\"866\":1,\"884\":1}}],[\"得到温度随时间的变化\",{\"1\":{\"857\":1}}],[\"得到各方案的综合模糊评价值\",{\"1\":{\"763\":1}}],[\"得到的结果如下\",{\"1\":{\"727\":1,\"733\":1,\"739\":1}}],[\"得到原始数据的预测值\",{\"1\":{\"634\":1}}],[\"得到预测序列\",{\"1\":{\"634\":1}}],[\"得到序列\",{\"1\":{\"634\":1}}],[\"​=λ\",{\"1\":{\"884\":1}}],[\"​=−λ\",{\"1\":{\"884\":2}}],[\"​=xx\",{\"1\":{\"884\":1}}],[\"​\",{\"1\":{\"763\":1}}],[\"综合了包\",{\"1\":{\"1653\":1}}],[\"综合示例\",{\"0\":{\"1427\":1}}],[\"综合绩效管理\",{\"1\":{\"775\":1}}],[\"综合考虑了主客观因素\",{\"1\":{\"775\":1}}],[\"综合计算等多个环节\",{\"1\":{\"762\":1}}],[\"综合评价可以更加客观\",{\"1\":{\"764\":1}}],[\"综合评价计算\",{\"1\":{\"763\":1}}],[\"综合评价数据处理的主要步骤\",{\"0\":{\"763\":1}}],[\"综合评价数据处理是指在综合评价过程中\",{\"1\":{\"762\":1}}],[\"综合评价数据处理\",{\"0\":{\"762\":1}}],[\"综合评价指标的选择和权重分配直接影响评价结果\",{\"1\":{\"761\":1}}],[\"综合评价指标的应用实例\",{\"0\":{\"761\":1}}],[\"综合评价指标的权重确定\",{\"0\":{\"760\":1}}],[\"综合评价指标的标准化\",{\"0\":{\"759\":1}}],[\"综合评价指标的确定方法\",{\"0\":{\"758\":1}}],[\"综合评价指标的分类\",{\"0\":{\"757\":1}}],[\"综合评价指标通常可以根据不同的性质和用途进行分类\",{\"1\":{\"757\":1}}],[\"综合评价指标是用于评估和比较不同方案或选项的标准或尺度\",{\"1\":{\"756\":1}}],[\"综合评价指标\",{\"0\":{\"756\":1}}],[\"综合评价\",{\"0\":{\"752\":1},\"1\":{\"753\":1}}],[\"综合评价方法能够帮助决策者在复杂的多指标条件下做出合理的决策\",{\"1\":{\"755\":1}}],[\"综合评价方法的应用\",{\"0\":{\"755\":1}}],[\"综合评价方法的主要步骤\",{\"0\":{\"753\":1}}],[\"综合评价方法\",{\"0\":{\"751\":1},\"1\":{\"378\":1,\"752\":1}}],[\"赋值\",{\"1\":{\"1312\":1}}],[\"赋值运算符用于将值赋给变量\",{\"1\":{\"1312\":1}}],[\"赋值运算符\",{\"0\":{\"197\":1,\"1312\":1}}],[\"赋权\",{\"1\":{\"762\":1}}],[\"政策\",{\"1\":{\"1025\":1}}],[\"政策评价等\",{\"1\":{\"773\":1}}],[\"政策评估\",{\"1\":{\"761\":1}}],[\"政策制定\",{\"1\":{\"772\":1}}],[\"政策分析\",{\"1\":{\"766\":1}}],[\"政治学\",{\"1\":{\"744\":1,\"747\":1}}],[\"竞争力\",{\"1\":{\"761\":1}}],[\"竞赛规则\",{\"1\":{\"379\":1}}],[\"极大地提高了\",{\"1\":{\"1886\":1}}],[\"极值标准化\",{\"1\":{\"759\":1,\"763\":1}}],[\"极限梯度提升\",{\"1\":{\"593\":1,\"597\":1}}],[\"德尔菲法\",{\"1\":{\"758\":1}}],[\"专注于测试软件的最小可测试单元\",{\"1\":{\"1849\":1}}],[\"专注于照片的组织和处理\",{\"1\":{\"795\":1}}],[\"专门用于枚举类型的集合\",{\"1\":{\"1784\":1}}],[\"专门用于统计分析和数据挖掘\",{\"1\":{\"383\":1}}],[\"专业名词学习\",{\"0\":{\"1054\":1}}],[\"专业学位研究生应尽早确定研究课题\",{\"1\":{\"1038\":1}}],[\"专业学位研究生在学期间\",{\"1\":{\"1035\":1}}],[\"专业学位研究生的最长学习年限\",{\"1\":{\"1026\":1}}],[\"专业实践考核\",{\"1\":{\"1035\":1}}],[\"专业实践具体要求\",{\"1\":{\"1035\":1}}],[\"专业实践工作经考核通过后\",{\"1\":{\"1035\":1}}],[\"专业实践是专业学位研究生重要的培养环节\",{\"1\":{\"1035\":1}}],[\"专业实践\",{\"0\":{\"1035\":1}}],[\"专业实践6学分\",{\"1\":{\"1030\":1}}],[\"专业实践和论文指导等环节的工作\",{\"1\":{\"1028\":1}}],[\"专业实践和学位论文为专业学位研究生培养的三个主要环节\",{\"1\":{\"1028\":1}}],[\"专业实践可以在实习单位或实践场所完成\",{\"1\":{\"1028\":1}}],[\"专业方向\",{\"0\":{\"1027\":1}}],[\"专业英语\",{\"2\":{\"1015\":1,\"1021\":1}}],[\"专业的图像编辑软件\",{\"1\":{\"795\":1}}],[\"专家打分法\",{\"1\":{\"763\":1}}],[\"专家咨询法\",{\"1\":{\"758\":1}}],[\"污染等\",{\"1\":{\"757\":1}}],[\"污染排放量\",{\"1\":{\"757\":1}}],[\"满意度\",{\"1\":{\"757\":1}}],[\"核心\",{\"0\":{\"2135\":1}}],[\"核心类库主要位于\",{\"1\":{\"2036\":1}}],[\"核心类库\",{\"0\":{\"2036\":1}}],[\"核心库中最常用的部分之一\",{\"1\":{\"1742\":1}}],[\"核心指标\",{\"1\":{\"757\":1}}],[\"核心概念\",{\"0\":{\"242\":1}}],[\"技术对社会的影响\",{\"1\":{\"2216\":1}}],[\"技术标准等作为主要内容\",{\"1\":{\"1038\":1}}],[\"技术选择\",{\"1\":{\"769\":1}}],[\"技术创新\",{\"1\":{\"761\":1}}],[\"技术性\",{\"1\":{\"761\":1}}],[\"技术性指标\",{\"1\":{\"757\":1}}],[\"技术扩散等\",{\"1\":{\"636\":1}}],[\"风险评估等\",{\"1\":{\"885\":1}}],[\"风险评估\",{\"1\":{\"770\":1}}],[\"风险等指标来评估政策的可行性和影响\",{\"1\":{\"761\":1}}],[\"风险\",{\"1\":{\"757\":2}}],[\"风险管理\",{\"1\":{\"534\":1}}],[\"产生不同的行为\",{\"1\":{\"1525\":1}}],[\"产量等\",{\"1\":{\"757\":1}}],[\"产品\",{\"1\":{\"1038\":1}}],[\"产品选型等\",{\"1\":{\"766\":1}}],[\"产品评估\",{\"1\":{\"761\":1,\"773\":1}}],[\"产品c\",{\"1\":{\"730\":1}}],[\"产品b\",{\"1\":{\"730\":1}}],[\"产品a\",{\"1\":{\"730\":1}}],[\"产品设计\",{\"1\":{\"671\":1,\"769\":1}}],[\"产品生命周期预测等\",{\"1\":{\"636\":1}}],[\"定性指标\",{\"1\":{\"757\":1}}],[\"定量指标\",{\"1\":{\"757\":1}}],[\"定义正则表达式\",{\"1\":{\"1949\":1}}],[\"定义注解可以使用的地方\",{\"1\":{\"1845\":1}}],[\"定义注解的生命周期\",{\"1\":{\"1845\":1}}],[\"定义注解\",{\"1\":{\"1844\":1}}],[\"定义类时使用泛型参数\",{\"1\":{\"1835\":1}}],[\"定义基类book\",{\"1\":{\"1661\":1}}],[\"定义匿名内部类\",{\"0\":{\"1597\":1}}],[\"定义局部内部类\",{\"0\":{\"1594\":1}}],[\"定义静态内部类\",{\"0\":{\"1591\":1}}],[\"定义成员内部类\",{\"0\":{\"1588\":1}}],[\"定义规范\",{\"1\":{\"1585\":1}}],[\"定义了网络通信的规则和格式\",{\"1\":{\"1930\":1}}],[\"定义了一组对象的操作\",{\"1\":{\"1735\":1}}],[\"定义了一些通用的转换方法\",{\"1\":{\"1387\":1}}],[\"定义了对象的属性和行为\",{\"1\":{\"1710\":1}}],[\"定义了要搜索的文本模式\",{\"1\":{\"1410\":1}}],[\"定义了我们要最小化的目标函数\",{\"1\":{\"429\":1}}],[\"定义方法时使用泛型参数\",{\"1\":{\"1835\":1}}],[\"定义方法\",{\"0\":{\"1335\":1}}],[\"定义方程\",{\"1\":{\"923\":1}}],[\"定义符号表达式\",{\"1\":{\"1224\":1}}],[\"定义一个包\",{\"1\":{\"1654\":1}}],[\"定义一个接口\",{\"1\":{\"1498\":1,\"1661\":1}}],[\"定义一个类\",{\"1\":{\"1497\":1}}],[\"定义一个\",{\"1\":{\"1474\":1}}],[\"定义一个抽象类或抽象方法\",{\"1\":{\"1501\":1}}],[\"定义一个抽象类\",{\"1\":{\"1473\":1}}],[\"定义一个字符类\",{\"1\":{\"1412\":1}}],[\"定义一个变量\",{\"1\":{\"1191\":1}}],[\"定义一个函数可以接受任意数量的输入参数\",{\"1\":{\"1178\":1}}],[\"定义一个函数同时返回两个输出\",{\"1\":{\"1173\":1}}],[\"定义一个简单的加法函数\",{\"1\":{\"1172\":1}}],[\"定义一个简单的装饰器\",{\"1\":{\"226\":1}}],[\"定义矩阵\",{\"1\":{\"1130\":1}}],[\"定义波速\",{\"1\":{\"912\":1}}],[\"定义区域长度\",{\"1\":{\"896\":1}}],[\"定义冷却定律\",{\"1\":{\"857\":1}}],[\"定义冷却常数\",{\"1\":{\"856\":1}}],[\"定义评估的时间点\",{\"1\":{\"853\":1}}],[\"定义时间范围\",{\"1\":{\"852\":1,\"853\":2,\"856\":1}}],[\"定义sir模型的微分方程\",{\"1\":{\"853\":1}}],[\"定义sir模型\",{\"1\":{\"852\":1,\"853\":1}}],[\"定义城市数量和距离矩阵\",{\"1\":{\"738\":1,\"740\":1}}],[\"定义整数约束\",{\"1\":{\"728\":1,\"734\":1}}],[\"定义整数约束的索引\",{\"1\":{\"726\":1,\"732\":1,\"738\":1}}],[\"定义约束矩阵\",{\"1\":{\"738\":1,\"740\":1}}],[\"定义约束\",{\"1\":{\"728\":1,\"734\":1}}],[\"定义不等式约束的系数矩阵\",{\"1\":{\"726\":1,\"732\":1}}],[\"定义变量\",{\"1\":{\"1181\":2}}],[\"定义变量的上下界\",{\"1\":{\"726\":1,\"728\":1,\"732\":1,\"734\":1,\"738\":1,\"740\":1}}],[\"定义变量和目标函数\",{\"1\":{\"700\":1}}],[\"定义变量并赋值\",{\"1\":{\"180\":1}}],[\"定义路径曲线\",{\"1\":{\"679\":1,\"680\":1}}],[\"定义截面曲线\",{\"1\":{\"679\":1,\"680\":1}}],[\"定义lstm模型\",{\"1\":{\"660\":1}}],[\"定义初始状态分布\",{\"1\":{\"649\":1}}],[\"定义转移概率矩阵\",{\"1\":{\"649\":1}}],[\"定义状态空间\",{\"1\":{\"649\":1}}],[\"定义预测函数\",{\"0\":{\"642\":1}}],[\"定义gm\",{\"0\":{\"641\":1}}],[\"定义\",{\"1\":{\"561\":1,\"562\":1,\"633\":1,\"880\":1,\"1201\":2,\"1301\":1,\"1302\":1,\"1303\":1,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1,\"1474\":1,\"1475\":1,\"1476\":1,\"1659\":3,\"1722\":1,\"1723\":1}}],[\"定义激活函数和其导数\",{\"0\":{\"445\":1}}],[\"定义为\",{\"1\":{\"435\":1}}],[\"定义模拟退火算法\",{\"1\":{\"428\":1}}],[\"定义目标函数的系数\",{\"1\":{\"726\":1,\"732\":1,\"738\":1}}],[\"定义目标函数\",{\"1\":{\"428\":1,\"434\":1,\"728\":1,\"734\":1,\"740\":1}}],[\"定义邻接矩阵\",{\"1\":{\"394\":2,\"398\":1,\"399\":1,\"958\":1,\"959\":1,\"960\":1,\"964\":1,\"965\":1}}],[\"定义常量\",{\"1\":{\"182\":1}}],[\"定义2\",{\"1\":{\"35\":1}}],[\"定义1\",{\"1\":{\"35\":1}}],[\"定义列表\",{\"0\":{\"35\":1}}],[\"定义标签\",{\"1\":{\"336\":1},\"2\":{\"3\":1,\"339\":1}}],[\"教育资源配置\",{\"1\":{\"755\":1}}],[\"教育学等领域\",{\"1\":{\"467\":1}}],[\"客户端使用\",{\"1\":{\"1986\":1}}],[\"客户端通过\",{\"1\":{\"1935\":1}}],[\"客户端\",{\"0\":{\"1891\":1,\"1935\":1,\"1938\":1},\"1\":{\"1934\":1}}],[\"客户端已连接\",{\"1\":{\"1890\":1}}],[\"客户细分\",{\"1\":{\"516\":1}}],[\"客观赋权法\",{\"1\":{\"760\":1}}],[\"客观性较强\",{\"1\":{\"754\":1}}],[\"熵值法\",{\"1\":{\"763\":1}}],[\"熵值法等方式确定\",{\"1\":{\"753\":1}}],[\"熵值越小\",{\"1\":{\"754\":1}}],[\"熵权法\",{\"1\":{\"754\":1}}],[\"明确需要优化的多个目标\",{\"1\":{\"841\":1}}],[\"明确评价的最终目标\",{\"1\":{\"753\":1}}],[\"明确问题的背景\",{\"1\":{\"381\":1}}],[\"管理网络协议和服务\",{\"1\":{\"2192\":1}}],[\"管理硬件设备的输入输出操作\",{\"1\":{\"2192\":1}}],[\"管理文件目录结构\",{\"1\":{\"2192\":1}}],[\"管理数据库连接等操作\",{\"1\":{\"1987\":1}}],[\"管理和注入\",{\"1\":{\"1681\":1}}],[\"管理的主要区域\",{\"1\":{\"1265\":1}}],[\"管理学和其他领域中有广泛的应用\",{\"1\":{\"831\":1}}],[\"管理\",{\"1\":{\"752\":1,\"844\":1}}],[\"管道包扎模型能够生成非常复杂和自由的几何形状\",{\"1\":{\"684\":1}}],[\"管道包扎模型通过以下几个步骤构建\",{\"1\":{\"679\":1}}],[\"管道包扎模型的构建过程\",{\"0\":{\"679\":1}}],[\"管道包扎模型\",{\"0\":{\"678\":1},\"1\":{\"678\":1}}],[\"纳什均衡\",{\"1\":{\"748\":1}}],[\"囚徒困境\",{\"1\":{\"748\":1}}],[\"拍卖设计\",{\"1\":{\"747\":1}}],[\"拍摄信息\",{\"1\":{\"69\":1,\"77\":1}}],[\"存在于对象被创建的内存中\",{\"1\":{\"1302\":1}}],[\"存在的问题等\",{\"1\":{\"1038\":1}}],[\"存在未公开的信息\",{\"1\":{\"746\":1}}],[\"存储器\",{\"0\":{\"2195\":1}}],[\"存储设备\",{\"1\":{\"2188\":1,\"2207\":1}}],[\"存储在集合中\",{\"1\":{\"1697\":1}}],[\"存储java对象实例\",{\"1\":{\"1265\":1}}],[\"存储已加载的类信息\",{\"1\":{\"1265\":1}}],[\"存储每一步的更新值\",{\"1\":{\"928\":1}}],[\"存储结果的数组\",{\"1\":{\"889\":1,\"890\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1}}],[\"存储生成的表面点\",{\"1\":{\"680\":1}}],[\"存储标记的零元素位置\",{\"1\":{\"409\":1}}],[\"收敛判据和最大迭代次数\",{\"1\":{\"896\":1}}],[\"收敛判据\",{\"1\":{\"895\":1}}],[\"收集各项评价指标的原始数据\",{\"1\":{\"763\":1}}],[\"收集和准备数据\",{\"1\":{\"585\":1}}],[\"收益\",{\"1\":{\"745\":1}}],[\"策略\",{\"1\":{\"745\":1}}],[\"策略梯度方法\",{\"1\":{\"596\":1}}],[\"博弈中的决策者\",{\"1\":{\"745\":1}}],[\"博弈模型的应用\",{\"0\":{\"747\":1}}],[\"博弈模型的分类\",{\"0\":{\"746\":1}}],[\"博弈模型的基本概念\",{\"0\":{\"745\":1}}],[\"博弈模型可以帮助理解竞争\",{\"1\":{\"744\":1}}],[\"博弈模型是研究参与者在特定情境下做出决策时如何互动的数学框架\",{\"1\":{\"744\":1}}],[\"博弈模型\",{\"0\":{\"743\":1,\"744\":1},\"1\":{\"378\":1}}],[\"玩家依次做出决策\",{\"1\":{\"746\":1}}],[\"玩家的收益可以同时增加或减少\",{\"1\":{\"746\":1}}],[\"玩家的策略组合\",{\"1\":{\"745\":1}}],[\"玩家独立行动\",{\"1\":{\"746\":1}}],[\"玩家可以形成联盟并达成合作协议\",{\"1\":{\"746\":1}}],[\"玩家可以选择的行动方案\",{\"1\":{\"745\":1}}],[\"玩家在做出决策时所拥有的相关知识\",{\"1\":{\"745\":1}}],[\"玩家在某种策略组合下获得的结果\",{\"1\":{\"745\":1}}],[\"玩家\",{\"1\":{\"745\":1}}],[\"谈判等复杂社会现象\",{\"1\":{\"744\":1}}],[\"合理配置日志输出\",{\"1\":{\"1927\":1}}],[\"合理配置gc可以提升应用性能\",{\"1\":{\"1267\":1}}],[\"合理使用面向对象的特性\",{\"1\":{\"1716\":1}}],[\"合理使用访问修饰符\",{\"1\":{\"1631\":1}}],[\"合法标识符举例\",{\"1\":{\"1276\":1}}],[\"合成等\",{\"1\":{\"795\":1}}],[\"合作博弈\",{\"1\":{\"746\":1}}],[\"合作博弈与非合作博弈\",{\"1\":{\"746\":1}}],[\"合作\",{\"1\":{\"744\":1}}],[\"合并排序等\",{\"1\":{\"2208\":1}}],[\"合并元组\",{\"1\":{\"154\":1}}],[\"合并与重复元组\",{\"0\":{\"154\":1}}],[\"心理学\",{\"1\":{\"744\":1}}],[\"心之火\",{\"0\":{\"73\":1},\"2\":{\"76\":1}}],[\"心之火焰\",{\"0\":{\"72\":1}}],[\"城市数量\",{\"1\":{\"740\":1}}],[\"城市4\",{\"1\":{\"739\":1}}],[\"城市3\",{\"1\":{\"739\":1}}],[\"展开距离矩阵\",{\"1\":{\"740\":1}}],[\"展开成一维向量\",{\"1\":{\"738\":1}}],[\"展示库存中的所有书籍\",{\"1\":{\"1661\":1}}],[\"展示分析结果\",{\"1\":{\"1199\":1}}],[\"展示如何使用这些工具进行描述统计\",{\"1\":{\"477\":1}}],[\"展示了如何正确重写\",{\"1\":{\"1677\":1}}],[\"展示了如何读取文本文件内容\",{\"1\":{\"259\":1}}],[\"展示了个人理性和集体理性之间的冲突\",{\"1\":{\"748\":1}}],[\"展示了类\",{\"1\":{\"243\":1}}],[\"难问题\",{\"1\":{\"735\":1}}],[\"难以用具体数值表示\",{\"1\":{\"757\":1}}],[\"难以处理定性指标\",{\"1\":{\"754\":1,\"767\":1}}],[\"难以理解其内部机制\",{\"1\":{\"546\":1}}],[\"难以理解其决策过程\",{\"1\":{\"536\":1}}],[\"难以扩展到大规模数据\",{\"1\":{\"541\":1}}],[\"难以精确求解的问题\",{\"1\":{\"416\":1}}],[\"总之\",{\"1\":{\"1259\":1}}],[\"总部位于美国马萨诸塞州内迪克\",{\"1\":{\"1116\":1}}],[\"总收益不为零\",{\"1\":{\"746\":1}}],[\"总收益为零\",{\"1\":{\"746\":1}}],[\"总距离为80\",{\"1\":{\"739\":1}}],[\"总预算限制\",{\"1\":{\"731\":1}}],[\"总预算为50元\",{\"1\":{\"730\":1}}],[\"总结\",{\"0\":{\"504\":1,\"559\":1,\"566\":1,\"573\":1,\"583\":1,\"591\":1,\"1103\":1,\"1332\":1,\"1348\":1,\"1366\":1,\"1379\":1,\"1387\":1,\"1398\":1,\"1408\":1,\"1419\":1,\"1429\":1,\"1441\":1,\"1453\":1,\"1524\":1,\"1543\":1,\"1550\":1,\"1562\":1,\"1601\":1,\"1615\":1,\"1632\":1,\"1652\":1,\"1659\":1,\"1683\":1,\"1694\":1,\"1707\":1,\"1716\":1,\"1755\":1,\"1769\":1,\"1779\":1,\"1794\":1,\"1810\":1,\"1824\":1,\"1859\":1,\"1879\":1,\"1893\":1,\"1911\":1,\"1928\":1,\"1944\":1,\"1957\":1,\"1972\":1,\"1987\":1,\"1998\":1,\"2004\":1,\"2017\":1,\"2034\":1,\"2049\":1}}],[\"预期达到的水平\",{\"1\":{\"1038\":1}}],[\"预防子环\",{\"1\":{\"737\":1}}],[\"预计利润为20元\",{\"1\":{\"730\":1}}],[\"预计利润为30元\",{\"1\":{\"730\":1}}],[\"预计利润为40元\",{\"1\":{\"730\":1}}],[\"预测控制\",{\"1\":{\"867\":1}}],[\"预测系统行为\",{\"1\":{\"849\":1}}],[\"预测指定天数内的天气状态\",{\"1\":{\"650\":1}}],[\"预测未来的股票价格\",{\"1\":{\"657\":1}}],[\"预测未来10天的天气\",{\"1\":{\"649\":1}}],[\"预测未来5个数据点\",{\"1\":{\"643\":1}}],[\"预测的状态序列\",{\"1\":{\"649\":1}}],[\"预测的天数\",{\"1\":{\"649\":1}}],[\"预测数据将通过红色虚线显示\",{\"1\":{\"644\":1}}],[\"预测数据\",{\"1\":{\"643\":1}}],[\"预测数据点属于哪个类别\",{\"1\":{\"575\":1}}],[\"预测序列\",{\"1\":{\"642\":1}}],[\"预测步数\",{\"1\":{\"642\":1}}],[\"预测计算\",{\"1\":{\"634\":1}}],[\"预测目标以及对预测精度的要求\",{\"1\":{\"631\":1}}],[\"预测模型\",{\"0\":{\"631\":1}}],[\"预测为正样本中实际为正样本的比例\",{\"1\":{\"582\":1}}],[\"预测测试集\",{\"1\":{\"524\":1,\"535\":1}}],[\"预测\",{\"1\":{\"486\":1,\"488\":1}}],[\"预测和系数\",{\"1\":{\"484\":1}}],[\"预测方法的选择通常取决于数据的特性\",{\"1\":{\"631\":1}}],[\"预测方法指的是用于预测未来事件\",{\"1\":{\"631\":1}}],[\"预测方法\",{\"0\":{\"630\":1},\"1\":{\"378\":1}}],[\"公有的无参构造方法\",{\"1\":{\"1680\":1}}],[\"公共的\",{\"1\":{\"1680\":1,\"1709\":2}}],[\"公共\",{\"1\":{\"1568\":4}}],[\"公共构造函数\",{\"1\":{\"1568\":1}}],[\"公共接口\",{\"1\":{\"1564\":1}}],[\"公共政策\",{\"1\":{\"755\":1}}],[\"公正地反映不同方案的优劣\",{\"1\":{\"764\":1}}],[\"公司公开\",{\"1\":{\"1258\":1}}],[\"公司的产品\",{\"1\":{\"1258\":1}}],[\"公司收购\",{\"1\":{\"1258\":1}}],[\"公司被\",{\"1\":{\"1258\":1}}],[\"公司于\",{\"1\":{\"1258\":1}}],[\"公司需要决定是否生产每种产品\",{\"1\":{\"730\":1}}],[\"公司有一个总预算限制\",{\"1\":{\"730\":1}}],[\"公式编号\",{\"1\":{\"1110\":1}}],[\"公式\",{\"0\":{\"34\":1},\"1\":{\"933\":1,\"939\":2}}],[\"员工人数等问题时\",{\"1\":{\"723\":1}}],[\"负数的反码是对其原码除符号位外的所有位取反\",{\"1\":{\"2154\":1}}],[\"负数的补码是在其反码的基础上加1\",{\"1\":{\"2154\":1}}],[\"负数补1\",{\"1\":{\"1315\":1}}],[\"负责进程的创建\",{\"1\":{\"2189\":1}}],[\"负责协调和管理计算机中的各项资源\",{\"1\":{\"2188\":1}}],[\"负责将\",{\"1\":{\"1975\":1}}],[\"负责将字节码加载到jvm中\",{\"1\":{\"1265\":1}}],[\"负责数据的传输\",{\"1\":{\"1881\":1}}],[\"负向指标\",{\"1\":{\"757\":1}}],[\"负号表示转化为最小化问题\",{\"1\":{\"722\":1}}],[\"负面\",{\"1\":{\"575\":1}}],[\"劳动力限制\",{\"1\":{\"721\":1,\"722\":1,\"725\":1}}],[\"劳动力是120小时\",{\"1\":{\"720\":1}}],[\"求余数\",{\"1\":{\"1311\":1}}],[\"求实创新\",{\"1\":{\"1025\":1}}],[\"求导数\",{\"1\":{\"1225\":1}}],[\"求导\",{\"0\":{\"918\":1,\"1225\":1}}],[\"求每天生产多少单位的产品a和产品b\",{\"1\":{\"720\":1}}],[\"求解线性方程组\",{\"0\":{\"1232\":1}}],[\"求解线性规划问题\",{\"1\":{\"722\":1}}],[\"求解线性规划问题的常用方法包括单纯形法\",{\"1\":{\"718\":1}}],[\"求解线性规划\",{\"0\":{\"718\":1}}],[\"求解方程\",{\"1\":{\"923\":1}}],[\"求解方法\",{\"1\":{\"841\":1}}],[\"求解拉普拉斯方程在单位正方形区域上的解\",{\"1\":{\"894\":1}}],[\"求解微分方程\",{\"1\":{\"856\":1,\"857\":1}}],[\"求解sir模型\",{\"1\":{\"852\":1,\"853\":1}}],[\"求解最优解变得非常困难\",{\"1\":{\"735\":1}}],[\"求解最大价值\",{\"1\":{\"408\":1}}],[\"求解0\",{\"1\":{\"732\":1}}],[\"求解整数线性规划问题\",{\"1\":{\"726\":1,\"738\":1}}],[\"求解过程\",{\"0\":{\"722\":1}}],[\"求解问题\",{\"1\":{\"700\":1}}],[\"求解一条最短的可能路径\",{\"1\":{\"410\":1}}],[\"求解\",{\"1\":{\"384\":1,\"728\":1,\"734\":1,\"740\":1,\"882\":2,\"895\":1}}],[\"求解网络中从源点到汇点的最大流量\",{\"1\":{\"382\":1}}],[\"求解图中两点之间的最短路径\",{\"1\":{\"382\":1}}],[\"求解变量为整数的优化问题\",{\"1\":{\"382\":1}}],[\"求解模型\",{\"1\":{\"381\":1}}],[\"利润为4元\",{\"1\":{\"720\":1}}],[\"利润为5元\",{\"1\":{\"720\":1}}],[\"利用分离变量法\",{\"1\":{\"884\":1}}],[\"利用特征根求解\",{\"1\":{\"865\":1}}],[\"利用法医测得的两次温度和时间差计算冷却常数\",{\"1\":{\"857\":1}}],[\"利用目标函数的二阶导数信息\",{\"1\":{\"834\":1}}],[\"利用统计方法\",{\"1\":{\"790\":1}}],[\"利用整数规划来找到最优解\",{\"1\":{\"694\":1}}],[\"利用少量标注数据和大量未标注数据来进行模型训练\",{\"1\":{\"595\":1}}],[\"利用卷积层和池化层提取空间特征\",{\"1\":{\"441\":1}}],[\"利用数学工具和计算方法求解模型\",{\"1\":{\"381\":1}}],[\"具体要求参照学校相关最新文件执行\",{\"1\":{\"1036\":1,\"1038\":1}}],[\"具体按照学校相关最新文件执行\",{\"1\":{\"1032\":1}}],[\"具体问题示例\",{\"0\":{\"717\":1}}],[\"具有跨平台\",{\"1\":{\"1987\":1}}],[\"具有更好的性能\",{\"1\":{\"1776\":1}}],[\"具有以下特点\",{\"1\":{\"1744\":1}}],[\"具有模块化\",{\"1\":{\"1707\":1}}],[\"具有良好的可读性和可维护性\",{\"1\":{\"1615\":1}}],[\"具有代码重用\",{\"1\":{\"1333\":1}}],[\"具有先进性\",{\"1\":{\"1037\":1}}],[\"具有科学\",{\"1\":{\"1025\":1}}],[\"具有学术道德诚信\",{\"1\":{\"1025\":1}}],[\"具有创新意识和新型的农业技术研究\",{\"1\":{\"1025\":1}}],[\"具有较宽广的知识面\",{\"1\":{\"1025\":1}}],[\"具有较高的准确性\",{\"1\":{\"536\":1}}],[\"具有类似photoshop的界面和功能\",{\"1\":{\"796\":1}}],[\"具有记忆功能\",{\"1\":{\"441\":1}}],[\"具有找到全局最优解的潜力\",{\"1\":{\"425\":1}}],[\"具有多个局部最优解的优化问题\",{\"1\":{\"421\":1}}],[\"具有丰富的科学计算库\",{\"1\":{\"383\":1}}],[\"电话号码等\",{\"1\":{\"1417\":1}}],[\"电磁波改变它们的通常性质\",{\"1\":{\"1053\":1}}],[\"电磁理论\",{\"2\":{\"1049\":1}}],[\"电磁学\",{\"0\":{\"1047\":1}}],[\"电工技术学报\",{\"1\":{\"1040\":1}}],[\"电位场和形变问题\",{\"1\":{\"891\":1}}],[\"电场\",{\"1\":{\"885\":1}}],[\"电力系统调度\",{\"1\":{\"716\":1}}],[\"电信和数据网络\",{\"1\":{\"716\":1}}],[\"电缆布线\",{\"1\":{\"683\":1}}],[\"投资决策\",{\"1\":{\"768\":1}}],[\"投资回报率\",{\"1\":{\"757\":1,\"761\":1}}],[\"投资组合优化\",{\"0\":{\"836\":1},\"1\":{\"716\":1,\"717\":1}}],[\"投影到前两个主成分\",{\"1\":{\"625\":1}}],[\"⎩⎨⎧​a11​x1​+a12​x2​+⋯+a1n​xn​≤b1​a21​x1​+a22​x2​+⋯+a2n​xn​≤b2​⋮am1​x1​+am2​x2​+⋯+amn​xn​≤bm​​\",{\"1\":{\"715\":1}}],[\"ˉ​\",{\"1\":{\"715\":1}}],[\"财务建模和分析\",{\"1\":{\"1116\":1}}],[\"财务管理中的投资组合优化问题\",{\"1\":{\"844\":1}}],[\"财务管理\",{\"1\":{\"712\":1}}],[\"财务优化\",{\"1\":{\"706\":1}}],[\"又称thz波或太赫茲\",{\"1\":{\"1052\":1}}],[\"又称为变量聚类\",{\"1\":{\"562\":1}}],[\"又称为样本聚类或个体聚类\",{\"1\":{\"561\":1}}],[\"又要满足生产需求\",{\"1\":{\"711\":1}}],[\"混合整数非线性规划问题结合了整数约束和非线性函数\",{\"1\":{\"711\":1}}],[\"混合整数非线性规划\",{\"0\":{\"711\":1}}],[\"过滤掉不以\",{\"1\":{\"1692\":1}}],[\"过程优化\",{\"1\":{\"709\":1}}],[\"过拟合\",{\"1\":{\"533\":1}}],[\"排序算法中的临时存储空间\",{\"1\":{\"2164\":1}}],[\"排序\",{\"0\":{\"2073\":1,\"2175\":1},\"1\":{\"1741\":1,\"1992\":1}}],[\"排序和搜索等技能\",{\"1\":{\"1366\":1}}],[\"排序列表\",{\"1\":{\"147\":1}}],[\"排程问题\",{\"1\":{\"707\":1}}],[\"决定\",{\"1\":{\"884\":1}}],[\"决定生产多少种产品以最大化利润\",{\"1\":{\"706\":1}}],[\"决策支持\",{\"1\":{\"774\":1}}],[\"决策变量必须是整数\",{\"1\":{\"723\":1}}],[\"决策变量\",{\"1\":{\"721\":1,\"725\":1,\"731\":1,\"737\":1,\"840\":1}}],[\"决策变量是每个投资选项的资金分配\",{\"1\":{\"717\":1}}],[\"决策变量是每种产品的生产数量\",{\"1\":{\"717\":1}}],[\"决策变量是从每个仓库到每个客户的运输量\",{\"1\":{\"717\":1}}],[\"决策与输出\",{\"1\":{\"585\":1}}],[\"决策树通过将数据集划分为若干个子集\",{\"1\":{\"579\":1,\"603\":1}}],[\"决策树\",{\"0\":{\"579\":1,\"603\":1},\"1\":{\"530\":1,\"586\":1,\"593\":1,\"631\":1,\"2214\":1}}],[\"决策树回归通过创建树状结构来对数据进行分割\",{\"1\":{\"503\":1}}],[\"决策树回归\",{\"0\":{\"503\":1},\"1\":{\"504\":1,\"531\":1,\"593\":1}}],[\"决策边界\",{\"1\":{\"525\":1}}],[\"成为标准ui工具包\",{\"1\":{\"1997\":1}}],[\"成功读取整数\",{\"1\":{\"1428\":1}}],[\"成员内部类的特性\",{\"0\":{\"1589\":1}}],[\"成员内部类可以访问外部类的所有成员\",{\"1\":{\"1587\":1}}],[\"成员内部类是在一个类的内部定义的类\",{\"1\":{\"1587\":1}}],[\"成员内部类\",{\"0\":{\"1587\":1},\"1\":{\"1586\":1,\"1588\":1}}],[\"成员\",{\"1\":{\"1515\":2}}],[\"成员变量\",{\"1\":{\"1278\":1,\"1558\":2,\"1826\":1}}],[\"成员运算符\",{\"0\":{\"198\":1}}],[\"成绩合格\",{\"1\":{\"1038\":1}}],[\"成果应能解决生产实际问题\",{\"1\":{\"1037\":1}}],[\"成败\",{\"1\":{\"981\":1}}],[\"成本\",{\"1\":{\"842\":2}}],[\"成本等\",{\"1\":{\"701\":1}}],[\"成对比较的数量会急剧增加\",{\"1\":{\"774\":1}}],[\"成对比较可能带来一致性问题\",{\"1\":{\"766\":1}}],[\"成一维向量\",{\"1\":{\"740\":1}}],[\"剩余的废料可能需要进行回收或处理\",{\"1\":{\"701\":1}}],[\"废料处理\",{\"1\":{\"701\":1}}],[\"切换缓冲区为读取模式\",{\"1\":{\"1883\":1}}],[\"切记\",{\"1\":{\"1275\":1}}],[\"切割路径\",{\"1\":{\"701\":1}}],[\"切片操作使用\",{\"1\":{\"219\":1}}],[\"切片的步长\",{\"1\":{\"144\":1,\"152\":1}}],[\"切片\",{\"0\":{\"219\":1},\"1\":{\"144\":1,\"152\":1,\"219\":1}}],[\"宽\",{\"1\":{\"700\":1}}],[\"宽度5米\",{\"1\":{\"695\":1}}],[\"宽度2米\",{\"1\":{\"695\":1}}],[\"长整数缓冲区\",{\"1\":{\"1884\":1}}],[\"长显示\",{\"1\":{\"1125\":1}}],[\"长\",{\"1\":{\"700\":1}}],[\"长度4米\",{\"1\":{\"695\":1}}],[\"长度3米\",{\"1\":{\"695\":1}}],[\"长度为20米的钢板\",{\"1\":{\"695\":1}}],[\"长短期记忆网络\",{\"0\":{\"656\":1},\"1\":{\"598\":1}}],[\"长短期记忆\",{\"1\":{\"441\":1}}],[\"需手动同步\",{\"1\":{\"1752\":2}}],[\"需实习单位和指导教师签署意见\",{\"1\":{\"1035\":1}}],[\"需求\",{\"1\":{\"700\":1}}],[\"需求数量\",{\"1\":{\"700\":1}}],[\"需求数据\",{\"1\":{\"700\":1}}],[\"需求2\",{\"1\":{\"695\":1}}],[\"需求1\",{\"1\":{\"695\":1}}],[\"需求尺寸\",{\"1\":{\"693\":1}}],[\"需要存储一个n\",{\"1\":{\"2163\":1}}],[\"需要存储额外的节点信息\",{\"1\":{\"1752\":1}}],[\"需要在项目中添加相应的依赖\",{\"1\":{\"1920\":1}}],[\"需要在子类中实现\",{\"1\":{\"1308\":1,\"1347\":1}}],[\"需要调用方处理\",{\"1\":{\"1905\":1}}],[\"需要维护顺序\",{\"1\":{\"1789\":1,\"1804\":1}}],[\"需要线程安全的场景\",{\"1\":{\"1778\":1}}],[\"需要移动元素\",{\"1\":{\"1752\":1}}],[\"需要移动后续元素\",{\"1\":{\"1747\":1}}],[\"需要将基本类型转换为包装类对象\",{\"1\":{\"1697\":1}}],[\"需要注意一些方法\",{\"1\":{\"1678\":1}}],[\"需要实现\",{\"1\":{\"1671\":1,\"1678\":1}}],[\"需要导入这些类\",{\"1\":{\"1620\":1}}],[\"需要显式转换\",{\"1\":{\"1536\":1}}],[\"需要通过子类实现其抽象方法\",{\"1\":{\"1308\":1}}],[\"需要手动指定目标类型\",{\"1\":{\"1295\":1}}],[\"需要编译两次才能正常显示\",{\"1\":{\"1110\":1}}],[\"需要拟合的点\",{\"1\":{\"942\":1,\"943\":1}}],[\"需要插值的点\",{\"1\":{\"935\":1,\"936\":1,\"937\":1}}],[\"需要同时最小化生产成本和最大化生产质量\",{\"1\":{\"842\":1}}],[\"需要最小化或最大化\",{\"1\":{\"832\":1}}],[\"需要最大化的利润\",{\"1\":{\"722\":1}}],[\"需要合理处理主客观权重的组合\",{\"1\":{\"775\":1}}],[\"需要构建较为复杂的隶属函数\",{\"1\":{\"754\":1}}],[\"需要对数据进行标准化处理\",{\"1\":{\"753\":1,\"763\":1}}],[\"需要特别的算法来求解\",{\"1\":{\"711\":1}}],[\"需要考虑以下因素\",{\"1\":{\"701\":1}}],[\"需要切割成以下尺寸的小块\",{\"1\":{\"695\":1}}],[\"需要处理路径曲线的弯曲\",{\"1\":{\"684\":1}}],[\"需要数据具有非高斯分布\",{\"1\":{\"541\":1}}],[\"需要使用带有已知类别标签的数据进行训练\",{\"1\":{\"518\":1}}],[\"需要预先指定簇数\",{\"1\":{\"540\":1}}],[\"需要预先指定\",{\"1\":{\"511\":1}}],[\"钢板切割问题可能会更加复杂\",{\"1\":{\"701\":1}}],[\"钢板切割模型在制造业中的应用非常广泛\",{\"1\":{\"701\":1}}],[\"钢板切割模型的基本形式如下\",{\"1\":{\"693\":1}}],[\"钢板切割模型是一种优化问题\",{\"1\":{\"692\":1}}],[\"钢板切割模型\",{\"0\":{\"692\":1}}],[\"钢板的尺寸\",{\"1\":{\"693\":1}}],[\"室内装饰或虚拟现实开发等应用具有实际意义\",{\"1\":{\"691\":1}}],[\"您可以在编程环境中模拟和可视化不同的瓷砖铺设方案\",{\"1\":{\"691\":1}}],[\"您可以在python中执行各种类型的操作\",{\"1\":{\"199\":1}}],[\"逐字节读取\",{\"1\":{\"1883\":1}}],[\"逐渐将与生成树相连的权重最小的边加入生成树\",{\"1\":{\"963\":1}}],[\"逐行铺设瓷砖\",{\"1\":{\"688\":1}}],[\"逐步执行代码等\",{\"1\":{\"1188\":1}}],[\"逐步沿着梯度方向搜索最优解\",{\"1\":{\"834\":1}}],[\"逐步达成对指标和权重的共识\",{\"1\":{\"758\":1}}],[\"逐步回归是一种变量选择方法\",{\"1\":{\"493\":1}}],[\"逐步优化每个子问题\",{\"1\":{\"415\":1}}],[\"旋转图像\",{\"1\":{\"822\":1}}],[\"旋转\",{\"1\":{\"794\":1,\"800\":1,\"946\":1}}],[\"旋转排列等\",{\"1\":{\"686\":1}}],[\"旋转并平移截面曲线\",{\"1\":{\"680\":1}}],[\"菱形等几何形状\",{\"1\":{\"686\":1}}],[\"铺设方式\",{\"1\":{\"686\":1}}],[\"铺设区域的高度\",{\"1\":{\"688\":1}}],[\"铺设区域的宽度\",{\"1\":{\"688\":1}}],[\"铺设区域\",{\"1\":{\"686\":1}}],[\"铺设的基本单元\",{\"1\":{\"686\":1}}],[\"铺瓷砖模型会涉及到瓷砖的排列\",{\"1\":{\"685\":1}}],[\"铺瓷砖模型在计算机图形学\",{\"1\":{\"685\":1}}],[\"铺瓷砖模型\",{\"0\":{\"685\":1}}],[\"瓷砖可以按照指定的模式铺设在曲面或立体表面上\",{\"1\":{\"691\":1}}],[\"瓷砖颜色\",{\"1\":{\"691\":1}}],[\"瓷砖的高度\",{\"1\":{\"688\":1}}],[\"瓷砖的宽度\",{\"1\":{\"688\":1}}],[\"瓷砖在铺设区域内的排列方式\",{\"1\":{\"686\":1}}],[\"瓷砖铺设的目标区域\",{\"1\":{\"686\":1}}],[\"瓷砖\",{\"1\":{\"686\":1}}],[\"扭转\",{\"1\":{\"684\":1}}],[\"挑战\",{\"1\":{\"684\":1}}],[\"挤压成型的产品等\",{\"1\":{\"683\":1}}],[\"材料热处理学报\",{\"1\":{\"1040\":1}}],[\"材料流动轨迹\",{\"1\":{\"683\":1}}],[\"材料选择\",{\"1\":{\"419\":1}}],[\"走廊\",{\"1\":{\"683\":1}}],[\"肢体\",{\"1\":{\"683\":1}}],[\"绘图文档\",{\"0\":{\"1213\":1}}],[\"绘图是一个非常重要的功能\",{\"1\":{\"1199\":1}}],[\"绘图区域\",{\"1\":{\"689\":1}}],[\"绘图\",{\"1\":{\"681\":1,\"889\":1,\"890\":1,\"895\":1,\"896\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1}}],[\"绘制第二条曲线\",{\"1\":{\"1210\":1}}],[\"绘制第一条曲线\",{\"1\":{\"1210\":1}}],[\"绘制三维曲面图\",{\"1\":{\"1207\":1}}],[\"绘制三维网格图\",{\"1\":{\"1207\":1}}],[\"绘制折线图\",{\"1\":{\"1201\":1}}],[\"绘制最终时刻的种群密度分布\",{\"1\":{\"928\":1}}],[\"绘制每隔一定时间的温度分布\",{\"1\":{\"890\":1}}],[\"绘制尸体温度随时间变化的曲线\",{\"1\":{\"857\":1}}],[\"绘制结果\",{\"1\":{\"852\":1,\"853\":1,\"856\":1,\"857\":1,\"927\":1,\"928\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"947\":1,\"948\":1}}],[\"绘制矩形框标记人脸\",{\"1\":{\"827\":1}}],[\"绘制管道表面\",{\"1\":{\"680\":1}}],[\"绘制3d图形\",{\"1\":{\"680\":1}}],[\"绘制了实际的价格与预测的价格\",{\"1\":{\"662\":1}}],[\"绘制原始3d数据\",{\"1\":{\"623\":1}}],[\"绘制lda投影结果\",{\"1\":{\"569\":1}}],[\"绘制树状图\",{\"1\":{\"550\":1,\"556\":1,\"565\":2}}],[\"绘制热力图\",{\"1\":{\"459\":1}}],[\"绘制柱状图\",{\"1\":{\"459\":1}}],[\"绘制基本图形\",{\"1\":{\"459\":1}}],[\"绘制有向图\",{\"1\":{\"393\":1,\"955\":1}}],[\"绘制无向图\",{\"1\":{\"393\":1,\"955\":1}}],[\"绘制图\",{\"1\":{\"393\":1,\"955\":2}}],[\"截面上的点数\",{\"1\":{\"680\":1}}],[\"截面曲线的半径\",{\"1\":{\"680\":1}}],[\"螺旋路径的高度\",{\"1\":{\"680\":1}}],[\"螺旋路径的螺距\",{\"1\":{\"680\":1}}],[\"螺旋路径的半径\",{\"1\":{\"680\":1}}],[\"螺旋线\",{\"1\":{\"680\":1}}],[\"沿路径曲线移动截面曲线并生成管道表面\",{\"1\":{\"680\":1}}],[\"沿路径移动截面曲线\",{\"1\":{\"679\":1}}],[\"沿着这条曲线移动截面曲线\",{\"1\":{\"679\":1}}],[\"沿增广路径增加流量\",{\"1\":{\"398\":1}}],[\"矩形\",{\"1\":{\"679\":1,\"689\":1}}],[\"矩阵的行列式和特征值\",{\"0\":{\"1143\":1}}],[\"矩阵的行列和对角线\",{\"0\":{\"1142\":1}}],[\"矩阵的元素c\",{\"1\":{\"409\":1}}],[\"矩阵大小\",{\"0\":{\"1141\":1}}],[\"矩阵切片\",{\"0\":{\"1139\":1}}],[\"矩阵索引和切片\",{\"0\":{\"1137\":1},\"1\":{\"1144\":1}}],[\"矩阵求逆\",{\"0\":{\"1136\":1},\"1\":{\"1136\":1,\"1144\":1,\"1222\":1}}],[\"矩阵转置\",{\"0\":{\"1135\":1},\"1\":{\"1135\":1,\"1144\":1,\"1222\":1}}],[\"矩阵乘法\",{\"0\":{\"1134\":1},\"1\":{\"1134\":1,\"1144\":1,\"1222\":2}}],[\"矩阵减法\",{\"1\":{\"1133\":1,\"1222\":1}}],[\"矩阵加减\",{\"1\":{\"1222\":1}}],[\"矩阵加减法\",{\"0\":{\"1133\":1}}],[\"矩阵加法\",{\"1\":{\"1133\":1,\"1144\":1,\"1222\":1}}],[\"矩阵操作\",{\"0\":{\"1132\":1}}],[\"矩阵是基本的数据结构\",{\"1\":{\"1128\":1}}],[\"矩阵\",{\"0\":{\"1128\":1},\"1\":{\"1130\":1,\"1154\":1,\"1222\":2}}],[\"矩阵运算\",{\"0\":{\"921\":1,\"1222\":1}}],[\"矩阵运算等各种数学领域\",{\"1\":{\"913\":1}}],[\"矩阵分解\",{\"1\":{\"599\":1}}],[\"矩阵进行转置\",{\"1\":{\"564\":1}}],[\"曲线\",{\"1\":{\"679\":1}}],[\"曲线建筑结构等形状时非常有用\",{\"1\":{\"678\":1}}],[\"曲面模型表示三维空间中的曲面而不关注物体的内部结构\",{\"1\":{\"672\":1}}],[\"索道\",{\"1\":{\"678\":1}}],[\"索引单元格数组\",{\"1\":{\"1127\":1}}],[\"索引日志文件\",{\"1\":{\"1110\":1}}],[\"索引记录文件\",{\"1\":{\"1110\":1}}],[\"索引越界等\",{\"1\":{\"245\":1}}],[\"索引从0开始\",{\"1\":{\"1353\":1,\"1722\":1}}],[\"索引从\",{\"1\":{\"142\":1,\"151\":1}}],[\"隧道等\",{\"1\":{\"683\":1}}],[\"隧道\",{\"1\":{\"678\":1}}],[\"山脉\",{\"1\":{\"677\":1}}],[\"液滴等\",{\"1\":{\"676\":1}}],[\"游戏开发\",{\"1\":{\"675\":1}}],[\"游戏人工智能\",{\"1\":{\"442\":1}}],[\"地址和主机名\",{\"0\":{\"1933\":1},\"1\":{\"1932\":1}}],[\"地址\",{\"0\":{\"1932\":1},\"1\":{\"1930\":2,\"1931\":1,\"1932\":1,\"1933\":5}}],[\"地形测量\",{\"1\":{\"674\":1}}],[\"地点🏠\",{\"0\":{\"10\":1}}],[\"逆向工程\",{\"1\":{\"674\":1}}],[\"初值问题\",{\"1\":{\"882\":1}}],[\"初步设计\",{\"1\":{\"673\":1}}],[\"初始时不创建实例\",{\"1\":{\"2010\":1}}],[\"初始时晴天的概率为0\",{\"1\":{\"650\":1}}],[\"初始时晴天的概率为60\",{\"1\":{\"649\":1}}],[\"初始值\",{\"1\":{\"1820\":1}}],[\"初始速度\",{\"1\":{\"911\":1}}],[\"初始位移\",{\"1\":{\"911\":1}}],[\"初始易感者\",{\"1\":{\"852\":1,\"853\":1}}],[\"初始条件和边界条件\",{\"0\":{\"888\":1,\"899\":1,\"907\":1}}],[\"初始条件和参数\",{\"1\":{\"853\":1}}],[\"初始条件为一段方波\",{\"1\":{\"927\":1}}],[\"初始条件为\",{\"1\":{\"875\":1}}],[\"初始条件a0​=1\",{\"1\":{\"866\":1}}],[\"初始条件\",{\"0\":{\"900\":1,\"908\":1},\"1\":{\"852\":1,\"853\":1,\"856\":2,\"857\":1,\"866\":1,\"884\":1,\"888\":1,\"889\":1,\"890\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1,\"927\":1,\"928\":1}}],[\"初始状态分布\",{\"1\":{\"646\":1,\"649\":1,\"650\":1}}],[\"初始状态和初始温度\",{\"1\":{\"422\":1}}],[\"初始解的生成\",{\"1\":{\"429\":1}}],[\"初始温度\",{\"1\":{\"424\":1,\"428\":1,\"429\":1}}],[\"初始化块\",{\"0\":{\"1546\":1},\"1\":{\"1544\":1}}],[\"初始化数组元素\",{\"1\":{\"1359\":1}}],[\"初始化数据和权重\",{\"0\":{\"446\":1}}],[\"初始化并查集\",{\"1\":{\"964\":1}}],[\"初始化一个变量y为20\",{\"1\":{\"1282\":1}}],[\"初始化一个变量x为10\",{\"1\":{\"1281\":1}}],[\"初始化一个空集合\",{\"1\":{\"964\":1}}],[\"初始化一个距离矩阵\",{\"1\":{\"960\":1}}],[\"初始化一个启动u盘\",{\"1\":{\"100\":1}}],[\"初始化源点到自身的距离为0\",{\"1\":{\"958\":1,\"959\":1}}],[\"初始化源点的距离为0\",{\"1\":{\"403\":1,\"404\":1,\"405\":1}}],[\"初始化解的数组\",{\"1\":{\"896\":1}}],[\"初始化权重\",{\"1\":{\"446\":1,\"449\":1}}],[\"初始化种群\",{\"1\":{\"433\":1,\"434\":1}}],[\"初始化\",{\"1\":{\"423\":1,\"895\":1,\"896\":1,\"1304\":1,\"1324\":1}}],[\"初始化标记\",{\"1\":{\"409\":1}}],[\"初始化标记数组\",{\"1\":{\"409\":1}}],[\"初始化潜在收益数组\",{\"1\":{\"409\":1}}],[\"初始化残余图\",{\"1\":{\"398\":1,\"399\":1}}],[\"初始化所有边的流量为0\",{\"1\":{\"398\":1}}],[\"俯视图\",{\"1\":{\"673\":1}}],[\"侧视图\",{\"1\":{\"673\":1}}],[\"侧重于分析变量之间的相似性\",{\"1\":{\"566\":1}}],[\"侧重于分析样本之间的相似性\",{\"1\":{\"566\":1}}],[\"线程池\",{\"1\":{\"2044\":1}}],[\"线程池等\",{\"1\":{\"2006\":1}}],[\"线程间通信和并发工具类\",{\"1\":{\"1972\":1}}],[\"线程间通信\",{\"0\":{\"1970\":1},\"1\":{\"1970\":1}}],[\"线程同步是解决这一问题的常用方式\",{\"1\":{\"1967\":1}}],[\"线程同步\",{\"0\":{\"1967\":1}}],[\"线程同步等功能\",{\"1\":{\"1664\":1}}],[\"线程休眠\",{\"1\":{\"1966\":1}}],[\"线程从运行状态变为就绪状态\",{\"1\":{\"1965\":1}}],[\"线程执行的入口方法\",{\"1\":{\"1965\":1}}],[\"线程执行完毕或者异常退出\",{\"1\":{\"1964\":1}}],[\"线程控制方法\",{\"0\":{\"1965\":1}}],[\"线程正在等待资源\",{\"1\":{\"1964\":1}}],[\"线程正在执行\",{\"1\":{\"1964\":1}}],[\"线程已启动并等待调度器分配\",{\"1\":{\"1964\":1}}],[\"线程对象被创建但尚未启动\",{\"1\":{\"1964\":1}}],[\"线程的状态转换如下图所示\",{\"1\":{\"1964\":1}}],[\"线程的生命周期\",{\"0\":{\"1964\":1}}],[\"线程的活动由一组方法来控制\",{\"1\":{\"1259\":1}}],[\"线程\",{\"1\":{\"1959\":1}}],[\"线程不安全\",{\"1\":{\"1749\":1}}],[\"线程安全等\",{\"1\":{\"2038\":1}}],[\"线程安全且实现简单\",{\"1\":{\"2013\":1}}],[\"线程安全的懒汉式\",{\"0\":{\"2011\":1}}],[\"线程安全的\",{\"1\":{\"1799\":1}}],[\"线程安全的无界非阻塞队列\",{\"1\":{\"1769\":1}}],[\"线程安全的队列\",{\"1\":{\"1760\":1}}],[\"线程安全的代码\",{\"1\":{\"1308\":1,\"1548\":1}}],[\"线程安全性\",{\"1\":{\"1752\":1}}],[\"线程安全\",{\"1\":{\"1372\":1,\"1377\":1,\"1772\":1,\"1778\":1,\"1799\":1,\"2009\":1,\"2011\":1,\"2012\":1,\"2013\":1,\"2014\":1,\"2037\":1}}],[\"线程模型\",{\"1\":{\"1268\":1}}],[\"线程状态等\",{\"1\":{\"1267\":1}}],[\"线程是一种特殊的对象\",{\"1\":{\"1259\":1}}],[\"线框模型通过表示物体的边缘线来描述三维几何形状\",{\"1\":{\"673\":1}}],[\"线性对数空间复杂度\",{\"1\":{\"2163\":1}}],[\"线性对数时间复杂度\",{\"1\":{\"2162\":1}}],[\"线性时间复杂度\",{\"1\":{\"2162\":1}}],[\"线性结构\",{\"1\":{\"2153\":1}}],[\"线性表\",{\"0\":{\"2067\":1,\"2166\":1}}],[\"线性代数\",{\"1\":{\"1214\":1}}],[\"线性空间复杂度\",{\"1\":{\"2163\":1}}],[\"线性空间\",{\"1\":{\"1156\":1}}],[\"线性空间和重复数组\",{\"1\":{\"1156\":1}}],[\"线性插值重建和多项式拟合重建\",{\"1\":{\"948\":1}}],[\"线性插值重建音频信号\",{\"1\":{\"948\":1}}],[\"线性插值\",{\"0\":{\"935\":1},\"1\":{\"933\":1,\"935\":1}}],[\"线性差分方程\",{\"0\":{\"864\":1}}],[\"线性回归假设因变量与自变量之间呈线性关系\",{\"1\":{\"939\":1}}],[\"线性回归和多元回归是最常见的回归分析方法\",{\"1\":{\"631\":1}}],[\"线性回归用于预测连续值\",{\"1\":{\"606\":1}}],[\"线性回归\",{\"0\":{\"497\":1,\"606\":1,\"941\":1},\"1\":{\"504\":1,\"531\":2,\"593\":1,\"939\":1,\"941\":1}}],[\"线性回归模型假设目标变量与特征之间存在线性关系\",{\"1\":{\"497\":1}}],[\"线性回归模型\",{\"1\":{\"484\":1}}],[\"线性判别分析\",{\"0\":{\"520\":1,\"568\":1},\"1\":{\"486\":1,\"524\":1,\"573\":1,\"586\":1,\"594\":1,\"614\":1}}],[\"线性规划问题\",{\"0\":{\"725\":1}}],[\"线性规划问题中\",{\"1\":{\"706\":1}}],[\"线性规划的应用\",{\"0\":{\"716\":1}}],[\"线性规划的组成\",{\"0\":{\"715\":1}}],[\"线性规划模型主要用于解决以下几类问题\",{\"1\":{\"716\":1}}],[\"线性规划模型的目标是找到一组\",{\"1\":{\"715\":1}}],[\"线性规划模型\",{\"0\":{\"713\":1,\"721\":1},\"1\":{\"717\":3}}],[\"线性规划\",{\"0\":{\"706\":1},\"1\":{\"382\":1,\"415\":1,\"714\":1}}],[\"线性规划和整数规划模型\",{\"0\":{\"704\":1},\"1\":{\"378\":1}}],[\"动手编写代码和构建项目是学习的关键\",{\"1\":{\"2217\":1}}],[\"动手实践\",{\"1\":{\"2217\":1}}],[\"动画支持和更强大的样式功能\",{\"1\":{\"2032\":1}}],[\"动画和游戏\",{\"1\":{\"683\":1}}],[\"动画制作\",{\"1\":{\"672\":1}}],[\"动态创建对象\",{\"0\":{\"1828\":1}}],[\"动态数组\",{\"1\":{\"1747\":1,\"1752\":1,\"1778\":1}}],[\"动态访问\",{\"1\":{\"1634\":1}}],[\"动态代理\",{\"1\":{\"1633\":1,\"1649\":1,\"1832\":1}}],[\"动态多态依赖于方法签名一致\",{\"1\":{\"1534\":1}}],[\"动态多态通过方法重写实现\",{\"1\":{\"1529\":1}}],[\"动态多态在运行时决定调用哪个方法\",{\"1\":{\"1526\":1}}],[\"动态多态\",{\"1\":{\"1526\":1,\"1530\":2}}],[\"动态博弈\",{\"1\":{\"746\":1}}],[\"动态模拟降维过程\",{\"1\":{\"624\":1}}],[\"动态规划问题通过将复杂问题分解为子问题来解决\",{\"1\":{\"709\":1}}],[\"动态规划等\",{\"1\":{\"694\":1}}],[\"动态规划\",{\"0\":{\"709\":1,\"2179\":1},\"1\":{\"382\":1,\"408\":1,\"410\":1,\"415\":1,\"2165\":1}}],[\"航空器等复杂曲面\",{\"1\":{\"672\":1}}],[\"船体\",{\"1\":{\"672\":1}}],[\"虚拟存储器\",{\"0\":{\"2196\":1}}],[\"虚拟性\",{\"1\":{\"2191\":1}}],[\"虚拟化技术\",{\"1\":{\"2190\":1}}],[\"虚拟机\",{\"1\":{\"1264\":1}}],[\"虚拟仿真\",{\"1\":{\"671\":1}}],[\"虚拟环境\",{\"0\":{\"286\":1}}],[\"建议在实际开发中多加练习和应用这些类库\",{\"1\":{\"2049\":1}}],[\"建议不再使用\",{\"1\":{\"1843\":1}}],[\"建议\",{\"1\":{\"1675\":1}}],[\"建议使用java\",{\"1\":{\"1401\":1,\"1408\":1}}],[\"建筑设计和虚拟现实等领域中非常常见\",{\"1\":{\"685\":1}}],[\"建筑设计\",{\"1\":{\"683\":1}}],[\"建筑图纸\",{\"1\":{\"673\":1}}],[\"建筑建模\",{\"1\":{\"671\":1}}],[\"建立连接\",{\"1\":{\"1979\":1}}],[\"建立数据库连接\",{\"0\":{\"1979\":1},\"1\":{\"1976\":1}}],[\"建立数学模型\",{\"1\":{\"381\":1,\"841\":1}}],[\"建立形式为\",{\"1\":{\"634\":1}}],[\"建立输入特征与输出之间的线性关系\",{\"1\":{\"531\":1}}],[\"建立变量之间的关系模型\",{\"1\":{\"382\":1}}],[\"建立模型\",{\"1\":{\"381\":1}}],[\"圆周率π的值\",{\"1\":{\"1396\":1}}],[\"圆周率\",{\"1\":{\"1217\":1}}],[\"圆形\",{\"1\":{\"680\":1}}],[\"圆柱体等\",{\"1\":{\"671\":1}}],[\"圆的面积\",{\"1\":{\"182\":2}}],[\"体现了其强大的数学计算功能\",{\"1\":{\"1119\":1}}],[\"体现作者综合运用科学理论\",{\"1\":{\"1037\":1}}],[\"体素模型可以用于表示体积数据\",{\"1\":{\"675\":1}}],[\"体素模型使用三维像素\",{\"1\":{\"675\":1}}],[\"体素化\",{\"1\":{\"675\":1}}],[\"体素\",{\"1\":{\"675\":1}}],[\"体积和质量等特性\",{\"1\":{\"671\":1}}],[\"体重和年龄\",{\"1\":{\"614\":1}}],[\"帮助学生理解计算机的工作原理\",{\"1\":{\"2206\":1}}],[\"帮助开发者完成诸如字符串处理\",{\"1\":{\"2035\":1}}],[\"帮助开发人员生成易于理解的api文档\",{\"1\":{\"2004\":1}}],[\"帮助生成更详细的api文档\",{\"1\":{\"2001\":1}}],[\"帮助解决并发问题\",{\"1\":{\"1972\":1}}],[\"帮助改进系统设计\",{\"1\":{\"1913\":1}}],[\"帮助快速定位和解决问题\",{\"1\":{\"1913\":1}}],[\"帮助实现封装\",{\"1\":{\"1617\":1}}],[\"帮助分析图像的频率特性\",{\"1\":{\"786\":1}}],[\"帮助决策者直观理解评价结果\",{\"1\":{\"763\":1}}],[\"帮助决策者进行判断和选择\",{\"1\":{\"756\":1}}],[\"帮助我们直观地理解模型的性能\",{\"1\":{\"662\":1}}],[\"帮助理解潜在的心理因素\",{\"1\":{\"562\":1}}],[\"帮助理解和探索数据\",{\"1\":{\"545\":1}}],[\"擅长处理复杂的非线性数据\",{\"1\":{\"653\":1}}],[\"神经元网络预测\",{\"0\":{\"653\":1}}],[\"神经网络模型\",{\"1\":{\"663\":1}}],[\"神经网络预测模型可以应用于各种任务\",{\"1\":{\"653\":1}}],[\"神经网络回归\",{\"1\":{\"531\":1}}],[\"神经网络的基本组成部分\",{\"0\":{\"439\":1}}],[\"神经网络算法是一种受生物神经系统启发的计算模型\",{\"1\":{\"438\":1}}],[\"神经网络\",{\"0\":{\"438\":1,\"608\":1},\"1\":{\"530\":1,\"586\":1,\"593\":1,\"631\":1,\"653\":1}}],[\"神经网络权重优化等\",{\"1\":{\"437\":1}}],[\"神经网络训练等\",{\"1\":{\"426\":1}}],[\"雨天的概率为0\",{\"1\":{\"650\":1}}],[\"雨天为40\",{\"1\":{\"649\":1}}],[\"晴天后继续是晴天的概率为0\",{\"1\":{\"650\":1}}],[\"晴天和雨天\",{\"1\":{\"649\":1}}],[\"未命名的函数\",{\"1\":{\"1176\":1}}],[\"未来10天的天气预测\",{\"1\":{\"649\":1}}],[\"未被直线覆盖的元素保持不变\",{\"1\":{\"409\":1}}],[\"天气预测\",{\"0\":{\"649\":1}}],[\"经费\",{\"1\":{\"1038\":1}}],[\"经过规定的审批程序可以提前答辩\",{\"1\":{\"1026\":1}}],[\"经过足够长的时间后\",{\"1\":{\"647\":1}}],[\"经典问题\",{\"0\":{\"882\":1}}],[\"经典的人口增长模型如下\",{\"1\":{\"869\":1}}],[\"经济\",{\"1\":{\"844\":1,\"2216\":1}}],[\"经济成本\",{\"1\":{\"761\":1}}],[\"经济性指标\",{\"1\":{\"757\":1}}],[\"经济管理\",{\"1\":{\"755\":1}}],[\"经济模型\",{\"1\":{\"708\":1,\"867\":1}}],[\"经济状况分析\",{\"1\":{\"652\":1}}],[\"经济分析\",{\"1\":{\"645\":1,\"767\":1}}],[\"经济学中的库存模型\",{\"0\":{\"873\":1}}],[\"经济学中的存款模型\",{\"0\":{\"870\":1}}],[\"经济学等领域有广泛应用\",{\"1\":{\"862\":1,\"879\":1}}],[\"经济学模型\",{\"1\":{\"850\":1}}],[\"经济学\",{\"1\":{\"414\":1,\"419\":1,\"747\":1,\"752\":1,\"831\":1,\"848\":1,\"867\":1}}],[\"打印整个映射\",{\"1\":{\"1801\":1}}],[\"打印剩余元素\",{\"1\":{\"1764\":1,\"1766\":1,\"1768\":1}}],[\"打印队列中的元素\",{\"1\":{\"1764\":1}}],[\"打印队列中的所有元素\",{\"1\":{\"1762\":1}}],[\"打印对象信息\",{\"1\":{\"1655\":1}}],[\"打印到命令行\",{\"1\":{\"1194\":1}}],[\"打印预测结果\",{\"1\":{\"643\":1,\"649\":1}}],[\"打开新窗口\",{\"1\":{\"1207\":1}}],[\"打开网格\",{\"1\":{\"1201\":1}}],[\"打开\",{\"1\":{\"1186\":1}}],[\"打开编辑器\",{\"1\":{\"1100\":1,\"1101\":1,\"1102\":1}}],[\"打开文件以写入\",{\"1\":{\"1195\":1}}],[\"打开文件进行写入\",{\"1\":{\"251\":1}}],[\"打开文件进行读取\",{\"1\":{\"251\":1}}],[\"打开文件\",{\"0\":{\"251\":1},\"1\":{\"1192\":1}}],[\"恢复预测数据的原始尺度\",{\"1\":{\"642\":1}}],[\"构造器的名称必须与类名相同\",{\"1\":{\"1711\":1}}],[\"构造器是一种特殊的方法\",{\"1\":{\"1711\":1}}],[\"构造器\",{\"0\":{\"1711\":1}}],[\"构造方法引用\",{\"1\":{\"1991\":1}}],[\"构造方法\",{\"1\":{\"1661\":1}}],[\"构造方法或块之外的变量\",{\"1\":{\"1302\":1}}],[\"构造方法或代码块中声明的变量\",{\"1\":{\"1301\":1}}],[\"构造块在每次创建对象时都会执行一次\",{\"1\":{\"1546\":1}}],[\"构造块可以用来进行对象的通用初始化\",{\"1\":{\"1546\":1}}],[\"构造块\",{\"0\":{\"1546\":1},\"1\":{\"1544\":1,\"1546\":2,\"1549\":3,\"1550\":1}}],[\"构造函数和字段添加文档注释\",{\"1\":{\"2003\":1}}],[\"构造函数和其他方法\",{\"1\":{\"1667\":1,\"1668\":1,\"1669\":1,\"1671\":1,\"1676\":1}}],[\"构造函数等声明之前\",{\"1\":{\"2000\":1}}],[\"构造函数在枚举的每个常量实例创建时被调用\",{\"1\":{\"1607\":1}}],[\"构造函数不会被继承\",{\"1\":{\"1512\":1,\"1515\":1}}],[\"构造函数重载\",{\"1\":{\"1505\":1}}],[\"构造函数\",{\"1\":{\"1307\":1,\"1515\":1}}],[\"构造试函数逼近解\",{\"1\":{\"883\":1}}],[\"构造复杂的实体模型\",{\"1\":{\"671\":1}}],[\"构造实体几何\",{\"1\":{\"671\":1}}],[\"构造数据矩阵b和数据向量y\",{\"1\":{\"641\":1}}],[\"构建一个多项式\",{\"1\":{\"933\":1}}],[\"构建一个n×n的成本矩阵\",{\"1\":{\"409\":1}}],[\"构建多目标规划的数学模型\",{\"1\":{\"841\":1}}],[\"构建拉格朗日函数求解\",{\"1\":{\"834\":1}}],[\"构建于scipy之上\",{\"1\":{\"794\":1}}],[\"构建层次结构模型\",{\"1\":{\"766\":1}}],[\"构建层次结构\",{\"1\":{\"758\":1}}],[\"构建lstm模型\",{\"0\":{\"660\":1}}],[\"构建训练集\",{\"1\":{\"659\":1}}],[\"构建差分方程\",{\"1\":{\"634\":1}}],[\"构建树状结构来组织数据\",{\"1\":{\"586\":1}}],[\"构建数据的层次结构\",{\"1\":{\"540\":1}}],[\"构建列联表\",{\"1\":{\"481\":1}}],[\"构建最优解\",{\"1\":{\"409\":2}}],[\"构建成本矩阵\",{\"1\":{\"409\":1}}],[\"原码\",{\"1\":{\"2154\":1}}],[\"原子变量\",{\"1\":{\"2044\":1}}],[\"原则\",{\"1\":{\"1756\":1,\"1770\":1}}],[\"原理\",{\"1\":{\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":1,\"772\":1,\"773\":1,\"774\":1,\"775\":1}}],[\"原料限制\",{\"1\":{\"721\":1,\"722\":1,\"725\":1}}],[\"原料和劳动力\",{\"1\":{\"720\":1}}],[\"原始数据\",{\"1\":{\"643\":1}}],[\"原始数据序列\",{\"1\":{\"634\":1,\"641\":1,\"642\":1,\"643\":1}}],[\"原创说明\",{\"1\":{\"336\":1}}],[\"累加生成序列\",{\"1\":{\"634\":2}}],[\"白色系统\",{\"1\":{\"633\":1}}],[\"你好\",{\"1\":{\"1970\":1}}],[\"你也可以根据具体需求自定义数据结构\",{\"1\":{\"1733\":1}}],[\"你也可以自定义自己的函数式接口\",{\"1\":{\"1686\":1}}],[\"你也可以指定步长\",{\"1\":{\"1165\":1}}],[\"你应该使用类名作为文件名保存\",{\"1\":{\"1275\":1}}],[\"你将看到反应扩散方程在最终时刻的种群密度分布情况\",{\"1\":{\"928\":1}}],[\"你将看到未来10天的天气预测结果\",{\"1\":{\"651\":1}}],[\"你在太赫兹传感检测\",{\"1\":{\"844\":1}}],[\"你会看到原始数据和预测数据的对比图\",{\"1\":{\"644\":1}}],[\"你想深入了解哪种预测方法\",{\"1\":{\"631\":1}}],[\"你可能有一个list<animal>\",{\"1\":{\"1542\":1}}],[\"你可能发现前两个主成分解释了数据总方差的80\",{\"1\":{\"618\":1}}],[\"你可以创建自己的注解\",{\"1\":{\"1844\":1}}],[\"你可以创建自定义异常类来表示特定的错误条件\",{\"1\":{\"1448\":1}}],[\"你可以对泛型参数设置上限或下限\",{\"1\":{\"1838\":1}}],[\"你可以动态地创建对象\",{\"1\":{\"1825\":1}}],[\"你可以动态地模拟pca降维的过程\",{\"1\":{\"626\":1}}],[\"你可以开发出可重用\",{\"1\":{\"1683\":1}}],[\"你可以方便地处理大量数据\",{\"1\":{\"1349\":1}}],[\"你可以构建出复杂的程序逻辑\",{\"1\":{\"1332\":1}}],[\"你可以将循环和分支语句嵌套使用\",{\"1\":{\"1331\":1}}],[\"你可以在运行时动态创建类的实例\",{\"1\":{\"1828\":1}}],[\"你可以在编辑器中点击行号左侧的灰点来设置断点\",{\"1\":{\"1188\":1}}],[\"你可以在\",{\"1\":{\"1183\":1}}],[\"你可以在一个循环内嵌套另一个循环\",{\"1\":{\"1169\":1}}],[\"你可以在get\",{\"1\":{\"248\":1}}],[\"你可以直接使用方括号\",{\"1\":{\"1130\":1}}],[\"你可以通过反射调用对象的方法\",{\"1\":{\"1830\":1}}],[\"你可以通过创建\",{\"1\":{\"1682\":1}}],[\"你可以通过\",{\"1\":{\"1627\":1}}],[\"你可以通过包管理器安装\",{\"1\":{\"1102\":2}}],[\"你可以通过调整参数来改变管道的形状和路径\",{\"1\":{\"682\":1}}],[\"你可以从其官网下载安装包\",{\"1\":{\"1100\":1,\"1101\":1}}],[\"你可以调整area\",{\"1\":{\"690\":1}}],[\"你可以调整种群大小\",{\"1\":{\"436\":1}}],[\"你可以根据需求进一步扩展\",{\"1\":{\"682\":1}}],[\"你可以根据具体应用场景调整状态空间和转移概率矩阵来构建相应的模型\",{\"1\":{\"652\":1}}],[\"你可以使用python中的scikit\",{\"1\":{\"621\":1}}],[\"你可以使用\",{\"1\":{\"619\":1,\"914\":1,\"1186\":1,\"1187\":1,\"1211\":1}}],[\"你可以使用诸如pandas\",{\"1\":{\"477\":1}}],[\"你可以轻松实现这些判别分析算法\",{\"1\":{\"573\":1}}],[\"温特斯法\",{\"1\":{\"631\":1}}],[\"温度根据降温速率下降\",{\"1\":{\"429\":1}}],[\"温度逐步降低\",{\"1\":{\"422\":1}}],[\"温度\",{\"1\":{\"422\":1}}],[\"少数据\",{\"1\":{\"631\":1,\"633\":1}}],[\"季节性arima\",{\"1\":{\"631\":1}}],[\"趋势或数据点的技术和算法\",{\"1\":{\"631\":1}}],[\"趋势和关系\",{\"1\":{\"464\":1}}],[\"步长\",{\"1\":{\"896\":1}}],[\"步时\",{\"1\":{\"624\":1}}],[\"步骤\",{\"1\":{\"511\":1,\"520\":1}}],[\"后进先出\",{\"1\":{\"1772\":1}}],[\"后缀自增\",{\"1\":{\"1311\":1}}],[\"后缀为\",{\"1\":{\"1259\":2}}],[\"后续可以包含数字\",{\"1\":{\"1305\":1}}],[\"后跟一个字符来表示\",{\"1\":{\"1292\":1}}],[\"后来\",{\"1\":{\"1258\":1}}],[\"后\",{\"1\":{\"618\":1,\"1110\":1,\"2160\":1}}],[\"后端开发\",{\"2\":{\"107\":1,\"110\":1}}],[\"仅运行一次\",{\"1\":{\"1855\":2}}],[\"仅对\",{\"1\":{\"1506\":1}}],[\"仅对同一类可见\",{\"1\":{\"1506\":1}}],[\"仅对定义它的类可见\",{\"1\":{\"1483\":1,\"1712\":1}}],[\"仅优化目标函数\",{\"1\":{\"833\":1}}],[\"仅有亮度信息\",{\"1\":{\"785\":1}}],[\"仅基于数据的特征结构进行降维\",{\"1\":{\"617\":1}}],[\"仅使用前两维数据进行可视化\",{\"1\":{\"569\":1}}],[\"协议的网络应用\",{\"1\":{\"1944\":1}}],[\"协议的编程\",{\"1\":{\"1929\":1}}],[\"协议\",{\"1\":{\"1930\":1,\"1941\":1,\"2212\":1}}],[\"协方差矩阵描述了数据集不同特征之间的关系\",{\"1\":{\"616\":1}}],[\"协同过滤\",{\"1\":{\"599\":1}}],[\"隐藏硬件的复杂性\",{\"1\":{\"2189\":1}}],[\"隐藏依赖\",{\"1\":{\"2015\":1}}],[\"隐藏内部实现细节\",{\"1\":{\"1569\":1}}],[\"隐藏层\",{\"1\":{\"439\":1}}],[\"隐式转换\",{\"1\":{\"1293\":1}}],[\"隐式曲面通过定义一个方程\",{\"1\":{\"676\":1}}],[\"隐函数表示\",{\"1\":{\"676\":1}}],[\"隐语义模型\",{\"1\":{\"599\":1}}],[\"袋装法\",{\"1\":{\"597\":1}}],[\"近端策略优化\",{\"1\":{\"596\":1}}],[\"近邻\",{\"1\":{\"586\":1}}],[\"近邻算法通过计算样本与其最近邻居的距离来进行分类\",{\"1\":{\"581\":1,\"605\":1}}],[\"近邻算法\",{\"0\":{\"581\":1,\"605\":1},\"1\":{\"530\":1,\"593\":1}}],[\"半监督学习结合了监督学习和无监督学习\",{\"1\":{\"595\":1}}],[\"谱聚类\",{\"1\":{\"594\":1}}],[\"朴素贝叶斯是一种基于贝叶斯定理的简单而强大的分类器\",{\"1\":{\"607\":1}}],[\"朴素贝叶斯\",{\"0\":{\"607\":1},\"1\":{\"593\":1}}],[\"音高变换等\",{\"1\":{\"948\":1}}],[\"音频\",{\"1\":{\"1868\":1}}],[\"音频处理中的插值与拟合常用于信号重采样\",{\"1\":{\"948\":1}}],[\"音频处理中的插值与拟合\",{\"0\":{\"948\":1}}],[\"音频等领域\",{\"1\":{\"591\":1}}],[\"音频等形式\",{\"1\":{\"585\":1}}],[\"音乐\",{\"2\":{\"59\":1,\"75\":1}}],[\"涉及隐私\",{\"1\":{\"2216\":1}}],[\"涉及多个领域的知识\",{\"1\":{\"784\":1}}],[\"涉及从数据中识别和分类模式\",{\"1\":{\"584\":1}}],[\"涉及将数据点分配到不同的类别\",{\"1\":{\"583\":1}}],[\"涉及将数据点分配到预定义的类别或标签中\",{\"1\":{\"574\":1}}],[\"准确描述类\",{\"1\":{\"2003\":1}}],[\"准确率\",{\"1\":{\"582\":1,\"586\":1}}],[\"准备写入数据\",{\"1\":{\"1885\":1}}],[\"准备下一次读取\",{\"1\":{\"1883\":1}}],[\"准备数据\",{\"0\":{\"659\":1}}],[\"准备系统镜像\",{\"1\":{\"100\":1}}],[\"准备一台电脑\",{\"1\":{\"100\":1}}],[\"鸢尾花数据集\",{\"1\":{\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"607\":1,\"609\":2}}],[\"鸢尾花分类\",{\"0\":{\"371\":1}}],[\"目录\",{\"1\":{\"1625\":1}}],[\"目录文件\",{\"1\":{\"1110\":1}}],[\"目的是为了访问子类中特有的方法或属性\",{\"1\":{\"1535\":1}}],[\"目的是实现同名方法的不同功能\",{\"1\":{\"1524\":1}}],[\"目的是修改或扩展父类的方法实现\",{\"1\":{\"1524\":1}}],[\"目的\",{\"1\":{\"563\":1,\"1675\":1,\"1676\":1}}],[\"目标规划法\",{\"1\":{\"841\":1}}],[\"目标\",{\"1\":{\"575\":1,\"693\":1}}],[\"目标是在满足一定风险约束的情况下\",{\"1\":{\"836\":1}}],[\"目标是优化决策在随机环境中的表现\",{\"1\":{\"712\":1}}],[\"目标是最小化使用的大钢板数量\",{\"1\":{\"698\":1}}],[\"目标是最小化函数\",{\"1\":{\"434\":1}}],[\"目标是最大化利润\",{\"1\":{\"384\":1}}],[\"目标是找到一个平衡解\",{\"1\":{\"710\":1}}],[\"目标是找到一个指派方案\",{\"1\":{\"409\":1}}],[\"目标是找到使得\",{\"1\":{\"427\":1}}],[\"目标是找到使得目标函数值最小的解\",{\"1\":{\"426\":1}}],[\"目标函数为f1​\",{\"1\":{\"842\":1}}],[\"目标函数或约束中存在非凸部分\",{\"1\":{\"833\":1}}],[\"目标函数和约束都是凸的\",{\"1\":{\"833\":1}}],[\"目标函数和约束条件都是线性的\",{\"1\":{\"706\":1}}],[\"目标函数的系数\",{\"1\":{\"722\":1}}],[\"目标函数是总预期回报或风险\",{\"1\":{\"717\":1}}],[\"目标函数是总运输成本\",{\"1\":{\"717\":1}}],[\"目标函数是总利润\",{\"1\":{\"717\":1}}],[\"目标函数值\",{\"1\":{\"428\":1,\"434\":1}}],[\"目标函数系数\",{\"1\":{\"384\":1}}],[\"目标函数\",{\"0\":{\"427\":1,\"698\":1},\"1\":{\"384\":1,\"429\":1,\"435\":1,\"715\":1,\"721\":1,\"725\":1,\"731\":1,\"737\":1,\"840\":1}}],[\"目标和约束条件\",{\"1\":{\"381\":1}}],[\"便于后续的日志分析和监控\",{\"1\":{\"1927\":1}}],[\"便于监控系统状态和进行安全审计\",{\"1\":{\"1913\":1}}],[\"便于以后恢复\",{\"1\":{\"1861\":1}}],[\"便于调试和日志记录\",{\"1\":{\"1667\":1,\"1678\":1}}],[\"便于数据的可视化和直观理解\",{\"1\":{\"614\":1}}],[\"便于制定有针对性的营销策略\",{\"1\":{\"561\":1}}],[\"便于在程序中进行各种数据处理和操作\",{\"1\":{\"191\":1}}],[\"学\",{\"1\":{\"1117\":1}}],[\"学科和学院的批准\",{\"1\":{\"1034\":1}}],[\"学术活动安排等\",{\"1\":{\"1034\":1}}],[\"学位授予具体要求按学校最新文件执行\",{\"1\":{\"1039\":1}}],[\"学位论文评阅及答辩申请程序和时间安排以及具体要求按照按学校最新文件执行\",{\"1\":{\"1038\":1}}],[\"学位论文评阅和答辩委员会均至少有1位专家来自校外\",{\"1\":{\"1038\":1}}],[\"学位论文应至少有2名具有副高级以上专业技术职称的专家评阅\",{\"1\":{\"1038\":1}}],[\"学位论文应反映研究生综合运用知识技能解决实际问题的能力和水平\",{\"1\":{\"1038\":1}}],[\"学位论文的评审应着重考查作者综合运用科学理论\",{\"1\":{\"1038\":1}}],[\"学位论文选题一经通过论证\",{\"1\":{\"1038\":1}}],[\"学位论文须在导师的指导下由硕士研究生本人独立完成\",{\"1\":{\"1037\":1}}],[\"学位论文\",{\"0\":{\"1037\":1}}],[\"学位论文研究和工作计划\",{\"1\":{\"1034\":1}}],[\"学位论文符合申请答辩要求的研究生\",{\"1\":{\"1026\":1}}],[\"学位课程11学分\",{\"1\":{\"1030\":1}}],[\"学分要求\",{\"0\":{\"1030\":1}}],[\"学制和学习年限\",{\"0\":{\"1026\":1}}],[\"学生等分为不同的组\",{\"1\":{\"561\":1}}],[\"学习计算机科学导论的建议\",{\"0\":{\"2217\":1}}],[\"学习如何测试和改进用户界面的可用性\",{\"1\":{\"2215\":1}}],[\"学习如何设计有效的数据库结构\",{\"1\":{\"2213\":1}}],[\"学习如何设计\",{\"1\":{\"2208\":1}}],[\"学习基本的机器学习算法\",{\"1\":{\"2214\":1}}],[\"学习数据库管理系统\",{\"1\":{\"2213\":1}}],[\"学习网络的基本概念\",{\"1\":{\"2212\":1}}],[\"学习操作系统的基本功能\",{\"1\":{\"2211\":1}}],[\"学习一种或几种编程语言的基础\",{\"1\":{\"2209\":1}}],[\"学习\",{\"2\":{\"972\":1}}],[\"学习率\",{\"1\":{\"447\":1}}],[\"学习手册\",{\"2\":{\"116\":1,\"264\":1,\"278\":1,\"288\":1,\"295\":1,\"312\":1}}],[\"病人\",{\"1\":{\"561\":1}}],[\"病菌与钢铁\",{\"0\":{\"84\":1},\"2\":{\"86\":1}}],[\"z0\",{\"1\":{\"1412\":2,\"1418\":2,\"1950\":2}}],[\"za\",{\"1\":{\"1412\":2,\"1418\":3,\"1950\":2,\"2048\":1}}],[\"zone\",{\"1\":{\"1405\":1}}],[\"zoneid\",{\"1\":{\"1405\":2}}],[\"zoneddatetime等类\",{\"1\":{\"1408\":1}}],[\"zoneddatetimeexample\",{\"1\":{\"1405\":1}}],[\"zoneddatetime表示带有时区的日期时间\",{\"1\":{\"1405\":1}}],[\"zoneddatetime\",{\"1\":{\"1403\":1,\"1405\":7,\"2041\":1}}],[\"zotero中文社区\",{\"0\":{\"1083\":1}}],[\"zotero官方文档\",{\"0\":{\"1082\":1}}],[\"zotero\",{\"0\":{\"1079\":1,\"1081\":1},\"1\":{\"1079\":1,\"1082\":1,\"1083\":1}}],[\"zero\",{\"1\":{\"1161\":1,\"1321\":1,\"1856\":1,\"1899\":1,\"1902\":1,\"1904\":1,\"2000\":2}}],[\"zerosarray\",{\"1\":{\"1156\":1}}],[\"zeros\",{\"1\":{\"409\":8,\"457\":2,\"641\":2,\"642\":1,\"738\":4,\"889\":1,\"895\":1,\"903\":1,\"911\":2,\"927\":1,\"964\":1,\"1131\":1,\"1156\":1,\"1222\":1}}],[\"zemlin\",{\"1\":{\"737\":1}}],[\"z=σx−μ​\",{\"1\":{\"763\":1}}],[\"z=40x1​+30x2​+20x3​\",{\"1\":{\"731\":1}}],[\"z=5x1​+4x2​\",{\"1\":{\"721\":1,\"725\":1}}],[\"z=c1​x1​+c2​x2​+⋯+cn​xn​\",{\"1\":{\"715\":1}}],[\"zlabel\",{\"1\":{\"680\":1,\"1206\":1}}],[\"z\",{\"1\":{\"556\":3,\"565\":6,\"676\":1,\"680\":13,\"715\":1,\"721\":1,\"725\":1,\"731\":1,\"763\":1,\"916\":2,\"1131\":1,\"1181\":3,\"1206\":3,\"1207\":4,\"1222\":1,\"1276\":4,\"1418\":1,\"1676\":2,\"2048\":1}}],[\"发送数据报文\",{\"1\":{\"1938\":1}}],[\"发送数据到客户端\",{\"1\":{\"1890\":1}}],[\"发\",{\"1\":{\"1117\":1}}],[\"发明专利\",{\"1\":{\"1038\":1}}],[\"发现潜在主题或类别\",{\"1\":{\"542\":1}}],[\"发生之前的生存时间\",{\"1\":{\"476\":1}}],[\"市场细分\",{\"1\":{\"542\":1}}],[\"市场分析等领域具有广泛应用\",{\"1\":{\"474\":1}}],[\"推广应用\",{\"1\":{\"1038\":1}}],[\"推广和管理理念\",{\"1\":{\"1025\":1}}],[\"推广及管理\",{\"1\":{\"1024\":1}}],[\"推荐在任何数据库查询和更新中使用\",{\"1\":{\"1984\":1}}],[\"推荐使用类型\",{\"1\":{\"1986\":1}}],[\"推荐使用\",{\"1\":{\"1519\":1,\"1672\":1}}],[\"推荐使用tex\",{\"1\":{\"1102\":1}}],[\"推荐使用texshop\",{\"1\":{\"1101\":1}}],[\"推荐使用texworks\",{\"1\":{\"1100\":1,\"1102\":1}}],[\"推荐使用mactex\",{\"1\":{\"1101\":1}}],[\"推荐使用miktex或tex\",{\"1\":{\"1100\":1}}],[\"推荐算法用于为用户提供个性化的建议\",{\"1\":{\"599\":1}}],[\"推荐治疗方案\",{\"1\":{\"534\":1}}],[\"推导式\",{\"0\":{\"220\":1},\"1\":{\"220\":1}}],[\"股票价格预测\",{\"1\":{\"534\":1}}],[\"情感分析\",{\"1\":{\"534\":1}}],[\"车辆识别\",{\"1\":{\"534\":1}}],[\"识别图像中的物体或场景\",{\"1\":{\"534\":1}}],[\"识别不属于任何簇的异常数据点\",{\"1\":{\"516\":1}}],[\"防止未经授权的访问和操作\",{\"1\":{\"2192\":1}}],[\"防止未经授权的访问和恶意攻击\",{\"1\":{\"2189\":1}}],[\"防止反序列化创建新的对象\",{\"1\":{\"2014\":1}}],[\"防止外部实例化\",{\"1\":{\"2009\":1}}],[\"防止外部代码对其进行任意的修改\",{\"1\":{\"1709\":1}}],[\"防止程序崩溃\",{\"1\":{\"1442\":1}}],[\"防止执行下一个case块\",{\"1\":{\"1322\":1}}],[\"防止线程缓存变量的副本\",{\"1\":{\"1308\":1}}],[\"防止过拟合的一种技术\",{\"1\":{\"533\":1}}],[\"防止算法过早收敛\",{\"1\":{\"432\":1}}],[\"正或负\",{\"1\":{\"2154\":3}}],[\"正数的反码与其原码相同\",{\"1\":{\"2154\":1}}],[\"正数的补码与其原码相同\",{\"1\":{\"2154\":1}}],[\"正数补0\",{\"1\":{\"1315\":1}}],[\"正在执行\",{\"1\":{\"1961\":1,\"1962\":1,\"1966\":1}}],[\"正在监听端口\",{\"1\":{\"1936\":1,\"1939\":1}}],[\"正则表达式广泛用于数据验证\",{\"1\":{\"1957\":1}}],[\"正则表达式广泛应用于输入验证\",{\"1\":{\"1419\":1}}],[\"正则表达式提供了强大的文本处理功能\",{\"1\":{\"1957\":1}}],[\"正则表达式支持使用圆括号\",{\"1\":{\"1955\":1}}],[\"正则表达式使用示例\",{\"1\":{\"1949\":1}}],[\"正则表达式由一些特殊字符和字符序列组成\",{\"1\":{\"1947\":1}}],[\"正则表达式的标志\",{\"0\":{\"1953\":1}}],[\"正则表达式的语法\",{\"0\":{\"1947\":1}}],[\"正则表达式的基础\",{\"0\":{\"1946\":1}}],[\"正则表达式在文本解析\",{\"1\":{\"1945\":1}}],[\"正则表达式是一种强大的文本处理工具\",{\"1\":{\"1945\":1}}],[\"正则表达式用于文本匹配和处理\",{\"1\":{\"1419\":1}}],[\"正则表达式\",{\"0\":{\"1409\":1,\"1945\":1},\"1\":{\"1409\":1,\"1410\":1,\"1947\":1}}],[\"正则化\",{\"1\":{\"533\":1}}],[\"正切函数\",{\"1\":{\"1218\":1}}],[\"正弦函数\",{\"1\":{\"1218\":1}}],[\"正向指标\",{\"1\":{\"757\":1}}],[\"正确重写和使用这些方法\",{\"1\":{\"1678\":1}}],[\"正确理解和使用这些方法对于编写高质量\",{\"1\":{\"1678\":1}}],[\"正确地比较对象的逻辑相等性\",{\"1\":{\"1676\":1}}],[\"正确地重写\",{\"1\":{\"1674\":1}}],[\"正确处理多线程的同步和通信\",{\"1\":{\"1673\":1}}],[\"正确分类的比例\",{\"1\":{\"586\":1}}],[\"正确预测的样本占总样本的比例\",{\"1\":{\"582\":1}}],[\"正面\",{\"1\":{\"575\":1}}],[\"正态分布的概率密度函数\",{\"1\":{\"460\":1}}],[\"欠拟合\",{\"1\":{\"533\":1}}],[\"均值为0\",{\"1\":{\"763\":1}}],[\"均值\",{\"1\":{\"759\":1,\"1229\":1}}],[\"均值聚类\",{\"1\":{\"594\":1}}],[\"均衡\",{\"1\":{\"745\":1}}],[\"均方误差等\",{\"1\":{\"532\":1}}],[\"均匀交叉等\",{\"1\":{\"432\":1}}],[\"召回率\",{\"1\":{\"532\":1,\"582\":1}}],[\"鸟等\",{\"1\":{\"530\":1}}],[\"狗\",{\"1\":{\"530\":1,\"575\":1}}],[\"猫\",{\"1\":{\"530\":1,\"575\":1}}],[\"邮件是垃圾邮件或不是垃圾邮件\",{\"1\":{\"530\":1}}],[\"房间数\",{\"1\":{\"528\":1}}],[\"尤其适用于函数式接口的实现\",{\"1\":{\"1694\":1}}],[\"尤其在处理大数据或内存受限的环境中\",{\"1\":{\"2165\":1}}],[\"尤其在涉及安全和版本兼容性时\",{\"1\":{\"1866\":1}}],[\"尤其在\",{\"1\":{\"1679\":1}}],[\"尤其在学术研究和工程应用中\",{\"1\":{\"806\":1}}],[\"尤其在深度学习中应用广泛\",{\"1\":{\"631\":1}}],[\"尤其在类别分布近似正态分布时效果较好\",{\"1\":{\"526\":1}}],[\"尤其是基于\",{\"1\":{\"1929\":1}}],[\"尤其是关联度的计算过程较为繁琐\",{\"1\":{\"769\":1}}],[\"尤其是lstm\",{\"1\":{\"663\":1}}],[\"尤其是在列表中间操作时\",{\"1\":{\"1725\":1}}],[\"尤其是在中间位置进行操作时\",{\"1\":{\"1722\":1}}],[\"尤其是在处理集合框架和并发编程时\",{\"1\":{\"1684\":1}}],[\"尤其是在处理高维数据时\",{\"1\":{\"620\":1}}],[\"尤其是在需要初始化静态资源或处理多线程操作时\",{\"1\":{\"1550\":1}}],[\"尤其是在需要将基本数据类型作为对象处理时\",{\"1\":{\"1386\":1}}],[\"尤其是在涉及到各种时间计算和格式化时\",{\"1\":{\"1399\":1}}],[\"尤其是在数据服从多元正态分布的情况下表现良好\",{\"1\":{\"572\":1}}],[\"尤其是在社会科学和心理学研究中比较常见\",{\"1\":{\"560\":1}}],[\"尤其是深度学习模型\",{\"1\":{\"536\":1}}],[\"尤其是降温过程较慢时\",{\"1\":{\"425\":1}}],[\"医学成像\",{\"1\":{\"675\":1,\"676\":1}}],[\"医学诊断等\",{\"1\":{\"574\":1}}],[\"医学诊断\",{\"1\":{\"523\":1}}],[\"医疗数据分析等\",{\"1\":{\"663\":1}}],[\"医疗诊断\",{\"1\":{\"534\":1}}],[\"医疗健康等多个领域\",{\"1\":{\"464\":1}}],[\"异步性\",{\"1\":{\"2191\":1}}],[\"异步的io\",{\"0\":{\"272\":1}}],[\"异常等\",{\"1\":{\"2000\":1}}],[\"异常信息明确\",{\"1\":{\"1910\":1}}],[\"异常被捕获\",{\"1\":{\"1903\":1,\"1904\":1}}],[\"异常被引发\",{\"1\":{\"1900\":1}}],[\"异常的继承体系\",{\"0\":{\"1896\":1}}],[\"异常应该用来处理意外情况\",{\"1\":{\"1452\":1}}],[\"异常分类\",{\"0\":{\"1449\":1},\"1\":{\"1453\":1}}],[\"异常类的层次结构如下所示\",{\"1\":{\"1896\":1}}],[\"异常类\",{\"1\":{\"1443\":1}}],[\"异常\",{\"0\":{\"1539\":1},\"1\":{\"1443\":1,\"1457\":1,\"1895\":2,\"1906\":1,\"1907\":1}}],[\"异常处理机制提供了一种强大的方式来处理程序运行时的错误和异常情况\",{\"1\":{\"1911\":1}}],[\"异常处理机制较为昂贵\",{\"1\":{\"1910\":1}}],[\"异常处理按照从上到下的顺序进行\",{\"1\":{\"1901\":1}}],[\"异常处理的工作流程\",{\"0\":{\"1900\":1}}],[\"异常处理的关键字\",{\"0\":{\"1897\":1}}],[\"异常处理通常使用\",{\"1\":{\"1898\":1}}],[\"异常处理最佳实践\",{\"0\":{\"1452\":1}}],[\"异常处理语法\",{\"0\":{\"1444\":1}}],[\"异常处理是管理程序运行时错误的重要机制\",{\"1\":{\"1442\":1}}],[\"异常处理\",{\"0\":{\"1428\":1,\"1442\":1,\"1894\":1},\"1\":{\"1259\":1,\"1429\":1}}],[\"异常数据可能显著影响决策边界\",{\"1\":{\"526\":1}}],[\"异常检测等技术在各个领域都有广泛应用\",{\"1\":{\"545\":1}}],[\"异常检测等任务中非常有用\",{\"1\":{\"537\":1}}],[\"异常检测\",{\"1\":{\"516\":1,\"542\":1}}],[\"范围\",{\"1\":{\"1151\":1}}],[\"范围为\",{\"1\":{\"515\":1}}],[\"范围在\",{\"1\":{\"446\":1}}],[\"凝聚层次聚类\",{\"1\":{\"512\":1}}],[\"聚类算法\",{\"1\":{\"586\":1,\"594\":1}}],[\"聚类效果评价指标\",{\"0\":{\"515\":1}}],[\"聚类\",{\"0\":{\"511\":1,\"517\":1},\"1\":{\"517\":1,\"537\":1,\"538\":1,\"540\":1,\"543\":1,\"545\":1,\"549\":1,\"551\":1,\"591\":1}}],[\"聚类分析可以使用内置函数实现\",{\"1\":{\"554\":1}}],[\"聚类分析可以帮助研究者发现数据中的潜在结构和模式\",{\"1\":{\"472\":1}}],[\"聚类分析不依赖预先标注的类别标签\",{\"1\":{\"509\":1}}],[\"聚类分析是一种无监督学习方法\",{\"1\":{\"472\":1,\"508\":1}}],[\"聚类分析\",{\"0\":{\"472\":1,\"485\":1,\"508\":1,\"540\":1}}],[\"聚类分析方法与判别分析\",{\"0\":{\"507\":1},\"1\":{\"378\":1}}],[\"曼哈顿距离\",{\"1\":{\"509\":1}}],[\"衡量方案对社会的影响\",{\"1\":{\"757\":1}}],[\"衡量方案的环境影响\",{\"1\":{\"757\":1}}],[\"衡量方案的技术可行性\",{\"1\":{\"757\":1}}],[\"衡量方案的经济效益\",{\"1\":{\"757\":1}}],[\"衡量聚类结果与真实标签的相似性\",{\"1\":{\"515\":1}}],[\"衡量聚类结果与真实标签之间的信息共享\",{\"1\":{\"515\":1}}],[\"衡量数据对象之间的相似程度\",{\"1\":{\"509\":1}}],[\"衡量模型预测与实际结果的差距\",{\"1\":{\"440\":1}}],[\"簇内的数据点相似度高\",{\"1\":{\"586\":1}}],[\"簇大小相似的数据\",{\"1\":{\"553\":1}}],[\"簇\",{\"1\":{\"509\":1}}],[\"评论家\",{\"1\":{\"596\":1}}],[\"评估不同权重设置对评价结果的影响\",{\"1\":{\"763\":1}}],[\"评估分类模型的性能\",{\"1\":{\"586\":1}}],[\"评估模型\",{\"1\":{\"608\":1,\"610\":1}}],[\"评估模型的性能和泛化能力\",{\"1\":{\"586\":1}}],[\"评估模型在不同分类阈值下的性能\",{\"1\":{\"582\":1}}],[\"评估和选择合适的模型变得更加困难\",{\"1\":{\"546\":1}}],[\"评估适应度\",{\"1\":{\"433\":1}}],[\"评价指标以及应用场景\",{\"1\":{\"508\":1}}],[\"支持网络通信和资源共享\",{\"1\":{\"2192\":1}}],[\"支持虚拟内存管理\",{\"1\":{\"2192\":1}}],[\"支持计算机联网和远程访问\",{\"1\":{\"2190\":1}}],[\"支持\",{\"1\":{\"2040\":3}}],[\"支持文件\",{\"1\":{\"2039\":1}}],[\"支持声明性的数据处理\",{\"1\":{\"1992\":1}}],[\"支持阻塞操作的线程安全队列\",{\"1\":{\"1971\":1}}],[\"支持阻塞操作的队列接口\",{\"1\":{\"1760\":1}}],[\"支持单线程处理多个通道\",{\"1\":{\"1892\":1}}],[\"支持单继承\",{\"1\":{\"1515\":1}}],[\"支持多用户环境\",{\"1\":{\"2192\":1}}],[\"支持多任务和多用户环境\",{\"1\":{\"2190\":1}}],[\"支持多路复用\",{\"1\":{\"1892\":1}}],[\"支持多种配置格式\",{\"1\":{\"1921\":1}}],[\"支持多种日志输出方式和配置\",{\"1\":{\"1914\":1}}],[\"支持多种求解器\",{\"1\":{\"838\":1}}],[\"支持多种编程语言\",{\"1\":{\"794\":1}}],[\"支持非阻塞\",{\"1\":{\"1880\":1}}],[\"支持非阻塞模式和多路复用\",{\"1\":{\"1878\":1}}],[\"支持按行写入\",{\"1\":{\"1874\":1,\"1875\":1}}],[\"支持按行读取\",{\"1\":{\"1873\":1,\"1875\":1}}],[\"支持高效的并发操作\",{\"1\":{\"1808\":1}}],[\"支持并发操作\",{\"1\":{\"1799\":1}}],[\"支持先进先出\",{\"1\":{\"1750\":1}}],[\"支持快速随机访问\",{\"1\":{\"1737\":1}}],[\"支持的数据结构包括列表\",{\"1\":{\"1734\":1}}],[\"支持反射等高级特性\",{\"1\":{\"1678\":1}}],[\"支持在集合\",{\"1\":{\"1676\":1}}],[\"支持在一个函数内定义另一个函数\",{\"1\":{\"1175\":1}}],[\"支持构造函数和成员变量\",{\"1\":{\"1584\":1}}],[\"支持抽象和解耦的工具\",{\"1\":{\"1572\":1}}],[\"支持基本输出\",{\"1\":{\"1429\":1}}],[\"支持标准的三角函数\",{\"1\":{\"1218\":1}}],[\"支持面向对象编程\",{\"1\":{\"1183\":1}}],[\"支持各种图像处理操作\",{\"1\":{\"800\":1}}],[\"支持各种图像编辑和处理操作\",{\"1\":{\"794\":1}}],[\"支持插件扩展和脚本编写\",{\"1\":{\"798\":1}}],[\"支持向量机通过寻找一个最佳的超平面将不同类别的样本分开\",{\"1\":{\"578\":1,\"602\":1}}],[\"支持向量机\",{\"0\":{\"578\":1,\"602\":1},\"1\":{\"530\":1,\"586\":1,\"593\":1,\"631\":1,\"2214\":1}}],[\"支持向量回归是一种非线性回归模型\",{\"1\":{\"502\":1}}],[\"支持向量回归\",{\"0\":{\"502\":1},\"1\":{\"504\":1,\"531\":1,\"593\":1}}],[\"支持三种不同的数值类型\",{\"1\":{\"137\":1}}],[\"弹性网回归结合了l1和l2正则化\",{\"1\":{\"500\":1}}],[\"弹性网回归\",{\"0\":{\"500\":1},\"1\":{\"504\":1,\"593\":1}}],[\"岭回归是线性回归的一个变体\",{\"1\":{\"498\":1}}],[\"岭回归\",{\"0\":{\"498\":1},\"1\":{\"504\":1,\"531\":1,\"593\":1}}],[\"计数数据等\",{\"1\":{\"495\":1}}],[\"计算中\",{\"1\":{\"1963\":1}}],[\"计算矩阵的特征值和特征向量\",{\"1\":{\"1233\":1}}],[\"计算概率密度函数\",{\"1\":{\"1230\":1}}],[\"计算均值\",{\"1\":{\"1229\":1}}],[\"计算函数的不定积分和定积分\",{\"1\":{\"1226\":1}}],[\"计算函数的导数\",{\"1\":{\"1225\":1}}],[\"计算乘积\",{\"1\":{\"1182\":1}}],[\"计算两个数的乘积\",{\"1\":{\"1182\":1}}],[\"计算两个日期之间的差异\",{\"1\":{\"234\":1}}],[\"计算\",{\"1\":{\"1181\":1,\"1207\":1,\"2156\":1}}],[\"计算子矩阵的特征值\",{\"1\":{\"1144\":1}}],[\"计算子矩阵的行列式\",{\"1\":{\"1144\":1}}],[\"计算特征值\",{\"1\":{\"1143\":1}}],[\"计算行列式\",{\"1\":{\"1143\":1}}],[\"计算每一行的和\",{\"1\":{\"1142\":1,\"1144\":1}}],[\"计算每一列的和\",{\"1\":{\"1142\":1,\"1144\":1}}],[\"计算每个方案与理想方案之间的关联度\",{\"1\":{\"763\":1}}],[\"计算每个方案与理想解和负理想解的距离\",{\"1\":{\"763\":1}}],[\"计算每个个体的适应度\",{\"1\":{\"435\":1}}],[\"计算顶点1到顶点4的最短路径\",{\"1\":{\"955\":1}}],[\"计算插值\",{\"1\":{\"935\":1}}],[\"计算冷却常数\",{\"1\":{\"857\":1}}],[\"计算二值图像中区域的属性\",{\"1\":{\"816\":1}}],[\"计算图像的统计特性\",{\"1\":{\"816\":1}}],[\"计算过程较复杂\",{\"1\":{\"775\":1}}],[\"计算复杂\",{\"1\":{\"769\":1}}],[\"计算复杂度较高\",{\"1\":{\"514\":1,\"774\":1}}],[\"计算复杂度高\",{\"1\":{\"512\":1,\"540\":1,\"541\":1}}],[\"计算指标的相对权重\",{\"1\":{\"763\":1}}],[\"计算量大\",{\"1\":{\"754\":1}}],[\"计算较为复杂\",{\"1\":{\"754\":1}}],[\"计算各方案与理想点之间的距离\",{\"1\":{\"773\":1}}],[\"计算各方案的综合得分\",{\"1\":{\"753\":1}}],[\"计算各个方案的综合得分\",{\"1\":{\"763\":1}}],[\"计算各类别的均值向量和全局均值\",{\"1\":{\"520\":1}}],[\"计算在指定区域内铺设瓷砖的数量\",{\"1\":{\"689\":1}}],[\"计算瓷砖在x和y方向上的数量\",{\"1\":{\"688\":1}}],[\"计算模型参数a和b\",{\"1\":{\"641\":1}}],[\"计算样本数据的协方差矩阵\",{\"1\":{\"626\":1}}],[\"计算投影到第\",{\"1\":{\"624\":1}}],[\"计算协方差矩阵的特征值和特征向量\",{\"1\":{\"616\":1,\"624\":1}}],[\"计算协方差矩阵\",{\"1\":{\"616\":1,\"624\":1}}],[\"计算数据点之间的距离\",{\"1\":{\"556\":1}}],[\"计算资源\",{\"1\":{\"536\":1}}],[\"计算效率高\",{\"1\":{\"526\":1,\"540\":1}}],[\"计算成本较高\",{\"1\":{\"525\":1}}],[\"计算成本低\",{\"1\":{\"525\":1}}],[\"计算准确率\",{\"1\":{\"524\":1,\"535\":1}}],[\"计算类内散布矩阵和类间散布矩阵\",{\"1\":{\"520\":1}}],[\"计算皮尔逊相关系数\",{\"1\":{\"482\":2}}],[\"计算cronbach\",{\"1\":{\"480\":1}}],[\"计算描述统计量\",{\"1\":{\"478\":1}}],[\"计算误差\",{\"1\":{\"447\":1}}],[\"计算适应度函数\",{\"1\":{\"434\":1}}],[\"计算种群中每个个体的适应度\",{\"1\":{\"433\":1}}],[\"计算时间较长\",{\"1\":{\"425\":1}}],[\"计算目标函数值的变化\",{\"1\":{\"423\":1}}],[\"计算该路径的最小剩余容量\",{\"1\":{\"398\":1}}],[\"计算最大流\",{\"1\":{\"398\":1,\"399\":1}}],[\"计算最小生成树\",{\"1\":{\"394\":1,\"964\":1,\"965\":1}}],[\"计算最短路径\",{\"1\":{\"393\":1,\"955\":1}}],[\"计算源点1到其他顶点的最短路径\",{\"1\":{\"394\":1,\"958\":1,\"959\":1}}],[\"计算连通分量\",{\"1\":{\"393\":1,\"955\":1}}],[\"计算所有顶点对之间的最短路径\",{\"1\":{\"392\":1,\"960\":1}}],[\"计算机硬件系统\",{\"2\":{\"2222\":1}}],[\"计算机组成\",{\"2\":{\"2222\":1}}],[\"计算机组成原理\",{\"0\":{\"2220\":1,\"2304\":1},\"1\":{\"1459\":1}}],[\"计算机导论\",{\"2\":{\"2219\":1}}],[\"计算机犯罪\",{\"1\":{\"2216\":1}}],[\"计算机伦理\",{\"1\":{\"2216\":1}}],[\"计算机使用二进制表示数据\",{\"1\":{\"2207\":1}}],[\"计算机的组成\",{\"1\":{\"2207\":1}}],[\"计算机研究与发展\",{\"1\":{\"1040\":1}}],[\"计算机学报\",{\"1\":{\"1040\":1}}],[\"计算机英语\",{\"0\":{\"1019\":1},\"2\":{\"1021\":1}}],[\"计算机视觉等\",{\"1\":{\"2214\":1}}],[\"计算机视觉\",{\"0\":{\"975\":1}}],[\"计算机图形学\",{\"1\":{\"932\":1}}],[\"计算机仿真\",{\"1\":{\"874\":1}}],[\"计算机科学导论\",{\"0\":{\"2206\":1},\"1\":{\"2206\":1}}],[\"计算机科学\",{\"1\":{\"747\":1}}],[\"计算机科学等多个领域有广泛应用\",{\"1\":{\"744\":1}}],[\"计算机动画\",{\"1\":{\"676\":1}}],[\"计算机辅助设计\",{\"1\":{\"670\":1}}],[\"计算机网络基础\",{\"1\":{\"2212\":1}}],[\"计算机网络\",{\"0\":{\"2235\":1,\"2306\":1},\"1\":{\"1459\":1},\"2\":{\"344\":1,\"2231\":1,\"2234\":1,\"2237\":1}}],[\"计算机基础\",{\"0\":{\"342\":1,\"1459\":1},\"2\":{\"343\":1,\"344\":1,\"2204\":1,\"2218\":1,\"2221\":1,\"2224\":1,\"2227\":1,\"2230\":1,\"2233\":1,\"2236\":1}}],[\"计算阶乘的递归函数\",{\"1\":{\"213\":1}}],[\"形\",{\"1\":{\"1117\":1}}],[\"形式如下\",{\"1\":{\"864\":1}}],[\"形式为\",{\"1\":{\"491\":1,\"492\":1}}],[\"形态学操作用于处理图像的结构特征\",{\"1\":{\"825\":1}}],[\"形成一条最优路径\",{\"1\":{\"739\":1}}],[\"形成螺旋形\",{\"1\":{\"681\":1}}],[\"形成树状结构\",{\"1\":{\"579\":1,\"603\":1}}],[\"形成新种群\",{\"1\":{\"433\":1}}],[\"形状不规则的簇\",{\"1\":{\"553\":1}}],[\"三元运算符是一种简洁的条件语句\",{\"1\":{\"1316\":1}}],[\"三元运算符\",{\"0\":{\"1316\":1}}],[\"三个版本\",{\"0\":{\"1261\":1}}],[\"三角函数\",{\"0\":{\"1218\":1,\"1393\":1}}],[\"三\",{\"0\":{\"1027\":1,\"1032\":1,\"1036\":1,\"1060\":1,\"1698\":1,\"1711\":1,\"1746\":1,\"1761\":1,\"1775\":1,\"1785\":1,\"1800\":1,\"1821\":1,\"1872\":1,\"1884\":1,\"1897\":1,\"1915\":1,\"1932\":1,\"1948\":1,\"1964\":1,\"1976\":1,\"2024\":1,\"2046\":1},\"1\":{\"1027\":1}}],[\"三千年前\",{\"0\":{\"988\":1}}],[\"三次样条拟合\",{\"1\":{\"939\":1}}],[\"三次的等\",{\"1\":{\"939\":1}}],[\"三维曲面图\",{\"1\":{\"1207\":1}}],[\"三维曲线图\",{\"1\":{\"1206\":1}}],[\"三维网格图\",{\"1\":{\"1207\":1}}],[\"三维铺设\",{\"1\":{\"691\":1}}],[\"三维纹理\",{\"1\":{\"675\":1}}],[\"三维扫描\",{\"1\":{\"674\":1}}],[\"三组数据\",{\"1\":{\"483\":1}}],[\"三级标题\",{\"1\":{\"17\":1}}],[\"两个对应的二进制位中有一个为1\",{\"1\":{\"1315\":1}}],[\"两个对应的二进制位都为1\",{\"1\":{\"1315\":1}}],[\"两个变量的数据\",{\"1\":{\"482\":1}}],[\"两千年前\",{\"0\":{\"989\":1}}],[\"两种聚类可以使用类似的算法\",{\"1\":{\"563\":1}}],[\"两组样本数据\",{\"1\":{\"479\":1}}],[\"疾病复发等\",{\"1\":{\"476\":1}}],[\"信号处理\",{\"1\":{\"932\":1}}],[\"信号分析\",{\"1\":{\"867\":1}}],[\"信息化\",{\"1\":{\"1025\":1}}],[\"信息不完备的系统\",{\"1\":{\"769\":1}}],[\"信息不完全系统的预测方法\",{\"1\":{\"631\":1}}],[\"信息量越多\",{\"1\":{\"767\":1}}],[\"信息熵越小\",{\"1\":{\"763\":1}}],[\"信息\",{\"1\":{\"745\":1}}],[\"信息完全未知\",{\"1\":{\"633\":1}}],[\"信息完全已知\",{\"1\":{\"633\":1}}],[\"信用评分\",{\"1\":{\"534\":1}}],[\"信用评分等领域具有广泛应用\",{\"1\":{\"473\":1}}],[\"信度分析是评估问卷\",{\"1\":{\"467\":1}}],[\"信度分析用于评估测量工具的稳定性和可靠性\",{\"1\":{\"467\":1}}],[\"信度分析\",{\"0\":{\"467\":1,\"480\":1},\"1\":{\"477\":1}}],[\"判别分析用于分类问题\",{\"1\":{\"572\":1}}],[\"判别分析的优势与局限性\",{\"0\":{\"526\":1}}],[\"判别分析的应用场景\",{\"0\":{\"523\":1,\"572\":1}}],[\"判别分析的主要类型\",{\"0\":{\"519\":1}}],[\"判别分析的主要目标是找到能够最大化类间差异并最小化类内差异的决策边界\",{\"1\":{\"518\":1}}],[\"判别分析在医学诊断\",{\"1\":{\"473\":1}}],[\"判别分析是一种有监督学习方法\",{\"1\":{\"473\":1,\"518\":1}}],[\"判别分析\",{\"0\":{\"473\":1,\"486\":1},\"1\":{\"518\":1,\"567\":1}}],[\"判断映射是否为空\",{\"1\":{\"1798\":1}}],[\"判断映射中是否包含一个或多个指定的值\",{\"1\":{\"1798\":1}}],[\"判断映射中是否包含指定的键\",{\"1\":{\"1798\":1}}],[\"判断集合中是否包含某个元素\",{\"1\":{\"1786\":1,\"1790\":1,\"1792\":1}}],[\"判断集合中是否包含指定的元素\",{\"1\":{\"1783\":1}}],[\"判断集合是否为空\",{\"1\":{\"1783\":1}}],[\"判断栈是否为空\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"判断是否包含元素\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"判断是否可信\",{\"1\":{\"856\":1}}],[\"判断的字段\",{\"1\":{\"1676\":1}}],[\"判断对象的类型\",{\"1\":{\"1670\":1}}],[\"判断两个对象的内容是否相等\",{\"1\":{\"1668\":1}}],[\"判断两个样本均值是否显著不同\",{\"1\":{\"479\":1}}],[\"判断张某的证言是否可信\",{\"1\":{\"857\":1}}],[\"判断可信性\",{\"1\":{\"857\":1}}],[\"判断分析\",{\"0\":{\"518\":1}}],[\"判断\",{\"0\":{\"202\":1}}],[\"方便使用\",{\"1\":{\"2015\":1}}],[\"方便调试和日志记录\",{\"1\":{\"1675\":1}}],[\"方向\",{\"1\":{\"1892\":1}}],[\"方差\",{\"1\":{\"1229\":1}}],[\"方差和标准差\",{\"1\":{\"1229\":1}}],[\"方差分析\",{\"0\":{\"470\":1,\"483\":1},\"1\":{\"470\":1}}],[\"方可申请参加学位论文答辩\",{\"1\":{\"1038\":1}}],[\"方针\",{\"1\":{\"1025\":1}}],[\"方程的\",{\"1\":{\"927\":1}}],[\"方程是一种常见的反应扩散方程\",{\"1\":{\"927\":1}}],[\"方程\",{\"0\":{\"927\":1}}],[\"方程求解\",{\"1\":{\"913\":1}}],[\"方案越优\",{\"1\":{\"769\":1}}],[\"方案排序与选择\",{\"1\":{\"753\":1}}],[\"方法设置其在窗口中的位置和大小\",{\"1\":{\"2023\":1}}],[\"方法实现\",{\"1\":{\"2014\":1}}],[\"方法进行同步\",{\"1\":{\"2011\":1}}],[\"方法进行资源清理\",{\"1\":{\"1672\":1}}],[\"方法提交或回滚事务\",{\"1\":{\"1985\":1}}],[\"方法执行插入\",{\"1\":{\"1981\":1}}],[\"方法执行\",{\"1\":{\"1981\":1}}],[\"方法建立与数据库的连接\",{\"1\":{\"1979\":1}}],[\"方法创建\",{\"1\":{\"1946\":2,\"1980\":1}}],[\"方法接受客户端的连接\",{\"1\":{\"1936\":1}}],[\"方法接受一个种子值\",{\"1\":{\"1820\":1}}],[\"方法阻塞等待\",{\"1\":{\"1887\":1}}],[\"方法输出每个元素\",{\"1\":{\"1820\":1}}],[\"方法将生成的数组转换为单个整数\",{\"1\":{\"1820\":1}}],[\"方法将数据写入文件\",{\"1\":{\"253\":1}}],[\"方法则抛出异常\",{\"1\":{\"1758\":1}}],[\"方法转换后的\",{\"1\":{\"1705\":2}}],[\"方法引用的主要类型有\",{\"1\":{\"1991\":1}}],[\"方法引用是一种简洁的lambda表达式写法\",{\"1\":{\"1991\":1}}],[\"方法引用和内置函数式接口进一步增强了lambda表达式的功能和可读性\",{\"1\":{\"1694\":1}}],[\"方法引用可以引用静态方法\",{\"1\":{\"1690\":1}}],[\"方法引用\",{\"0\":{\"1690\":1,\"1991\":1}}],[\"方法来注册事件监听器\",{\"1\":{\"2031\":1}}],[\"方法来开启事务\",{\"1\":{\"1985\":1}}],[\"方法来加载驱动程序类\",{\"1\":{\"1978\":1}}],[\"方法来启动线程\",{\"1\":{\"1965\":1}}],[\"方法来自定义序列化和反序列化过程\",{\"1\":{\"1865\":1}}],[\"方法来操作对象的属性\",{\"1\":{\"1682\":1}}],[\"方法来访问这些数据\",{\"1\":{\"1681\":1}}],[\"方法来访问和修改这些变量\",{\"1\":{\"1709\":1}}],[\"方法来访问和修改这些私有属性\",{\"1\":{\"1567\":1}}],[\"方法来访问和修改属性\",{\"1\":{\"1571\":1}}],[\"方法用于设置属性值\",{\"1\":{\"1680\":1}}],[\"方法用于获取属性值\",{\"1\":{\"1680\":1}}],[\"方法应满足\",{\"1\":{\"1676\":2}}],[\"方法已被标记为过时\",{\"1\":{\"1672\":1}}],[\"方法返回的元素\",{\"1\":{\"1813\":1}}],[\"方法返回的值的数据类型\",{\"1\":{\"1335\":1}}],[\"方法返回\",{\"1\":{\"1758\":1}}],[\"方法返回对象的浅拷贝\",{\"1\":{\"1671\":1}}],[\"方法时才创建实例\",{\"1\":{\"2010\":1}}],[\"方法时\",{\"1\":{\"1669\":1}}],[\"方法等\",{\"1\":{\"1634\":1}}],[\"方法内部使用\",{\"1\":{\"1594\":1}}],[\"方法添加额外的逻辑来控制对属性的访问和修改\",{\"1\":{\"1569\":1}}],[\"方法使用了同步代码块来确保\",{\"1\":{\"1548\":1}}],[\"方法签名\",{\"1\":{\"1519\":1,\"1534\":1,\"1667\":1,\"1668\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1}}],[\"方法修饰符用于描述方法的行为和性质\",{\"1\":{\"1487\":1}}],[\"方法修饰符和字段修饰符\",{\"1\":{\"1478\":1}}],[\"方法不能被重写\",{\"1\":{\"1486\":1}}],[\"方法就是方法的例子\",{\"1\":{\"1475\":1}}],[\"方法就是行为\",{\"1\":{\"1273\":1}}],[\"方法是类的行为表现形式\",{\"1\":{\"1475\":1}}],[\"方法是定义在类中的一组指令\",{\"1\":{\"1475\":1}}],[\"方法重写示例\",{\"1\":{\"1709\":1}}],[\"方法重写的实际调用是在运行时决定的\",{\"1\":{\"1529\":1}}],[\"方法重写规则\",{\"1\":{\"1515\":1}}],[\"方法重写体现了运行时多态\",{\"1\":{\"1472\":1}}],[\"方法重写\",{\"1\":{\"1472\":1,\"1709\":2}}],[\"方法重载示例\",{\"1\":{\"1709\":1}}],[\"方法重载允许同一个类中定义多个方法名相同但参数不同的方法\",{\"1\":{\"1527\":1}}],[\"方法重载是在同一个类中定义多个方法\",{\"1\":{\"1476\":1}}],[\"方法重载\",{\"1\":{\"1472\":1,\"1523\":1,\"1709\":2}}],[\"方法访问属性\",{\"1\":{\"1471\":1}}],[\"方法访问值\",{\"1\":{\"169\":1}}],[\"方法在有序数组中搜索元素\",{\"1\":{\"1364\":1}}],[\"方法还可以使用其他修饰符\",{\"1\":{\"1347\":1}}],[\"方法中的第二个参数来指定正则表达式的标志\",{\"1\":{\"1953\":1}}],[\"方法中的局部内部类\",{\"1\":{\"1594\":1}}],[\"方法中添加逻辑来验证输入数据\",{\"1\":{\"1571\":1}}],[\"方法中声明的变量是局部变量\",{\"1\":{\"1346\":1}}],[\"方法中包含了线程所要运行的代码\",{\"1\":{\"1259\":1}}],[\"方法也可以返回对象或数组等引用类型\",{\"1\":{\"1342\":1}}],[\"方法可以接收输入参数\",{\"1\":{\"1475\":1}}],[\"方法可以接受零个或多个参数\",{\"1\":{\"1337\":1}}],[\"方法可以接受的输入\",{\"1\":{\"1335\":1}}],[\"方法可以接受参数并返回结果\",{\"1\":{\"1333\":1}}],[\"方法可以对数组进行排序\",{\"1\":{\"1363\":1}}],[\"方法可以返回一个值\",{\"1\":{\"1340\":1}}],[\"方法可以通过对象来调用\",{\"1\":{\"1336\":1}}],[\"方法的详细描述\",{\"1\":{\"2002\":1}}],[\"方法的线程执行完毕\",{\"1\":{\"1965\":1}}],[\"方法的具体实现\",{\"1\":{\"1557\":1,\"1577\":1}}],[\"方法的名称必须相同\",{\"1\":{\"1522\":1}}],[\"方法的修饰符\",{\"0\":{\"1347\":1}}],[\"方法的作用域\",{\"0\":{\"1346\":1}}],[\"方法的重载\",{\"0\":{\"1343\":1},\"1\":{\"1343\":1,\"1476\":1}}],[\"方法的参数也被视为局部变量\",{\"1\":{\"1346\":1}}],[\"方法的参数\",{\"0\":{\"1337\":1}}],[\"方法的定义通常包括以下几个部分\",{\"1\":{\"1335\":1}}],[\"方法的定义和调用\",{\"0\":{\"1334\":1}}],[\"方法的对象\",{\"1\":{\"224\":1}}],[\"方法体\",{\"1\":{\"1307\":4,\"1308\":2,\"1309\":1,\"1335\":1,\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1486\":1,\"1488\":1,\"1489\":1,\"1685\":1}}],[\"方法结束后变量会被销毁\",{\"1\":{\"1301\":1}}],[\"方法或字段的用途和行为\",{\"1\":{\"2003\":1}}],[\"方法或字段的详细信息\",{\"1\":{\"1283\":1}}],[\"方法或字段\",{\"1\":{\"2001\":1}}],[\"方法或直接与空字符串相加\",{\"1\":{\"1298\":1}}],[\"方法开始执行\",{\"1\":{\"1275\":1}}],[\"方法名对应注解的元素\",{\"1\":{\"1842\":1}}],[\"方法名称\",{\"1\":{\"1522\":1}}],[\"方法名\",{\"1\":{\"1275\":1,\"1335\":1}}],[\"方法和构造方法的信息\",{\"1\":{\"1831\":1}}],[\"方法和构造函数\",{\"1\":{\"1504\":1,\"1603\":1,\"1607\":1}}],[\"方法和变量的访问级别\",{\"1\":{\"1712\":1}}],[\"方法和事件\",{\"1\":{\"1679\":1}}],[\"方法和字段的访问权限\",{\"1\":{\"1479\":1}}],[\"方法和实例变量的概念\",{\"1\":{\"1273\":1}}],[\"方法和技术手段解决农业信息化\",{\"1\":{\"1038\":2}}],[\"方法和技术手段解决工程技术问题的能力\",{\"1\":{\"1037\":1}}],[\"方法区\",{\"1\":{\"1265\":1}}],[\"方法合并字典\",{\"1\":{\"174\":1}}],[\"方法随机删除并返回一个键值对\",{\"1\":{\"171\":1}}],[\"方法删除并返回指定键的值\",{\"1\":{\"171\":1}}],[\"方法\",{\"0\":{\"1333\":1,\"1475\":1,\"1966\":1},\"1\":{\"161\":4,\"166\":2,\"1259\":2,\"1273\":1,\"1283\":1,\"1298\":1,\"1306\":1,\"1307\":5,\"1308\":7,\"1333\":1,\"1362\":1,\"1468\":1,\"1471\":1,\"1478\":1,\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1486\":1,\"1488\":1,\"1489\":1,\"1492\":1,\"1497\":1,\"1506\":1,\"1520\":1,\"1523\":1,\"1530\":1,\"1533\":1,\"1548\":2,\"1554\":1,\"1563\":1,\"1564\":2,\"1567\":1,\"1568\":4,\"1610\":2,\"1633\":1,\"1667\":1,\"1668\":1,\"1669\":1,\"1671\":1,\"1676\":1,\"1677\":6,\"1680\":4,\"1682\":2,\"1701\":2,\"1704\":3,\"1705\":2,\"1709\":4,\"1714\":1,\"1812\":1,\"1825\":1,\"1827\":1,\"1845\":2,\"1863\":2,\"1961\":1,\"1963\":1,\"1965\":1,\"1970\":1,\"2000\":1,\"2003\":1}}],[\"斯皮尔曼等级相关系数等\",{\"1\":{\"469\":1}}],[\"卡方检验\",{\"1\":{\"466\":1,\"481\":1}}],[\"确定目标和决策变量\",{\"1\":{\"841\":1}}],[\"确定评价指标及其权重\",{\"1\":{\"758\":1}}],[\"确定评价目标和指标\",{\"1\":{\"753\":1}}],[\"确定库存水平和补货策略\",{\"1\":{\"716\":1}}],[\"确定不同资产的投资比例\",{\"1\":{\"716\":1}}],[\"确定物资从多个供应点到多个需求点的运输方案\",{\"1\":{\"716\":1}}],[\"确定各产品的生产数量\",{\"1\":{\"716\":1}}],[\"确定关键影响因素\",{\"1\":{\"638\":1}}],[\"确定显著性水平和作出结论等步骤\",{\"1\":{\"466\":1}}],[\"确保系统的并发执行和资源分配合理\",{\"1\":{\"2189\":1}}],[\"确保整个应用程序中的日志输出统一管理\",{\"1\":{\"2016\":1}}],[\"确保资源唯一且被全局访问\",{\"1\":{\"2016\":1}}],[\"确保一个类只有一个实例存在\",{\"1\":{\"2007\":1}}],[\"确保生成的文档清晰\",{\"1\":{\"2003\":1}}],[\"确保生成的形状符合设计要求\",{\"1\":{\"684\":1}}],[\"确保用户能够全面理解api\",{\"1\":{\"2003\":1}}],[\"确保程序的稳定性和高效性\",{\"1\":{\"1972\":1}}],[\"确保程序的健壮性\",{\"1\":{\"1429\":1}}],[\"确保无论是否发生异常\",{\"1\":{\"1910\":1}}],[\"确保相等的对象具有相同的哈希码\",{\"1\":{\"1669\":1}}],[\"确保封装性和代码的安全性\",{\"1\":{\"1631\":1}}],[\"确保线程安全\",{\"1\":{\"1550\":1}}],[\"确保同一时间只有一个线程可以访问这些资源\",{\"1\":{\"1968\":1}}],[\"确保同一时间只有一个线程可以执行同步代码块中的代码\",{\"1\":{\"1548\":1}}],[\"确保同一时刻只有一个线程可以执行同步代码块\",{\"1\":{\"1489\":1}}],[\"确保对象的实际类型与目标类型兼容\",{\"1\":{\"1543\":1}}],[\"确保对象类型正确\",{\"1\":{\"1534\":1}}],[\"确保字段的值在多个线程之间的一致性\",{\"1\":{\"1490\":1}}],[\"确保字节码符合jvm的规范和安全要求\",{\"1\":{\"1266\":1}}],[\"确保在出现错误时能够优雅地处理问题\",{\"1\":{\"1453\":1}}],[\"确保代码的安全性和可维护性\",{\"1\":{\"1652\":1}}],[\"确保代码的安全性\",{\"1\":{\"1309\":1}}],[\"确保变量的修改能够被其他线程立即看到\",{\"1\":{\"1308\":1}}],[\"确保多线程访问共享资源时的线程安全\",{\"1\":{\"1268\":1}}],[\"确保曲线的平滑性\",{\"1\":{\"933\":1}}],[\"确保最终的评价结果具有较高的可信度\",{\"1\":{\"764\":1}}],[\"确保数据的准确性\",{\"1\":{\"763\":1}}],[\"确保每个工人和每个任务只被指派一次\",{\"1\":{\"409\":1}}],[\"确保它们能够协同工作\",{\"1\":{\"247\":1}}],[\"确保它们按预期工作\",{\"1\":{\"247\":1}}],[\"众数\",{\"1\":{\"465\":1}}],[\"描述方法可能抛出的异常\",{\"1\":{\"2001\":1}}],[\"描述方法的返回值\",{\"1\":{\"2001\":1}}],[\"描述方法的参数\",{\"1\":{\"2001\":1}}],[\"描述函数的用途\",{\"1\":{\"1179\":1}}],[\"描述热传导\",{\"1\":{\"885\":1}}],[\"描述热量在介质中的扩散\",{\"1\":{\"881\":1}}],[\"描述波的传播\",{\"1\":{\"881\":1}}],[\"描述静态电场\",{\"1\":{\"881\":1}}],[\"描述了当前值与前几项值之间的关系\",{\"1\":{\"863\":1}}],[\"描述经济指标如gdp\",{\"1\":{\"850\":1}}],[\"描述不同物种之间的相互作用和演化\",{\"1\":{\"850\":1}}],[\"描述物体在力作用下的运动\",{\"1\":{\"850\":1}}],[\"描述传染病在群体中的传播规律\",{\"1\":{\"850\":1}}],[\"描述人口随时间变化的规律\",{\"1\":{\"850\":1}}],[\"描述动态系统\",{\"1\":{\"849\":1}}],[\"描述\",{\"1\":{\"491\":1,\"492\":1,\"493\":1,\"494\":1,\"495\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"1146\":1,\"1147\":1,\"1148\":1,\"1149\":1,\"1150\":1,\"1151\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1315\":1,\"1696\":1,\"1875\":1,\"1947\":1,\"2001\":1}}],[\"描述统计帮助你了解数据的基本特征\",{\"1\":{\"478\":1}}],[\"描述统计能够帮助研究者对数据有一个初步的了解\",{\"1\":{\"465\":1}}],[\"描述统计是统计分析的基础\",{\"1\":{\"465\":1}}],[\"描述统计\",{\"0\":{\"465\":1,\"478\":1}}],[\"描述性统计\",{\"1\":{\"458\":1}}],[\"商业管理\",{\"1\":{\"464\":1}}],[\"旨在提供计算机科学的基本概念和工具\",{\"1\":{\"2206\":1}}],[\"旨在找到一个函数\",{\"1\":{\"938\":1}}],[\"旨在找到从源点到汇点的最大可能流量\",{\"1\":{\"395\":1}}],[\"旨在从数据中识别模式并进行分类\",{\"1\":{\"591\":1}}],[\"旨在揭示数据背后的模式\",{\"1\":{\"464\":1}}],[\"而从实现的角度看\",{\"1\":{\"2160\":1}}],[\"而有效地评估算法效率至关重要\",{\"1\":{\"2157\":1}}],[\"而静态方法则只能通过接口调用\",{\"1\":{\"1993\":1}}],[\"而在\",{\"1\":{\"1888\":1}}],[\"而在其他实现\",{\"1\":{\"1797\":1}}],[\"而字符流适合处理文本数据\",{\"1\":{\"1879\":1}}],[\"而没有相应地修改\",{\"1\":{\"1862\":1}}],[\"而无需编写多个方法来处理不同类型的数据\",{\"1\":{\"1835\":1}}],[\"而无需预先了解对象的类型\",{\"1\":{\"1832\":1}}],[\"而无需标签或目标值\",{\"1\":{\"538\":1}}],[\"而值\",{\"1\":{\"1796\":1}}],[\"而继承通过扩展父类的功能来重用代码\",{\"1\":{\"1570\":1}}],[\"而接口则提供了一种实现多重继承的方式\",{\"1\":{\"1562\":1}}],[\"而构造函数在每次创建对象时执行\",{\"1\":{\"1547\":1}}],[\"而向下转型则允许我们访问子类特有的行为\",{\"1\":{\"1541\":1}}],[\"而string和stringbuilder不是\",{\"1\":{\"1377\":1}}],[\"而java\",{\"1\":{\"1261\":1}}],[\"而且能对图形添加标注及进行打印\",{\"1\":{\"1121\":1}}],[\"而这些对象通过调用彼此的方法来协同工作\",{\"1\":{\"1273\":1}}],[\"而这样的效果是传统材料无法实现的\",{\"1\":{\"1053\":1}}],[\"而这个世界上\",{\"1\":{\"992\":1}}],[\"而现在\",{\"0\":{\"991\":1}}],[\"而我们需要最大化利润\",{\"1\":{\"728\":1,\"734\":1}}],[\"而晴天转为雨天的概率为0\",{\"1\":{\"650\":1}}],[\"而与过去的状态无关\",{\"1\":{\"645\":1}}],[\"而原始数据则是蓝色实线\",{\"1\":{\"644\":1}}],[\"而r型聚类则用于识别和分组相关的变量\",{\"1\":{\"563\":1}}],[\"而r型聚类关注的是变量之间的关系\",{\"1\":{\"563\":1}}],[\"而是使用参数化的日志语句\",{\"1\":{\"1927\":1}}],[\"而是与其他日志框架\",{\"1\":{\"1914\":1}}],[\"而是可以捕获并处理异常\",{\"1\":{\"1894\":1}}],[\"而是引用\",{\"1\":{\"1259\":1}}],[\"而是依赖于不可争议的真相和最基本的原则来推导出结论\",{\"1\":{\"998\":1}}],[\"而是有多个相互冲突或需要同时考虑的目标\",{\"1\":{\"839\":1}}],[\"而是从数据的内在结构中自动进行学习\",{\"1\":{\"537\":1}}],[\"而是根据数据的内在结构进行分组\",{\"1\":{\"509\":1}}],[\"而类内方差最小\",{\"1\":{\"520\":1}}],[\"而不必在类的每个具体实例中指定特定的数据类型\",{\"1\":{\"1835\":1}}],[\"而不仅仅是引用是否相同\",{\"1\":{\"1668\":1}}],[\"而不需要写出lambda表达式的完整形式\",{\"1\":{\"1690\":1}}],[\"而不需要在编译时知道这些信息\",{\"1\":{\"1634\":1}}],[\"而不需要在编译时知道具体的类和对象\",{\"1\":{\"1633\":1}}],[\"而不需要重新编译\",{\"1\":{\"1264\":1}}],[\"而不强制实现类必须实现这些方法\",{\"1\":{\"1560\":1}}],[\"而不属于实例\",{\"1\":{\"1344\":1}}],[\"而不属于类的实例\",{\"1\":{\"1308\":1}}],[\"而不是控制程序流\",{\"1\":{\"1452\":1}}],[\"而不是原始变量\",{\"1\":{\"1338\":1}}],[\"而不是在运行时抛出\",{\"1\":{\"1837\":1}}],[\"而不是在\",{\"1\":{\"208\":1}}],[\"而不生产产品c\",{\"1\":{\"733\":1}}],[\"而不同簇之间的差异最大\",{\"1\":{\"561\":1}}],[\"而不同簇之间的对象差异较大\",{\"1\":{\"508\":1}}],[\"而\",{\"1\":{\"459\":1,\"525\":4,\"1259\":2,\"1495\":1,\"1940\":1,\"1963\":1,\"2034\":1}}],[\"完成任务\",{\"1\":{\"2156\":1}}],[\"完成\",{\"1\":{\"1966\":1}}],[\"完整性\",{\"1\":{\"1037\":1}}],[\"完整性和一致性\",{\"1\":{\"763\":1}}],[\"完整代码\",{\"0\":{\"449\":1}}],[\"完全信息博弈\",{\"1\":{\"746\":1}}],[\"完全信息博弈与不完全信息博弈\",{\"1\":{\"746\":1}}],[\"完全背包问题\",{\"1\":{\"408\":1}}],[\"完全图\",{\"1\":{\"391\":1}}],[\"训练gm\",{\"1\":{\"643\":1}}],[\"训练模型\",{\"1\":{\"608\":1,\"610\":1,\"660\":1}}],[\"训练逻辑回归模型\",{\"1\":{\"535\":1}}],[\"训练集\",{\"1\":{\"528\":1}}],[\"训练过程中\",{\"1\":{\"450\":1}}],[\"训练过程中通过反向传播算法不断调整权重\",{\"1\":{\"440\":1}}],[\"训练10000次\",{\"1\":{\"447\":1}}],[\"训练神经网络\",{\"0\":{\"447\":1},\"1\":{\"449\":1}}],[\"由\",{\"1\":{\"1117\":1,\"1258\":1,\"1914\":1}}],[\"由初始条件\",{\"1\":{\"884\":1}}],[\"由national\",{\"1\":{\"798\":1}}],[\"由于其线程安全性\",{\"1\":{\"1806\":1}}],[\"由于没有索引\",{\"1\":{\"1750\":1}}],[\"由于没有标签\",{\"1\":{\"546\":1}}],[\"由于链表结构的特性\",{\"1\":{\"1750\":1}}],[\"由于底层是数组\",{\"1\":{\"1747\":1}}],[\"由于所有类都继承自\",{\"1\":{\"1665\":1}}],[\"由于这种转换是安全的\",{\"1\":{\"1294\":1}}],[\"由于不同评价指标的量纲\",{\"1\":{\"763\":1}}],[\"由于不同指标的量纲可能不同\",{\"1\":{\"753\":1}}],[\"由于变量\",{\"1\":{\"728\":1}}],[\"由于\",{\"1\":{\"726\":1,\"728\":1,\"732\":1,\"734\":1,\"1789\":1,\"1804\":1}}],[\"由于预测中引入了随机性\",{\"1\":{\"651\":1}}],[\"由生成器和判别器组成\",{\"1\":{\"441\":1}}],[\"由顶点集合和边集合组成的二元组\",{\"1\":{\"953\":1}}],[\"由顶点集合\",{\"1\":{\"389\":1}}],[\"门控循环单元\",{\"1\":{\"441\":1}}],[\"卷积神经网络特别适用于图像数据的处理\",{\"1\":{\"610\":1}}],[\"卷积神经网络\",{\"0\":{\"610\":1},\"1\":{\"441\":1,\"598\":1,\"653\":1,\"792\":1}}],[\"前端框架\",{\"2\":{\"2143\":1}}],[\"前端基础\",{\"0\":{\"2308\":1},\"1\":{\"1460\":1}}],[\"前缀自增\",{\"1\":{\"1311\":1}}],[\"前缀命名单元测试文件\",{\"1\":{\"1185\":1}}],[\"前向传播\",{\"1\":{\"447\":1}}],[\"前馈神经网络是最基本的神经网络模型\",{\"1\":{\"654\":1}}],[\"前馈神经网络\",{\"0\":{\"654\":1},\"1\":{\"441\":1}}],[\"前言\",{\"0\":{\"366\":1}}],[\"反码\",{\"1\":{\"2154\":1}}],[\"反序列化对象的字节输入流\",{\"1\":{\"1875\":1}}],[\"反序列化\",{\"1\":{\"1860\":1,\"1863\":2,\"1876\":2}}],[\"反射操作通常\",{\"1\":{\"1833\":1}}],[\"反射操作通常比直接代码调用要慢\",{\"1\":{\"1650\":1}}],[\"反射可以绕过访问控制\",{\"1\":{\"1833\":1}}],[\"反射可以绕过封装\",{\"1\":{\"1650\":1}}],[\"反射相比直接调用方法或访问字段要慢\",{\"1\":{\"1833\":1}}],[\"反射用于开发通用工具类\",{\"1\":{\"1832\":1}}],[\"反射允许你访问和修改对象的字段\",{\"1\":{\"1829\":1}}],[\"反射允许你获取类的结构信息\",{\"1\":{\"1634\":1}}],[\"反射的局限性和注意事项\",{\"0\":{\"1833\":1}}],[\"反射的用途\",{\"0\":{\"1832\":1}}],[\"反射的核心是\",{\"1\":{\"1826\":1}}],[\"反射的基本概念\",{\"0\":{\"1826\":1}}],[\"反射等知识点\",{\"1\":{\"1653\":1}}],[\"反射是\",{\"1\":{\"1652\":1}}],[\"反射使得\",{\"1\":{\"1633\":1}}],[\"反射\",{\"0\":{\"1633\":1,\"1825\":1},\"1\":{\"1457\":1,\"1633\":1,\"1659\":1,\"1825\":1}}],[\"反转字符串\",{\"1\":{\"1373\":1,\"1376\":1}}],[\"反转列表\",{\"1\":{\"147\":1}}],[\"反正切函数\",{\"1\":{\"1218\":1}}],[\"反正弦函数\",{\"1\":{\"1218\":1}}],[\"反余弦函数\",{\"1\":{\"1218\":1}}],[\"反斜杠字符本身\",{\"1\":{\"1292\":1}}],[\"反斜杠用于开始各种\",{\"1\":{\"1109\":1}}],[\"反斜杠\",{\"1\":{\"1109\":1}}],[\"反应扩散方程是一类用来描述物质扩散和反应过程的偏微分方程\",{\"1\":{\"926\":1}}],[\"反映扩散方程\",{\"0\":{\"926\":1}}],[\"反映其在综合评价中的重要性\",{\"1\":{\"763\":1}}],[\"反映特征之间的相关性\",{\"1\":{\"626\":1}}],[\"反归一化预测结果\",{\"1\":{\"661\":1}}],[\"反向传播\",{\"1\":{\"440\":1,\"447\":1}}],[\"损失函数\",{\"1\":{\"440\":1}}],[\"允许精确控制组件的布局\",{\"1\":{\"2026\":1}}],[\"允许一组线程互相等待\",{\"1\":{\"1971\":1}}],[\"允许一个或多个线程等待其他线程完成操作\",{\"1\":{\"1971\":1}}],[\"允许一个\",{\"1\":{\"1726\":1,\"1728\":1,\"1799\":1,\"1800\":1}}],[\"允许一个类\",{\"1\":{\"1507\":1}}],[\"允许创建自定义异常\",{\"1\":{\"1909\":1}}],[\"允许子类继承父类的注解\",{\"1\":{\"1845\":1}}],[\"允许子类提供父类方法的具体实现\",{\"1\":{\"1529\":1}}],[\"允许接口的实现类具有不同的类型参数\",{\"1\":{\"1835\":1}}],[\"允许接口提供默认的行为\",{\"1\":{\"1578\":1}}],[\"允许访问私有方法\",{\"1\":{\"1830\":1}}],[\"允许访问私有字段\",{\"1\":{\"1829\":1}}],[\"允许键为\",{\"1\":{\"1797\":1}}],[\"允许存储一个\",{\"1\":{\"1785\":1}}],[\"允许为空\",{\"1\":{\"1758\":1}}],[\"允许重复元素\",{\"1\":{\"1744\":1}}],[\"允许\",{\"1\":{\"1738\":1,\"1740\":1,\"1784\":1}}],[\"允许程序在运行时检查和操作类\",{\"1\":{\"1633\":1,\"1825\":1}}],[\"允许信息在序列中传递\",{\"1\":{\"655\":1}}],[\"允许每个类别有自己的协方差矩阵\",{\"1\":{\"521\":1}}],[\"允许因变量服从不同的概率分布\",{\"1\":{\"495\":1}}],[\"允许模型更好地拟合数据\",{\"1\":{\"440\":1}}],[\"允许你在编写代码时使用类型参数\",{\"1\":{\"1834\":1}}],[\"允许你遍历容器中的所有元素\",{\"1\":{\"224\":1}}],[\"允许你从序列\",{\"1\":{\"219\":1}}],[\"允许你固定函数的部分参数\",{\"1\":{\"217\":1}}],[\"权重客观且数据驱动\",{\"1\":{\"767\":1}}],[\"权重设置直接影响评价结果\",{\"1\":{\"764\":1}}],[\"权重的客观性\",{\"1\":{\"764\":1}}],[\"权重的确定非常关键\",{\"1\":{\"760\":1}}],[\"权重赋值\",{\"1\":{\"763\":1}}],[\"权重反映了不同指标的重要性\",{\"1\":{\"760\":1}}],[\"权重反映了指标的重要性\",{\"1\":{\"753\":1}}],[\"权重越高\",{\"1\":{\"754\":1,\"767\":1}}],[\"权重确定\",{\"1\":{\"753\":1}}],[\"权重\",{\"1\":{\"440\":1}}],[\"接收到客户端请求\",{\"1\":{\"1936\":1,\"1939\":1}}],[\"接收服务器的响应\",{\"1\":{\"1935\":1,\"1938\":1}}],[\"接收服务器的数据\",{\"1\":{\"1935\":1}}],[\"接收两个相同类型的参数\",{\"1\":{\"1691\":1}}],[\"接收一个输入参数\",{\"1\":{\"1691\":3}}],[\"接收原始数据\",{\"1\":{\"439\":1}}],[\"接口可以做到\",{\"1\":{\"1963\":1}}],[\"接口可以包含抽象方法和默认方法\",{\"1\":{\"1573\":1}}],[\"接口可以包含默认方法\",{\"1\":{\"1560\":1,\"1578\":1}}],[\"接口不返回结果\",{\"1\":{\"1963\":1}}],[\"接口不能被实例化\",{\"1\":{\"1573\":1}}],[\"接口不能实例化\",{\"1\":{\"1474\":1}}],[\"接口才能序列化\",{\"1\":{\"1876\":1}}],[\"接口也可以定义泛型参数\",{\"1\":{\"1835\":1}}],[\"接口或使用\",{\"1\":{\"1824\":1}}],[\"接口模拟生成器\",{\"0\":{\"1817\":1}}],[\"接口在\",{\"1\":{\"1810\":1}}],[\"接口提供了更细粒度的控制\",{\"1\":{\"1865\":1}}],[\"接口提供了很多方法用于基本的集合操作\",{\"1\":{\"1796\":1}}],[\"接口提供了一种机制\",{\"1\":{\"1572\":1}}],[\"接口表示一个键值对映射的集合\",{\"1\":{\"1795\":1}}],[\"接口继承自\",{\"1\":{\"1781\":1}}],[\"接口常用方法\",{\"0\":{\"1745\":1}}],[\"接口的方式\",{\"1\":{\"1960\":1}}],[\"接口的类都可以使用\",{\"1\":{\"1815\":1}}],[\"接口的基本方法\",{\"0\":{\"1813\":1}}],[\"接口的基本概念\",{\"0\":{\"1744\":1,\"1757\":1,\"1781\":1,\"1796\":1}}],[\"接口的实现类可以用于各种集合操作\",{\"1\":{\"1793\":1}}],[\"接口的实现类\",{\"1\":{\"1784\":1,\"1799\":1}}],[\"接口的常用方法\",{\"0\":{\"1783\":1,\"1798\":1}}],[\"接口的另一个实现类\",{\"1\":{\"1749\":1}}],[\"接口的一个常用实现类\",{\"1\":{\"1746\":1}}],[\"接口的对象包装成一个线程\",{\"1\":{\"1259\":1}}],[\"接口及其实现类\",{\"0\":{\"1737\":1,\"1738\":1,\"1739\":1,\"1740\":1},\"1\":{\"1776\":1,\"2038\":4}}],[\"接口与抽象类的区别\",{\"0\":{\"1715\":1}}],[\"接口方法默认是\",{\"1\":{\"1709\":1}}],[\"接口示例\",{\"1\":{\"1709\":1}}],[\"接口中只包含常量和抽象方法\",{\"1\":{\"1709\":1}}],[\"接口中的方法\",{\"1\":{\"1783\":1}}],[\"接口中的方法默认为\",{\"1\":{\"1556\":1,\"1574\":1}}],[\"接口中的变量默认为\",{\"1\":{\"1574\":1}}],[\"接口并正确处理深浅拷贝\",{\"1\":{\"1678\":1}}],[\"接口并在\",{\"1\":{\"1659\":1}}],[\"接口并提供了\",{\"1\":{\"1557\":1}}],[\"接口用于定义类需要遵循的行为规范\",{\"1\":{\"1585\":1}}],[\"接口用于定义一组必须由实现类提供具体实现的方法\",{\"1\":{\"1555\":1}}],[\"接口还可以包含静态方法\",{\"1\":{\"1580\":1}}],[\"接口是更常用的方法\",{\"1\":{\"1962\":1}}],[\"接口是\",{\"1\":{\"1756\":1,\"1780\":1,\"1794\":1}}],[\"接口是实现多态的一种重要方式\",{\"1\":{\"1572\":1}}],[\"接口是一个纯粹的抽象类\",{\"1\":{\"1555\":1}}],[\"接口是一个完全抽象的类\",{\"1\":{\"1474\":1}}],[\"接口是一种特殊的类\",{\"1\":{\"1498\":1}}],[\"接口包含一个默认方法\",{\"1\":{\"1561\":1,\"1579\":1}}],[\"接口定义了一些方法\",{\"1\":{\"1813\":1}}],[\"接口定义了一组方法\",{\"1\":{\"1532\":1}}],[\"接口定义了许多常用的方法\",{\"1\":{\"1745\":1}}],[\"接口定义了\",{\"1\":{\"1533\":1}}],[\"接口\",{\"0\":{\"1474\":1,\"1572\":1,\"1688\":1,\"1689\":1,\"1767\":1,\"1821\":1,\"1865\":1,\"1962\":1,\"1963\":1},\"1\":{\"1259\":1,\"1457\":1,\"1474\":1,\"1558\":1,\"1559\":1,\"1561\":1,\"1572\":1,\"1577\":1,\"1584\":1,\"1617\":1,\"1653\":1,\"1659\":1,\"1662\":1,\"1671\":2,\"1680\":1,\"1691\":2,\"1709\":1,\"1715\":1,\"1727\":1,\"1743\":2,\"1750\":1,\"1761\":1,\"1781\":1,\"1812\":1,\"1816\":1,\"1817\":1,\"1845\":1,\"1862\":2,\"1960\":1,\"2003\":1,\"2039\":1}}],[\"接口和继承等面向对象的特性\",{\"1\":{\"1259\":1}}],[\"接\",{\"1\":{\"1117\":1}}],[\"接下来\",{\"1\":{\"648\":1}}],[\"接受客户端连接\",{\"1\":{\"1936\":1}}],[\"接受不同数量的参数\",{\"1\":{\"1343\":1}}],[\"接受不同参数类型\",{\"1\":{\"1343\":1}}],[\"接受新解\",{\"1\":{\"423\":1,\"428\":1}}],[\"接受另一个函数作为参数\",{\"1\":{\"216\":1}}],[\"观察其对结果的影响\",{\"1\":{\"436\":1}}],[\"执行时间的增长速度\",{\"1\":{\"2162\":1}}],[\"执行时机\",{\"1\":{\"1549\":1}}],[\"执行器框架\",{\"1\":{\"2044\":1}}],[\"执行插入操作\",{\"1\":{\"1981\":1}}],[\"执行查询并返回结果集\",{\"1\":{\"1981\":1}}],[\"执行顺序\",{\"1\":{\"1327\":1}}],[\"执行过程中需要的类在联接阶段被载入到运行环境中\",{\"1\":{\"1259\":1}}],[\"执行代码后\",{\"1\":{\"1663\":1}}],[\"执行代码\",{\"1\":{\"1165\":1,\"1166\":1,\"1317\":1}}],[\"执行这段代码\",{\"1\":{\"1159\":1,\"1160\":2,\"1161\":3,\"1162\":3}}],[\"执行\",{\"0\":{\"1981\":1},\"1\":{\"1039\":1,\"1898\":1,\"1899\":1,\"1976\":1}}],[\"执行图像的旋转\",{\"1\":{\"815\":1}}],[\"执行铺瓷砖模型\",{\"1\":{\"688\":1}}],[\"执行遗传算法的主要流程\",{\"1\":{\"435\":1}}],[\"执行单点交叉操作\",{\"1\":{\"435\":1}}],[\"搜索算法\",{\"1\":{\"2208\":1}}],[\"搜索\",{\"0\":{\"2174\":1},\"1\":{\"2156\":1}}],[\"搜索数组中的元素\",{\"0\":{\"1364\":1}}],[\"搜索帮助主题\",{\"1\":{\"1125\":1}}],[\"搜索空间\",{\"1\":{\"434\":1}}],[\"搜索过程逐渐集中在局部区域\",{\"1\":{\"422\":1}}],[\"轮询通道的状态\",{\"1\":{\"1887\":1}}],[\"轮廓系数\",{\"1\":{\"515\":1}}],[\"轮盘赌选择\",{\"1\":{\"434\":1}}],[\"轮松弛操作\",{\"1\":{\"403\":1}}],[\"结尾的注释块\",{\"1\":{\"2000\":1}}],[\"结束\",{\"1\":{\"1282\":1,\"1283\":1}}],[\"结构\",{\"1\":{\"1898\":1,\"1911\":1}}],[\"结构化编程\",{\"1\":{\"1348\":1}}],[\"结构更清晰\",{\"1\":{\"1171\":1}}],[\"结构体字段访问\",{\"1\":{\"1151\":1}}],[\"结构体和单元数组类型\",{\"1\":{\"1127\":1}}],[\"结构光扫描或摄影测量生成\",{\"1\":{\"674\":1}}],[\"结构分析\",{\"1\":{\"673\":1,\"885\":1}}],[\"结合使用\",{\"1\":{\"1694\":1,\"1914\":1}}],[\"结合使用scanner和system\",{\"1\":{\"1427\":1}}],[\"结合研究生个人实际情况\",{\"1\":{\"1034\":1}}],[\"结合边界条件\",{\"1\":{\"884\":1}}],[\"结合初始条件\",{\"1\":{\"866\":2}}],[\"结合层次分析法和熵权法的优点\",{\"1\":{\"775\":1}}],[\"结合实际情况\",{\"1\":{\"763\":1}}],[\"结合主观和客观方法\",{\"1\":{\"760\":1}}],[\"结合了簇内紧凑性和簇间分离度\",{\"1\":{\"515\":1}}],[\"结合了l1和l2正则化\",{\"1\":{\"504\":1}}],[\"结合生成新的个体\",{\"1\":{\"432\":1}}],[\"结果应相同\",{\"1\":{\"1676\":1}}],[\"结果才为1\",{\"1\":{\"1315\":1}}],[\"结果才为true\",{\"1\":{\"1314\":1}}],[\"结果就为true\",{\"1\":{\"1314\":1}}],[\"结果\",{\"0\":{\"858\":1},\"1\":{\"1963\":2}}],[\"结果分析和检验\",{\"1\":{\"780\":1}}],[\"结果分析与排序\",{\"1\":{\"763\":1}}],[\"结果分析与解释\",{\"1\":{\"381\":1}}],[\"结果易于理解\",{\"1\":{\"774\":1}}],[\"结果易于解释\",{\"1\":{\"754\":1}}],[\"结果依赖于权重和指标的选择\",{\"1\":{\"772\":1}}],[\"结果直观易于理解\",{\"1\":{\"768\":1}}],[\"结果对极端值敏感\",{\"1\":{\"754\":1,\"771\":1}}],[\"结果解释\",{\"0\":{\"727\":1,\"733\":1,\"739\":1}}],[\"结果解释困难\",{\"1\":{\"546\":1}}],[\"结果可视化\",{\"1\":{\"429\":1}}],[\"结果为相对有效或无效\",{\"1\":{\"771\":1}}],[\"结果为\",{\"1\":{\"196\":1}}],[\"结果为3\",{\"1\":{\"196\":1}}],[\"结果为2\",{\"1\":{\"196\":1}}],[\"结果为true\",{\"1\":{\"194\":3,\"195\":1,\"198\":2,\"199\":2}}],[\"结果为false\",{\"1\":{\"194\":3,\"195\":2}}],[\"结果为9\",{\"1\":{\"193\":1,\"197\":1}}],[\"结果为6\",{\"1\":{\"193\":1,\"196\":1,\"197\":1}}],[\"结果为123\",{\"1\":{\"1299\":1}}],[\"结果为1\",{\"1\":{\"193\":4,\"196\":2,\"197\":4,\"1315\":1}}],[\"结果为5\",{\"1\":{\"193\":1,\"197\":1}}],[\"锦标赛选择等\",{\"1\":{\"432\":1}}],[\"称为进程\",{\"1\":{\"2189\":1}}],[\"称为截面或轮廓\",{\"1\":{\"678\":1}}],[\"称为主成分\",{\"1\":{\"615\":1}}],[\"称为染色体\",{\"1\":{\"432\":1}}],[\"称为个体\",{\"1\":{\"432\":1}}],[\"达到最大迭代次数后\",{\"1\":{\"429\":1}}],[\"达到最低能量状态\",{\"1\":{\"422\":1}}],[\"组件都有相应的事件监听器接口来处理特定的用户事件\",{\"1\":{\"2029\":1}}],[\"组件都位于\",{\"1\":{\"2020\":1}}],[\"组件的用户交互\",{\"1\":{\"2029\":1}}],[\"组件和布局管理器\",{\"0\":{\"2024\":1},\"1\":{\"2024\":1}}],[\"组件\",{\"0\":{\"2025\":1},\"1\":{\"2019\":1,\"2032\":1}}],[\"组件开发\",{\"1\":{\"1681\":1}}],[\"组织代码文件\",{\"1\":{\"1659\":1}}],[\"组织代码\",{\"1\":{\"1631\":1}}],[\"组织结构\",{\"1\":{\"1617\":1}}],[\"组合膨胀和腐蚀的操作\",{\"1\":{\"789\":1}}],[\"组合赋权法\",{\"1\":{\"760\":1}}],[\"组合优化问题\",{\"1\":{\"426\":1,\"437\":1}}],[\"组成的二元组\",{\"1\":{\"389\":1}}],[\"组成\",{\"1\":{\"388\":1,\"952\":1}}],[\"缺点\",{\"1\":{\"425\":1,\"511\":1,\"512\":1,\"513\":1,\"514\":1,\"521\":1,\"540\":3,\"541\":3,\"620\":1,\"754\":6,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":1,\"772\":1,\"773\":1,\"774\":1,\"775\":1,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":1,\"2013\":1,\"2014\":1,\"2015\":1}}],[\"缺少冒号\",{\"1\":{\"245\":1}}],[\"优先捕获特定的异常类型\",{\"1\":{\"1910\":1}}],[\"优秀\",{\"1\":{\"1035\":1}}],[\"优缺点\",{\"0\":{\"620\":1}}],[\"优势演员\",{\"1\":{\"596\":1}}],[\"优势\",{\"0\":{\"545\":1},\"1\":{\"526\":1}}],[\"优点和挑战\",{\"0\":{\"684\":1}}],[\"优点\",{\"1\":{\"425\":1,\"511\":1,\"512\":1,\"513\":1,\"514\":1,\"521\":1,\"522\":1,\"540\":3,\"541\":3,\"620\":1,\"684\":1,\"754\":6,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":1,\"772\":1,\"773\":1,\"774\":1,\"775\":1,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":1,\"2013\":1,\"2014\":1,\"2015\":1}}],[\"优化工具箱\",{\"0\":{\"1237\":1}}],[\"优化与控制\",{\"1\":{\"849\":1}}],[\"优化与积分\",{\"1\":{\"460\":1}}],[\"优化供应链网络结构\",{\"1\":{\"716\":1}}],[\"优化化学品生产过程中的资源利用\",{\"1\":{\"716\":1}}],[\"优化风能\",{\"1\":{\"716\":1}}],[\"优化电力生产和分配\",{\"1\":{\"716\":1}}],[\"优化网络流量分配\",{\"1\":{\"716\":1}}],[\"优化员工排班\",{\"1\":{\"716\":1}}],[\"优化决策等\",{\"1\":{\"638\":1}}],[\"优化示例\",{\"1\":{\"460\":1}}],[\"优化路线规划\",{\"1\":{\"419\":1}}],[\"优化投资组合\",{\"1\":{\"419\":1}}],[\"优化结构设计\",{\"1\":{\"419\":1,\"426\":1}}],[\"优化二次目标函数\",{\"1\":{\"415\":1}}],[\"优化算法在许多领域都有应用\",{\"1\":{\"419\":1}}],[\"优化算法可以大致分为以下几类\",{\"1\":{\"414\":1}}],[\"优化算法是指在给定的条件下\",{\"1\":{\"414\":1}}],[\"优化算法\",{\"0\":{\"414\":1}}],[\"优化货物从供应商到消费者的运输路径\",{\"1\":{\"407\":1}}],[\"优化模型参数\",{\"1\":{\"419\":1}}],[\"优化模型\",{\"1\":{\"382\":1}}],[\"较低\",{\"1\":{\"1806\":1}}],[\"较强的专业技能和技术传授技能\",{\"1\":{\"1025\":1}}],[\"较慢的降温速率可以增加找到全局最优解的概率\",{\"1\":{\"424\":1}}],[\"较高的初始温度有助于算法在初期探索更广泛的搜索空间\",{\"1\":{\"424\":1}}],[\"之外的数据进行读写操作\",{\"1\":{\"1885\":1}}],[\"之后可以访问有效最终变量\",{\"1\":{\"1595\":1}}],[\"之后可以有默认方法和静态方法\",{\"1\":{\"1558\":1,\"1715\":1}}],[\"之间传输数据\",{\"1\":{\"1681\":1}}],[\"之间的端口\",{\"1\":{\"1930\":1}}],[\"之间的伪随机double值\",{\"1\":{\"1395\":1}}],[\"之间的距离\",{\"1\":{\"737\":1}}],[\"之间的关系可以用一条直线来表示\",{\"1\":{\"491\":1}}],[\"之间\",{\"1\":{\"424\":1,\"446\":1}}],[\"之前的内容称为导言区\",{\"1\":{\"1107\":1}}],[\"之前\",{\"1\":{\"392\":1}}],[\"当按钮被点击时\",{\"1\":{\"2023\":1}}],[\"当执行查询操作时\",{\"1\":{\"1982\":1}}],[\"当多个线程同时访问共享资源时\",{\"1\":{\"1967\":1}}],[\"当多个类具有共同行为和特征时\",{\"1\":{\"1559\":1}}],[\"当程序在\",{\"1\":{\"1900\":1}}],[\"当一个线程执行\",{\"1\":{\"1888\":1}}],[\"当需要提供更具体的错误信息时\",{\"1\":{\"1910\":1}}],[\"当需要基本数据类型而不是对象的地方\",{\"1\":{\"1700\":1}}],[\"当需要根据对象的属性来判断相等性时\",{\"1\":{\"1668\":1}}],[\"当重写\",{\"1\":{\"1669\":1}}],[\"当类的行为可以被多个不相关的类共享时\",{\"1\":{\"1559\":1}}],[\"当前读写位置\",{\"1\":{\"1885\":1}}],[\"当前生成的个数\",{\"1\":{\"1818\":1}}],[\"当前时区的日期时间\",{\"1\":{\"1405\":1}}],[\"当前时间\",{\"1\":{\"1401\":1,\"1404\":1}}],[\"当前日期时间\",{\"1\":{\"1404\":1}}],[\"当前日期\",{\"1\":{\"1404\":1}}],[\"当前状态只依赖于前一状态\",{\"1\":{\"647\":1}}],[\"当没有case匹配时执行\",{\"1\":{\"1322\":1}}],[\"当所有if和else\",{\"1\":{\"1321\":1}}],[\"当保存文件的时候\",{\"1\":{\"1275\":1}}],[\"当有多个条件需要判断时\",{\"1\":{\"1161\":1}}],[\"当\",{\"1\":{\"1160\":1}}],[\"当方案数量较大时\",{\"1\":{\"774\":1}}],[\"当涉及到生产的产品数量\",{\"1\":{\"723\":1}}],[\"当样本较少时\",{\"1\":{\"521\":1}}],[\"当满足终止条件时\",{\"1\":{\"423\":1}}],[\"当温度降到某一阈值或搜索达到预定的迭代次数时\",{\"1\":{\"422\":1}}],[\"终止\",{\"1\":{\"423\":1,\"1964\":1}}],[\"终止条件\",{\"1\":{\"422\":1,\"424\":1,\"429\":1,\"432\":1,\"2160\":3}}],[\"作用\",{\"1\":{\"1485\":1,\"1486\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1492\":1,\"1494\":1,\"1497\":1,\"1498\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1502\":1,\"1503\":1,\"1504\":1,\"1505\":1,\"1506\":1,\"1667\":1,\"1668\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1}}],[\"作用范围仅限于定义它的方法或代码块内\",{\"1\":{\"1595\":1}}],[\"作用范围\",{\"1\":{\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1}}],[\"作用域\",{\"1\":{\"1301\":1,\"1302\":1,\"1303\":1,\"1549\":1}}],[\"作为栈\",{\"0\":{\"1777\":1}}],[\"作为栈的实现\",{\"1\":{\"1776\":1}}],[\"作为栈的替代\",{\"0\":{\"1776\":1}}],[\"作为\",{\"0\":{\"1761\":1},\"1\":{\"1914\":1,\"1923\":1}}],[\"作为方法的参数和返回值等场景\",{\"1\":{\"1605\":1}}],[\"作为参照标准\",{\"1\":{\"773\":1}}],[\"作为当前解\",{\"1\":{\"423\":1}}],[\"作业调度\",{\"1\":{\"707\":1}}],[\"作业调度问题等\",{\"1\":{\"437\":1}}],[\"作者\",{\"1\":{\"336\":1}}],[\"迭代\",{\"1\":{\"1324\":1,\"2158\":1,\"2159\":1,\"2161\":1}}],[\"迭代停止条件为解的最大变化量小于收敛判据或达到最大迭代次数\",{\"1\":{\"896\":1}}],[\"迭代求解\",{\"1\":{\"889\":1,\"890\":1,\"895\":1,\"896\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1}}],[\"迭代选择\",{\"1\":{\"435\":1}}],[\"迭代次数\",{\"1\":{\"434\":1,\"436\":1}}],[\"迭代次数达到上限或在一定次数内没有解的改进\",{\"1\":{\"424\":1}}],[\"迭代搜索\",{\"1\":{\"423\":1}}],[\"迭代器\",{\"0\":{\"224\":1},\"1\":{\"224\":1,\"1811\":1,\"1824\":1}}],[\"降噪\",{\"1\":{\"948\":1}}],[\"降维在数据分析\",{\"1\":{\"614\":1}}],[\"降维能将数据映射到2d或3d空间\",{\"1\":{\"614\":1}}],[\"降维的主要目的是\",{\"1\":{\"614\":1}}],[\"降维算法\",{\"1\":{\"594\":1}}],[\"降维技术\",{\"1\":{\"586\":1}}],[\"降维\",{\"0\":{\"541\":1},\"1\":{\"537\":1,\"538\":1,\"545\":1,\"614\":1}}],[\"降温速率和最大迭代次数作为输入\",{\"1\":{\"429\":1}}],[\"降温速率等\",{\"1\":{\"425\":1}}],[\"降温速率\",{\"1\":{\"424\":1,\"428\":1}}],[\"降温\",{\"1\":{\"423\":1,\"428\":1}}],[\"降温过程\",{\"1\":{\"422\":1,\"429\":1}}],[\"降低生产成本\",{\"1\":{\"407\":1}}],[\"降低运输成本\",{\"1\":{\"407\":1}}],[\"邻域半径\",{\"1\":{\"557\":1}}],[\"邻域搜索\",{\"1\":{\"422\":1,\"429\":1}}],[\"邻接表示例\",{\"1\":{\"390\":1,\"954\":1}}],[\"邻接表\",{\"1\":{\"390\":1,\"954\":1}}],[\"邻接矩阵示例\",{\"1\":{\"390\":1,\"954\":1}}],[\"邻接矩阵是一个\",{\"1\":{\"390\":1}}],[\"邻接矩阵\",{\"1\":{\"390\":1,\"398\":1,\"399\":1,\"954\":1,\"958\":1,\"959\":1,\"960\":1,\"964\":1,\"965\":1}}],[\"退出等事件\",{\"1\":{\"2030\":1}}],[\"退出或线程被中断\",{\"1\":{\"1900\":1,\"1903\":1}}],[\"退出循环\",{\"1\":{\"1329\":1,\"1428\":1}}],[\"退出程序\",{\"1\":{\"233\":1}}],[\"退格符\",{\"1\":{\"1292\":1}}],[\"退火是指将金属加热到高温后再缓慢冷却\",{\"1\":{\"422\":1}}],[\"变形\",{\"1\":{\"946\":1}}],[\"变化的浓度\",{\"1\":{\"926\":1}}],[\"变分自编码器\",{\"1\":{\"598\":1}}],[\"变异系数法\",{\"1\":{\"760\":1,\"763\":1}}],[\"变异和结果输出\",{\"1\":{\"435\":1}}],[\"变异和选择来优化问题\",{\"1\":{\"420\":1}}],[\"变异率\",{\"1\":{\"434\":1}}],[\"变异操作\",{\"1\":{\"433\":1,\"434\":1,\"435\":1}}],[\"变异\",{\"1\":{\"432\":1}}],[\"变量等的可见性\",{\"1\":{\"1306\":1}}],[\"变量名不能是\",{\"1\":{\"1305\":1}}],[\"变量名区分大小写\",{\"1\":{\"1305\":1}}],[\"变量名必须以字母\",{\"1\":{\"1305\":1}}],[\"变量名以及方法名都被称为标识符\",{\"1\":{\"1276\":1}}],[\"变量命名规则\",{\"0\":{\"1305\":1}}],[\"变量初始化\",{\"1\":{\"1304\":1}}],[\"变量声明\",{\"1\":{\"1304\":1}}],[\"变量的声明和初始化\",{\"0\":{\"1304\":1}}],[\"变量的定义和使用\",{\"0\":{\"180\":1}}],[\"变量可以分为三种类型\",{\"1\":{\"1300\":1}}],[\"变量可以是任意整数\",{\"1\":{\"707\":1}}],[\"变量需要在使用前先声明\",{\"1\":{\"1300\":1}}],[\"变量是在普通代码块中定义的\",{\"1\":{\"1545\":1}}],[\"变量是存储数据的容器\",{\"1\":{\"1300\":1}}],[\"变量是可以在程序的执行过程中改变其值的存储单元\",{\"1\":{\"179\":1}}],[\"变量一旦声明后\",{\"1\":{\"1291\":1}}],[\"变量只在函数内部有效\",{\"1\":{\"1184\":1}}],[\"变量只能取0或1\",{\"1\":{\"707\":1}}],[\"变量会保存在工作空间中\",{\"1\":{\"1184\":1}}],[\"变量定义\",{\"0\":{\"697\":1}}],[\"变量归类等场景\",{\"1\":{\"562\":1}}],[\"变量与常量的区别\",{\"0\":{\"183\":1}}],[\"变量不需要声明类型\",{\"1\":{\"179\":1}}],[\"变量和常量是存储数据的两种方式\",{\"1\":{\"178\":1}}],[\"变量\",{\"0\":{\"179\":1,\"1278\":1,\"1300\":1},\"1\":{\"138\":1,\"183\":2,\"1307\":4,\"1308\":4,\"1457\":1}}],[\"变量就是变量\",{\"1\":{\"135\":1}}],[\"变量赋值以后该变量才会被创建\",{\"1\":{\"135\":1}}],[\"群体行为\",{\"1\":{\"420\":1}}],[\"配合使用\",{\"1\":{\"1923\":1}}],[\"配送计划等\",{\"1\":{\"419\":1}}],[\"配置环境\",{\"0\":{\"2054\":1}}],[\"配置管理器\",{\"1\":{\"2006\":1,\"2016\":1}}],[\"配置示例\",{\"1\":{\"1921\":1}}],[\"配置文件\",{\"0\":{\"1921\":1,\"1925\":1}}],[\"配置信息\",{\"1\":{\"1917\":1}}],[\"配置latex环境通常包括以下几个步骤\",{\"1\":{\"1103\":1}}],[\"配置python数据分析环境\",{\"0\":{\"358\":1}}],[\"配置系统\",{\"1\":{\"100\":1}}],[\"库\",{\"1\":{\"913\":1,\"1117\":1}}],[\"库中的\",{\"1\":{\"619\":1}}],[\"库存管理\",{\"1\":{\"419\":1,\"716\":1}}],[\"库和模块\",{\"0\":{\"290\":1}}],[\"超类\",{\"1\":{\"1508\":1}}],[\"超出了代码块的作用域\",{\"1\":{\"1545\":1}}],[\"超出\",{\"1\":{\"1053\":1}}],[\"超材料的成分上没有什么特别之处\",{\"1\":{\"1053\":1}}],[\"超材料的概念\",{\"0\":{\"1053\":1}}],[\"超材料\",{\"1\":{\"1053\":1}}],[\"超材料赋能先进太赫兹生物化学传感检测技术的研究进展\",{\"1\":{\"1051\":1}}],[\"超参数调优等\",{\"1\":{\"419\":1}}],[\"超集\",{\"1\":{\"166\":1}}],[\"能进行运行时刻的类型检查\",{\"1\":{\"1259\":1}}],[\"能体现作者综合运用科学理论\",{\"1\":{\"1038\":1}}],[\"能直观理解各因素之间的关系\",{\"1\":{\"766\":1}}],[\"能源管理\",{\"1\":{\"716\":1}}],[\"能源需求预测\",{\"1\":{\"663\":1}}],[\"能发现任意形状的簇\",{\"1\":{\"559\":1}}],[\"能提取互不相关的信号源\",{\"1\":{\"541\":1}}],[\"能很好地捕捉数据的非线性结构\",{\"1\":{\"541\":1}}],[\"能将高维数据投影到二维或三维空间中\",{\"1\":{\"541\":1}}],[\"能生成聚类树\",{\"1\":{\"540\":1}}],[\"能处理噪声数据\",{\"1\":{\"513\":1,\"540\":1}}],[\"能够一次执行多个作业\",{\"1\":{\"2190\":1}}],[\"能够帮助设计更具灵活性和可扩展性的系统\",{\"1\":{\"1562\":1}}],[\"能够帮助人们理解和预测复杂系统的行为\",{\"1\":{\"848\":1}}],[\"能够根据运行时对象类型执行不同的操作\",{\"1\":{\"1543\":1}}],[\"能够独立从事较高层次的现代农业技术推广和新农村建设与发展工作\",{\"1\":{\"1025\":1}}],[\"能够有效地组织数据以实现高效的访问和修改\",{\"1\":{\"1720\":1}}],[\"能够有效地降低数据维度\",{\"1\":{\"620\":1}}],[\"能够有效评估多输入多输出的相对效率\",{\"1\":{\"771\":1}}],[\"能够有效处理不确定性和模糊性问题\",{\"1\":{\"770\":1}}],[\"能够有效处理模糊信息\",{\"1\":{\"754\":1}}],[\"能够处理各种类型的对象\",{\"1\":{\"1832\":1}}],[\"能够处理多个冲突性评价指标\",{\"1\":{\"772\":1}}],[\"能够处理不确定性较高\",{\"1\":{\"769\":1}}],[\"能够处理不确定性和模糊性较大的问题\",{\"1\":{\"754\":1}}],[\"能够处理定性和定量数据\",{\"1\":{\"754\":1,\"766\":1}}],[\"能够通过生成灰色模型\",{\"1\":{\"632\":1}}],[\"能够自动发现数据中的潜在结构和模式\",{\"1\":{\"545\":1}}],[\"能够最大化数据的方差\",{\"1\":{\"541\":1}}],[\"能够发现任意形状的簇\",{\"1\":{\"540\":1,\"586\":1}}],[\"能够结合先验信息\",{\"1\":{\"522\":1}}],[\"能够生成软聚类\",{\"1\":{\"514\":1}}],[\"能够识别任意形状的簇\",{\"1\":{\"513\":1}}],[\"能够跳出局部最优\",{\"1\":{\"425\":1}}],[\"能够使用纯文本格式编写文档\",{\"1\":{\"16\":1}}],[\"能量效率等\",{\"1\":{\"419\":1}}],[\"将物理资源虚拟为逻辑资源\",{\"1\":{\"2191\":1}}],[\"将输入数据复制到另一个数组或列表中\",{\"1\":{\"2163\":1}}],[\"将当前递归层级的结果返回至上一层\",{\"1\":{\"2160\":1}}],[\"将容器划分为网格\",{\"1\":{\"2026\":1}}],[\"将容器分为东南西北中五个区域\",{\"1\":{\"2026\":1}}],[\"将按钮添加到\",{\"1\":{\"2022\":1}}],[\"将非数字字符替换为空字符串\",{\"1\":{\"1952\":1}}],[\"将所有匹配的子字符串替换为给定的字符串\",{\"1\":{\"1951\":1}}],[\"将所有边按权重从小到大排序\",{\"1\":{\"964\":1}}],[\"将一个通道\",{\"1\":{\"1887\":1}}],[\"将一个int类型的值赋给long类型的变量\",{\"1\":{\"1294\":1}}],[\"将缓冲区从写模式切换到读模式\",{\"1\":{\"1885\":1}}],[\"将字符数据写入字符数组\",{\"1\":{\"1874\":1}}],[\"将字符数据写入文件\",{\"1\":{\"1874\":1,\"1875\":1}}],[\"将字符串转换为\",{\"1\":{\"1704\":2}}],[\"将字符串转换为基本数据类型\",{\"1\":{\"1704\":1}}],[\"将字节流转换为对象的过程\",{\"1\":{\"1876\":1}}],[\"将字节数据写入字节数组\",{\"1\":{\"1871\":1}}],[\"将字节数据写入文件\",{\"1\":{\"1871\":2,\"1875\":1}}],[\"将字节转换为字符\",{\"1\":{\"1870\":1}}],[\"将对象转换为字节流\",{\"1\":{\"2039\":1}}],[\"将对象转换为字节流的过程\",{\"1\":{\"1876\":1}}],[\"将对象写入文件\",{\"1\":{\"1876\":1}}],[\"将对象序列化后存储到缓存中\",{\"1\":{\"1861\":1}}],[\"将对象的状态保存到硬盘中\",{\"1\":{\"1861\":1}}],[\"将有助于编写健壮且可维护的单元测试\",{\"1\":{\"1859\":1}}],[\"将显示红色\",{\"1\":{\"1854\":1}}],[\"将元素添加到集合中\",{\"1\":{\"1783\":1}}],[\"将元素推入栈\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"将元素推入栈顶\",{\"1\":{\"1773\":1}}],[\"将指定的键值对插入到映射中\",{\"1\":{\"1798\":1}}],[\"将指定的元素插入到队列中\",{\"1\":{\"1759\":2}}],[\"将指标值除以该指标的向量模\",{\"1\":{\"759\":1}}],[\"将指标值按公式x\",{\"1\":{\"759\":1}}],[\"将包装类对象转换为基本数据类型\",{\"1\":{\"1704\":1}}],[\"将包装类对象转换为对应的基本数据类型\",{\"1\":{\"1698\":1}}],[\"将基本数据类型或字符串转换为包装类对象\",{\"1\":{\"1704\":1}}],[\"将基本数据类型转换为对应的包装类对象\",{\"1\":{\"1698\":1}}],[\"将编译后的\",{\"1\":{\"1628\":1}}],[\"将枚举映射到数据库字段时\",{\"1\":{\"1614\":1}}],[\"将逻辑上相关的类封装在一起\",{\"1\":{\"1599\":1}}],[\"将类的属性设置为\",{\"1\":{\"1566\":1,\"1571\":1}}],[\"将父类引用显式转换为子类类型\",{\"1\":{\"1536\":1}}],[\"将父类引用转换为子类对象时要小心\",{\"1\":{\"1534\":1}}],[\"将子类对象的引用赋值给父类类型的变量\",{\"1\":{\"1536\":1}}],[\"将异常传递给调用者的过程\",{\"1\":{\"1443\":1}}],[\"将弧度转换为角度\",{\"1\":{\"1393\":1}}],[\"将角度转换为弧度\",{\"1\":{\"1393\":1}}],[\"将角点标注在原图上\",{\"1\":{\"826\":1}}],[\"将long类型转换为int\",{\"1\":{\"1392\":1}}],[\"将integer转换为int\",{\"1\":{\"1385\":1}}],[\"将int转换为integer\",{\"1\":{\"1385\":1}}],[\"将数值转换为double类型\",{\"1\":{\"1382\":1}}],[\"将数值转换为float类型\",{\"1\":{\"1382\":1}}],[\"将数值转换为long类型\",{\"1\":{\"1382\":1}}],[\"将数值转换为int类型\",{\"1\":{\"1382\":1}}],[\"将数值转换为short类型\",{\"1\":{\"1382\":1}}],[\"将数值转换为byte类型\",{\"1\":{\"1382\":1}}],[\"将数据写入\",{\"1\":{\"1195\":1}}],[\"将数据写入文件\",{\"1\":{\"1195\":1}}],[\"将数据标准化到特定的区间\",{\"1\":{\"763\":1}}],[\"将数据按其向量模归一化\",{\"1\":{\"763\":1}}],[\"将数据缩放到一个固定范围\",{\"1\":{\"763\":1}}],[\"将数据转换为标准正态分布\",{\"1\":{\"763\":1}}],[\"将数据转换为dataframe\",{\"1\":{\"659\":1}}],[\"将数据转化为标准正态分布\",{\"1\":{\"759\":1}}],[\"将数据形状调整为lstm输入的形状\",{\"1\":{\"659\":1}}],[\"将数据投影到前两个主成分上\",{\"1\":{\"625\":1}}],[\"将数据投影到该方向上\",{\"1\":{\"520\":1}}],[\"将数据分成k个簇\",{\"1\":{\"586\":1}}],[\"将数据分成不同的簇\",{\"1\":{\"586\":1}}],[\"将数据分解为统计独立的非高斯成分\",{\"1\":{\"541\":1}}],[\"将数据分为多个类别\",{\"1\":{\"530\":1}}],[\"将数据分为两个类别\",{\"1\":{\"530\":1}}],[\"将数据集分为\",{\"1\":{\"540\":1}}],[\"将数据集划分为多个组或簇\",{\"1\":{\"538\":1}}],[\"将数据集划分为\",{\"1\":{\"511\":1}}],[\"将其改为10\",{\"1\":{\"1353\":1}}],[\"将其转化为机器码并执行\",{\"1\":{\"1266\":1}}],[\"将其加入生成树\",{\"1\":{\"965\":1}}],[\"将结果输出到命令行\",{\"1\":{\"1196\":1}}],[\"将结果保存到新文件中\",{\"1\":{\"1196\":1}}],[\"将2x2的数组重复2次行和3次列\",{\"1\":{\"1156\":1}}],[\"将工作空间变量保存在文件中\",{\"1\":{\"1126\":1}}],[\"将该边及其相连的顶点加入生成树\",{\"1\":{\"965\":1}}],[\"将直接相连的顶点的距离设为边的权重\",{\"1\":{\"960\":1}}],[\"将区域划分为有限小区域\",{\"1\":{\"883\":1}}],[\"将\",{\"1\":{\"883\":1,\"1385\":2,\"1699\":1,\"1700\":1,\"1704\":2,\"1997\":1}}],[\"将多个目标通过加权和的方式转化为一个单目标优化问题\",{\"1\":{\"841\":1}}],[\"将多分类问题转化为二分类问题\",{\"1\":{\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1}}],[\"将目标和约束条件转化为数学表达式\",{\"1\":{\"841\":1}}],[\"将等式约束融入目标函数\",{\"1\":{\"834\":1}}],[\"将约束问题转化为无约束问题\",{\"1\":{\"834\":1}}],[\"将彩色图像转换为灰度图像是图像处理中的基本操作之一\",{\"1\":{\"818\":1}}],[\"将图像分割为前景和背景\",{\"1\":{\"788\":1}}],[\"将图像中的像素聚类为不同的区域\",{\"1\":{\"516\":1}}],[\"将每个方案与其他所有方案进行比较\",{\"1\":{\"774\":1}}],[\"将每个数据点分配到距离最近的质心所在的簇中\",{\"1\":{\"511\":1}}],[\"将定性和定量指标模糊化处理\",{\"1\":{\"770\":1}}],[\"将评价结果通过图表\",{\"1\":{\"763\":1}}],[\"将各项评价指标的模糊评价值进行加权求和\",{\"1\":{\"763\":1}}],[\"将标准化后的指标数据与权重相结合\",{\"1\":{\"763\":1}}],[\"将复杂的评价目标分解为若干层次\",{\"1\":{\"758\":1}}],[\"将复杂问题分解为多个层次\",{\"1\":{\"754\":1,\"766\":1}}],[\"将预算限制定义为不等式约束矩阵\",{\"1\":{\"734\":1}}],[\"将原料和劳动力的约束定义为不等式约束矩阵\",{\"1\":{\"728\":1}}],[\"将原始数据投影到选择的主成分上\",{\"1\":{\"616\":1}}],[\"将在指定区域内铺设瓷砖\",{\"1\":{\"690\":1}}],[\"将截面曲线沿路径曲线移动\",{\"1\":{\"679\":1}}],[\"将灰色预测模型与马尔科夫链结合\",{\"1\":{\"637\":1}}],[\"将时间序列数据表示为\",{\"1\":{\"634\":1}}],[\"将高维图像数据压缩到低维空间\",{\"1\":{\"542\":1}}],[\"将高维数据投影到低维空间中\",{\"1\":{\"541\":1}}],[\"将高维数据映射到低维空间中\",{\"1\":{\"538\":1}}],[\"将训练好的模型应用于实际问题中\",{\"1\":{\"532\":1}}],[\"将两个个体\",{\"1\":{\"432\":1}}],[\"将遗传算法与模拟退火算法结合以改进搜索过程\",{\"1\":{\"418\":1}}],[\"将求解结果与实际情况进行比较\",{\"1\":{\"381\":1}}],[\"蚁群优化算法\",{\"1\":{\"420\":1}}],[\"蚁群优化等\",{\"1\":{\"417\":1}}],[\"蚁群算法\",{\"1\":{\"410\":1}}],[\"粒子群优化等\",{\"1\":{\"834\":1}}],[\"粒子群优化算法\",{\"1\":{\"420\":1}}],[\"粒子群优化\",{\"1\":{\"417\":1}}],[\"爬山算法\",{\"1\":{\"416\":1}}],[\"qos\",{\"1\":{\"1924\":1,\"1925\":1}}],[\"q\",{\"1\":{\"596\":2}}],[\"q学习\",{\"1\":{\"596\":1}}],[\"qda是lda的扩展版本\",{\"1\":{\"570\":1}}],[\"qda可以构建更复杂的决策边界\",{\"1\":{\"521\":1}}],[\"qda\",{\"0\":{\"521\":1,\"525\":1,\"570\":1},\"1\":{\"525\":4,\"567\":2,\"571\":4,\"573\":1}}],[\"qp\",{\"1\":{\"415\":1}}],[\"quick\",{\"1\":{\"2048\":1}}],[\"quit\",{\"1\":{\"1125\":1}}],[\"query\",{\"1\":{\"1981\":2,\"1984\":2}}],[\"query=123\",{\"1\":{\"1941\":1}}],[\"queue<integer>\",{\"1\":{\"1739\":1,\"1764\":1}}],[\"queue<e>\",{\"1\":{\"1735\":1}}],[\"queue<string>\",{\"1\":{\"1727\":1,\"1739\":1,\"1762\":1,\"1766\":1}}],[\"queue\",{\"0\":{\"1756\":1},\"1\":{\"398\":5,\"399\":5,\"1727\":6,\"1735\":1,\"1739\":4,\"1756\":3,\"1757\":1,\"1758\":1,\"1760\":2,\"1761\":1,\"1762\":13,\"1764\":1,\"1766\":4,\"1769\":2,\"2038\":1}}],[\"quote\",{\"1\":{\"1292\":2}}],[\"quantity\",{\"1\":{\"700\":2}}],[\"quad\",{\"1\":{\"460\":1}}],[\"quadraticdiscriminantanalysis\",{\"1\":{\"571\":2}}],[\"quadratic\",{\"0\":{\"521\":1},\"1\":{\"415\":1,\"567\":1}}],[\"返回结果\",{\"1\":{\"2160\":1}}],[\"返回上一次匹配操作中匹配的子字符串的结束索引\",{\"1\":{\"1951\":1}}],[\"返回上一次匹配操作中匹配的子字符串的开始索引\",{\"1\":{\"1951\":1}}],[\"返回上一次匹配操作中匹配的子字符串\",{\"1\":{\"1951\":1}}],[\"返回的元素\",{\"1\":{\"1822\":1}}],[\"返回前一个元素\",{\"1\":{\"1822\":1}}],[\"返回下一个元素\",{\"1\":{\"1813\":1,\"1822\":1}}],[\"返回映射中键值对的数量\",{\"1\":{\"1798\":1}}],[\"返回映射中所有键值对的\",{\"1\":{\"1798\":1}}],[\"返回映射中所有键的\",{\"1\":{\"1798\":1}}],[\"返回映射中所有值的\",{\"1\":{\"1798\":1}}],[\"返回与指定键关联的值\",{\"1\":{\"1798\":1}}],[\"返回集合的迭代器\",{\"1\":{\"1783\":1}}],[\"返回集合中的元素个数\",{\"1\":{\"1783\":1}}],[\"返回对象在栈中的位置\",{\"1\":{\"1773\":1}}],[\"返回对象的运行时类对象\",{\"1\":{\"1670\":1}}],[\"返回对象的内存地址转换而来的整数\",{\"1\":{\"1669\":1}}],[\"返回对象的哈希码\",{\"1\":{\"1669\":1}}],[\"返回对象的字符串表示形式\",{\"1\":{\"1667\":1}}],[\"返回栈顶元素但不移除它\",{\"1\":{\"1773\":1}}],[\"返回队列的头元素但不移除它\",{\"1\":{\"1759\":2}}],[\"返回列表中第一次出现的指定元素的索引\",{\"1\":{\"1745\":1}}],[\"返回列表中的元素数量\",{\"1\":{\"1745\":1}}],[\"返回指定索引位置的元素\",{\"1\":{\"1745\":1}}],[\"返回它们的和\",{\"1\":{\"1685\":1}}],[\"返回枚举常量的序号\",{\"1\":{\"1609\":1}}],[\"返回枚举常量的名字\",{\"1\":{\"1609\":1}}],[\"返回从1970年1月1日00\",{\"1\":{\"1401\":1}}],[\"返回一个与客户端通信的\",{\"1\":{\"1936\":1}}],[\"返回一个同步的集合\",{\"1\":{\"1741\":1}}],[\"返回一个相同类型的结果\",{\"1\":{\"1691\":1}}],[\"返回一个结果并允许抛出异常\",{\"1\":{\"1963\":1}}],[\"返回一个结果\",{\"1\":{\"1691\":2}}],[\"返回一个包含所有枚举常量的数组\",{\"1\":{\"1609\":1}}],[\"返回一个范围在\",{\"1\":{\"1395\":1}}],[\"返回一个布尔值结果\",{\"1\":{\"1691\":1}}],[\"返回一个布尔值\",{\"1\":{\"1313\":1}}],[\"返回base的exponent次幂\",{\"1\":{\"1394\":1}}],[\"返回e的x次幂\",{\"1\":{\"1394\":1}}],[\"返回x的平方根\",{\"1\":{\"1394\":1}}],[\"返回x的以10为底的对数\",{\"1\":{\"1394\":1}}],[\"返回x的自然对数\",{\"1\":{\"1394\":1}}],[\"返回x的反正切值\",{\"1\":{\"1393\":1}}],[\"返回x的反正弦值\",{\"1\":{\"1393\":1}}],[\"返回x的反余弦值\",{\"1\":{\"1393\":1}}],[\"返回x的绝对值\",{\"1\":{\"1392\":1}}],[\"返回角度angle的正切值\",{\"1\":{\"1393\":1}}],[\"返回角度angle的正弦值\",{\"1\":{\"1393\":1}}],[\"返回角度angle的余弦值\",{\"1\":{\"1393\":1}}],[\"返回a和b的积\",{\"1\":{\"1392\":1}}],[\"返回a和b的差\",{\"1\":{\"1392\":1}}],[\"返回a和b的和\",{\"1\":{\"1392\":1}}],[\"返回a和b中的较小值\",{\"1\":{\"1392\":1}}],[\"返回a和b中的较大值\",{\"1\":{\"1392\":1}}],[\"返回3所在的索引\",{\"1\":{\"1364\":1}}],[\"返回引用数据类型\",{\"0\":{\"1342\":1}}],[\"返回基本数据类型\",{\"0\":{\"1341\":1}}],[\"返回值对应元素的类型\",{\"1\":{\"1842\":1}}],[\"返回值的类型要与方法定义中的返回类型一致\",{\"1\":{\"1341\":1}}],[\"返回值\",{\"0\":{\"1340\":1},\"1\":{\"1348\":1,\"2000\":1}}],[\"返回类型或局部变量中\",{\"1\":{\"1839\":1}}],[\"返回类型可以相同也可以不同\",{\"1\":{\"1522\":1}}],[\"返回类型\",{\"1\":{\"1335\":1,\"1522\":1}}],[\"返回\",{\"1\":{\"1179\":1,\"1182\":1,\"1951\":1}}],[\"返回多个输出时\",{\"1\":{\"1173\":1}}],[\"返回步骤2继续迭代\",{\"1\":{\"433\":1}}],[\"返回最近匹配的子字符串\",{\"1\":{\"1416\":1}}],[\"返回最佳解\",{\"1\":{\"429\":1}}],[\"返回最优解\",{\"1\":{\"422\":1}}],[\"返回当前解作为最优解\",{\"1\":{\"423\":1}}],[\"返回到起点\",{\"1\":{\"410\":1}}],[\"返回函数和闭包\",{\"0\":{\"215\":1}}],[\"基类\",{\"1\":{\"1508\":1}}],[\"基本组件\",{\"1\":{\"2021\":1}}],[\"基本使用示例\",{\"0\":{\"1948\":1}}],[\"基本的异常处理机制\",{\"0\":{\"1898\":1}}],[\"基本测试用例\",{\"0\":{\"1853\":1}}],[\"基本数据结构\",{\"0\":{\"1721\":1}}],[\"基本数据类型不能直接存储在集合中\",{\"1\":{\"1386\":1}}],[\"基本数据类型\",{\"0\":{\"1285\":1},\"1\":{\"1696\":1}}],[\"基本数学运算\",{\"0\":{\"1392\":1}}],[\"基本类型转换为字符串\",{\"1\":{\"1298\":1}}],[\"基本规则\",{\"0\":{\"1275\":1}}],[\"基本统计量\",{\"0\":{\"1229\":1}}],[\"基本矩阵函数\",{\"0\":{\"1140\":1},\"1\":{\"1144\":1}}],[\"基本索引\",{\"0\":{\"1138\":1}}],[\"基本结构\",{\"0\":{\"1107\":1}}],[\"基本能够阅读本领域的外文资料\",{\"1\":{\"1025\":1}}],[\"基本用法\",{\"0\":{\"915\":1,\"1422\":1,\"1425\":1}}],[\"基本假设\",{\"1\":{\"780\":1}}],[\"基本原理\",{\"1\":{\"511\":1,\"513\":1,\"514\":1,\"520\":1,\"521\":1,\"522\":1}}],[\"基本概念\",{\"0\":{\"389\":1,\"440\":1,\"686\":1,\"880\":1,\"1410\":1,\"1443\":1,\"1835\":1,\"1842\":1}}],[\"基础类库\",{\"1\":{\"2020\":1}}],[\"基础对于构建\",{\"1\":{\"1879\":1}}],[\"基础语法\",{\"0\":{\"1273\":1},\"1\":{\"1457\":1}}],[\"基础\",{\"0\":{\"457\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"基于字节流的协议\",{\"1\":{\"1934\":1}}],[\"基于流\",{\"1\":{\"1892\":1}}],[\"基于缓冲区\",{\"1\":{\"1892\":1}}],[\"基于哈希表的实现\",{\"1\":{\"1784\":1,\"1799\":2}}],[\"基于哈希表\",{\"1\":{\"1782\":1}}],[\"基于哈希表实现的键值对集合\",{\"1\":{\"1740\":1}}],[\"基于哈希表实现\",{\"1\":{\"1726\":1,\"1728\":1,\"1738\":1,\"1785\":1,\"1800\":1}}],[\"基于动态数组\",{\"1\":{\"1778\":1}}],[\"基于动态数组实现\",{\"1\":{\"1725\":1}}],[\"基于数组的实现\",{\"1\":{\"1772\":1}}],[\"基于数组实现\",{\"1\":{\"1767\":1}}],[\"基于数组实现的动态列表\",{\"1\":{\"1737\":1}}],[\"基于可变数组实现的双端队列\",{\"1\":{\"1760\":1}}],[\"基于索引\",{\"1\":{\"1744\":1}}],[\"基于红黑树的实现\",{\"1\":{\"1740\":1,\"1784\":1,\"1799\":1}}],[\"基于红黑树实现\",{\"1\":{\"1726\":1,\"1728\":1}}],[\"基于优先级堆的队列\",{\"1\":{\"1739\":1}}],[\"基于\",{\"0\":{\"1934\":1,\"1937\":1},\"1\":{\"1738\":1,\"1778\":1,\"2019\":1}}],[\"基于链表实现\",{\"1\":{\"1737\":1,\"1767\":1}}],[\"基于堆实现\",{\"1\":{\"1727\":1}}],[\"基于双向链表实现\",{\"1\":{\"1725\":1,\"1760\":1}}],[\"基于web\",{\"1\":{\"1100\":1}}],[\"基于差分商的递归公式\",{\"1\":{\"933\":1}}],[\"基于pytorch\",{\"1\":{\"797\":1}}],[\"基于python的图像处理库\",{\"1\":{\"794\":1}}],[\"基于初始的\",{\"1\":{\"788\":1}}],[\"基于多指标优化和妥协解决方案理论\",{\"1\":{\"772\":1}}],[\"基于多个决策树的集成方法\",{\"1\":{\"631\":1}}],[\"基于信息熵理论\",{\"1\":{\"767\":1}}],[\"基于指标的变异系数\",{\"1\":{\"763\":1}}],[\"基于指标信息的离散度确定权重\",{\"1\":{\"763\":1}}],[\"基于指标数据的内在特性赋予权重\",{\"1\":{\"760\":1}}],[\"基于模糊数学理论\",{\"1\":{\"770\":1}}],[\"基于模糊数学的原理\",{\"1\":{\"754\":1}}],[\"基于模拟自然界或社会行为的过程\",{\"1\":{\"417\":1}}],[\"基于理想解和负理想解的概念\",{\"1\":{\"754\":1}}],[\"基于时间序列的平滑技术\",{\"1\":{\"631\":1}}],[\"基于输入特征的线性组合来预测输出\",{\"1\":{\"606\":1}}],[\"基于内容的推荐\",{\"1\":{\"599\":1}}],[\"基于识别结果做出决策或输出分类结果\",{\"1\":{\"585\":1}}],[\"基于概率模型\",{\"1\":{\"559\":1}}],[\"基于贝叶斯定理的统计方法\",{\"1\":{\"631\":1}}],[\"基于贝叶斯定理\",{\"1\":{\"522\":1}}],[\"基于密度的聚类算法\",{\"1\":{\"586\":1}}],[\"基于密度的聚类方法\",{\"1\":{\"540\":1}}],[\"基于密度的聚类\",{\"0\":{\"513\":1}}],[\"基于一个或多个特征变量\",{\"1\":{\"496\":1}}],[\"基于物理退火过程的启发式算法\",{\"1\":{\"410\":1}}],[\"启动线程\",{\"1\":{\"1961\":2,\"1962\":2,\"1965\":1}}],[\"启动盘制作\",{\"0\":{\"102\":1}}],[\"启用多行模式\",{\"1\":{\"1953\":1}}],[\"启发式算法\",{\"1\":{\"694\":1}}],[\"启发式算法利用经验法则或启发式信息来找到问题的近似解\",{\"1\":{\"416\":1}}],[\"启发式搜索算法\",{\"1\":{\"410\":1}}],[\"遗传算法是一种强大的优化工具\",{\"1\":{\"437\":1}}],[\"遗传算法广泛应用于\",{\"1\":{\"437\":1}}],[\"遗传算法广泛应用于复杂的优化问题\",{\"1\":{\"431\":1}}],[\"遗传算法\",{\"0\":{\"431\":1},\"1\":{\"410\":1,\"420\":1,\"431\":1,\"434\":1,\"435\":1}}],[\"暴力法\",{\"1\":{\"410\":1}}],[\"给定边界上的函数值\",{\"1\":{\"882\":1}}],[\"给定初始时刻的函数值及其导数\",{\"1\":{\"882\":1}}],[\"给定\",{\"1\":{\"736\":1}}],[\"给定一组城市和每两个城市之间的距离\",{\"1\":{\"410\":1}}],[\"给定n种物品和一个容量为v的背包\",{\"1\":{\"408\":2}}],[\"工作条件\",{\"1\":{\"1038\":1}}],[\"工厂每天最多可以提供的原料是100个单位\",{\"1\":{\"720\":1}}],[\"工厂希望通过合理分配资源来最大化利润\",{\"1\":{\"720\":1}}],[\"工厂有固定的资源限额\",{\"1\":{\"717\":1}}],[\"工业制造\",{\"1\":{\"683\":1}}],[\"工业设计\",{\"1\":{\"672\":1}}],[\"工业生产过程的控制\",{\"1\":{\"634\":1}}],[\"工程应用等\",{\"1\":{\"1397\":1}}],[\"工程应用以及教育教学中得到了广泛应用\",{\"1\":{\"925\":1}}],[\"工程力学\",{\"1\":{\"1040\":1}}],[\"工程建模等多个领域有广泛应用\",{\"1\":{\"932\":1}}],[\"工程学\",{\"1\":{\"879\":1,\"885\":1}}],[\"工程技术\",{\"1\":{\"755\":1}}],[\"工程优化\",{\"1\":{\"711\":1}}],[\"工程师和科学家能够有效地表示\",{\"1\":{\"677\":1}}],[\"工程模拟和其他领域中\",{\"1\":{\"670\":1}}],[\"工程控制等\",{\"1\":{\"633\":1}}],[\"工程\",{\"1\":{\"631\":1,\"848\":1,\"868\":1}}],[\"工程设计中的结构优化问题\",{\"1\":{\"844\":1}}],[\"工程设计\",{\"1\":{\"419\":1,\"426\":1,\"437\":1,\"683\":1,\"708\":1,\"768\":1}}],[\"工人\",{\"1\":{\"409\":1}}],[\"工具包\",{\"1\":{\"2019\":2}}],[\"工具生成文档\",{\"0\":{\"2002\":1}}],[\"工具类\",{\"1\":{\"1741\":1,\"1832\":1,\"2038\":1}}],[\"工具箱和面向对象编程等特色\",{\"1\":{\"1120\":1}}],[\"工具和软件\",{\"0\":{\"843\":1}}],[\"工具从python包索引\",{\"1\":{\"230\":1}}],[\"工具\",{\"0\":{\"96\":1,\"1063\":1},\"2\":{\"97\":1,\"103\":1,\"119\":1}}],[\"下载安装\",{\"0\":{\"2053\":1}}],[\"下载系统镜像\",{\"0\":{\"101\":1}}],[\"下拉列表\",{\"1\":{\"2025\":1}}],[\"下划线\",{\"1\":{\"1276\":1}}],[\"下采样\",{\"1\":{\"948\":1}}],[\"下午5\",{\"1\":{\"855\":1}}],[\"下面举两个例子\",{\"1\":{\"2152\":1}}],[\"下面将详细介绍一些\",{\"1\":{\"2035\":1}}],[\"下面简要介绍下类\",{\"1\":{\"1273\":1}}],[\"下面介绍如何使用python和scikit\",{\"1\":{\"567\":1}}],[\"下面是\",{\"1\":{\"1915\":1}}],[\"下面是对\",{\"1\":{\"1467\":1}}],[\"下面是对这两个概念的详细介绍\",{\"1\":{\"1292\":1}}],[\"下面是关于\",{\"1\":{\"1171\":1,\"1679\":1}}],[\"下面是使用显式差分法求解\",{\"1\":{\"927\":1}}],[\"下面是使用python实现的匈牙利算法来解决指派问题\",{\"1\":{\"409\":1}}],[\"下面是一个\",{\"1\":{\"1653\":1}}],[\"下面是一个使用python求解二维拉普拉斯方程的示例\",{\"1\":{\"893\":1}}],[\"下面是一个用python实现的简单灰色预测模型\",{\"1\":{\"639\":1}}],[\"下面是一个简单的\",{\"1\":{\"1682\":1,\"1921\":1,\"2022\":1}}],[\"下面是一个简单的java面向对象编程\",{\"1\":{\"1659\":1}}],[\"下面是一个简单的python实现神经网络的例子\",{\"1\":{\"442\":1}}],[\"下面是一个简单的模拟退火算法的python实现示例\",{\"1\":{\"426\":1}}],[\"下面是一个简单的旅行商问题暴力法的python实现\",{\"1\":{\"410\":1}}],[\"下\",{\"1\":{\"423\":1}}],[\"找出7\",{\"1\":{\"856\":1}}],[\"找出未被直线覆盖的最小元素\",{\"1\":{\"409\":1}}],[\"找到问题解法\",{\"1\":{\"2157\":1}}],[\"找到的数字\",{\"1\":{\"1949\":3}}],[\"找到不在mst中的最小距离顶点\",{\"1\":{\"965\":1}}],[\"找到所有与生成树中的顶点相连的边中权重最小的边\",{\"1\":{\"965\":1}}],[\"找到当前未访问顶点中距离最小的顶点\",{\"1\":{\"958\":1}}],[\"找到使模型与数据点误差最小的参数\",{\"1\":{\"837\":1}}],[\"找到最佳投影方向\",{\"1\":{\"520\":1}}],[\"找到数据包在网络中传输的最优路径\",{\"1\":{\"407\":1}}],[\"找到增广路径的瓶颈容量\",{\"1\":{\"398\":1,\"399\":1}}],[\"找到增广路径后\",{\"1\":{\"398\":1}}],[\"找到\",{\"1\":{\"397\":1}}],[\"覆盖全面\",{\"1\":{\"2003\":1}}],[\"覆盖所有零元素\",{\"1\":{\"409\":1}}],[\"覆盖矩阵中的所有零元素\",{\"1\":{\"409\":1}}],[\"覆盖零元素\",{\"1\":{\"409\":1}}],[\"匈牙利算法\",{\"1\":{\"409\":1}}],[\"为应用程序提供统一的接口\",{\"1\":{\"2189\":1}}],[\"为应用程序提供标准的接口\",{\"1\":{\"1975\":1}}],[\"为每个公开的类\",{\"1\":{\"2003\":1}}],[\"为每个目标设定一个期望值\",{\"1\":{\"841\":1}}],[\"为其他字符输出流提供缓冲功能\",{\"1\":{\"1874\":1}}],[\"为其他字符输入流提供缓冲功能\",{\"1\":{\"1873\":1}}],[\"为其他输出流提供缓冲功能\",{\"1\":{\"1871\":1}}],[\"为其他输入流提供缓冲功能\",{\"1\":{\"1870\":1}}],[\"为单位进行输入输出操作\",{\"1\":{\"1868\":2}}],[\"为代码提供了更多的可读性和扩展性\",{\"1\":{\"1847\":1}}],[\"为\",{\"1\":{\"1676\":1}}],[\"为false时执行另一段代码\",{\"1\":{\"1321\":1}}],[\"为此\",{\"1\":{\"1259\":1}}],[\"为了解决懒汉式的线程安全问题\",{\"1\":{\"2011\":1}}],[\"为了防止资源泄露\",{\"1\":{\"1983\":1}}],[\"为了简单起见\",{\"1\":{\"1259\":1}}],[\"为了实现pca数据降维\",{\"1\":{\"621\":1}}],[\"为底的对数\",{\"1\":{\"1219\":1}}],[\"为假\",{\"1\":{\"1160\":1,\"1161\":1}}],[\"为真\",{\"1\":{\"1159\":1,\"1160\":1,\"1161\":2}}],[\"为顶点数\",{\"1\":{\"964\":1}}],[\"为决策提供依据\",{\"1\":{\"849\":1}}],[\"为决策提供有力支持\",{\"1\":{\"764\":1}}],[\"为最终决策提供依据\",{\"1\":{\"763\":1}}],[\"为不同的评价指标分配权重\",{\"1\":{\"753\":1}}],[\"为车辆或货物选择最优路线\",{\"1\":{\"716\":1}}],[\"为进一步的分析提供基础\",{\"1\":{\"472\":1}}],[\"为后续的分析提供基础\",{\"1\":{\"465\":1}}],[\"为物品价值数组\",{\"1\":{\"408\":1}}],[\"为物品重量数组\",{\"1\":{\"408\":1}}],[\"为什么重新学数学\",{\"0\":{\"350\":1}}],[\"也不能抛出异常\",{\"1\":{\"1963\":1}}],[\"也不会破坏现有的实现类\",{\"1\":{\"1578\":1}}],[\"也会被序列化\",{\"1\":{\"1866\":1}}],[\"也会尝试铺满整个区域\",{\"1\":{\"689\":1}}],[\"也提供了方法来手动进行装箱和拆箱操作\",{\"1\":{\"1701\":1}}],[\"也就是说\",{\"1\":{\"1664\":1,\"1888\":1,\"2157\":1}}],[\"也是非同步的\",{\"1\":{\"1749\":1}}],[\"也是\",{\"1\":{\"1572\":1}}],[\"也是类似的\",{\"1\":{\"1311\":1}}],[\"也用于在构造函数中调用其他构造函数\",{\"1\":{\"1505\":1}}],[\"也用于将字符串连接在一起\",{\"1\":{\"1318\":1}}],[\"也称为初始化块\",{\"1\":{\"1546\":1}}],[\"也称为静态变量\",{\"1\":{\"1300\":1}}],[\"也称为成员变量或字段\",{\"1\":{\"1300\":1}}],[\"也称为热方程\",{\"1\":{\"886\":1}}],[\"也随之成为\",{\"1\":{\"1258\":1}}],[\"也可以作为\",{\"1\":{\"1739\":1}}],[\"也可以被不同包中子类访问\",{\"1\":{\"1307\":1}}],[\"也可以通过网络来载入所需要的类\",{\"1\":{\"1259\":1}}],[\"也可以用于写操作\",{\"1\":{\"1882\":1}}],[\"也可以用于r型聚类\",{\"1\":{\"563\":1}}],[\"也可以用来调用父类的构造器\",{\"1\":{\"1714\":1}}],[\"也可以用它来编写庞大复杂的应用程序\",{\"1\":{\"1120\":1}}],[\"也可以利用多目标规划模型来优化相关参数\",{\"1\":{\"844\":1}}],[\"也可以是六边形\",{\"1\":{\"686\":1}}],[\"也可以解决背包问题\",{\"1\":{\"408\":1}}],[\"也被称为预测分析\",{\"1\":{\"367\":1}}],[\"回滚事务\",{\"1\":{\"1985\":1}}],[\"回溯算法\",{\"1\":{\"1775\":1}}],[\"回溯\",{\"0\":{\"2178\":1},\"1\":{\"1771\":1}}],[\"回溯法\",{\"1\":{\"408\":1}}],[\"回车符\",{\"1\":{\"1292\":1}}],[\"回归等\",{\"1\":{\"653\":1}}],[\"回归算法\",{\"1\":{\"593\":1}}],[\"回归是预测一个连续值输出的任务\",{\"1\":{\"531\":1}}],[\"回归\",{\"0\":{\"531\":1}}],[\"回归模型用于预测一个连续的目标变量\",{\"1\":{\"496\":1}}],[\"回归模型是用于描述变量之间关系的一种统计方法\",{\"1\":{\"490\":1}}],[\"回归模型与分析\",{\"0\":{\"490\":1},\"1\":{\"378\":1}}],[\"回归分析帮助我们理解特征与目标之间的关系\",{\"1\":{\"496\":1}}],[\"回归分析用于研究一个或多个自变量与一个因变量之间关系的统计方法\",{\"1\":{\"471\":1}}],[\"回归分析\",{\"0\":{\"471\":1,\"484\":1},\"1\":{\"382\":1,\"631\":1}}],[\"背包能够达到的最大价值\",{\"1\":{\"408\":1}}],[\"背包问题可以分为以下几种\",{\"1\":{\"408\":1}}],[\"背包问题是计算机科学和优化领域中的经典问题\",{\"1\":{\"408\":1}}],[\"背包问题\",{\"0\":{\"408\":1},\"1\":{\"378\":1,\"426\":1,\"709\":1}}],[\"同步和终止\",{\"1\":{\"2189\":1}}],[\"同步工具\",{\"1\":{\"2044\":1}}],[\"同步工具和原子变量等\",{\"1\":{\"2044\":1}}],[\"同步方法\",{\"1\":{\"1968\":1}}],[\"同步开销较大\",{\"1\":{\"1778\":1}}],[\"同步集合\",{\"1\":{\"1742\":1}}],[\"同步化\",{\"1\":{\"1741\":2}}],[\"同步代码块用于在多线程环境中控制对共享资源的访问\",{\"1\":{\"1548\":1}}],[\"同步代码块\",{\"0\":{\"1548\":1},\"1\":{\"1550\":1,\"1968\":1}}],[\"同步与锁\",{\"1\":{\"1268\":1}}],[\"同一个问题可能存在多种解法\",{\"1\":{\"2157\":1}}],[\"同一个类中多个方法具有相同的名称但参数不同\",{\"1\":{\"1524\":1}}],[\"同一对象多次调用应返回相同结果\",{\"1\":{\"1676\":1}}],[\"同一组内的物品最多只能选一个\",{\"1\":{\"408\":1}}],[\"同理\",{\"1\":{\"1311\":1}}],[\"同等学力或跨学科专业录取的硕士研究生\",{\"1\":{\"1031\":1}}],[\"同时处理多种数据类型\",{\"1\":{\"1837\":1}}],[\"同时提高类型安全性\",{\"1\":{\"1834\":1}}],[\"同时提高预测精度\",{\"1\":{\"493\":1}}],[\"同时提供公共的\",{\"1\":{\"1709\":1}}],[\"同时\",{\"1\":{\"1678\":1}}],[\"同时还可以方便地访问外部类的成员\",{\"1\":{\"1586\":1}}],[\"同时声明和初始化\",{\"1\":{\"1304\":1}}],[\"同时保持代码简单易读\",{\"1\":{\"913\":1}}],[\"同时有固定的存款和取款\",{\"1\":{\"870\":1}}],[\"同时满足投资约束\",{\"1\":{\"716\":1}}],[\"同时满足资源和需求约束\",{\"1\":{\"716\":1}}],[\"同时满足所有约束条件和非负约束\",{\"1\":{\"715\":1}}],[\"同时满足一系列线性约束\",{\"1\":{\"706\":1}}],[\"同时不超过背包的容量\",{\"1\":{\"709\":1}}],[\"同时不超过背包的容量限制\",{\"1\":{\"408\":2}}],[\"同时减少数据的维度\",{\"1\":{\"615\":1}}],[\"同时尽可能保留原始数据的重要信息\",{\"1\":{\"614\":1}}],[\"同时尽可能保留原始数据的信息\",{\"1\":{\"474\":1}}],[\"同时尽可能保留数据的关键结构和信息\",{\"1\":{\"538\":1}}],[\"同时识别出噪声点\",{\"1\":{\"513\":1}}],[\"问题中的条件\",{\"0\":{\"855\":1}}],[\"问题分析\",{\"1\":{\"780\":1}}],[\"问题提出或重述不能直接抄袭原问题\",{\"1\":{\"780\":1}}],[\"问题是\",{\"1\":{\"735\":1}}],[\"问题\",{\"1\":{\"692\":1,\"717\":3,\"738\":1}}],[\"问题的求解时间呈指数增长\",{\"1\":{\"410\":1}}],[\"问题描述如下\",{\"1\":{\"410\":1}}],[\"问题描述\",{\"0\":{\"693\":1,\"720\":1,\"736\":1,\"894\":1},\"1\":{\"381\":1,\"408\":4}}],[\"问应如何选择装入背包的物品\",{\"1\":{\"408\":2}}],[\"我的足迹\",{\"0\":{\"1011\":1}}],[\"我\",{\"0\":{\"981\":1},\"1\":{\"981\":1},\"2\":{\"983\":1}}],[\"我会为你提供更多帮助\",{\"1\":{\"407\":1}}],[\"我们先来了解如何在程序中实现重复执行任务\",{\"1\":{\"2158\":1}}],[\"我们先后追求以下两个层面的目标\",{\"1\":{\"2157\":1}}],[\"我们才能将各种算法进行对比\",{\"1\":{\"2157\":1}}],[\"我们的目标是设计\",{\"1\":{\"2157\":1}}],[\"我们希望找到尽可能高效的算法\",{\"1\":{\"2157\":1}}],[\"我们希望根据过去的天气状态预测未来的天气\",{\"1\":{\"649\":1}}],[\"我们遍历animals列表\",{\"1\":{\"1542\":1}}],[\"我们有着骨子里的温良和坚韧\",{\"1\":{\"992\":1}}],[\"我们应该怎样定义中华民族\",{\"1\":{\"992\":1}}],[\"我们和美利坚合众国一样拥有强大的国力\",{\"0\":{\"991\":1}}],[\"我们假设已知数据点之间的关系是线性的\",{\"1\":{\"933\":1}}],[\"我们需要基于尸体冷却的模型来判断嫌疑人张某是否有可能在案发现场\",{\"1\":{\"854\":1}}],[\"我们需要使用整数规划\",{\"1\":{\"723\":1}}],[\"我们生成了一个随机的时间序列数据\",{\"1\":{\"662\":1}}],[\"我们关注的是如何将具有相似模式的变量分组\",{\"1\":{\"562\":1}}],[\"我们关注的是如何根据变量值将样本分成若干簇\",{\"1\":{\"561\":1}}],[\"我们可以创建一个类实现\",{\"1\":{\"1817\":1}}],[\"我们可以用lambda表达式来实现这个接口\",{\"1\":{\"1686\":1}}],[\"我们可以用python的scipy\",{\"1\":{\"722\":1}}],[\"我们可以使用父类引用来调用通用方法\",{\"1\":{\"1541\":1}}],[\"我们可以使用反斜杠\",{\"1\":{\"134\":1}}],[\"我们可以构建一个连续的函数\",{\"1\":{\"932\":1}}],[\"我们可以对输入数据进行基本的二分类预测\",{\"1\":{\"450\":1}}],[\"我们使用sigmoid激活函数\",{\"1\":{\"445\":1}}],[\"我们将以一个简单的矩形区域内铺设正方形瓷砖为例\",{\"1\":{\"687\":1}}],[\"我们将使用opencv库来演示图像缩放中的插值方法\",{\"1\":{\"947\":1}}],[\"我们将使用lstm模型来预测未来的价格\",{\"1\":{\"659\":1}}],[\"我们将使用numpy库进行矩阵运算\",{\"1\":{\"442\":1}}],[\"我们将通过keras和tensorflow构建一个lstm模型\",{\"1\":{\"657\":1}}],[\"我们将逐步计算主成分并可视化数据在降维过程中的变化\",{\"1\":{\"624\":1}}],[\"我们将进行多次迭代\",{\"1\":{\"447\":1}}],[\"我们将优化一个简单的二次函数\",{\"1\":{\"427\":1}}],[\"我们所说的\",{\"1\":{\"135\":1}}],[\"我们不能把它们用作任何标识符名称\",{\"1\":{\"133\":1}}],[\"减后赋值\",{\"1\":{\"1312\":1}}],[\"减少了同步的开销\",{\"1\":{\"2012\":1}}],[\"减少了代码冗余\",{\"1\":{\"1599\":1}}],[\"减少重新计算的时间\",{\"1\":{\"1861\":1}}],[\"减少代码中的bug\",{\"1\":{\"1849\":1}}],[\"减少冗余代码\",{\"1\":{\"1837\":1}}],[\"减少1\",{\"1\":{\"1311\":1}}],[\"减少计算复杂度\",{\"1\":{\"614\":1,\"620\":1}}],[\"减少存储和计算成本\",{\"1\":{\"542\":1}}],[\"减少延迟和费用\",{\"1\":{\"407\":1}}],[\"减去该列的最小值\",{\"1\":{\"409\":1}}],[\"减去该行的最小值\",{\"1\":{\"409\":1}}],[\"减法赋值\",{\"1\":{\"197\":1}}],[\"减法\",{\"1\":{\"193\":1,\"1146\":1,\"1216\":2,\"1311\":1}}],[\"物体冷却问题\",{\"0\":{\"854\":1}}],[\"物体的重量\",{\"1\":{\"182\":1}}],[\"物理结构的分类\",{\"1\":{\"2153\":1}}],[\"物理公式中的数学运算等\",{\"1\":{\"1397\":1}}],[\"物理学报\",{\"1\":{\"1051\":1}}],[\"物理学\",{\"1\":{\"885\":1}}],[\"物理等多个领域都有广泛应用\",{\"1\":{\"868\":1}}],[\"物理运动模型\",{\"1\":{\"850\":1}}],[\"物理现象等\",{\"1\":{\"420\":1}}],[\"物流运输中的路径优化问题\",{\"1\":{\"844\":1}}],[\"物流\",{\"1\":{\"706\":1}}],[\"物流与供应链\",{\"1\":{\"419\":1}}],[\"物流等\",{\"1\":{\"414\":1}}],[\"物流和运输\",{\"1\":{\"407\":1}}],[\"物品被划分为若干组\",{\"1\":{\"408\":1}}],[\"物品i的重量是w\",{\"1\":{\"408\":2}}],[\"应避免将其用作正常的控制流机制\",{\"1\":{\"1910\":1}}],[\"应采用更现代和安全的替代方案\",{\"1\":{\"1678\":1}}],[\"应为\",{\"1\":{\"1676\":1}}],[\"应返回\",{\"1\":{\"1676\":2}}],[\"应重写\",{\"1\":{\"1668\":1}}],[\"应重新论证\",{\"1\":{\"1038\":1}}],[\"应谨慎对待\",{\"1\":{\"1652\":1}}],[\"应根据具体情况谨慎使用\",{\"1\":{\"1600\":1}}],[\"应根据培养方案的要求\",{\"1\":{\"1034\":1}}],[\"应该在文件系统中对应到\",{\"1\":{\"1625\":1}}],[\"应该只捕获那些你能处理的异常\",{\"1\":{\"1452\":1}}],[\"应该是\",{\"1\":{\"245\":1}}],[\"应\",{\"1\":{\"1117\":1}}],[\"应义斌\",{\"1\":{\"1040\":1}}],[\"应严格认真执行\",{\"1\":{\"1038\":1}}],[\"应在导师组内明确一名本校导师作为该生在校期间的培养责任人\",{\"1\":{\"1028\":1}}],[\"应尽可能结合主观和客观的方法\",{\"1\":{\"764\":1}}],[\"应用层\",{\"1\":{\"2212\":1}}],[\"应用程序与数据库交互的标准\",{\"1\":{\"1987\":1}}],[\"应用程序至关重要\",{\"1\":{\"1879\":1}}],[\"应用程序中起着关键作用\",{\"1\":{\"1678\":1}}],[\"应用程序\",{\"0\":{\"2022\":1},\"1\":{\"1632\":1,\"1957\":1,\"2022\":2}}],[\"应用设置安全哨兵\",{\"1\":{\"1259\":1}}],[\"应用编程接口中有一个网络应用编程接口\",{\"1\":{\"1259\":1}}],[\"应用的开发\",{\"1\":{\"1259\":1}}],[\"应用问题示例\",{\"0\":{\"850\":1}}],[\"应用示例\",{\"0\":{\"835\":1}}],[\"应用二值化\",{\"1\":{\"824\":1}}],[\"应用直方图均衡化\",{\"1\":{\"823\":1}}],[\"应用canny边缘检测\",{\"1\":{\"820\":1}}],[\"应用高斯模糊\",{\"1\":{\"819\":1}}],[\"应用高斯滤波\",{\"1\":{\"809\":1}}],[\"应用分类算法或模式匹配方法对特征进行分析和分类\",{\"1\":{\"585\":1}}],[\"应用\",{\"0\":{\"867\":1,\"885\":1},\"1\":{\"491\":1,\"492\":1,\"493\":1,\"494\":1,\"495\":1,\"561\":1,\"562\":1,\"618\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"671\":1,\"672\":1,\"673\":1,\"674\":1,\"675\":1,\"676\":1,\"677\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"939\":1,\"1024\":1,\"1025\":1}}],[\"应用领域\",{\"0\":{\"419\":1,\"442\":1}}],[\"应用场景\",{\"0\":{\"407\":1,\"437\":1,\"516\":1,\"683\":1},\"1\":{\"520\":1,\"522\":1,\"633\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":1,\"772\":1,\"773\":1,\"774\":1,\"775\":1}}],[\"则执行该块\",{\"1\":{\"1901\":1}}],[\"则执行它\",{\"1\":{\"1900\":1}}],[\"则在反序列化时可能会发生\",{\"1\":{\"1862\":1}}],[\"则替换旧值\",{\"1\":{\"1798\":1}}],[\"则可以重复\",{\"1\":{\"1796\":1}}],[\"则集合会保持不变\",{\"1\":{\"1782\":1}}],[\"则抛出异常\",{\"1\":{\"1759\":1}}],[\"则需要手动同步\",{\"1\":{\"1746\":1}}],[\"则继续循环\",{\"1\":{\"1324\":1,\"1326\":1}}],[\"则后面的每个单词首字母大写\",{\"1\":{\"1275\":1}}],[\"则将其加入生成树\",{\"1\":{\"964\":1}}],[\"则将该列的每个元素加上m\",{\"1\":{\"409\":1}}],[\"则将该行的每个元素减去m\",{\"1\":{\"409\":1}}],[\"则将该顶点入队\",{\"1\":{\"405\":1}}],[\"则方程是齐次的\",{\"1\":{\"864\":1}}],[\"则张某的证言可信\",{\"1\":{\"858\":1}}],[\"则\",{\"1\":{\"737\":1,\"875\":1,\"1676\":2}}],[\"则适用于更复杂的决策边界\",{\"1\":{\"525\":1}}],[\"则输出最佳解\",{\"1\":{\"433\":1}}],[\"则接受新解\",{\"1\":{\"423\":1}}],[\"则接受该解\",{\"1\":{\"422\":1}}],[\"则以一定概率接受该解\",{\"1\":{\"422\":1}}],[\"则算法结束\",{\"1\":{\"409\":1}}],[\"则返回表达式1的值\",{\"1\":{\"1316\":1}}],[\"则返回\",{\"1\":{\"169\":1,\"1745\":3,\"1798\":1,\"1813\":1,\"1822\":2}}],[\"松弛其所有相邻边\",{\"1\":{\"405\":1}}],[\"平方空间复杂度\",{\"1\":{\"2163\":1}}],[\"平方时间复杂度\",{\"1\":{\"2162\":1}}],[\"平台中一个非常重要的概念\",{\"1\":{\"1683\":1}}],[\"平台中的\",{\"1\":{\"1259\":1}}],[\"平台无关性\",{\"1\":{\"1264\":1}}],[\"平台上被编译为字节码格式\",{\"1\":{\"1259\":1}}],[\"平台上被编译为体系结构中立的字节码格式\",{\"1\":{\"1259\":1}}],[\"平台的任何系统中运行\",{\"1\":{\"1259\":2}}],[\"平台的总称\",{\"1\":{\"1258\":1}}],[\"平滑图像\",{\"1\":{\"819\":1}}],[\"平移\",{\"1\":{\"815\":1}}],[\"平稳分布\",{\"1\":{\"647\":1}}],[\"平均情况下性能更好\",{\"1\":{\"405\":1}}],[\"平凡图\",{\"1\":{\"391\":1}}],[\"选项指定类路径\",{\"1\":{\"1629\":1}}],[\"选项指定输出目录\",{\"1\":{\"1628\":1}}],[\"选项来设置类路径\",{\"1\":{\"1627\":1}}],[\"选读\",{\"1\":{\"1040\":36}}],[\"选题意义\",{\"1\":{\"1038\":1}}],[\"选聘有丰富实践经验的相关学科领域专家或行业专家作为行业导师\",{\"1\":{\"1028\":1}}],[\"选举系统\",{\"1\":{\"774\":1}}],[\"选举策略\",{\"1\":{\"747\":1}}],[\"选取距离理想解最近且距离负理想解最远的方案作为最优方案\",{\"1\":{\"768\":1}}],[\"选取相关的评价指标\",{\"1\":{\"753\":1}}],[\"选取当前距离最小的顶点进行扩展\",{\"1\":{\"404\":1}}],[\"选择器\",{\"0\":{\"1886\":1},\"1\":{\"1881\":1,\"1886\":1}}],[\"选择适合的\",{\"1\":{\"1810\":1}}],[\"选择适合的聚类算法\",{\"0\":{\"553\":1}}],[\"选择使用哪种类\",{\"0\":{\"1378\":1}}],[\"选择第二个子图\",{\"1\":{\"1209\":1}}],[\"选择特解\",{\"1\":{\"866\":1}}],[\"选择妥协解决方案\",{\"1\":{\"772\":1}}],[\"选择距离理想解最近且距离负理想解最远的方案\",{\"1\":{\"763\":1}}],[\"选择关联度最大的方案\",{\"1\":{\"754\":1,\"763\":1}}],[\"选择最优方案或提供决策依据\",{\"1\":{\"755\":1}}],[\"选择最优方案或为决策提供参考\",{\"1\":{\"753\":1}}],[\"选择最接近理想解\",{\"1\":{\"754\":1}}],[\"选择物品以最大化背包中的总价值\",{\"1\":{\"709\":1}}],[\"选择哪些项目进行投资\",{\"1\":{\"707\":1}}],[\"选择多少主成分取决于你希望保留的数据方差比例\",{\"1\":{\"616\":1}}],[\"选择主成分\",{\"1\":{\"616\":1}}],[\"选择簇的数量\",{\"1\":{\"556\":1}}],[\"选择检验统计量\",{\"1\":{\"466\":1}}],[\"选择一条三维路径曲线\",{\"1\":{\"679\":1}}],[\"选择一个理想点\",{\"1\":{\"773\":1}}],[\"选择一个二维截面曲线\",{\"1\":{\"679\":1}}],[\"选择一个零元素作为指派\",{\"1\":{\"409\":1}}],[\"选择一列\",{\"1\":{\"458\":1}}],[\"选择操作\",{\"1\":{\"434\":1,\"435\":1}}],[\"选择父代\",{\"1\":{\"433\":1}}],[\"选择\",{\"1\":{\"432\":1}}],[\"选择初始解\",{\"1\":{\"423\":1}}],[\"选择合适的框架进行开发\",{\"1\":{\"2034\":1}}],[\"选择合适的日志级别\",{\"1\":{\"1927\":1}}],[\"选择合适的综合评价模型需要根据实际的评价目标\",{\"1\":{\"775\":1}}],[\"选择合适的模型至关重要\",{\"1\":{\"765\":1}}],[\"选择合适的模型通常取决于数据的特性和具体的任务需求\",{\"1\":{\"504\":1}}],[\"选择合适的方法可以更好地反映各指标间的相对关系\",{\"1\":{\"764\":1}}],[\"选择合适的算法通常取决于具体的任务需求\",{\"1\":{\"599\":1}}],[\"选择合适的监督学习算法\",{\"1\":{\"532\":1}}],[\"选择合适的智能优化算法可以提高效率并找到更好的解\",{\"1\":{\"420\":1}}],[\"选择合适的数学方法\",{\"1\":{\"381\":1}}],[\"选择其中最短的一条\",{\"1\":{\"410\":1}}],[\"该对象用于发送\",{\"1\":{\"1980\":1}}],[\"该接口是一个标记接口\",{\"1\":{\"1862\":1}}],[\"该接口提供了一个\",{\"1\":{\"1812\":1}}],[\"该项目模拟了一个图书管理系统\",{\"1\":{\"1659\":1}}],[\"该包提供了更强大和灵活的日期时间api\",{\"1\":{\"1403\":1}}],[\"该方法需要传递数据库\",{\"1\":{\"1979\":1}}],[\"该方法在java中没有实现\",{\"1\":{\"1308\":1}}],[\"该方法不能被重写\",{\"1\":{\"1308\":1}}],[\"该方程的特征方程为\",{\"1\":{\"866\":1}}],[\"该类不能被继承\",{\"1\":{\"1308\":1}}],[\"该文件用于储存索引信息\",{\"1\":{\"1110\":1}}],[\"该问题在许多实际应用中非常重要\",{\"1\":{\"956\":1}}],[\"该问题常用于优化运输成本\",{\"1\":{\"401\":1}}],[\"该代码将在三维空间中生成一个沿螺旋路径的管道\",{\"1\":{\"682\":1}}],[\"该路径将用于管道的包扎过程\",{\"1\":{\"681\":1}}],[\"该模型尝试学习时间序列的模式\",{\"1\":{\"662\":1}}],[\"该模型是对gm\",{\"1\":{\"636\":1}}],[\"该理论将系统分为\",{\"1\":{\"633\":1}}],[\"该函数将截面曲线沿路径曲线移动\",{\"1\":{\"681\":1}}],[\"该函数实现了模拟退火算法\",{\"1\":{\"429\":1}}],[\"该函数返回一个文件对象\",{\"1\":{\"251\":1}}],[\"增强了java语言的表达能力\",{\"1\":{\"1998\":1}}],[\"增强了封装性和代码可读性\",{\"1\":{\"1601\":1}}],[\"增强代码的可读性和可维护性\",{\"1\":{\"1599\":1}}],[\"增强型for循环用于遍历数组或集合\",{\"1\":{\"1325\":1}}],[\"增强型\",{\"0\":{\"1325\":1}}],[\"增强\",{\"1\":{\"795\":1}}],[\"增强预测的准确性\",{\"1\":{\"637\":1}}],[\"增加代码的耦合度\",{\"1\":{\"2015\":1}}],[\"增加了代码的灵活性和扩展性\",{\"1\":{\"1531\":1}}],[\"增加一周\",{\"1\":{\"1406\":1}}],[\"增加一个月\",{\"1\":{\"1402\":1}}],[\"增加5小时\",{\"1\":{\"1406\":1}}],[\"增加或减少指定字段的值\",{\"1\":{\"1402\":1}}],[\"增加1\",{\"1\":{\"1311\":1}}],[\"增加数据量\",{\"1\":{\"532\":1}}],[\"增加正则化项来防止过拟合\",{\"1\":{\"531\":1}}],[\"增加到每个神经元的额外参数\",{\"1\":{\"440\":1}}],[\"增加种群多样性\",{\"1\":{\"435\":1}}],[\"增加流量并更新残余图\",{\"1\":{\"398\":1,\"399\":1}}],[\"增广路径可以通过深度优先搜索\",{\"1\":{\"397\":1}}],[\"~a\",{\"1\":{\"1148\":1,\"1149\":1,\"1315\":1}}],[\"~inmst\",{\"1\":{\"965\":1}}],[\"~isempty\",{\"1\":{\"398\":1,\"399\":1}}],[\"~eye\",{\"1\":{\"960\":1}}],[\"~\",{\"1\":{\"958\":1,\"965\":1,\"1148\":1,\"1149\":1,\"1152\":1,\"1315\":2}}],[\"~=\",{\"1\":{\"398\":2,\"399\":2,\"738\":1,\"959\":2,\"964\":3,\"1147\":2,\"1152\":1}}],[\"~found\",{\"1\":{\"398\":1,\"399\":1}}],[\"~visited\",{\"1\":{\"398\":1,\"399\":1,\"958\":2}}],[\"~3\",{\"1\":{\"196\":1}}],[\"瓶颈容量\",{\"1\":{\"398\":1}}],[\"直方图\",{\"1\":{\"1212\":1}}],[\"直方图均衡化用于增强图像对比度\",{\"1\":{\"823\":1}}],[\"直方图均衡化\",{\"1\":{\"787\":1,\"809\":1}}],[\"直观且计算简单\",{\"1\":{\"773\":1}}],[\"直观易懂\",{\"1\":{\"754\":1}}],[\"直接使用数据库的原生协议与数据库进行通信\",{\"1\":{\"1986\":1}}],[\"直接操作文件\",{\"1\":{\"1877\":1}}],[\"直接与数据源或数据目的地相连的流\",{\"1\":{\"1868\":1}}],[\"直接在命令行窗口输入变量值\",{\"1\":{\"1191\":1}}],[\"直接在当前工作空间中运行代码\",{\"1\":{\"1184\":1}}],[\"直接开始下一次迭代\",{\"1\":{\"1168\":1}}],[\"直接定义矩阵\",{\"0\":{\"1130\":1}}],[\"直接求解法\",{\"1\":{\"865\":1}}],[\"直接寻找pareto最优解集\",{\"1\":{\"841\":1}}],[\"直接将各指标的标准化值乘以相应的权重后求和\",{\"1\":{\"763\":1}}],[\"直接旅行\",{\"1\":{\"737\":1}}],[\"直接输入文字就是一个段落\",{\"1\":{\"18\":1}}],[\"直到达到\",{\"1\":{\"2160\":1}}],[\"直到这个条件不再满足\",{\"1\":{\"2159\":1}}],[\"直到所有线程都到达屏障点\",{\"1\":{\"1971\":1}}],[\"直到所有数据点都合并成一个簇\",{\"1\":{\"512\":1}}],[\"直到另一个线程调用\",{\"1\":{\"1970\":1}}],[\"直到操作完成\",{\"1\":{\"1888\":1}}],[\"直到至少有一个通道准备好\",{\"1\":{\"1887\":1}}],[\"直到至少有一个通道准备好进行\",{\"1\":{\"1887\":1}}],[\"直到被唤醒或被中断\",{\"1\":{\"1673\":1}}],[\"直到满足某个条件\",{\"1\":{\"1323\":1,\"1332\":1}}],[\"直到满足某些条件为止\",{\"1\":{\"1164\":1}}],[\"直到对象被垃圾回收\",{\"1\":{\"1302\":1}}],[\"直到\",{\"1\":{\"1166\":1,\"1888\":1}}],[\"直到生成树包含\",{\"1\":{\"964\":1}}],[\"直到队列为空\",{\"1\":{\"958\":1}}],[\"直到簇分配不再改变\",{\"1\":{\"511\":1}}],[\"直到找到一个最优解\",{\"1\":{\"409\":1}}],[\"直到没有增广路径\",{\"1\":{\"398\":1}}],[\"直到没有更多增广路径为止\",{\"1\":{\"397\":1}}],[\"容易出错\",{\"1\":{\"2012\":1}}],[\"容易出现过拟合\",{\"1\":{\"521\":1}}],[\"容易陷入局部最优解\",{\"1\":{\"511\":1}}],[\"容量限制\",{\"1\":{\"396\":1}}],[\"容器可以自动创建\",{\"1\":{\"1681\":1}}],[\"容器管理的对象\",{\"1\":{\"1681\":1}}],[\"容器\",{\"2\":{\"318\":1}}],[\"流设计遵循装饰器模式\",{\"1\":{\"1879\":1}}],[\"流类\",{\"0\":{\"1875\":1},\"1\":{\"1875\":1}}],[\"流主要分为以下几类\",{\"1\":{\"1868\":1}}],[\"流的分类\",{\"0\":{\"1868\":1}}],[\"流机制是进行\",{\"1\":{\"1867\":1}}],[\"流分为字节流和字符流\",{\"1\":{\"1867\":1}}],[\"流是\",{\"1\":{\"1867\":1}}],[\"流\",{\"1\":{\"1692\":1,\"1694\":1}}],[\"流与lambda表达式\",{\"0\":{\"1692\":1}}],[\"流体动力学\",{\"1\":{\"885\":1}}],[\"流体动力学等\",{\"1\":{\"879\":1}}],[\"流体模拟\",{\"1\":{\"676\":1}}],[\"流媒体等平台\",{\"1\":{\"599\":1}}],[\"流量守恒\",{\"1\":{\"396\":1}}],[\"流量\",{\"1\":{\"396\":2}}],[\"流网络\",{\"1\":{\"396\":1}}],[\"源文件中\",{\"1\":{\"1477\":1}}],[\"源文件的名称应该和\",{\"1\":{\"1477\":1}}],[\"源文件名必须和类名相同\",{\"1\":{\"1275\":1}}],[\"源文件名\",{\"1\":{\"1275\":1}}],[\"源点到其他所有点的最短距离\",{\"1\":{\"958\":1,\"959\":1}}],[\"源点和汇点\",{\"1\":{\"398\":1,\"399\":1}}],[\"源点\",{\"1\":{\"396\":1,\"398\":1,\"399\":1,\"958\":1,\"959\":1}}],[\"源码文件以\",{\"1\":{\"130\":1}}],[\"例子\",{\"0\":{\"394\":1},\"1\":{\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"939\":2,\"1291\":1}}],[\"例如旅行商问题的暴力解法\",{\"1\":{\"2162\":1}}],[\"例如求解斐波那契数列的朴素递归解法\",{\"1\":{\"2162\":1}}],[\"例如关闭文件\",{\"1\":{\"1903\":1}}],[\"例如密码或其他敏感数据\",{\"1\":{\"1864\":1}}],[\"例如并集\",{\"1\":{\"1793\":1}}],[\"例如runnable\",{\"1\":{\"1686\":1}}],[\"例如框架的设计\",{\"1\":{\"1633\":1}}],[\"例如验证数据的有效性\",{\"1\":{\"1569\":1}}],[\"例如nullpointerexception\",{\"1\":{\"1451\":1}}],[\"例如用户输入了非整数值而你期望的是整数\",{\"1\":{\"1428\":1}}],[\"例如使用system\",{\"1\":{\"1362\":1}}],[\"例如每个命令的第一个字符\",{\"1\":{\"1109\":1}}],[\"例如地图导航\",{\"1\":{\"956\":1}}],[\"例如网络路由优化\",{\"1\":{\"955\":1}}],[\"例如声波\",{\"1\":{\"905\":1}}],[\"例如热传导\",{\"1\":{\"897\":1}}],[\"例如稳态热传导\",{\"1\":{\"891\":1}}],[\"例如lotka\",{\"1\":{\"871\":1}}],[\"例如自动控制系统中的pid控制器设计\",{\"1\":{\"849\":1}}],[\"例如人口增长\",{\"1\":{\"849\":1}}],[\"例如实现复杂的截面形状或路径曲线\",{\"1\":{\"682\":1}}],[\"例如贝塞尔曲面\",{\"1\":{\"672\":1}}],[\"例如哪个主成分在多大程度上解释了数据的变化\",{\"1\":{\"617\":1}}],[\"例如深度学习中的自编码器\",{\"1\":{\"547\":1}}],[\"例如达到最大代数或适应度函数值不再显著改善\",{\"1\":{\"432\":1}}],[\"例如\",{\"1\":{\"171\":1,\"418\":1,\"528\":2,\"530\":2,\"531\":1,\"563\":1,\"614\":1,\"631\":1,\"650\":2,\"723\":1,\"840\":2,\"844\":1,\"867\":1,\"926\":1,\"1102\":2,\"1106\":1,\"1159\":1,\"1160\":1,\"1161\":1,\"1162\":1,\"1163\":1,\"1165\":1,\"1166\":1,\"1167\":1,\"1168\":1,\"1169\":2,\"1170\":1,\"1172\":1,\"1173\":1,\"1174\":1,\"1175\":1,\"1178\":1,\"1179\":1,\"1273\":1,\"1275\":1,\"1294\":1,\"1302\":1,\"1309\":1,\"1385\":2,\"1386\":1,\"1412\":2,\"1477\":1,\"1495\":1,\"1519\":1,\"1539\":1,\"1542\":1,\"1630\":1,\"1634\":1,\"1699\":1,\"1700\":1,\"1733\":1,\"1838\":1,\"1839\":1,\"1895\":2,\"1978\":1,\"2162\":3,\"2163\":3,\"2164\":1}}],[\"查询操作\",{\"1\":{\"1981\":1}}],[\"查询语句\",{\"1\":{\"1981\":1}}],[\"查询\",{\"1\":{\"1974\":1}}],[\"查询字符串\",{\"1\":{\"1941\":1}}],[\"查找并输出所有匹配的子串\",{\"1\":{\"1949\":1}}],[\"查找能够处理该异常的\",{\"1\":{\"1900\":1}}],[\"查找等\",{\"1\":{\"1796\":1,\"2038\":1}}],[\"查找元素的位置\",{\"1\":{\"1774\":1}}],[\"查找\",{\"0\":{\"2072\":1},\"1\":{\"1741\":2,\"2038\":1}}],[\"查找操作效率高\",{\"1\":{\"1738\":1}}],[\"查找字符位置\",{\"1\":{\"1370\":1}}],[\"查找所有从顶点1到顶点4的简单路径\",{\"1\":{\"955\":1}}],[\"查找所有简单路径\",{\"1\":{\"393\":1,\"955\":1}}],[\"查找最小生成树\",{\"1\":{\"393\":1,\"955\":1}}],[\"查找图中的连通子图\",{\"1\":{\"392\":1}}],[\"查看栈的当前状态\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"查看栈顶元素\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"查看队列头部元素\",{\"1\":{\"1762\":1,\"1766\":1}}],[\"查看变量值\",{\"1\":{\"1188\":1}}],[\"查看变量的值和程序的执行流程\",{\"1\":{\"246\":1}}],[\"查看主成分解释的方差比例\",{\"1\":{\"619\":1}}],[\"查看前几行数据\",{\"1\":{\"458\":1}}],[\"查看已安装的模块列表\",{\"1\":{\"230\":1}}],[\"拓扑排序\",{\"1\":{\"392\":1}}],[\"按水平或垂直方向排列组件\",{\"1\":{\"2026\":1}}],[\"按顺序从左到右排列组件\",{\"1\":{\"2026\":1}}],[\"按钮\",{\"1\":{\"2025\":1,\"2027\":3}}],[\"按钮被点击了\",{\"1\":{\"2022\":1,\"2031\":1,\"2033\":1}}],[\"按功能划分\",{\"1\":{\"1868\":1}}],[\"按流的方向划分\",{\"1\":{\"1868\":1}}],[\"按数据单位划分\",{\"1\":{\"1868\":1}}],[\"按自然顺序\",{\"1\":{\"1805\":1}}],[\"按插入顺序\",{\"1\":{\"1803\":1}}],[\"按优先级顺序\",{\"1\":{\"1764\":1}}],[\"按照元素的自然顺序排序\",{\"1\":{\"1782\":1}}],[\"按照插入顺序排序\",{\"1\":{\"1782\":1}}],[\"按照指定格式读取数据\",{\"1\":{\"1192\":1}}],[\"按照\",{\"1\":{\"1039\":1}}],[\"按照顺序访问城市2\",{\"1\":{\"739\":1}}],[\"按\",{\"1\":{\"1035\":1}}],[\"按边的权重排序\",{\"1\":{\"964\":1}}],[\"按边权重从小到大添加边\",{\"1\":{\"392\":1}}],[\"按顶点扩展最小生成树\",{\"1\":{\"392\":1}}],[\"按层次搜索图\",{\"1\":{\"392\":1}}],[\"按位非\",{\"1\":{\"1149\":1}}],[\"按位运算符用于逐位进行运算\",{\"1\":{\"1149\":1}}],[\"按位运算符\",{\"0\":{\"1149\":1},\"1\":{\"1145\":1,\"1152\":1}}],[\"按位置选择\",{\"1\":{\"458\":1}}],[\"按位取反\",{\"1\":{\"196\":1,\"1315\":2}}],[\"按位异或赋值\",{\"1\":{\"197\":1}}],[\"按位异或\",{\"1\":{\"196\":1,\"1149\":1,\"1315\":2}}],[\"按位或赋值\",{\"1\":{\"197\":1}}],[\"按位或\",{\"1\":{\"196\":1,\"1149\":1,\"1315\":2}}],[\"按位与赋值\",{\"1\":{\"197\":1}}],[\"按位与\",{\"1\":{\"196\":1,\"1149\":1,\"1315\":2}}],[\"广泛用于生物医学图像分析\",{\"1\":{\"798\":1}}],[\"广泛用于印刷设计和多媒体制作\",{\"1\":{\"795\":1}}],[\"广泛用于计算机图形学和游戏开发\",{\"1\":{\"672\":1}}],[\"广泛用于时间序列预测任务\",{\"1\":{\"656\":1}}],[\"广泛用于经济数据的短期预测\",{\"1\":{\"634\":1}}],[\"广泛应用于现代java开发中\",{\"1\":{\"1847\":1}}],[\"广泛应用于网络\",{\"1\":{\"1732\":1}}],[\"广泛应用于数值计算\",{\"1\":{\"1214\":1}}],[\"广泛应用于图像分类\",{\"1\":{\"797\":1}}],[\"广泛应用于图像\",{\"1\":{\"591\":1}}],[\"广泛应用于人工智能和机器学习领域\",{\"1\":{\"438\":1}}],[\"广泛应用于资源分配\",{\"1\":{\"408\":1}}],[\"广泛应用于计算机科学\",{\"1\":{\"388\":1}}],[\"广泛应用于工程\",{\"1\":{\"383\":1}}],[\"广泛应用于各种编程任务\",{\"1\":{\"177\":1}}],[\"广告推荐\",{\"1\":{\"534\":1}}],[\"广义线性模型\",{\"1\":{\"495\":1}}],[\"广度优先搜索\",{\"1\":{\"392\":1}}],[\"尽早开展科学研究\",{\"1\":{\"1038\":1}}],[\"尽量减少废料或使用最少数量的大钢板\",{\"1\":{\"693\":1}}],[\"尽可能深地搜索图的分支\",{\"1\":{\"392\":1}}],[\"尽管\",{\"1\":{\"2032\":1}}],[\"尽管它提供了灵活性\",{\"1\":{\"1652\":1}}],[\"尽管它们的声明类型都是\",{\"1\":{\"1530\":1}}],[\"尽管jvm有垃圾回收机制\",{\"1\":{\"1269\":1}}],[\"尽管这些方法的具体实现可能不同\",{\"1\":{\"242\":1}}],[\"尽管可以重新赋值\",{\"1\":{\"182\":1}}],[\"即进程执行的速度和顺序是不确定的\",{\"1\":{\"2191\":1}}],[\"即两种基本的程序控制结构\",{\"1\":{\"2158\":1}}],[\"即线程不安全\",{\"1\":{\"1746\":1}}],[\"即闭包\",{\"1\":{\"1693\":1}}],[\"即一段可以传递并执行的代码\",{\"1\":{\"1684\":1}}],[\"即一个类只能继承一个父类\",{\"1\":{\"1515\":1}}],[\"即对象状态改变后哈希码也改变\",{\"1\":{\"1676\":1}}],[\"即使系统出现故障也能恢复\",{\"1\":{\"2191\":1}}],[\"即使用\",{\"1\":{\"1816\":1}}],[\"即使接口在将来添加新方法\",{\"1\":{\"1578\":1}}],[\"即使没有明确声明\",{\"1\":{\"1556\":1,\"1574\":1}}],[\"即使多个线程同时调用\",{\"1\":{\"1548\":1}}],[\"即使这些子类在其他包中\",{\"1\":{\"1481\":1}}],[\"即父类和子类方法的名称和参数列表必须一致\",{\"1\":{\"1534\":1}}],[\"即可以在不创建新对象的情况下修改字符串内容\",{\"1\":{\"1372\":1}}],[\"即数组的数组\",{\"1\":{\"1358\":1}}],[\"即数据点到其所在簇质心的距离平方和\",{\"1\":{\"511\":1}}],[\"即方法接收到的是参数的副本\",{\"1\":{\"1338\":1}}],[\"即不会保存到序列化的对象状态中\",{\"1\":{\"1308\":1}}],[\"即不显式指定修饰符时使用此级别\",{\"1\":{\"1307\":1}}],[\"即它们在其他类中的可见性\",{\"1\":{\"1307\":1}}],[\"即在lambda表达式中不修改它们\",{\"1\":{\"1693\":1}}],[\"即在一个\",{\"1\":{\"1163\":1}}],[\"即在其他玩家策略不变的情况下\",{\"1\":{\"745\":1}}],[\"即7\",{\"1\":{\"856\":1}}],[\"即70元\",{\"1\":{\"733\":1}}],[\"即晚上9\",{\"1\":{\"855\":1}}],[\"即150元\",{\"1\":{\"727\":1}}],[\"即\",{\"1\":{\"715\":1,\"1286\":1,\"1288\":2,\"1670\":1,\"1880\":1,\"1900\":1}}],[\"即状态的概率分布不再改变\",{\"1\":{\"647\":1}}],[\"即具有\",{\"1\":{\"645\":1}}],[\"即每个数据点属于每个簇的概率\",{\"1\":{\"514\":1}}],[\"即将密度足够高的数据点聚集在一起\",{\"1\":{\"513\":1}}],[\"即解释变量\",{\"1\":{\"496\":1}}],[\"即响应变量\",{\"1\":{\"496\":1}}],[\"即覆盖零元素的直线数量等于矩阵的阶数n\",{\"1\":{\"409\":1}}],[\"即多棵树的集合\",{\"1\":{\"391\":1}}],[\"即非公共部分的并集\",{\"1\":{\"161\":1}}],[\"森林\",{\"1\":{\"391\":1}}],[\"树和图\",{\"1\":{\"2208\":1}}],[\"树形结构\",{\"1\":{\"2025\":1}}],[\"树木等\",{\"1\":{\"677\":1}}],[\"树状图\",{\"1\":{\"512\":1,\"550\":1}}],[\"树\",{\"0\":{\"2070\":1,\"2171\":1},\"1\":{\"391\":1,\"2153\":1}}],[\"任何一个线程均有它的\",{\"1\":{\"1259\":1}}],[\"任何单个玩家都不能通过改变自己的策略来获得更好的结果\",{\"1\":{\"748\":1}}],[\"任意两个顶点间都有路径\",{\"1\":{\"953\":1}}],[\"任意两个顶点之间都有一条边的图\",{\"1\":{\"391\":1}}],[\"任务类型和应用场景进行分类\",{\"1\":{\"592\":1}}],[\"任务等\",{\"1\":{\"409\":1}}],[\"任务2\",{\"1\":{\"30\":1}}],[\"任务1\",{\"1\":{\"30\":1}}],[\"任务列表\",{\"0\":{\"30\":1}}],[\"空格\",{\"1\":{\"1947\":1}}],[\"空格分隔\",{\"1\":{\"1423\":1}}],[\"空行\",{\"1\":{\"1108\":1}}],[\"空间复杂度是选择合适算法的重要考虑因素之一\",{\"1\":{\"2165\":1}}],[\"空间复杂度是衡量算法在执行过程中所占用的存储空间的指标\",{\"1\":{\"2163\":1}}],[\"空间复杂度的考虑因素\",{\"0\":{\"2164\":1}}],[\"空间复杂度同样使用大o符号表示\",{\"1\":{\"2163\":1}}],[\"空间效率\",{\"1\":{\"2157\":1}}],[\"空间占用尽量少\",{\"1\":{\"2152\":1}}],[\"空间离散点数\",{\"1\":{\"927\":1}}],[\"空间步长\",{\"1\":{\"889\":1,\"903\":1,\"911\":1,\"927\":1}}],[\"空间步数\",{\"1\":{\"889\":1,\"890\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1}}],[\"空间区间长度\",{\"1\":{\"889\":1,\"890\":1,\"903\":1,\"904\":1,\"911\":1,\"912\":1,\"927\":1}}],[\"空图\",{\"1\":{\"391\":1}}],[\"空序列\",{\"1\":{\"139\":1}}],[\"个关键字来处理异常\",{\"1\":{\"1897\":1}}],[\"个服从均匀分布的随机数\",{\"1\":{\"1230\":1}}],[\"个服从标准正态分布的随机数\",{\"1\":{\"1230\":1}}],[\"个城市\",{\"1\":{\"736\":1}}],[\"个主成分的结果\",{\"1\":{\"624\":1}}],[\"个样本和\",{\"1\":{\"618\":1}}],[\"个特征\",{\"1\":{\"614\":1,\"618\":1}}],[\"个体或对象\",{\"1\":{\"561\":1}}],[\"个初始质心\",{\"1\":{\"511\":1}}],[\"个簇\",{\"1\":{\"511\":1,\"540\":1}}],[\"个顶点的完全图记为\",{\"1\":{\"391\":1}}],[\"个顶点的图\",{\"1\":{\"390\":1}}],[\"个人计算机操作系统阶段\",{\"1\":{\"2190\":1}}],[\"个人培养计划一经制定不得随意更改\",{\"1\":{\"1034\":1}}],[\"个人信息\",{\"2\":{\"2\":1}}],[\"个人简介\",{\"0\":{\"1\":1}}],[\"连接数据库\",{\"1\":{\"1978\":1}}],[\"连接\",{\"1\":{\"1882\":1,\"1977\":1}}],[\"连接顶点的线\",{\"1\":{\"953\":1}}],[\"连接神经元之间的参数\",{\"1\":{\"440\":1}}],[\"连接路径\",{\"1\":{\"255\":1}}],[\"连通分量算法\",{\"1\":{\"392\":1}}],[\"连通图\",{\"1\":{\"389\":1,\"953\":1}}],[\"且没有栈溢出风险\",{\"1\":{\"2161\":1}}],[\"且天然支持序列化和线程安全\",{\"1\":{\"2014\":1}}],[\"且延迟加载实例\",{\"1\":{\"2013\":1}}],[\"且性能较好\",{\"1\":{\"2012\":1}}],[\"且无需同步\",{\"1\":{\"2009\":1}}],[\"且可以包含抽象方法和非抽象方法\",{\"1\":{\"1709\":1}}],[\"且方法签名相同\",{\"1\":{\"1709\":1}}],[\"且\",{\"1\":{\"1676\":1}}],[\"且总是先于构造函数执行\",{\"1\":{\"1546\":1}}],[\"且在构造函数执行之前执行\",{\"1\":{\"1546\":1}}],[\"且常用的数学常量pi和e也包含在其中\",{\"1\":{\"1398\":1}}],[\"且存在于所有对象之间共享\",{\"1\":{\"1303\":1}}],[\"且需要妥善处理各指标间的冲突\",{\"1\":{\"772\":1}}],[\"且需要合理选择标准化方法\",{\"1\":{\"754\":1}}],[\"且具有相同的协方差矩阵\",{\"1\":{\"520\":1}}],[\"且除起点和终点外不包含重复顶点\",{\"1\":{\"389\":1}}],[\"且内部函数可以访问外部函数的局部变量\",{\"1\":{\"215\":1}}],[\"起点和终点相同的路径\",{\"1\":{\"389\":1,\"953\":1}}],[\"环境变量\",{\"1\":{\"2037\":1}}],[\"环境变化预测\",{\"1\":{\"633\":1}}],[\"环境温度\",{\"1\":{\"855\":1,\"856\":1}}],[\"环境综合评价等\",{\"1\":{\"775\":1}}],[\"环境评估等\",{\"1\":{\"769\":1}}],[\"环境性指标\",{\"1\":{\"757\":1}}],[\"环境科学\",{\"1\":{\"755\":1}}],[\"环境科学等领域中广泛应用\",{\"1\":{\"752\":1}}],[\"环境管理中的资源分配问题\",{\"1\":{\"844\":1}}],[\"环境管理\",{\"1\":{\"710\":1}}],[\"环\",{\"1\":{\"389\":1,\"953\":1,\"1117\":1}}],[\"路径优化和聚类分析等领域有广泛应用\",{\"1\":{\"961\":1}}],[\"路径的设计\",{\"1\":{\"683\":1}}],[\"路径的长度是所经过的边的数量\",{\"1\":{\"389\":1}}],[\"路径曲线在z轴方向上上升\",{\"1\":{\"681\":1}}],[\"路径上的点数\",{\"1\":{\"680\":1}}],[\"路径可以是直线\",{\"1\":{\"679\":1}}],[\"路径规划等领域\",{\"1\":{\"1732\":1}}],[\"路径规划等\",{\"1\":{\"426\":1}}],[\"路径规划\",{\"1\":{\"420\":1,\"716\":1}}],[\"路径\",{\"1\":{\"389\":1,\"394\":1,\"953\":1,\"958\":1,\"959\":1,\"1941\":1}}],[\"出发的边的数量\",{\"1\":{\"389\":1}}],[\"出度是从\",{\"1\":{\"389\":1}}],[\"记6个学分\",{\"1\":{\"1035\":1}}],[\"记录日志的示例\",{\"1\":{\"1922\":1}}],[\"记录日志\",{\"0\":{\"1922\":1,\"1926\":1}}],[\"记录用户行为\",{\"1\":{\"1913\":1}}],[\"记录程序运行过程中的关键信息\",{\"1\":{\"1913\":1}}],[\"记录异常日志\",{\"1\":{\"1910\":1}}],[\"记录异常信息\",{\"1\":{\"1452\":1}}],[\"记录详细的异常信息\",{\"1\":{\"1452\":1}}],[\"记录当前线程执行的字节码指令地址\",{\"1\":{\"1265\":1}}],[\"记录当前解和目标函数值\",{\"1\":{\"428\":1}}],[\"记录上次编译的信息\",{\"1\":{\"1110\":1}}],[\"记录最佳解\",{\"1\":{\"428\":1}}],[\"记录解和目标函数值的历史\",{\"1\":{\"428\":1}}],[\"记录学生成绩\",{\"0\":{\"177\":1}}],[\"记为m\",{\"1\":{\"409\":1}}],[\"记为\",{\"1\":{\"389\":3,\"396\":2,\"646\":2}}],[\"度\",{\"1\":{\"389\":1,\"953\":1}}],[\"边的数量少\",{\"1\":{\"963\":1}}],[\"边权重之和最小的生成树\",{\"1\":{\"962\":1}}],[\"边\",{\"1\":{\"953\":1}}],[\"边界条件为\",{\"1\":{\"894\":1}}],[\"边界条件\",{\"0\":{\"901\":1,\"909\":1},\"1\":{\"884\":2,\"888\":1,\"895\":1,\"896\":1,\"903\":1,\"904\":1,\"911\":2,\"912\":1}}],[\"边界表示法\",{\"1\":{\"671\":1}}],[\"边值问题\",{\"1\":{\"882\":1}}],[\"边缘\",{\"1\":{\"813\":1}}],[\"边缘检测\",{\"0\":{\"820\":1},\"1\":{\"788\":1,\"800\":1}}],[\"边缘用黑色描绘\",{\"1\":{\"689\":1}}],[\"边和面来描述表面\",{\"1\":{\"671\":1}}],[\"边列表示例\",{\"1\":{\"390\":1}}],[\"边列表\",{\"1\":{\"390\":1}}],[\"边有方向\",{\"1\":{\"389\":1,\"953\":1}}],[\"边没有方向\",{\"1\":{\"389\":1,\"953\":1}}],[\"有效地防止了\",{\"1\":{\"1984\":1}}],[\"有效的电子邮件地址\",{\"1\":{\"1950\":1}}],[\"有助于开发人员编写更加灵活和高效的\",{\"1\":{\"1957\":1}}],[\"有助于编写更加高效和线程安全的代码\",{\"1\":{\"1379\":1}}],[\"有时需要对依赖项进行模拟\",{\"1\":{\"1858\":1}}],[\"有时不仅要考虑材料利用率\",{\"1\":{\"701\":1}}],[\"有序性\",{\"1\":{\"1744\":1}}],[\"有序集合\",{\"1\":{\"1735\":1}}],[\"有序列表\",{\"0\":{\"22\":1}}],[\"有参构造器\",{\"1\":{\"1711\":2}}],[\"有几种方法可以获取一个类的\",{\"1\":{\"1635\":1}}],[\"有方法体\",{\"1\":{\"1554\":1}}],[\"有四种访问修饰符\",{\"1\":{\"1479\":1}}],[\"有返回值的方法\",{\"1\":{\"1335\":1}}],[\"有以下几点需要注意\",{\"1\":{\"1276\":1}}],[\"有状态和行为\",{\"1\":{\"1273\":1}}],[\"有自己的局部工作空间\",{\"1\":{\"1184\":1}}],[\"有表3\",{\"1\":{\"1107\":1,\"1108\":1}}],[\"有的命令不带参数\",{\"1\":{\"1106\":1}}],[\"有入度\",{\"1\":{\"953\":1}}],[\"有限状态机等\",{\"1\":{\"2210\":1}}],[\"有限的状态或类别\",{\"1\":{\"1614\":1}}],[\"有限元法\",{\"1\":{\"883\":1}}],[\"有限差分法\",{\"1\":{\"883\":1}}],[\"有些监督学习模型\",{\"1\":{\"536\":1}}],[\"有n个工人和n个任务\",{\"1\":{\"409\":1}}],[\"有n组物品和一个容量为v的背包\",{\"1\":{\"408\":1}}],[\"有向图中不对称\",{\"1\":{\"954\":1}}],[\"有向图中任意两个顶点\",{\"1\":{\"389\":1}}],[\"有向图的邻接矩阵一般是非对称的\",{\"1\":{\"390\":1}}],[\"有向图的边是非对称的\",{\"1\":{\"389\":1}}],[\"有向图\",{\"1\":{\"389\":2,\"953\":1}}],[\"约束优化问题\",{\"1\":{\"833\":1}}],[\"约束来防止子环的形成\",{\"1\":{\"737\":1}}],[\"约束\",{\"1\":{\"737\":1,\"738\":1,\"740\":1}}],[\"约束系数矩阵\",{\"1\":{\"384\":1}}],[\"约束条件为gi​\",{\"1\":{\"842\":1}}],[\"约束条件是总资金量和其他投资限制\",{\"1\":{\"717\":1}}],[\"约束条件是每个仓库的库存量和每个客户的需求量\",{\"1\":{\"717\":1}}],[\"约束条件是资源限额\",{\"1\":{\"717\":1}}],[\"约束条件\",{\"0\":{\"699\":1},\"1\":{\"384\":2,\"715\":1,\"721\":1,\"725\":1,\"731\":1,\"737\":1,\"840\":1}}],[\"约定俗成地提醒程序员该值不应被修改\",{\"1\":{\"181\":1}}],[\"每台计算机有\",{\"1\":{\"1930\":1}}],[\"每两个相邻的已知点之间用一条直线连接\",{\"1\":{\"933\":1}}],[\"每天生产产品b的数量\",{\"1\":{\"722\":1,\"726\":1,\"727\":1}}],[\"每天生产产品a的数量\",{\"1\":{\"722\":1,\"726\":1,\"727\":1}}],[\"每天生产的产品b的单位数\",{\"1\":{\"721\":1,\"725\":1}}],[\"每天生产的产品a的单位数\",{\"1\":{\"721\":1,\"725\":1}}],[\"每生产一单位产品b需要2个单位原料和5个小时劳动力\",{\"1\":{\"720\":1}}],[\"每生产一单位产品a需要4个单位原料和3个小时劳动力\",{\"1\":{\"720\":1}}],[\"每次创建对象都会执行一次\",{\"1\":{\"1549\":1}}],[\"每次创建\",{\"1\":{\"1546\":1}}],[\"每次从队列中取出当前距离最小的顶点\",{\"1\":{\"958\":1}}],[\"每次选择当前最短路径的顶点进行扩展\",{\"1\":{\"957\":1}}],[\"每次运行的结果可能不同\",{\"1\":{\"651\":1}}],[\"每次迭代中通过前向传播计算输出\",{\"1\":{\"447\":1}}],[\"每次迭代后\",{\"1\":{\"429\":1}}],[\"每隔1000次迭代打印误差\",{\"1\":{\"450\":1}}],[\"每1000次打印一次误差\",{\"1\":{\"447\":1}}],[\"每层可以有不同数量的节点\",{\"1\":{\"439\":1}}],[\"每组物品有若干个\",{\"1\":{\"408\":1}}],[\"每种流都有输入流和输出流\",{\"1\":{\"1867\":1}}],[\"每种代码块都有不同的作用和执行时机\",{\"1\":{\"1544\":1}}],[\"每种产品都有固定的生产成本和预计的利润\",{\"1\":{\"730\":1}}],[\"每种产品的单位利润和所需资源不同\",{\"1\":{\"717\":1}}],[\"每种产品的利润分别为\",{\"1\":{\"384\":1}}],[\"每种资源的供应量是有限的\",{\"1\":{\"720\":1}}],[\"每种需求的小块必须得到满足\",{\"1\":{\"699\":1}}],[\"每种算法适用于不同类型的数据和问题\",{\"1\":{\"576\":1}}],[\"每种聚类算法都有其适用场景\",{\"1\":{\"553\":1}}],[\"每种物品的件数是有限的\",{\"1\":{\"408\":1}}],[\"每种物品仅有一件\",{\"1\":{\"408\":1}}],[\"每轮尝试更新边的距离\",{\"1\":{\"403\":1}}],[\"每个程序都独占整个计算机\",{\"1\":{\"2190\":1}}],[\"每个单元格大小相同\",{\"1\":{\"2026\":1}}],[\"每个单元格能够存储不同维度和数据类型的数组\",{\"1\":{\"1127\":1}}],[\"每个区域最多只能添加一个组件\",{\"1\":{\"2026\":1}}],[\"每个线程执行一个独立的任务\",{\"1\":{\"1959\":1}}],[\"每个线程都有自己的栈\",{\"1\":{\"1265\":1}}],[\"每个端口对应一个特定的服务\",{\"1\":{\"1930\":1}}],[\"每个可序列化类建议都定义一个\",{\"1\":{\"1862\":1}}],[\"每个测试方法用于测试一个特定的功能或方法\",{\"1\":{\"1852\":1}}],[\"每个实现类都有其独特的特性和适用场景\",{\"1\":{\"1784\":1,\"1799\":1}}],[\"每个实例都使用python的库进行实现\",{\"1\":{\"817\":1}}],[\"每个接口定义了一组通用操作\",{\"1\":{\"1735\":1}}],[\"每个节点包含数据和指向下一个节点的指针\",{\"1\":{\"1723\":1}}],[\"每个节点代表一个可能的输出类别或值\",{\"1\":{\"439\":1}}],[\"每个节点代表输入数据的一个特征\",{\"1\":{\"439\":1}}],[\"每个包装类都提供了很多实用方法\",{\"1\":{\"1704\":1}}],[\"每个属性对应表中的一列\",{\"1\":{\"1681\":1}}],[\"每个属性都应提供公共的\",{\"1\":{\"1680\":1}}],[\"每个\",{\"1\":{\"1634\":1,\"1901\":1,\"2029\":1}}],[\"每个枚举值实际上是枚举类的一个实例\",{\"1\":{\"1603\":1}}],[\"每个方法的参数列表不同\",{\"1\":{\"1523\":1}}],[\"每个子类对应java中的一个基本数据类型\",{\"1\":{\"1383\":1}}],[\"每个子问题的解可以用来构造更大的问题的解\",{\"1\":{\"709\":1}}],[\"每个类都有其特定的用途和特点\",{\"1\":{\"1367\":1}}],[\"每个类别的协方差矩阵不同\",{\"1\":{\"525\":1}}],[\"每个对象都具有独立的属性值\",{\"1\":{\"1469\":1}}],[\"每个对象都有自己的状态和行为\",{\"1\":{\"1710\":1}}],[\"每个对象都有自己的一份实例变量的拷贝\",{\"1\":{\"1302\":1}}],[\"每个对象都有独特的实例变量\",{\"1\":{\"1273\":1}}],[\"每个对象包含数据和操作这些数据的方法\",{\"1\":{\"241\":1}}],[\"每个java线程对应于操作系统的一个线程\",{\"1\":{\"1268\":1}}],[\"每个结构都具有能够存储不同维度和数据类型的数组的命名字段\",{\"1\":{\"1127\":1}}],[\"每个顶点有一个列表\",{\"1\":{\"954\":1}}],[\"每个顶点的流入等于流出\",{\"1\":{\"396\":1}}],[\"每个未知点的值等于距离最近的已知点的值\",{\"1\":{\"933\":1}}],[\"每个像素代表图像中的一个点\",{\"1\":{\"785\":1}}],[\"每个玩家都没有动力改变自己的策略\",{\"1\":{\"745\":1}}],[\"每个城市必须到达另一个城市\",{\"1\":{\"737\":1,\"738\":1}}],[\"每个城市必须从另一个城市到达和每个城市必须到达另一个城市的约束矩阵\",{\"1\":{\"740\":1}}],[\"每个城市必须从另一个城市到达\",{\"1\":{\"737\":1,\"738\":1}}],[\"每个选项有不同的预期回报和风险\",{\"1\":{\"717\":1}}],[\"每个客户有一定的需求\",{\"1\":{\"717\":1}}],[\"每个仓库有一定的库存\",{\"1\":{\"717\":1}}],[\"每个切割模式下的小块不能超出大钢板的尺寸\",{\"1\":{\"699\":1}}],[\"每个体素表示空间中的一个小立方体\",{\"1\":{\"675\":1}}],[\"每个点都有一个三维坐标\",{\"1\":{\"674\":1}}],[\"每个数据点可以表示为三维空间中的一个点\",{\"1\":{\"614\":1}}],[\"每个特征都可以看作一个维度\",{\"1\":{\"614\":1}}],[\"每个样本有5个变量\",{\"1\":{\"565\":2}}],[\"每个个体在给定的边界范围内\",{\"1\":{\"435\":1}}],[\"每个个体通常表示为一个字符串\",{\"1\":{\"432\":1}}],[\"每个工人完成每个任务都有一个特定的成本\",{\"1\":{\"409\":1}}],[\"每个变量在使用前都必须赋值\",{\"1\":{\"135\":1}}],[\"适用场景\",{\"1\":{\"1752\":1,\"1778\":1,\"1892\":1}}],[\"适用范围有限\",{\"1\":{\"754\":1}}],[\"适用于问题可以自然地分解为更小的相似问题的情况\",{\"1\":{\"2161\":1}}],[\"适用于大多数简单的循环任务\",{\"1\":{\"2161\":1}}],[\"适用于大规模数学规划问题\",{\"1\":{\"838\":1}}],[\"适用于大规模数据\",{\"1\":{\"540\":1}}],[\"适用于大规模数据集\",{\"1\":{\"511\":1}}],[\"适用于大规模问题\",{\"1\":{\"410\":2,\"694\":1}}],[\"适用于构建跨平台的桌面应用程序\",{\"1\":{\"2034\":1}}],[\"适用于非void返回类型的方法\",{\"1\":{\"2001\":1}}],[\"适用于非齐次差分方程\",{\"1\":{\"865\":1}}],[\"适用于对速度要求高而对可靠性要求低的场合\",{\"1\":{\"1937\":1}}],[\"适用于需要根据键快速查找\",{\"1\":{\"1795\":1}}],[\"适用于需要快速查找的场景\",{\"1\":{\"1793\":1}}],[\"适用于需要重复执行操作的各种场景\",{\"1\":{\"1170\":1}}],[\"适用于任务调度\",{\"1\":{\"1767\":1}}],[\"适用于任意形状的簇\",{\"1\":{\"540\":1}}],[\"适用于多线程环境\",{\"1\":{\"2037\":1}}],[\"适用于多线程环境下的生产者\",{\"1\":{\"1767\":1}}],[\"适用于多线程环境中的生产者\",{\"1\":{\"1760\":1}}],[\"适用于多指标\",{\"1\":{\"766\":1}}],[\"适用于高并发的网络应用\",{\"1\":{\"1943\":1}}],[\"适用于高并发环境\",{\"1\":{\"1760\":1}}],[\"适用于高性能\",{\"1\":{\"1893\":1}}],[\"适用于高性能的网络编程和文件操作\",{\"1\":{\"1878\":1}}],[\"适用于高维数据的降维和分类\",{\"1\":{\"526\":1}}],[\"适用于读操作远多于写操作的场景\",{\"1\":{\"1753\":1}}],[\"适用于二进制文件\",{\"1\":{\"1441\":1}}],[\"适用于二进制文件的读取和写入\",{\"1\":{\"1431\":1}}],[\"适用于文本文件\",{\"1\":{\"1441\":1}}],[\"适用于文本文件的读取和写入\",{\"1\":{\"1431\":1}}],[\"适用于文本分类等任务\",{\"1\":{\"607\":1}}],[\"适用于不同的应用场景\",{\"1\":{\"1267\":1}}],[\"适用于稠密图\",{\"1\":{\"963\":1}}],[\"适用于计算所有顶点对之间的最短路径\",{\"1\":{\"957\":1}}],[\"适用于边权重可以为负的图\",{\"1\":{\"957\":1}}],[\"适用于边权重非负的图\",{\"1\":{\"957\":1}}],[\"适用于代数\",{\"1\":{\"913\":1}}],[\"适用于简单的线性差分方程\",{\"1\":{\"874\":1}}],[\"适用于简单的差分方程\",{\"1\":{\"865\":1}}],[\"适用于全局优化问题\",{\"1\":{\"834\":1}}],[\"适用于无约束优化问题\",{\"1\":{\"834\":1}}],[\"适用于图像编辑\",{\"1\":{\"795\":1}}],[\"适用于图像处理的轻量级库\",{\"1\":{\"794\":1}}],[\"适用于冲突性目标的综合评价\",{\"1\":{\"772\":1}}],[\"适用于定量评价问题\",{\"1\":{\"773\":1}}],[\"适用于定量和部分定性数据\",{\"1\":{\"768\":1}}],[\"适用于定量数据的综合评价\",{\"1\":{\"767\":1}}],[\"适用于相同类型的决策单元\",{\"1\":{\"754\":1,\"771\":1}}],[\"适用于处理模糊性和不确定性较大的综合评价问题\",{\"1\":{\"754\":1}}],[\"适用于描述沿路径移动的各种形状\",{\"1\":{\"684\":1}}],[\"适用于系统状态具有明显转移特性的情况\",{\"1\":{\"637\":1}}],[\"适用于预测具有饱和性质的系统行为\",{\"1\":{\"636\":1}}],[\"适用于具有饱和增长特征的数据\",{\"1\":{\"636\":1}}],[\"适用于复杂的评价体系\",{\"1\":{\"775\":1}}],[\"适用于复杂的综合评价问题\",{\"1\":{\"770\":1}}],[\"适用于复杂的非线性关系\",{\"1\":{\"504\":1}}],[\"适用于复杂系统的预测\",{\"1\":{\"635\":1}}],[\"适用于小样本\",{\"1\":{\"631\":1,\"633\":1}}],[\"适用于类别不平衡的问题\",{\"1\":{\"582\":1}}],[\"适用于类别之间的协方差矩阵差异较大的情况\",{\"1\":{\"521\":1}}],[\"适用于各种场景\",{\"1\":{\"1810\":1}}],[\"适用于各种数学计算任务\",{\"1\":{\"1397\":1}}],[\"适用于各种数据分析场景\",{\"1\":{\"620\":1}}],[\"适用于各种编程任务\",{\"1\":{\"148\":1}}],[\"适用于各类的协方差矩阵不同的情况\",{\"1\":{\"573\":1}}],[\"适用于假设各类的协方差矩阵相同的情况\",{\"1\":{\"573\":1}}],[\"适用于发现层次结构并生成树状图\",{\"1\":{\"559\":1}}],[\"适用于发现任意形状的簇\",{\"1\":{\"551\":1}}],[\"适用于可以通过混合多个高斯分布建模的数据\",{\"1\":{\"553\":1}}],[\"适用于含有噪声\",{\"1\":{\"553\":1}}],[\"适用于形状规则\",{\"1\":{\"553\":1}}],[\"适用于信号处理中的盲源分离\",{\"1\":{\"541\":1}}],[\"适用于线性方程\",{\"1\":{\"883\":1}}],[\"适用于线性齐次差分方程\",{\"1\":{\"865\":1}}],[\"适用于线性和非线性分类问题\",{\"1\":{\"578\":1,\"602\":1}}],[\"适用于线性可分的数据集\",{\"1\":{\"525\":1}}],[\"适用于线性关系的情况\",{\"1\":{\"504\":1}}],[\"适用于因变量不满足正态分布假设的情况\",{\"1\":{\"495\":1}}],[\"适用于数据表现出曲线趋势的情况\",{\"1\":{\"494\":1}}],[\"适用于只有一个自变量的简单预测或趋势分析\",{\"1\":{\"491\":1}}],[\"适用于统计图表的绘制\",{\"1\":{\"459\":1}}],[\"适用于某些特定问题\",{\"1\":{\"416\":1}}],[\"适用于求解复杂的\",{\"1\":{\"416\":1}}],[\"适用于已知明确的数学模型\",{\"1\":{\"415\":1}}],[\"适用于解的组合数量很大的情况\",{\"1\":{\"408\":1}}],[\"适用于稀疏图\",{\"1\":{\"390\":1,\"963\":1}}],[\"适用于\",{\"1\":{\"174\":1}}],[\"适应性强\",{\"1\":{\"754\":1,\"769\":1}}],[\"适应性更强\",{\"1\":{\"573\":1}}],[\"适应度越高表示个体的目标函数值越小\",{\"1\":{\"435\":1}}],[\"适应度评估\",{\"1\":{\"435\":1}}],[\"适应度函数值越高的个体\",{\"1\":{\"432\":1}}],[\"适应度函数\",{\"1\":{\"432\":1}}],[\"适合实时通信应用\",{\"1\":{\"1943\":1}}],[\"适合简单的日志记录需求\",{\"1\":{\"1915\":1}}],[\"适合简单队列操作\",{\"1\":{\"1769\":1}}],[\"适合入门使用\",{\"1\":{\"1914\":1}}],[\"适合多线程环境下的任务调度和生产者\",{\"1\":{\"1769\":1}}],[\"适合多线程环境下读操作多于写操作的场景\",{\"1\":{\"1755\":1}}],[\"适合栈和队列操作\",{\"1\":{\"1769\":1}}],[\"适合需要优先级排序的场景\",{\"1\":{\"1769\":1}}],[\"适合需要简单图像处理的场景\",{\"1\":{\"801\":1}}],[\"适合高并发环境下使用\",{\"1\":{\"1742\":1}}],[\"适合快速插入和查找\",{\"1\":{\"1740\":1}}],[\"适合频繁插入和删除数据的场景\",{\"1\":{\"1749\":1,\"1755\":1}}],[\"适合频繁插入和删除操作\",{\"1\":{\"1723\":1,\"1737\":1}}],[\"适合频繁读取数据的场景\",{\"1\":{\"1746\":1,\"1755\":1}}],[\"适合频繁读取操作\",{\"1\":{\"1737\":1}}],[\"适合作为普通队列和双端队列\",{\"1\":{\"1727\":1}}],[\"适合作为学习oop的入门项目\",{\"1\":{\"1663\":1}}],[\"适合存储大部分浮点数\",{\"1\":{\"1287\":1}}],[\"适合存储小数位数较少的数据\",{\"1\":{\"1287\":1}}],[\"适合工业视觉检测应用\",{\"1\":{\"798\":1}}],[\"适合非专业用户进行图像编辑和设计\",{\"1\":{\"796\":1}}],[\"适合学术研究和工业应用\",{\"1\":{\"794\":1}}],[\"适合可视化\",{\"1\":{\"541\":1}}],[\"适合处理较多备选方案的情况\",{\"1\":{\"774\":1}}],[\"适合处理分布复杂的数据\",{\"1\":{\"559\":1}}],[\"适合处理含噪声的数据\",{\"1\":{\"559\":1}}],[\"适合处理形状规则且均匀分布的簇\",{\"1\":{\"559\":1}}],[\"适合处理大量未标注的数据\",{\"1\":{\"545\":1}}],[\"适合处理大规模数据\",{\"1\":{\"526\":1}}],[\"适合处理复杂的非线性关系\",{\"1\":{\"504\":1}}],[\"适合处理序列数据\",{\"1\":{\"441\":1}}],[\"适合求解复杂\",{\"1\":{\"417\":1}}],[\"适合单峰问题\",{\"1\":{\"416\":1}}],[\"适合基础的数据处理和建模\",{\"1\":{\"383\":1}}],[\"特性\",{\"0\":{\"1390\":1},\"1\":{\"1752\":1,\"1778\":1,\"1892\":1}}],[\"特殊数据结构\",{\"0\":{\"1729\":1}}],[\"特殊类型转换\",{\"0\":{\"1296\":1}}],[\"特殊字符\",{\"0\":{\"1109\":1,\"1151\":1},\"1\":{\"1152\":1}}],[\"特解为\",{\"1\":{\"866\":1}}],[\"特征方程法\",{\"1\":{\"865\":1}}],[\"特征向量代表主成分的方向\",{\"1\":{\"626\":1}}],[\"特征值和特征向量\",{\"0\":{\"1233\":1}}],[\"特征值和特征向量分别表示数据的方差及其在特征空间中的方向\",{\"1\":{\"616\":1}}],[\"特征值越大\",{\"1\":{\"616\":1}}],[\"特征提取等\",{\"1\":{\"800\":1}}],[\"特征提取算法\",{\"1\":{\"591\":1}}],[\"特征提取方法\",{\"1\":{\"586\":1}}],[\"特征提取\",{\"1\":{\"572\":1,\"585\":1,\"589\":1,\"802\":1}}],[\"特征提取与选择等\",{\"1\":{\"532\":1}}],[\"特征可能包括房屋面积\",{\"1\":{\"528\":1}}],[\"特征\",{\"1\":{\"528\":1}}],[\"特征选择\",{\"1\":{\"419\":1,\"562\":1}}],[\"特别地\",{\"1\":{\"1259\":1}}],[\"特别是当子类覆盖了父类的方法时\",{\"1\":{\"1714\":1}}],[\"特别是当考虑离散的时间步长时\",{\"1\":{\"869\":1}}],[\"特别是在涉及序列化和反射攻击的情况下\",{\"1\":{\"2017\":1}}],[\"特别是在反序列化未受信任的数据时\",{\"1\":{\"1866\":1}}],[\"特别是在频繁调用时\",{\"1\":{\"1833\":1,\"2011\":1}}],[\"特别是在处理函数式接口时\",{\"1\":{\"1684\":1}}],[\"特别是在企业级开发中\",{\"1\":{\"1683\":1}}],[\"特别是在多核处理器上\",{\"1\":{\"1268\":1}}],[\"特别是在静态场问题中\",{\"1\":{\"891\":1}}],[\"特别是对数据分布的敏感性强\",{\"1\":{\"767\":1}}],[\"特别是那些难以通过传统优化方法求解的高维\",{\"1\":{\"431\":1}}],[\"特别适合摄影师处理和调整大量图像\",{\"1\":{\"795\":1}}],[\"特别适合进行基本图像操作\",{\"1\":{\"794\":1}}],[\"特别适合需要妥协的决策问题\",{\"1\":{\"772\":1}}],[\"特别适合大型数据集的可视化\",{\"1\":{\"614\":1}}],[\"特别适用于描述离散时间系统或离散空间系统的动态行为\",{\"1\":{\"868\":1}}],[\"特别适用于高维数据的可视化\",{\"1\":{\"541\":1}}],[\"特别适用于搜索空间复杂\",{\"1\":{\"437\":1}}],[\"特别适用于优化问题\",{\"1\":{\"383\":1}}],[\"特点\",{\"0\":{\"1369\":1,\"1372\":1,\"1375\":1},\"1\":{\"408\":4,\"1722\":1,\"1723\":1}}],[\"特朗普\",{\"2\":{\"65\":1}}],[\"强制类型转换是将一种较大范围的数据类型显式转换为较小范围的数据类型\",{\"1\":{\"1295\":1}}],[\"强制类型转换\",{\"0\":{\"1295\":1}}],[\"强化学习通过智能体在环境中不断试探性地进行动作\",{\"1\":{\"596\":1}}],[\"强连通图\",{\"1\":{\"389\":1}}],[\"强大的数值计算和建模工具\",{\"1\":{\"383\":1}}],[\"强调\",{\"0\":{\"19\":1}}],[\"生死\",{\"1\":{\"981\":1}}],[\"生物传感器\",{\"2\":{\"1043\":1}}],[\"生物医学中的药物动力学模型\",{\"0\":{\"872\":1}}],[\"生物等系统的动态变化\",{\"1\":{\"849\":1}}],[\"生物学和物理学中都有广泛的应用\",{\"1\":{\"926\":1}}],[\"生物学等领域有广泛应用\",{\"1\":{\"848\":1}}],[\"生物学等领域具有广泛应用\",{\"1\":{\"476\":1}}],[\"生物学\",{\"1\":{\"747\":1}}],[\"生态中有多种日志框架\",{\"1\":{\"1914\":1}}],[\"生态学\",{\"1\":{\"868\":1,\"885\":1}}],[\"生态系统模型\",{\"0\":{\"871\":1},\"1\":{\"850\":1}}],[\"生态影响等\",{\"1\":{\"757\":1}}],[\"生态环境变化等\",{\"1\":{\"635\":1}}],[\"生存函数\",{\"1\":{\"489\":1}}],[\"生存分析在医学\",{\"1\":{\"476\":1}}],[\"生存分析是一种用于研究生存时间数据的统计方法\",{\"1\":{\"476\":1}}],[\"生存分析\",{\"0\":{\"476\":1,\"489\":1}}],[\"生产管理等应用课题或现实问题\",{\"1\":{\"1038\":1}}],[\"生产成本\",{\"1\":{\"761\":1}}],[\"生产成本为10元\",{\"1\":{\"730\":1}}],[\"生产成本为20元\",{\"1\":{\"730\":1}}],[\"生产成本为30元\",{\"1\":{\"730\":1}}],[\"生产效率等\",{\"1\":{\"757\":1}}],[\"生产工艺优化\",{\"1\":{\"716\":1}}],[\"生产计划问题\",{\"1\":{\"717\":1}}],[\"生产计划\",{\"1\":{\"716\":1}}],[\"生产计划等\",{\"1\":{\"419\":1}}],[\"生产调度\",{\"1\":{\"407\":1}}],[\"生产需要消耗资源\",{\"1\":{\"384\":1}}],[\"生产两种产品\",{\"1\":{\"384\":1}}],[\"生产系统等领域\",{\"1\":{\"382\":1}}],[\"生成斐波那契数列\",{\"0\":{\"1820\":1}}],[\"生成多少个斐波那契数\",{\"1\":{\"1818\":1}}],[\"生成\",{\"1\":{\"1230\":2}}],[\"生成常见概率分布的随机数\",{\"1\":{\"1230\":1}}],[\"生成单位矩阵和零矩阵\",{\"1\":{\"1222\":1}}],[\"生成网格点\",{\"1\":{\"1207\":1}}],[\"生成随机数据\",{\"1\":{\"1202\":1}}],[\"生成随机步进的价格序列\",{\"1\":{\"659\":1}}],[\"生成特定类型的数组\",{\"1\":{\"1156\":1}}],[\"生成引文报告\",{\"0\":{\"1086\":1}}],[\"生成最小生成树的边和总权重\",{\"1\":{\"965\":1}}],[\"生成树\",{\"1\":{\"962\":1}}],[\"生成时间轴\",{\"1\":{\"948\":1}}],[\"生成x和y方向的网格点\",{\"1\":{\"896\":1}}],[\"生成三维管道表面\",{\"1\":{\"681\":1}}],[\"生成螺旋路径曲线\",{\"1\":{\"681\":1}}],[\"生成管道包扎模型\",{\"1\":{\"680\":1}}],[\"生成管道表面\",{\"1\":{\"679\":1}}],[\"生成虚拟的股票价格数据\",{\"1\":{\"659\":1}}],[\"生成虚拟数据\",{\"1\":{\"643\":1}}],[\"生成虚拟数据并进行预测\",{\"0\":{\"643\":1}}],[\"生成的文档通常包含类的说明\",{\"1\":{\"2002\":1}}],[\"生成的参考文献记录\",{\"1\":{\"1110\":1}}],[\"生成的主成分是互不相关的\",{\"1\":{\"620\":1}}],[\"生成的是二次决策边界\",{\"1\":{\"525\":1}}],[\"生成的是线性决策边界\",{\"1\":{\"525\":1}}],[\"生成示例数据\",{\"0\":{\"623\":1},\"1\":{\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"565\":2}}],[\"生成样本数据\",{\"1\":{\"517\":1,\"623\":1}}],[\"生成对抗网络\",{\"1\":{\"441\":1,\"595\":1,\"598\":1,\"792\":1}}],[\"生成新的子代\",{\"1\":{\"435\":1}}],[\"生成新种群\",{\"1\":{\"433\":1}}],[\"生成子代\",{\"1\":{\"433\":1}}],[\"生成一个圆形截面曲线的点\",{\"1\":{\"681\":1}}],[\"生成一个三维表面或实体\",{\"1\":{\"679\":1}}],[\"生成一个指定范围内的随机整数\",{\"1\":{\"235\":1}}],[\"生成一个0到1之间的随机浮点数\",{\"1\":{\"235\":1}}],[\"生成一个新的布尔值\",{\"1\":{\"139\":1}}],[\"生成器\",{\"0\":{\"225\":1},\"1\":{\"225\":1,\"1811\":1,\"1824\":1}}],[\"蒙特卡罗模拟\",{\"1\":{\"382\":1,\"631\":1}}],[\"微分和积分\",{\"0\":{\"2250\":1}}],[\"微分\",{\"0\":{\"2246\":1}}],[\"微分方程可以描述物理\",{\"1\":{\"849\":1}}],[\"微分方程模型可以帮助解释观察到的现象\",{\"1\":{\"849\":1}}],[\"微分方程模型的作用\",{\"0\":{\"849\":1}}],[\"微分方程模型在自然科学\",{\"1\":{\"848\":1}}],[\"微分方程模型\",{\"1\":{\"382\":1}}],[\"微信小程序\",{\"0\":{\"2147\":1},\"2\":{\"2149\":1}}],[\"微积分导论\",{\"0\":{\"2244\":1}}],[\"微积分\",{\"0\":{\"2307\":1},\"1\":{\"913\":1,\"1214\":1},\"2\":{\"355\":1,\"2240\":1,\"2243\":1,\"2252\":1}}],[\"解密\",{\"1\":{\"2045\":1}}],[\"解耦\",{\"1\":{\"1585\":1}}],[\"解线性方程组\",{\"1\":{\"1232\":1}}],[\"解析求解偏微分方程\",{\"0\":{\"923\":1}}],[\"解析解法\",{\"1\":{\"874\":1}}],[\"解方程\",{\"0\":{\"920\":1},\"1\":{\"1232\":1}}],[\"解法\",{\"0\":{\"883\":1},\"1\":{\"884\":2}}],[\"解得\",{\"1\":{\"866\":1}}],[\"解差分方程的方法包括以下几种\",{\"1\":{\"865\":1}}],[\"解出微分方程\",{\"1\":{\"634\":1}}],[\"解释与执行\",{\"1\":{\"1266\":1}}],[\"解释或编译为特定平台的机器码并执行\",{\"1\":{\"1264\":1}}],[\"解释器对这些字节码进行解释执行\",{\"1\":{\"1259\":1}}],[\"解释现象\",{\"1\":{\"849\":1}}],[\"解释代码\",{\"0\":{\"626\":1}}],[\"解释性\",{\"1\":{\"617\":1}}],[\"解释性强\",{\"1\":{\"541\":1}}],[\"解释其实际意义\",{\"1\":{\"381\":1}}],[\"解的质量难以通过解析方法直接求解的问题\",{\"1\":{\"437\":1}}],[\"解的搜索范围\",{\"1\":{\"428\":1,\"429\":1}}],[\"解决这类问题通常比线性规划问题更复杂\",{\"1\":{\"708\":1}}],[\"解决钢板切割问题的策略主要包括以下几种\",{\"1\":{\"694\":1}}],[\"解决方案的策略\",{\"0\":{\"694\":1}}],[\"解决方法\",{\"1\":{\"408\":1}}],[\"解决了长时间依赖问题\",{\"1\":{\"441\":1}}],[\"解决指派问题\",{\"1\":{\"409\":1}}],[\"解决最小费用问题的主要算法包括\",{\"1\":{\"402\":1}}],[\"解包\",{\"1\":{\"156\":1}}],[\"解包部分元素\",{\"1\":{\"153\":1}}],[\"解包元组中的元素\",{\"1\":{\"153\":1}}],[\"解包元组\",{\"0\":{\"153\":1}}],[\"模式\",{\"1\":{\"1410\":1}}],[\"模式识别在机器学习和数据分析中扮演着重要角色\",{\"1\":{\"591\":1}}],[\"模式识别在图像处理\",{\"1\":{\"584\":1}}],[\"模式识别的基本流程\",{\"0\":{\"585\":1}}],[\"模式识别\",{\"0\":{\"584\":1},\"1\":{\"584\":1,\"585\":1,\"591\":1}}],[\"模板\",{\"1\":{\"1110\":1}}],[\"模糊综合评价法\",{\"1\":{\"754\":1,\"763\":1}}],[\"模仿人脑结构的复杂模型\",{\"1\":{\"631\":1}}],[\"模拟时间范围\",{\"1\":{\"856\":1}}],[\"模拟神经元之间的连接进行学习和分类\",{\"1\":{\"586\":1}}],[\"模拟生物基因突变\",{\"1\":{\"432\":1}}],[\"模拟生物交配过程\",{\"1\":{\"432\":1}}],[\"模拟金属退火过程\",{\"1\":{\"420\":1}}],[\"模拟鱼群觅食行为\",{\"1\":{\"420\":1}}],[\"模拟蚂蚁觅食行为\",{\"1\":{\"420\":1}}],[\"模拟蚂蚁觅食行为来寻找路径\",{\"1\":{\"410\":1}}],[\"模拟鸟群觅食行为\",{\"1\":{\"420\":1}}],[\"模拟自然选择和遗传学的过程\",{\"1\":{\"420\":1}}],[\"模拟退火等\",{\"1\":{\"694\":1}}],[\"模拟退火过程中的温度\",{\"1\":{\"422\":1}}],[\"模拟退火算法的实现\",{\"0\":{\"428\":1}}],[\"模拟退火算法将这一过程类比为在搜索空间中寻找最优解的过程\",{\"1\":{\"422\":1}}],[\"模拟退火算法来源于固体物理中的退火过程\",{\"1\":{\"422\":1}}],[\"模拟退火算法通过在搜索过程中允许解的能量\",{\"1\":{\"421\":1}}],[\"模拟退火算法\",{\"0\":{\"421\":1},\"1\":{\"420\":1,\"421\":1,\"429\":1}}],[\"模拟退火\",{\"1\":{\"410\":1}}],[\"模拟离散事件的发生过程\",{\"1\":{\"382\":1}}],[\"模型形式和参数的确定通常需要迭代优化算法\",{\"1\":{\"939\":1}}],[\"模型形式为\",{\"1\":{\"494\":1,\"495\":1}}],[\"模型求解方法\",{\"0\":{\"874\":1}}],[\"模型可以表示为\",{\"1\":{\"836\":1,\"837\":1,\"842\":1}}],[\"模型可以通过最小化预测值和实际值之间的平方误差来确定最佳拟合线\",{\"1\":{\"497\":1}}],[\"模型结构\",{\"0\":{\"832\":1}}],[\"模型建立\",{\"1\":{\"780\":1}}],[\"模型构建较为复杂\",{\"1\":{\"770\":1}}],[\"模型构建步骤\",{\"1\":{\"634\":1}}],[\"模型来求解问题\",{\"1\":{\"723\":1}}],[\"模型进行预测\",{\"1\":{\"642\":1,\"644\":1}}],[\"模型参数b\",{\"1\":{\"642\":1}}],[\"模型参数a\",{\"1\":{\"642\":1}}],[\"模型参数\",{\"1\":{\"641\":1}}],[\"模型实现\",{\"1\":{\"641\":1}}],[\"模型的微分方程为\",{\"1\":{\"851\":1}}],[\"模型的核心函数\",{\"0\":{\"641\":1}}],[\"模型的扩展\",{\"1\":{\"636\":1}}],[\"模型\",{\"1\":{\"631\":1,\"643\":1,\"1892\":1,\"2213\":1}}],[\"模型和sarima\",{\"1\":{\"631\":1}}],[\"模型在低维数据上表现得更好\",{\"1\":{\"614\":1}}],[\"模型在训练数据上表现很好\",{\"1\":{\"533\":1}}],[\"模型解释性\",{\"1\":{\"536\":1}}],[\"模型无法在训练数据上取得良好表现\",{\"1\":{\"533\":1}}],[\"模型部署\",{\"1\":{\"532\":1}}],[\"模型优化\",{\"1\":{\"532\":1}}],[\"模型评估和验证\",{\"1\":{\"586\":1}}],[\"模型评估\",{\"1\":{\"532\":1}}],[\"模型训练\",{\"1\":{\"532\":1}}],[\"模型选择挑战\",{\"1\":{\"546\":1}}],[\"模型选择\",{\"1\":{\"532\":1}}],[\"模型对这些数据进行预测\",{\"1\":{\"528\":1}}],[\"模型较复杂\",{\"1\":{\"525\":1}}],[\"模型复杂度\",{\"1\":{\"525\":1}}],[\"模型准确率\",{\"1\":{\"524\":1,\"535\":1}}],[\"模型描述\",{\"1\":{\"384\":1}}],[\"模型改进\",{\"1\":{\"381\":1}}],[\"模型验证\",{\"1\":{\"381\":1}}],[\"模块可以包含函数\",{\"1\":{\"228\":1}}],[\"模块是一个包含python定义和语句的文件\",{\"1\":{\"228\":1}}],[\"模块\",{\"0\":{\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"2133\":1},\"1\":{\"133\":1}}],[\"根据不同的场景选择合适的日志级别\",{\"1\":{\"1927\":1}}],[\"根据不同的场景和需求\",{\"1\":{\"1794\":1}}],[\"根据功能或模块组织代码\",{\"1\":{\"1631\":1}}],[\"根据名字返回对应的枚举常量\",{\"1\":{\"1609\":1}}],[\"根据实际对象类型调用子类的特定方法\",{\"1\":{\"1541\":1}}],[\"根据方法的参数列表\",{\"1\":{\"1527\":1}}],[\"根据需求和项目特点\",{\"1\":{\"2034\":1}}],[\"根据需求和项目规模选择合适的日志框架\",{\"1\":{\"1928\":1}}],[\"根据需求选择合适的数据结构是编写高效代码的关键\",{\"1\":{\"1755\":1}}],[\"根据需求选择合适的类和方法进行操作\",{\"1\":{\"1441\":1}}],[\"根据需要配置日志的输出位置\",{\"1\":{\"1927\":1}}],[\"根据需要可以查阅\",{\"1\":{\"1212\":1}}],[\"根据需要\",{\"1\":{\"408\":1}}],[\"根据变量的作用域和生命周期\",{\"1\":{\"1300\":1}}],[\"根据具体需求选择合适的循环类型\",{\"1\":{\"1170\":1}}],[\"根据条件判断执行不同的代码块\",{\"1\":{\"1158\":1}}],[\"根据科研创新的培养要求\",{\"1\":{\"1038\":1}}],[\"根据初始条件计算第一个时间步的位移分布\",{\"1\":{\"912\":1}}],[\"根据温度变化计算冷却常数k\",{\"1\":{\"856\":1}}],[\"根据newton冷却定律定义微分方程\",{\"1\":{\"857\":1}}],[\"根据newton冷却定律\",{\"1\":{\"854\":1}}],[\"根据综合得分对各个方案进行排序\",{\"1\":{\"763\":1}}],[\"根据综合得分对各方案进行排序\",{\"1\":{\"753\":1}}],[\"根据专家经验或决策者的主观判断赋予权重\",{\"1\":{\"760\":1}}],[\"根据性质分类\",{\"1\":{\"757\":1}}],[\"根据重要性分类\",{\"1\":{\"757\":1}}],[\"根据评价目标分类\",{\"1\":{\"757\":1}}],[\"根据数据类型分类\",{\"1\":{\"757\":1}}],[\"根据数据特征和任务需求选择合适的分类\",{\"1\":{\"591\":1}}],[\"根据指标的客观数据计算各指标的熵值\",{\"1\":{\"754\":1}}],[\"根据各指标的权重和标准化后的值\",{\"1\":{\"753\":1}}],[\"根据几何模型的构建方式和使用的数学工具\",{\"1\":{\"670\":1}}],[\"根据给定的转移概率矩阵和初始状态分布\",{\"1\":{\"650\":1}}],[\"根据给定输入给出预期输出\",{\"1\":{\"368\":1}}],[\"根据特征值的大小\",{\"1\":{\"616\":1}}],[\"根据用户行为数据进行个性化推荐\",{\"1\":{\"534\":1}}],[\"根据患者病历数据预测疾病\",{\"1\":{\"534\":1}}],[\"根据患者的体检数据进行疾病诊断和分类\",{\"1\":{\"523\":1}}],[\"根据历史数据预测未来的股票价格\",{\"1\":{\"531\":1}}],[\"根据后验概率最大化的原则进行分类\",{\"1\":{\"522\":1}}],[\"根据文档内容将文本聚类为不同的主题\",{\"1\":{\"516\":1}}],[\"根据消费者行为数据将客户分为不同的细分市场\",{\"1\":{\"516\":1}}],[\"根据适应度选择繁殖的父代\",{\"1\":{\"435\":1}}],[\"根据适应度选择用于繁殖的个体\",{\"1\":{\"433\":1}}],[\"根据适应度函数选择优良个体进行繁殖\",{\"1\":{\"432\":1}}],[\"根据降温速率更新温度\",{\"1\":{\"423\":1}}],[\"根据问题的不同特点\",{\"1\":{\"833\":1}}],[\"根据问题的不同特性\",{\"1\":{\"420\":1}}],[\"根据问题类型\",{\"1\":{\"532\":1}}],[\"根据问题和假设\",{\"1\":{\"381\":1}}],[\"根据最终的成本矩阵\",{\"1\":{\"409\":1}}],[\"根据验证结果\",{\"1\":{\"381\":1}}],[\"提交事务\",{\"1\":{\"1985\":1}}],[\"提交专业实践计划\",{\"1\":{\"1035\":1}}],[\"提升性能\",{\"1\":{\"1927\":1}}],[\"提升法\",{\"1\":{\"597\":1}}],[\"提示用户输入一个数值\",{\"1\":{\"1191\":1}}],[\"提前毕业的硕士专业学位研究生应至少在校学习期满2\",{\"1\":{\"1026\":1}}],[\"提供用户与计算机交互的接口\",{\"1\":{\"2211\":1}}],[\"提供用户认证和权限管理功能\",{\"1\":{\"2192\":1}}],[\"提供用户界面\",{\"1\":{\"2189\":1}}],[\"提供设备驱动程序\",{\"1\":{\"2192\":1}}],[\"提供内存保护机制\",{\"1\":{\"2192\":1}}],[\"提供进程间通信和同步机制\",{\"1\":{\"2192\":1}}],[\"提供简洁的数据表示和逻辑信息\",{\"1\":{\"2152\":1}}],[\"提供系统相关功能\",{\"1\":{\"2037\":1}}],[\"提供数学运算方法\",{\"1\":{\"2037\":1}}],[\"提供一个全局访问点\",{\"1\":{\"2015\":1}}],[\"提供一个链接到相关类或方法的参考\",{\"1\":{\"2001\":1}}],[\"提供全局访问点\",{\"1\":{\"2009\":1,\"2010\":1}}],[\"提供的一种显示锁机制\",{\"1\":{\"1969\":1}}],[\"提供的一种机制\",{\"1\":{\"1633\":1}}],[\"提供的内置日志工具\",{\"1\":{\"1914\":1}}],[\"提供有意义的异常信息\",{\"1\":{\"1910\":1}}],[\"提供更丰富的\",{\"1\":{\"2019\":1}}],[\"提供更可靠的程序运行方式\",{\"1\":{\"1894\":1}}],[\"提供更高效或便捷的输入输出功能\",{\"1\":{\"1868\":1}}],[\"提供更高效的插入\",{\"1\":{\"1760\":1}}],[\"提供缓冲区来提高读写效率\",{\"1\":{\"1877\":1}}],[\"提供缓冲机制的字符输出流\",{\"1\":{\"1875\":1}}],[\"提供缓冲机制的字符输入流\",{\"1\":{\"1875\":1}}],[\"提供缓冲机制的字节输出流\",{\"1\":{\"1875\":1}}],[\"提供缓冲机制的字节输入流\",{\"1\":{\"1875\":1}}],[\"提供打印格式化数据的字符输出流\",{\"1\":{\"1875\":1}}],[\"提供线程安全的\",{\"1\":{\"1755\":1}}],[\"提供快速的随机访问\",{\"1\":{\"1755\":1}}],[\"提供对象的字符串表示\",{\"1\":{\"1678\":1}}],[\"提供对象的可读性表示\",{\"1\":{\"1667\":1,\"1675\":1}}],[\"提供通用方法\",{\"1\":{\"1665\":1}}],[\"提供public的getter方法获取数据\",{\"1\":{\"1662\":1}}],[\"提供输入和输出流的类\",{\"1\":{\"1630\":1}}],[\"提供自定义方法\",{\"1\":{\"1613\":1}}],[\"提供适当的\",{\"1\":{\"1571\":1}}],[\"提供\",{\"1\":{\"1567\":1,\"1630\":1}}],[\"提供具体的方法实现\",{\"1\":{\"1498\":1}}],[\"提供运行java程序所需的指令集和执行环境\",{\"1\":{\"1264\":1}}],[\"提供灵活的动态计算图\",{\"1\":{\"797\":1}}],[\"提供了广泛的类库和\",{\"1\":{\"2049\":1}}],[\"提供了创建\",{\"1\":{\"2039\":1}}],[\"提供了创建和管理线程的功能\",{\"1\":{\"2037\":1}}],[\"提供了预编译的\",{\"1\":{\"1984\":1}}],[\"提供了非阻塞\",{\"1\":{\"1943\":1}}],[\"提供了双向遍历和元素添加\",{\"1\":{\"1824\":1}}],[\"提供了统一的方式来遍历\",{\"1\":{\"1824\":1}}],[\"提供了不同的功能和特性\",{\"1\":{\"1810\":1}}],[\"提供了不同的\",{\"1\":{\"1794\":1}}],[\"提供了比传统\",{\"1\":{\"1893\":1}}],[\"提供了比\",{\"1\":{\"1765\":1}}],[\"提供了基于索引\",{\"1\":{\"1744\":1}}],[\"提供了基本的图像处理功能\",{\"1\":{\"796\":1}}],[\"提供了多个\",{\"1\":{\"1784\":1,\"1799\":1}}],[\"提供了多个类来实现\",{\"1\":{\"1743\":1}}],[\"提供了多种布局管理器\",{\"1\":{\"2026\":1}}],[\"提供了多种日志框架供开发者选择\",{\"1\":{\"1928\":1}}],[\"提供了多种流类来满足不同的输入输出需求\",{\"1\":{\"1879\":1}}],[\"提供了多种实现栈数据结构的方法\",{\"1\":{\"1779\":1}}],[\"提供了多种\",{\"1\":{\"1755\":1,\"1760\":1,\"2034\":1}}],[\"提供了多种绘图函数来创建各种类型的图表\",{\"1\":{\"1199\":1}}],[\"提供了许多静态方法来操作集合\",{\"1\":{\"1741\":1}}],[\"提供了许多函数来创建特殊矩阵\",{\"1\":{\"1131\":1}}],[\"提供了\",{\"1\":{\"1741\":1,\"1770\":1,\"1934\":1,\"1937\":1,\"1940\":1,\"1946\":1,\"1970\":1,\"1971\":1,\"1978\":1,\"2037\":1}}],[\"提供了快速的随机访问\",{\"1\":{\"1725\":1,\"1747\":1}}],[\"提供了内置的基础数据结构\",{\"1\":{\"1720\":1}}],[\"提供了四种访问控制修饰符来控制类\",{\"1\":{\"1712\":1}}],[\"提供了两种类型的构造器\",{\"1\":{\"1711\":1}}],[\"提供了两种实现抽象的方式\",{\"1\":{\"1709\":1}}],[\"提供了自动装箱\",{\"1\":{\"1698\":1}}],[\"提供了对base64编码和解码的支持\",{\"1\":{\"1997\":1}}],[\"提供了对象之间基本交互的能力\",{\"1\":{\"1665\":1}}],[\"提供了对解释器使用或维护的一些变量和函数的访问\",{\"1\":{\"233\":1}}],[\"提供了缓存功能\",{\"1\":{\"1441\":1}}],[\"提供了缓冲功能\",{\"1\":{\"1434\":2,\"1437\":2}}],[\"提供了更现代的\",{\"1\":{\"2034\":1}}],[\"提供了更现代的替代方案\",{\"1\":{\"1776\":1}}],[\"提供了更丰富的逻辑信息\",{\"1\":{\"2152\":1}}],[\"提供了更丰富的\",{\"1\":{\"2032\":1}}],[\"提供了更丰富的组件和更好的跨平台支持\",{\"1\":{\"2018\":1}}],[\"提供了更好的性能和更灵活的配置\",{\"1\":{\"1919\":1}}],[\"提供了更好的性能和更多功能\",{\"1\":{\"1914\":1}}],[\"提供了更高效的\",{\"1\":{\"1880\":1}}],[\"提供了更高效的i\",{\"1\":{\"1440\":1,\"1441\":1}}],[\"提供了更强大的功能和灵活性\",{\"1\":{\"1851\":1}}],[\"提供了更强大的文件处理和数据操作能力\",{\"1\":{\"1440\":1}}],[\"提供了更强大\",{\"1\":{\"1408\":1}}],[\"提供了与正则表达式相关的操作\",{\"1\":{\"1415\":1}}],[\"提供了一个新的方式来生成序列\",{\"1\":{\"1819\":1}}],[\"提供了一个安全机制以防恶意代码的攻击\",{\"1\":{\"1259\":1}}],[\"提供了一组处理对象集合的接口和类\",{\"1\":{\"1734\":1}}],[\"提供了一组基础且重要的方法\",{\"1\":{\"1678\":1}}],[\"提供了一种统一的方式来访问不同类型的关系型数据库\",{\"1\":{\"1973\":1}}],[\"提供了一种遍历集合元素的统一方式\",{\"1\":{\"1811\":1}}],[\"提供了一种机制来实现类似生成器的功能\",{\"1\":{\"1811\":1}}],[\"提供了一种标准化的方法来定义类的属性\",{\"1\":{\"1679\":1}}],[\"提供了一种便携的方式使用操作系统功能\",{\"1\":{\"232\":1}}],[\"提供了一些控制线程的方法\",{\"1\":{\"1965\":1}}],[\"提供了一些常用的函数式接口\",{\"1\":{\"1691\":1}}],[\"提供了一些常用的数学常量\",{\"1\":{\"1390\":1}}],[\"提供了一些修饰符\",{\"1\":{\"1478\":1}}],[\"提供了一系列静态方法用于进行数学计算\",{\"1\":{\"1388\":1}}],[\"提供了强大的多线程支持\",{\"1\":{\"1958\":1}}],[\"提供了强大的调试功能\",{\"1\":{\"1188\":1}}],[\"提供了强大的优化工具箱\",{\"1\":{\"838\":1}}],[\"提供了框架支持编写单元测试\",{\"1\":{\"1185\":1}}],[\"提供了丰富的组件和容器类\",{\"1\":{\"2020\":1}}],[\"提供了丰富的类库和\",{\"1\":{\"1929\":1,\"2035\":1}}],[\"提供了丰富的\",{\"1\":{\"1769\":1,\"2024\":1}}],[\"提供了丰富的数据结构和操作方法\",{\"1\":{\"1742\":1}}],[\"提供了丰富的数学功能和灵活的符号计算工具\",{\"1\":{\"925\":1}}],[\"提供了丰富的图像处理工具箱\",{\"1\":{\"806\":1}}],[\"提供了丰富的图像处理算法和工具\",{\"1\":{\"794\":1}}],[\"提供了高效的查找操作\",{\"1\":{\"1793\":1}}],[\"提供了高效的多维数组对象\",{\"1\":{\"457\":1}}],[\"提供了高级的图像处理算法和工具\",{\"1\":{\"802\":1}}],[\"提供了简单易用的界面\",{\"1\":{\"796\":1}}],[\"提供了全面的图像处理和设计工具\",{\"1\":{\"795\":1}}],[\"提供了图像读取\",{\"1\":{\"794\":1}}],[\"提取子字符串\",{\"1\":{\"1370\":1}}],[\"提取一个\",{\"1\":{\"1144\":1}}],[\"提取对角线元素\",{\"1\":{\"1142\":1,\"1144\":1}}],[\"提取图像的纹理特征\",{\"1\":{\"790\":1}}],[\"提取有助于分类的特征\",{\"1\":{\"586\":1}}],[\"提高了计算机的利用率\",{\"1\":{\"2190\":1}}],[\"提高了i\",{\"1\":{\"1441\":1}}],[\"提高应用程序的性能和响应速度\",{\"1\":{\"1972\":1}}],[\"提高服务器的性能\",{\"1\":{\"1943\":1}}],[\"提高效率\",{\"1\":{\"1892\":1}}],[\"提高写入效率\",{\"1\":{\"1871\":1}}],[\"提高读取效率\",{\"1\":{\"1870\":1}}],[\"提高整个项目的稳定性和可靠性\",{\"1\":{\"1859\":1}}],[\"提高代码质量和可维护性\",{\"1\":{\"1849\":1}}],[\"提高代码的可维护性和可读性\",{\"1\":{\"1616\":1,\"2004\":1}}],[\"提高程序的性能和可维护性\",{\"1\":{\"1794\":1}}],[\"提高开发效率\",{\"1\":{\"1706\":1}}],[\"提高软件的质量和可维护性\",{\"1\":{\"1571\":1}}],[\"提高可维护性\",{\"1\":{\"1569\":1}}],[\"提高系统的可维护性和可扩展性\",{\"1\":{\"1531\":1}}],[\"提高研究结果的质量和效\",{\"1\":{\"844\":1}}],[\"提高生产效率\",{\"1\":{\"701\":1}}],[\"提高模型性能\",{\"1\":{\"614\":1}}],[\"提高预测性能\",{\"1\":{\"504\":1}}],[\"提高泛化能力\",{\"1\":{\"504\":1}}],[\"提出合理的假设\",{\"1\":{\"381\":1}}],[\"简而言之\",{\"1\":{\"2157\":1}}],[\"简洁明了\",{\"1\":{\"2003\":1}}],[\"简洁的代码更加容易\",{\"1\":{\"1694\":1}}],[\"简介\",{\"0\":{\"1974\":1}}],[\"简化了资源的使用和管理\",{\"1\":{\"2191\":1}}],[\"简化了基本类型和包装类之间的转换\",{\"1\":{\"1697\":1}}],[\"简化了图像分类\",{\"1\":{\"805\":1}}],[\"简化代码\",{\"1\":{\"1599\":1}}],[\"简化类的使用\",{\"1\":{\"1571\":1}}],[\"简化接口\",{\"1\":{\"1569\":1}}],[\"简化程序结构的作用\",{\"1\":{\"1333\":1}}],[\"简化和抽象问题\",{\"1\":{\"381\":1}}],[\"简称\",{\"1\":{\"1914\":1}}],[\"简称tsp\",{\"1\":{\"735\":1}}],[\"简称lp\",{\"1\":{\"714\":1}}],[\"简单应用\",{\"0\":{\"2033\":1}}],[\"简单地显示变量值\",{\"1\":{\"1194\":1}}],[\"简单来说\",{\"1\":{\"840\":1}}],[\"简单示例\",{\"0\":{\"695\":1}}],[\"简单\",{\"1\":{\"540\":1}}],[\"简单高效\",{\"1\":{\"511\":1}}],[\"简单的变量赋值操作或对数组元素的直接访问\",{\"1\":{\"2163\":1}}],[\"简单的\",{\"1\":{\"2022\":1}}],[\"简单的文件读写或少量数据处理\",{\"1\":{\"1892\":1}}],[\"简单的线性齐次差分方程\",{\"1\":{\"866\":1}}],[\"简单的线性规划模型\",{\"0\":{\"384\":1}}],[\"简单的折线图\",{\"1\":{\"459\":1}}],[\"简单路径\",{\"1\":{\"389\":1}}],[\"简单易用的表格工具\",{\"1\":{\"383\":1}}],[\"简单赋值\",{\"1\":{\"197\":1}}],[\"假设这个方法返回一个具体的动物对象\",{\"1\":{\"1541\":1}}],[\"假设和验证结果\",{\"0\":{\"1062\":1}}],[\"假设解可以分离成时间和空间的乘积形式\",{\"1\":{\"883\":1}}],[\"假设人口增长模型为\",{\"1\":{\"875\":1}}],[\"假设每期的存款都会按一定利率增长\",{\"1\":{\"870\":1}}],[\"假设为t=60分钟\",{\"1\":{\"856\":1}}],[\"假设为t=0\",{\"1\":{\"856\":1}}],[\"假设运行上述\",{\"1\":{\"727\":1,\"733\":1,\"739\":1}}],[\"假设使用整数规划\",{\"1\":{\"700\":1}}],[\"假设我们有一个生产计划问题\",{\"1\":{\"842\":1}}],[\"假设我们有一个时间序列数据\",{\"1\":{\"659\":1}}],[\"假设我们希望聚类为2组\",{\"1\":{\"565\":1}}],[\"假设我们希望聚类为3组\",{\"1\":{\"565\":1}}],[\"假设一个简单的天气系统有两种状态\",{\"1\":{\"649\":1}}],[\"假设\",{\"1\":{\"619\":1,\"884\":2}}],[\"假设你有一个类\",{\"1\":{\"1468\":1}}],[\"假设你有一个数据集\",{\"1\":{\"618\":1}}],[\"假设你有一个简单的类\",{\"1\":{\"248\":1}}],[\"假设不同类别的数据服从正态分布\",{\"1\":{\"520\":1}}],[\"假设数据由多个高斯分布组成\",{\"1\":{\"514\":1}}],[\"假设因变量\",{\"1\":{\"491\":1}}],[\"假设有一家公司需要决定是否生产三种不同的产品\",{\"1\":{\"730\":1}}],[\"假设有一块宽度为10米\",{\"1\":{\"695\":1}}],[\"假设有一个生产问题\",{\"1\":{\"384\":1}}],[\"假设有n个工人和n个任务\",{\"1\":{\"409\":1}}],[\"假设检验是统计学中用于判断样本数据是否支持某个总体假设的方法\",{\"1\":{\"466\":1}}],[\"假设检验\",{\"0\":{\"466\":1,\"479\":1},\"1\":{\"382\":1,\"477\":1}}],[\"假设条件\",{\"1\":{\"381\":1}}],[\"网格点数\",{\"1\":{\"896\":1}}],[\"网格生成\",{\"1\":{\"895\":1,\"896\":1}}],[\"网络原理\",{\"2\":{\"2234\":1}}],[\"网络层\",{\"1\":{\"2212\":1}}],[\"网络层次结构\",{\"1\":{\"2212\":1}}],[\"网络接口\",{\"1\":{\"2207\":1}}],[\"网络管理\",{\"1\":{\"2192\":1}}],[\"网络操作系统出现\",{\"1\":{\"2190\":1}}],[\"网络操作系统阶段\",{\"1\":{\"2190\":1}}],[\"网络通信\",{\"1\":{\"2040\":3}}],[\"网络通信等多种场景\",{\"1\":{\"1867\":1}}],[\"网络\",{\"1\":{\"2039\":1}}],[\"网络协议驱动\",{\"1\":{\"1986\":1}}],[\"网络协议的\",{\"1\":{\"1975\":1}}],[\"网络应用等场景\",{\"1\":{\"1880\":1}}],[\"网络或其他位置加载\",{\"1\":{\"1265\":1}}],[\"网络安全\",{\"1\":{\"747\":1,\"2212\":1}}],[\"网络安全等领域\",{\"1\":{\"542\":1}}],[\"网络流量优化\",{\"1\":{\"716\":1}}],[\"网络流量管理等场景\",{\"1\":{\"401\":1}}],[\"网络来模拟人脑的学习和记忆过程\",{\"1\":{\"438\":1}}],[\"网络路由和物流优化\",{\"1\":{\"956\":1}}],[\"网络路由\",{\"1\":{\"407\":1}}],[\"网络分析\",{\"1\":{\"388\":1,\"952\":1}}],[\"网络编程等各种任务\",{\"1\":{\"2035\":1}}],[\"网络编程提供了丰富的类库和\",{\"1\":{\"1944\":1}}],[\"网络编程的高级特性\",{\"0\":{\"1943\":1}}],[\"网络编程的基本概念\",{\"0\":{\"1930\":1}}],[\"网络编程核心类和接口\",{\"0\":{\"1931\":1}}],[\"网络编程主要涉及如何在网络上建立通信\",{\"1\":{\"1929\":1}}],[\"网络编程\",{\"0\":{\"269\":1,\"1929\":1},\"1\":{\"1457\":1,\"1931\":1}}],[\"网址\",{\"1\":{\"379\":1}}],[\"讲解\",{\"1\":{\"378\":6}}],[\"题目\",{\"1\":{\"780\":1}}],[\"题\",{\"1\":{\"378\":6}}],[\"主线程等待\",{\"1\":{\"1966\":1}}],[\"主机名\",{\"1\":{\"1933\":1,\"1941\":1}}],[\"主方法\",{\"1\":{\"1677\":1}}],[\"主方法入口\",{\"1\":{\"1275\":1}}],[\"主类\",{\"1\":{\"1661\":1}}],[\"主编或出版单位\",{\"1\":{\"1040\":1}}],[\"主观赋权法\",{\"1\":{\"760\":1}}],[\"主观性较强\",{\"1\":{\"754\":1}}],[\"主成分可能难以解释\",{\"1\":{\"620\":1}}],[\"主成分分析\",{\"0\":{\"613\":1,\"615\":1},\"1\":{\"487\":1,\"541\":1,\"586\":1,\"594\":1,\"614\":1,\"615\":1}}],[\"主成分分析和因子分析都是用于数据降维的统计方法\",{\"1\":{\"474\":1}}],[\"主成分分析和因子分析\",{\"0\":{\"474\":1,\"487\":1}}],[\"主成分分析方法\",{\"1\":{\"378\":1}}],[\"主函数\",{\"1\":{\"435\":1}}],[\"主要通过\",{\"1\":{\"1958\":1}}],[\"主要通过方法重写实现\",{\"1\":{\"1526\":1}}],[\"主要通过方法重载实现\",{\"1\":{\"1526\":1}}],[\"主要的类和接口位于\",{\"1\":{\"1929\":1}}],[\"主要接口包括\",{\"1\":{\"1735\":1}}],[\"主要类包括localdate\",{\"1\":{\"1403\":1}}],[\"主要分为旧的java\",{\"1\":{\"1399\":1}}],[\"主要包括\",{\"1\":{\"1382\":1}}],[\"主要包括以下几种\",{\"1\":{\"1308\":1,\"2008\":1}}],[\"主要有两个核心类\",{\"1\":{\"1946\":1}}],[\"主要有两类修饰符\",{\"1\":{\"1277\":1}}],[\"主要有exception和error两类\",{\"1\":{\"1443\":1}}],[\"主要有四种访问修饰符\",{\"1\":{\"1307\":1}}],[\"主要特性\",{\"0\":{\"1259\":1}}],[\"主要培养环节及要求\",{\"0\":{\"1033\":1}}],[\"主要为农业信息化\",{\"1\":{\"1024\":1}}],[\"主要使用opencv和pillow\",{\"1\":{\"817\":1}}],[\"主要适用于效率评价\",{\"1\":{\"754\":1}}],[\"主要用于简化lambda表达式的定义\",{\"1\":{\"1991\":1}}],[\"主要用于按顺序访问元素\",{\"1\":{\"1756\":1}}],[\"主要用于代码重用和提供共同的基础功能\",{\"1\":{\"1584\":1}}],[\"主要用于定义行为的契约\",{\"1\":{\"1584\":1}}],[\"主要用于提高模型性能和稳健性\",{\"1\":{\"597\":1}}],[\"主要用于聚类和降维任务\",{\"1\":{\"594\":1}}],[\"主要用于分类和回归任务\",{\"1\":{\"593\":1}}],[\"主要用于图像处理\",{\"1\":{\"441\":1}}],[\"主要概念\",{\"0\":{\"509\":1}}],[\"主要数据结构为\",{\"1\":{\"458\":1}}],[\"主要步骤如下\",{\"1\":{\"404\":1}}],[\"主要算法\",{\"0\":{\"402\":1}}],[\"主要研究图\",{\"1\":{\"388\":1}}],[\"主页\",{\"0\":{\"5\":1}}],[\"软件开发\",{\"1\":{\"2209\":1}}],[\"软件学报\",{\"1\":{\"1040\":1}}],[\"软件工具\",{\"0\":{\"838\":1}}],[\"软件工程\",{\"0\":{\"331\":1},\"2\":{\"332\":1,\"333\":1}}],[\"软件处理\",{\"1\":{\"378\":2}}],[\"智能优化算法是一类使用智能技术和启发式方法来寻找优化问题的近似解的算法\",{\"1\":{\"420\":1}}],[\"智能优化算法\",{\"0\":{\"413\":1,\"420\":1},\"1\":{\"378\":1,\"417\":1}}],[\"旅行商问题是一个典型的np\",{\"1\":{\"410\":1}}],[\"旅行商问题\",{\"0\":{\"410\":1},\"1\":{\"378\":1,\"410\":1,\"735\":1}}],[\"指针\",{\"1\":{\"1752\":1}}],[\"指代当前对象的引用\",{\"1\":{\"1505\":1}}],[\"指在同一个类中定义多个方法\",{\"1\":{\"1343\":1}}],[\"指向\",{\"1\":{\"1530\":1}}],[\"指向对象的变量是引用变量\",{\"1\":{\"1291\":1}}],[\"指向函数的指针\",{\"1\":{\"1127\":1}}],[\"指向该顶点的边数\",{\"1\":{\"953\":1}}],[\"指的是将一个父类类型的引用转换为其子类类型的引用\",{\"1\":{\"1535\":1}}],[\"指的是一类具有特殊性质的人造材料\",{\"1\":{\"1053\":1}}],[\"指的是通过数学模型和算法\",{\"1\":{\"705\":1}}],[\"指导教师根据研究生的现场实践综合表现\",{\"1\":{\"1035\":1}}],[\"指导研究生认真制定个人培养计划\",{\"1\":{\"1034\":1}}],[\"指定生成文档的输出目录\",{\"1\":{\"2002\":1}}],[\"指定该功能从哪个版本开始可用\",{\"1\":{\"2001\":1}}],[\"指定类或接口的版本信息\",{\"1\":{\"2001\":1}}],[\"指定类或接口的作者\",{\"1\":{\"2001\":1}}],[\"指定sir模型\",{\"1\":{\"853\":1}}],[\"指定哪些变量必须是整数\",{\"1\":{\"728\":1,\"734\":1}}],[\"指标特性\",{\"1\":{\"775\":1}}],[\"指标的重要性越大\",{\"1\":{\"763\":1}}],[\"指标的信息量越大\",{\"1\":{\"754\":1}}],[\"指标值越小越好\",{\"1\":{\"757\":1}}],[\"指标值越大越好\",{\"1\":{\"757\":1}}],[\"指派问题通常可以描述为\",{\"1\":{\"409\":1}}],[\"指派问题\",{\"0\":{\"409\":1},\"1\":{\"378\":1,\"409\":1}}],[\"指数时间复杂度\",{\"1\":{\"2162\":1}}],[\"指数位\",{\"1\":{\"2154\":3}}],[\"指数函数\",{\"1\":{\"1219\":1}}],[\"指数函数拟合\",{\"1\":{\"939\":1}}],[\"指数和对数函数\",{\"0\":{\"1219\":1}}],[\"指数平滑法\",{\"1\":{\"631\":1}}],[\"指数赋值\",{\"1\":{\"197\":1}}],[\"指数\",{\"1\":{\"193\":1}}],[\"插值和拟合的实例\",{\"0\":{\"945\":1}}],[\"插值结果\",{\"1\":{\"933\":1}}],[\"插值是一种在已知数据点之间估算未知数据点的数学方法\",{\"1\":{\"932\":1}}],[\"插值与拟合\",{\"0\":{\"931\":1}}],[\"插值\",{\"0\":{\"932\":1},\"1\":{\"460\":1}}],[\"插值方法\",{\"0\":{\"933\":1},\"1\":{\"378\":1,\"791\":1}}],[\"插入操作\",{\"1\":{\"1981\":1}}],[\"插入或删除值的场景\",{\"1\":{\"1795\":1}}],[\"插入元素\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"插入\",{\"1\":{\"1738\":1,\"1752\":1,\"2213\":1}}],[\"插入和查找操作速度快\",{\"1\":{\"1726\":1}}],[\"插入和删除效率高\",{\"1\":{\"1755\":1}}],[\"插入和删除元素效率高\",{\"1\":{\"1725\":1}}],[\"插入和删除操作效率低\",{\"1\":{\"1747\":1}}],[\"插入和删除操作效率高\",{\"1\":{\"1723\":1,\"1750\":1}}],[\"插入和删除操作的场景中非常有用\",{\"1\":{\"177\":1}}],[\"插入和删除平均时间复杂度为o\",{\"1\":{\"1722\":1}}],[\"插入字符串\",{\"1\":{\"1373\":1,\"1376\":1}}],[\"插入一些奇怪的空白符\",{\"1\":{\"1109\":1}}],[\"插入断点\",{\"1\":{\"246\":1}}],[\"插入目标pc\",{\"1\":{\"100\":1}}],[\"偏置\",{\"1\":{\"440\":1}}],[\"偏微分方程工具箱\",{\"0\":{\"1236\":1}}],[\"偏微分方程是关于未知函数及其偏导数的方程\",{\"1\":{\"880\":1}}],[\"偏微分方程模型\",{\"0\":{\"878\":1}}],[\"偏微分方程\",{\"0\":{\"879\":1},\"1\":{\"378\":1,\"382\":1,\"879\":1}}],[\"偏函数使用\",{\"1\":{\"217\":1}}],[\"偏函数\",{\"0\":{\"217\":1},\"1\":{\"217\":1}}],[\"差\",{\"1\":{\"671\":1}}],[\"差分进化算法\",{\"1\":{\"420\":1}}],[\"差分方程在许多领域都有应用\",{\"1\":{\"867\":1}}],[\"差分方程在数字信号处理\",{\"1\":{\"862\":1}}],[\"差分方程的解\",{\"0\":{\"865\":1}}],[\"差分方程的定义\",{\"0\":{\"863\":1}}],[\"差分方程是关于序列的方程\",{\"1\":{\"863\":1}}],[\"差分方程模型在数学建模中非常重要\",{\"1\":{\"875\":1}}],[\"差分方程模型的求解方法有很多\",{\"1\":{\"874\":1}}],[\"差分方程模型是一种重要工具\",{\"1\":{\"868\":1}}],[\"差分方程模型\",{\"0\":{\"861\":1,\"868\":1}}],[\"差分方程\",{\"0\":{\"862\":1},\"1\":{\"378\":1,\"862\":1}}],[\"差集\",{\"1\":{\"161\":1,\"1150\":1,\"1781\":1}}],[\"只在源码中保留\",{\"1\":{\"1845\":1}}],[\"只在函数体内有效\",{\"1\":{\"1174\":1}}],[\"只需调整链表指针\",{\"1\":{\"1752\":1}}],[\"只要公共接口保持不变\",{\"1\":{\"1569\":1}}],[\"只暴露必要的操作接口\",{\"1\":{\"1563\":1}}],[\"只暴露出必要的部分\",{\"1\":{\"1473\":1}}],[\"只包含抽象方法和常量\",{\"1\":{\"1555\":1}}],[\"只执行一次\",{\"1\":{\"1547\":2,\"1550\":1}}],[\"只捕获需要处理的异常\",{\"1\":{\"1452\":1}}],[\"只修改了副本\",{\"1\":{\"1338\":1}}],[\"只能通过队列的操作来访问队首或队尾的元素\",{\"1\":{\"1758\":1}}],[\"只能通过接口调用\",{\"1\":{\"1580\":1}}],[\"只能定义抽象方法\",{\"1\":{\"1715\":1}}],[\"只能处理对象而不是基本数据类型\",{\"1\":{\"1697\":1}}],[\"只能用来重写现有类或接口的方法\",{\"1\":{\"1598\":1}}],[\"只能实例化一次\",{\"1\":{\"1598\":1}}],[\"只能被实现\",{\"1\":{\"1573\":1}}],[\"只能是\",{\"1\":{\"1558\":1}}],[\"只能包含抽象方法和常量\",{\"1\":{\"1584\":1}}],[\"只能包含抽象方法\",{\"1\":{\"1558\":1}}],[\"只能操作静态成员\",{\"1\":{\"1549\":1}}],[\"只能作为其他类的父类\",{\"1\":{\"1473\":1}}],[\"只能在mymethod中使用\",{\"1\":{\"1346\":1}}],[\"只能在本类中访问\",{\"1\":{\"1309\":1}}],[\"只能在同一个类中访问\",{\"1\":{\"1307\":1}}],[\"只能最小化目标函数\",{\"1\":{\"726\":1,\"732\":1}}],[\"只支持类之间的单继承\",{\"1\":{\"1259\":1}}],[\"只适用于线性关系的数据\",{\"1\":{\"541\":1}}],[\"只适用于城市数量非常小的情况\",{\"1\":{\"410\":1}}],[\"只有在调用\",{\"1\":{\"2013\":1}}],[\"只有在实际使用内部类时\",{\"1\":{\"2013\":1}}],[\"只有在同一包内的类可以访问\",{\"1\":{\"1307\":1}}],[\"只有一个抽象方法\",{\"1\":{\"1843\":1}}],[\"只有一个顶点且没有边的图\",{\"1\":{\"391\":1}}],[\"只有两个取值\",{\"1\":{\"1289\":1}}],[\"只有输入数据是已知的\",{\"1\":{\"369\":1}}],[\"只读\",{\"1\":{\"251\":1}}],[\"算术运算\",{\"0\":{\"1216\":1}}],[\"算术运算符用于执行基本的数学运算\",{\"1\":{\"1146\":1}}],[\"算术运算符\",{\"0\":{\"193\":1,\"1146\":1,\"1311\":1},\"1\":{\"1152\":1}}],[\"算法题和项目\",{\"1\":{\"2217\":1}}],[\"算法处理输入数据时所占用的空间\",{\"1\":{\"2164\":1}}],[\"算法执行过程中所需的额外空间\",{\"1\":{\"2164\":1}}],[\"算法所需的空间与输入数据规模的平方成正比\",{\"1\":{\"2163\":1}}],[\"算法所需的空间与输入数据规模成正比\",{\"1\":{\"2163\":1}}],[\"算法所需的空间不随输入数据规模的增大而增加\",{\"1\":{\"2163\":1}}],[\"算法所需存储空间的增长速度\",{\"1\":{\"2163\":1}}],[\"算法占用内存空间的大小\",{\"1\":{\"2157\":1}}],[\"算法运行时间的长短\",{\"1\":{\"2157\":1}}],[\"算法效率已成为衡量算法优劣的主要评价指标\",{\"1\":{\"2157\":1}}],[\"算法需要在规定的输入范围内可靠地求得问题的正确解\",{\"1\":{\"2157\":1}}],[\"算法可以用来解决各种问题\",{\"1\":{\"2156\":1}}],[\"算法可以处理带有负权边的图\",{\"1\":{\"403\":1}}],[\"算法产生结果或输出\",{\"1\":{\"2156\":1}}],[\"算法通过一系列步骤对输入数据进行处理\",{\"1\":{\"2156\":1}}],[\"算法通常涉及以下几个方面\",{\"1\":{\"2156\":1}}],[\"算法接收某些数据或参数作为输入\",{\"1\":{\"2156\":1}}],[\"算法进行边缘检测\",{\"1\":{\"810\":1}}],[\"算法选择\",{\"1\":{\"591\":1}}],[\"算法聚类的是变量\",{\"1\":{\"564\":1}}],[\"算法聚类的是样本\",{\"1\":{\"564\":1}}],[\"算法达到某一预定条件后停止\",{\"1\":{\"432\":1}}],[\"算法简单\",{\"1\":{\"425\":1}}],[\"算法终止\",{\"1\":{\"422\":1}}],[\"算法从一个初始解开始\",{\"1\":{\"422\":1}}],[\"算法使用最小堆实现时的时间复杂度为\",{\"1\":{\"406\":1}}],[\"算法的执行时间与输入数据规模成正比\",{\"1\":{\"2162\":1}}],[\"算法的执行时间都是固定的\",{\"1\":{\"2162\":1}}],[\"算法的时间复杂度是衡量算法执行所需时间的指标\",{\"1\":{\"2162\":1}}],[\"算法的时间复杂度在最坏情况下与\",{\"1\":{\"406\":1}}],[\"算法的时间复杂度为\",{\"1\":{\"406\":1}}],[\"算法的改进版本\",{\"1\":{\"405\":1}}],[\"算法是解决问题的步骤集合\",{\"1\":{\"2208\":1}}],[\"算法是解决特定问题的一系列步骤或规则\",{\"1\":{\"2156\":1}}],[\"算法是编程和数据处理的核心\",{\"1\":{\"2156\":1}}],[\"算法是\",{\"1\":{\"405\":1}}],[\"算法用于非负权图的单源最短路径问题\",{\"1\":{\"404\":1}}],[\"算法\",{\"0\":{\"403\":1,\"404\":1,\"2155\":1,\"2183\":1},\"1\":{\"410\":1,\"563\":1,\"567\":1,\"2208\":1},\"2\":{\"2182\":1,\"2184\":1,\"2185\":1}}],[\"算法步骤\",{\"1\":{\"398\":1,\"958\":1,\"959\":1,\"960\":1,\"964\":1,\"965\":1}}],[\"算法和应用\",{\"1\":{\"394\":1}}],[\"算法会找到一种方法\",{\"1\":{\"368\":1}}],[\"最早的计算机没有操作系统\",{\"1\":{\"2190\":1}}],[\"最复杂和最强大的布局管理器\",{\"1\":{\"2026\":1}}],[\"最详细的信息\",{\"1\":{\"1917\":1}}],[\"最低级别\",{\"1\":{\"1917\":1}}],[\"最高级别\",{\"1\":{\"1917\":1}}],[\"最佳实践\",{\"0\":{\"1910\":1}}],[\"最佳的科学计算环境\",{\"0\":{\"357\":1}}],[\"最常用的是junit和testng\",{\"1\":{\"1850\":1}}],[\"最常用的是\",{\"1\":{\"1779\":1}}],[\"最常见的差分方程是线性差分方程\",{\"1\":{\"864\":1}}],[\"最近添加的元素最先被移除\",{\"1\":{\"1772\":1}}],[\"最近邻插值\",{\"1\":{\"933\":1,\"947\":1}}],[\"最先被移除的元素也是栈顶元素\",{\"1\":{\"1771\":1}}],[\"最基本的集合接口\",{\"1\":{\"1735\":1}}],[\"最基础的神经网络结构\",{\"1\":{\"441\":1}}],[\"最多进行|v|\",{\"1\":{\"959\":1}}],[\"最著名的双曲型偏微分方程是波动方程\",{\"1\":{\"905\":1}}],[\"最著名的抛物型偏微分方程是热传导方程\",{\"1\":{\"897\":1}}],[\"最著名的椭圆型pde是拉普拉斯方程和泊松方程\",{\"1\":{\"891\":1}}],[\"最简单的综合评价方法\",{\"1\":{\"763\":1}}],[\"最远离负理想解的方案\",{\"1\":{\"754\":1}}],[\"最优路径\",{\"1\":{\"738\":1,\"739\":1}}],[\"最优的切割路径可以减少切割时间和成本\",{\"1\":{\"701\":1}}],[\"最优解\",{\"1\":{\"428\":1,\"434\":1}}],[\"最后将两者结合\",{\"1\":{\"865\":1}}],[\"最后使用topsis法进行综合评价\",{\"1\":{\"775\":1}}],[\"最后\",{\"1\":{\"409\":1,\"616\":1,\"625\":1}}],[\"最终的\",{\"1\":{\"1548\":1}}],[\"最终的指派方案即为最优解\",{\"1\":{\"409\":1}}],[\"最终方法\",{\"1\":{\"1347\":1}}],[\"最终解为\",{\"1\":{\"866\":3}}],[\"最终解决整个问题\",{\"1\":{\"415\":1}}],[\"最终根据具体情况选择最优解\",{\"1\":{\"842\":1}}],[\"最终确定每个方案的综合得分\",{\"1\":{\"754\":1}}],[\"最终会看到误差不断减小\",{\"1\":{\"450\":1}}],[\"最终在低温下只接受更优解\",{\"1\":{\"422\":1}}],[\"最终dp\",{\"1\":{\"408\":1}}],[\"最小二乘法是一种常见的拟合方法\",{\"1\":{\"939\":1}}],[\"最小二乘法\",{\"1\":{\"939\":1}}],[\"最小总距离\",{\"1\":{\"738\":1,\"739\":1}}],[\"最小化等\",{\"1\":{\"2030\":1}}],[\"最小化总旅行距离\",{\"1\":{\"737\":1}}],[\"最小化簇内点的距离\",{\"1\":{\"586\":1}}],[\"最小化簇内数据点到质心的距离平方和\",{\"1\":{\"540\":1}}],[\"最小化簇内的平方误差和\",{\"1\":{\"511\":1}}],[\"最小样本数\",{\"1\":{\"557\":1}}],[\"最小的\",{\"1\":{\"427\":1}}],[\"最小费用最大流问题是指在一个网络中找到一种流动方式\",{\"1\":{\"401\":1}}],[\"最小费用最大流问题\",{\"0\":{\"401\":1}}],[\"最小费用问题\",{\"0\":{\"400\":1},\"1\":{\"400\":1}}],[\"最小生成树通常应用于无向图中\",{\"1\":{\"962\":1}}],[\"最小生成树在网络设计\",{\"1\":{\"961\":1}}],[\"最小生成树\",{\"0\":{\"961\":1},\"1\":{\"961\":1,\"962\":1}}],[\"最小生成树的算法\",{\"0\":{\"963\":1}}],[\"最小生成树的基本概念\",{\"0\":{\"962\":1}}],[\"最小生成树的总权重\",{\"1\":{\"394\":1,\"964\":2,\"965\":2}}],[\"最小生成树的边\",{\"1\":{\"394\":1,\"964\":2,\"965\":2}}],[\"最小生成树算法\",{\"1\":{\"392\":1}}],[\"最小生成树问题\",{\"0\":{\"951\":1},\"1\":{\"378\":1}}],[\"最短距离矩阵\",{\"1\":{\"960\":1}}],[\"最短距离\",{\"1\":{\"394\":1,\"410\":1,\"958\":1,\"959\":1}}],[\"最短路径\",{\"0\":{\"956\":1},\"1\":{\"410\":1,\"958\":1,\"959\":1}}],[\"最短路径算法\",{\"0\":{\"957\":1},\"1\":{\"392\":1}}],[\"最短路径问题是图论中的一个经典问题\",{\"1\":{\"956\":1}}],[\"最短路径问题\",{\"1\":{\"382\":1}}],[\"最短路问题\",{\"0\":{\"951\":1},\"1\":{\"378\":1}}],[\"最大承载能力\",{\"1\":{\"927\":1}}],[\"最大迭代次数\",{\"1\":{\"428\":1,\"895\":1}}],[\"最大化投资组合的收益\",{\"1\":{\"836\":1}}],[\"最大化的总利润\",{\"1\":{\"722\":1,\"726\":1,\"727\":1,\"732\":1,\"733\":1}}],[\"最大化总利润\",{\"1\":{\"721\":1,\"725\":1,\"731\":1}}],[\"最大化\",{\"1\":{\"384\":1}}],[\"最大流\",{\"1\":{\"398\":2,\"399\":2}}],[\"最大流的算法\",{\"0\":{\"397\":1}}],[\"最大流问题的基本概念\",{\"0\":{\"396\":1}}],[\"最大流问题\",{\"0\":{\"395\":1},\"1\":{\"382\":1,\"395\":1}}],[\"最大流与最小费用问题\",{\"1\":{\"378\":1}}],[\"最成功的机器学习算法是能够将决策过程自动化的那些算法\",{\"1\":{\"368\":1}}],[\"享受数学的美\",{\"0\":{\"351\":1}}],[\"人文和社会科学知识\",{\"1\":{\"1025\":1}}],[\"人生最难看透的只有四件事儿\",{\"1\":{\"981\":1}}],[\"人口增长可以用差分方程来描述\",{\"1\":{\"869\":1}}],[\"人口增长模型的求解\",{\"0\":{\"875\":1}}],[\"人口增长模型\",{\"0\":{\"869\":1},\"1\":{\"850\":1}}],[\"人口预测等\",{\"1\":{\"634\":1}}],[\"人脸检测\",{\"0\":{\"827\":1}}],[\"人力资源调度\",{\"1\":{\"716\":1}}],[\"人工鱼群算法\",{\"1\":{\"420\":1}}],[\"人工智能简介\",{\"1\":{\"2214\":1}}],[\"人工智能等\",{\"1\":{\"631\":1}}],[\"人工智能和计算机科学交叉的研究领域\",{\"1\":{\"367\":1}}],[\"人工智能\",{\"0\":{\"345\":1}}],[\"人物😄\",{\"0\":{\"9\":1}}],[\"操作数据库的步骤通常包括以下几个步骤\",{\"1\":{\"1976\":1}}],[\"操作数和方法调用的返回地址\",{\"1\":{\"1265\":1}}],[\"操作完成\",{\"1\":{\"1888\":1}}],[\"操作时\",{\"1\":{\"1888\":1}}],[\"操作的效率\",{\"1\":{\"1886\":1}}],[\"操作方式\",{\"1\":{\"1880\":1}}],[\"操作速度最快\",{\"1\":{\"1784\":1}}],[\"操作\",{\"1\":{\"1767\":1,\"1881\":1,\"1887\":1,\"1888\":1,\"1943\":1,\"1964\":1,\"2035\":1}}],[\"操作主要包括从用户获取输入和将输出显示给用户\",{\"1\":{\"1420\":1}}],[\"操作和基本函数\",{\"1\":{\"1128\":1}}],[\"操作系统管理计算机硬件和软件资源\",{\"1\":{\"2211\":1}}],[\"操作系统管理正在运行的程序\",{\"1\":{\"2189\":1}}],[\"操作系统概念\",{\"1\":{\"2211\":1}}],[\"操作系统在计算机系统中扮演着核心角色\",{\"1\":{\"2192\":1}}],[\"操作系统能够长时间运行并保持状态\",{\"1\":{\"2191\":1}}],[\"操作系统能够同时管理多个进程\",{\"1\":{\"2191\":1}}],[\"操作系统中的进程执行是不可预测的\",{\"1\":{\"2191\":1}}],[\"操作系统通过抽象和虚拟化技术\",{\"1\":{\"2191\":1}}],[\"操作系统通过设备驱动程序与硬件设备进行交互\",{\"1\":{\"2189\":1}}],[\"操作系统允许多个用户或程序共享系统资源\",{\"1\":{\"2191\":1}}],[\"操作系统开始在个人电脑上得到广泛应用\",{\"1\":{\"2190\":1}}],[\"操作系统的功能\",{\"0\":{\"2192\":1}}],[\"操作系统的特性\",{\"0\":{\"2191\":1}}],[\"操作系统的发展经历了以下几个阶段\",{\"1\":{\"2190\":1}}],[\"操作系统的历史\",{\"0\":{\"2190\":1}}],[\"操作系统的作用可以概括为以下几点\",{\"1\":{\"2189\":1}}],[\"操作系统的作用\",{\"0\":{\"2189\":1}}],[\"操作系统负责对系统资源和数据进行保护\",{\"1\":{\"2189\":1}}],[\"操作系统负责管理计算机的各种硬件资源\",{\"1\":{\"2189\":1}}],[\"操作系统提供文件系统\",{\"1\":{\"2189\":1}}],[\"操作系统为用户提供了一个友好的界面\",{\"1\":{\"2189\":1}}],[\"操作系统作为计算机系统的基础\",{\"1\":{\"2188\":1}}],[\"操作系统是什么\",{\"0\":{\"2188\":1}}],[\"操作系统导论\",{\"0\":{\"2187\":1}}],[\"操作系统\",{\"0\":{\"2186\":1,\"2303\":1},\"1\":{\"1459\":1,\"2188\":1},\"2\":{\"344\":1,\"2205\":1}}],[\"操作是阻塞的\",{\"1\":{\"1888\":1}}],[\"操作是处理数据读写的重要组成部分\",{\"1\":{\"1430\":1}}],[\"操作是处理数据的基本功能\",{\"1\":{\"249\":1}}],[\"操作是与用户进行交互\",{\"1\":{\"259\":1}}],[\"头信息\",{\"0\":{\"336\":1}}],[\"头下标\",{\"1\":{\"138\":1}}],[\"小程序\",{\"0\":{\"2301\":1},\"2\":{\"2145\":1,\"2148\":1}}],[\"小结\",{\"0\":{\"1706\":1}}],[\"小数部分会被截断\",{\"1\":{\"1299\":2}}],[\"小波分析工具箱\",{\"0\":{\"1238\":1}}],[\"小项目\",{\"0\":{\"310\":1}}],[\"小于等于\",{\"1\":{\"194\":1,\"1147\":1,\"1313\":1}}],[\"小于\",{\"1\":{\"194\":1,\"1147\":1,\"1313\":1}}],[\"实体\",{\"1\":{\"2213\":1}}],[\"实体模型表示三维几何形状的体积和内部结构\",{\"1\":{\"671\":1}}],[\"实用方法\",{\"1\":{\"1697\":1}}],[\"实用性\",{\"1\":{\"1037\":1}}],[\"实行双导师制\",{\"1\":{\"1028\":1}}],[\"实践项目示例\",{\"1\":{\"1659\":1}}],[\"实践的方法\",{\"0\":{\"1061\":1}}],[\"实践学习总结报告及实践单位的反馈意见等\",{\"1\":{\"1035\":1}}],[\"实践结束后要撰写实践学习总结报告\",{\"1\":{\"1035\":1}}],[\"实践环节采取集中实践与分段实践相结合的方式进行\",{\"1\":{\"1028\":1}}],[\"实践应用\",{\"0\":{\"844\":1}}],[\"实例在需要时才创建\",{\"1\":{\"2010\":1}}],[\"实例方法引用\",{\"1\":{\"1991\":1}}],[\"实例方法\",{\"1\":{\"1690\":1}}],[\"实例变量会有默认值\",{\"1\":{\"1302\":1}}],[\"实例变量的作用域是整个类\",{\"1\":{\"1302\":1}}],[\"实例变量是类中声明\",{\"1\":{\"1302\":1}}],[\"实例变量\",{\"0\":{\"1302\":1},\"1\":{\"1273\":1,\"1300\":1}}],[\"实例\",{\"0\":{\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"842\":1}}],[\"实施周期\",{\"1\":{\"761\":1}}],[\"实际测试\",{\"1\":{\"2157\":1}}],[\"实际上是基于\",{\"1\":{\"1815\":1}}],[\"实际上是创建了一个新的字符串对象\",{\"1\":{\"1369\":1}}],[\"实际调用的是它们各自的\",{\"1\":{\"1530\":1}}],[\"实际问题示例\",{\"0\":{\"730\":1}}],[\"实际线性规划问题\",{\"0\":{\"719\":1}}],[\"实际应用中的考虑因素\",{\"0\":{\"701\":1}}],[\"实际应用中可以使用更复杂的模型和库\",{\"1\":{\"450\":1}}],[\"实际为正样本中被正确预测为正样本的比例\",{\"1\":{\"582\":1}}],[\"实现无连接的\",{\"1\":{\"2040\":1}}],[\"实现服务器端的套接字\",{\"1\":{\"2040\":1}}],[\"实现客户端的套接字\",{\"1\":{\"2040\":1}}],[\"实现单例模式有多种方式\",{\"1\":{\"2017\":1}}],[\"实现单例模式的几种方法\",{\"0\":{\"2008\":1}}],[\"实现最简单\",{\"1\":{\"2014\":1}}],[\"实现稍微复杂\",{\"1\":{\"2012\":1}}],[\"实现网络通信的示例\",{\"0\":{\"1889\":1}}],[\"实现生成器\",{\"0\":{\"1819\":1}}],[\"实现来满足不同的需求\",{\"1\":{\"1769\":1}}],[\"实现类可以选择性地重写它们\",{\"1\":{\"1993\":1}}],[\"实现类可以大大提高程序的性能和效率\",{\"1\":{\"1810\":1}}],[\"实现类似生成器的功能\",{\"1\":{\"1816\":1}}],[\"实现类不保证键值对的顺序\",{\"1\":{\"1797\":1}}],[\"实现类有不同的底层数据结构\",{\"1\":{\"1782\":1}}],[\"实现类对元素顺序有不同的处理方式\",{\"1\":{\"1782\":1}}],[\"实现类包括\",{\"1\":{\"1769\":1}}],[\"实现类\",{\"1\":{\"1755\":1,\"1760\":1,\"1769\":1,\"1785\":1,\"1794\":1,\"1800\":1,\"1806\":1,\"1808\":1,\"1810\":1}}],[\"实现类必须实现所有继承的接口的方法\",{\"1\":{\"1582\":1}}],[\"实现一个平衡二叉树\",{\"1\":{\"1733\":1}}],[\"实现一个简单的神经网络\",{\"0\":{\"443\":1}}],[\"实现包括\",{\"1\":{\"1725\":1,\"1726\":1,\"1727\":1,\"1728\":1}}],[\"实现建议\",{\"1\":{\"1676\":1}}],[\"实现接口\",{\"1\":{\"1611\":1,\"1613\":1,\"1709\":1}}],[\"实现接口的类必须提供接口中声明的所有方法的具体实现\",{\"1\":{\"1500\":1}}],[\"实现多态\",{\"1\":{\"1585\":2}}],[\"实现多重继承的功能\",{\"1\":{\"1558\":1,\"1584\":1}}],[\"实现抽象的两种主要方式\",{\"1\":{\"1551\":1}}],[\"实现抽象方法\",{\"1\":{\"1308\":1}}],[\"实现了\",{\"1\":{\"1557\":1,\"1727\":1}}],[\"实现了这个接口\",{\"1\":{\"1533\":1}}],[\"实现了动态多态\",{\"1\":{\"1530\":1}}],[\"实现了特定的行为\",{\"1\":{\"1520\":1}}],[\"实现跨平台的一致性\",{\"1\":{\"1308\":1}}],[\"实现的\",{\"1\":{\"1259\":2,\"1815\":1}}],[\"实现代码的模块化和重用性\",{\"1\":{\"1716\":1}}],[\"实现代码\",{\"0\":{\"688\":1}}],[\"实现思路\",{\"0\":{\"687\":1}}],[\"实现pca并逐步降维\",{\"0\":{\"624\":1}}],[\"实现梯度提升机\",{\"1\":{\"609\":2}}],[\"实现复杂神经网络\",{\"1\":{\"608\":1}}],[\"实现复用和提高可读性\",{\"1\":{\"209\":1}}],[\"实现简单\",{\"1\":{\"2009\":1,\"2013\":1}}],[\"实现简单的服务器和客户端的示例\",{\"1\":{\"1889\":1}}],[\"实现简单的多层感知器\",{\"1\":{\"608\":1}}],[\"实现简单神经网络\",{\"1\":{\"608\":1}}],[\"实现更复杂的神经网络\",{\"1\":{\"608\":1}}],[\"实现模式识别的示例\",{\"0\":{\"587\":1}}],[\"实现方法\",{\"0\":{\"564\":1}}],[\"实现示例\",{\"0\":{\"517\":1,\"524\":1,\"565\":1},\"1\":{\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"600\":1}}],[\"实现\",{\"0\":{\"1762\":1,\"1766\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1962\":1},\"1\":{\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1,\"610\":1,\"803\":1,\"1738\":1,\"1753\":1,\"1755\":1,\"1799\":1,\"1816\":1,\"1862\":1,\"1960\":1,\"1962\":1,\"2019\":1}}],[\"实数向量等\",{\"1\":{\"432\":1}}],[\"实验手册\",{\"0\":{\"309\":1}}],[\"自反性\",{\"1\":{\"1676\":1}}],[\"自定义格式化日期时间\",{\"1\":{\"2047\":1}}],[\"自定义注解\",{\"0\":{\"1844\":1}}],[\"自定义数据结构\",{\"0\":{\"1733\":1}}],[\"自定义异常类\",{\"1\":{\"1448\":1,\"1909\":1}}],[\"自定义异常通常继承exception类或其子类\",{\"1\":{\"1448\":1}}],[\"自定义异常\",{\"0\":{\"1448\":1,\"1909\":1},\"1\":{\"1453\":1}}],[\"自定义命令时\",{\"1\":{\"1109\":1}}],[\"自减\",{\"1\":{\"1311\":1}}],[\"自增\",{\"1\":{\"1311\":1}}],[\"自动进行\",{\"1\":{\"1536\":1}}],[\"自动装箱后的\",{\"1\":{\"1705\":1}}],[\"自动装箱和拆箱使得基本数据类型与其包装类型之间的转换更加方便\",{\"1\":{\"1387\":1}}],[\"自动装箱和拆箱\",{\"0\":{\"1385\":1},\"1\":{\"1697\":1}}],[\"自动装箱和拆箱示例\",{\"1\":{\"1384\":1}}],[\"自动装箱\",{\"0\":{\"1699\":1},\"1\":{\"1384\":1,\"1385\":2,\"1699\":1,\"1705\":1}}],[\"自动拆箱后的\",{\"1\":{\"1705\":1}}],[\"自动拆箱\",{\"0\":{\"1700\":1},\"1\":{\"1384\":1,\"1385\":2,\"1700\":1,\"1705\":1}}],[\"自动类型转换顺序\",{\"1\":{\"1294\":1}}],[\"自动类型转换是指将一种较小范围的数据类型自动转换为较大范围的数据类型\",{\"1\":{\"1294\":1}}],[\"自动类型转换\",{\"0\":{\"1294\":1},\"1\":{\"1293\":1}}],[\"自动管理堆内存\",{\"1\":{\"1266\":1}}],[\"自动的强制类型转换\",{\"1\":{\"1259\":1}}],[\"自动驾驶等领域\",{\"1\":{\"596\":1}}],[\"自动驾驶\",{\"1\":{\"442\":1}}],[\"自己到自己设为0\",{\"1\":{\"960\":1}}],[\"自回归积分滑动平均\",{\"1\":{\"631\":1}}],[\"自编码器\",{\"1\":{\"598\":1}}],[\"自训练算法\",{\"1\":{\"595\":1}}],[\"自然对数的底数e的值\",{\"1\":{\"1396\":1}}],[\"自然对数\",{\"1\":{\"1219\":1}}],[\"自然指数和对数\",{\"1\":{\"1219\":1}}],[\"自然常数\",{\"1\":{\"1217\":1}}],[\"自然三次样条\",{\"1\":{\"933\":1}}],[\"自然景观建模\",{\"1\":{\"677\":1}}],[\"自然科学\",{\"1\":{\"464\":1}}],[\"自然语言处理\",{\"1\":{\"442\":1,\"534\":1,\"598\":1,\"2214\":1}}],[\"自然☀️\",{\"0\":{\"13\":1}}],[\"自建库\",{\"0\":{\"291\":1}}],[\"科技论文\",{\"0\":{\"779\":1}}],[\"科学出版社\",{\"1\":{\"1040\":1}}],[\"科学计算\",{\"1\":{\"675\":1}}],[\"科学计算环境\",{\"0\":{\"285\":1}}],[\"科学等领域\",{\"1\":{\"383\":1}}],[\"科研入门\",{\"0\":{\"2289\":1}}],[\"科研工具\",{\"0\":{\"2290\":1},\"2\":{\"1112\":1,\"1244\":1,\"1245\":1,\"1248\":1,\"1249\":1,\"1251\":1,\"1252\":1,\"1254\":1}}],[\"科研英语\",{\"0\":{\"1013\":1},\"2\":{\"1015\":1}}],[\"科研\",{\"0\":{\"92\":1},\"2\":{\"1064\":1,\"1072\":1,\"1090\":1,\"1093\":1,\"1096\":1}}],[\"科研导航\",{\"0\":{\"90\":1}}],[\"数\",{\"1\":{\"1117\":2}}],[\"数值类的用法\",{\"0\":{\"1386\":1}}],[\"数值积分\",{\"0\":{\"1227\":1},\"1\":{\"1227\":1}}],[\"数值分析与计算方法\",{\"1\":{\"1040\":1}}],[\"数值求解\",{\"0\":{\"893\":1}}],[\"数值模拟\",{\"1\":{\"883\":1}}],[\"数值解法\",{\"1\":{\"874\":1}}],[\"数量\",{\"1\":{\"1527\":1}}],[\"数量或顺序不同\",{\"1\":{\"1476\":1}}],[\"数量级可能不同\",{\"1\":{\"763\":1}}],[\"数量为3块\",{\"1\":{\"695\":1}}],[\"数量为4块\",{\"1\":{\"695\":1}}],[\"数量为n\",{\"1\":{\"408\":1}}],[\"数组是固定大小的连续内存块\",{\"1\":{\"1722\":1}}],[\"数组是元素的集合\",{\"1\":{\"1154\":1}}],[\"数组只能存储与声明类型相同的元素\",{\"1\":{\"1365\":1}}],[\"数组越界\",{\"1\":{\"1365\":1}}],[\"数组将被排序为\",{\"1\":{\"1363\":1}}],[\"数组长度为5\",{\"1\":{\"1354\":1}}],[\"数组元素的访问通过索引进行\",{\"1\":{\"1353\":1}}],[\"数组可以通过以下方式创建\",{\"1\":{\"1350\":1}}],[\"数组都是引用数据类型\",{\"1\":{\"1291\":1}}],[\"数组连接\",{\"1\":{\"1154\":1}}],[\"数组大小\",{\"1\":{\"1154\":1}}],[\"数组操作\",{\"1\":{\"1154\":1}}],[\"数组\",{\"0\":{\"1154\":1,\"1349\":1,\"2167\":1},\"1\":{\"1457\":1,\"2153\":1}}],[\"数组和向量的常用操作\",{\"0\":{\"1156\":1}}],[\"数组和向量是最基本的数据类型之一\",{\"1\":{\"1153\":1}}],[\"数组和向量\",{\"0\":{\"1153\":1}}],[\"数组的类型\",{\"1\":{\"1365\":1}}],[\"数组的排序\",{\"0\":{\"1363\":1}}],[\"数组的复制\",{\"0\":{\"1362\":1}}],[\"数组的长度是固定的\",{\"1\":{\"1354\":1}}],[\"数组的长度\",{\"0\":{\"1354\":1}}],[\"数组的语言\",{\"1\":{\"1120\":1}}],[\"数组的点积\",{\"1\":{\"457\":1}}],[\"数组的乘法运算\",{\"1\":{\"457\":1}}],[\"数组的加法运算\",{\"1\":{\"457\":1}}],[\"数组运算\",{\"1\":{\"457\":1}}],[\"数学归纳法问题等\",{\"1\":{\"2161\":1}}],[\"数学计算\",{\"1\":{\"1397\":1}}],[\"数学环境中的下标命令符\",{\"1\":{\"1109\":1}}],[\"数学环境中的上标命令符\",{\"1\":{\"1109\":1}}],[\"数学环境命令符\",{\"1\":{\"1109\":1}}],[\"数学模型\",{\"0\":{\"696\":1,\"737\":1}}],[\"数学建模中的微分方程模型是用来描述系统动态行为的重要工具\",{\"1\":{\"848\":1}}],[\"数学建模科技论文写作\",{\"0\":{\"778\":1}}],[\"数学建模软件和工具\",{\"0\":{\"383\":1}}],[\"数学建模的基本步骤\",{\"0\":{\"381\":1}}],[\"数学建模是将实际问题转化为数学问题\",{\"1\":{\"380\":1}}],[\"数学建模竞赛\",{\"1\":{\"378\":6}}],[\"数学建模竞赛论文写作\",{\"1\":{\"378\":1}}],[\"数学建模竞赛介绍\",{\"1\":{\"378\":1}}],[\"数学建模基础\",{\"1\":{\"378\":1}}],[\"数学建模\",{\"0\":{\"377\":1,\"380\":1,\"971\":1},\"2\":{\"385\":1,\"386\":1,\"411\":1,\"412\":1,\"451\":1,\"452\":1,\"454\":1,\"455\":1,\"461\":1,\"462\":1,\"505\":1,\"506\":1,\"611\":1,\"612\":1,\"628\":1,\"629\":1,\"664\":1,\"665\":1,\"667\":1,\"668\":1,\"702\":1,\"703\":1,\"741\":1,\"742\":1,\"749\":1,\"750\":1,\"776\":1,\"777\":1,\"781\":1,\"782\":1,\"828\":1,\"829\":1,\"845\":1,\"846\":1,\"859\":1,\"860\":1,\"876\":1,\"877\":1,\"929\":1,\"930\":1,\"949\":1,\"950\":1,\"966\":1,\"967\":1,\"969\":1,\"970\":1}}],[\"数学的意义\",{\"0\":{\"353\":1}}],[\"数学的知识体系\",{\"0\":{\"352\":1}}],[\"数学之道\",{\"0\":{\"349\":1}}],[\"数学\",{\"0\":{\"347\":1},\"2\":{\"348\":1,\"354\":1,\"2239\":1,\"2242\":1,\"2251\":1}}],[\"数据建模\",{\"1\":{\"2213\":1}}],[\"数据链路层\",{\"1\":{\"2212\":1}}],[\"数据规模增加\",{\"1\":{\"2162\":1}}],[\"数据操作尽可能快速\",{\"1\":{\"2152\":1}}],[\"数据之间关系和数据操作方法\",{\"1\":{\"2152\":1}}],[\"数据验证\",{\"1\":{\"1945\":1}}],[\"数据是从通道读入到缓冲区中\",{\"1\":{\"1884\":1}}],[\"数据传输\",{\"1\":{\"1681\":1}}],[\"数据保护\",{\"1\":{\"1564\":1}}],[\"数据提取\",{\"1\":{\"1417\":1}}],[\"数据溢出\",{\"1\":{\"1299\":1}}],[\"数据修改以及所有动作都是在方法中完成的\",{\"1\":{\"1273\":1}}],[\"数据导入与分析\",{\"1\":{\"1197\":1}}],[\"数据输入输出\",{\"0\":{\"1189\":1}}],[\"数据类型的转换主要分为两类\",{\"1\":{\"1293\":1}}],[\"数据类型转换是指将一种数据类型的值转换为另一种数据类型的过程\",{\"1\":{\"1293\":1}}],[\"数据类型\",{\"0\":{\"1127\":1},\"1\":{\"1457\":1,\"2209\":1}}],[\"数据类型以及决策需求进行\",{\"1\":{\"775\":1}}],[\"数据结构是数据的存储方式\",{\"1\":{\"2208\":1}}],[\"数据结构设计是一个充满权衡的过程\",{\"1\":{\"2152\":1}}],[\"数据结构与算法\",{\"0\":{\"2150\":1,\"2302\":1}}],[\"数据结构\",{\"0\":{\"2151\":1},\"1\":{\"1120\":1,\"1459\":1,\"1728\":1,\"2152\":1,\"2208\":1},\"2\":{\"2181\":1,\"2182\":1}}],[\"数据可视化\",{\"1\":{\"1116\":1}}],[\"数据可以是图像\",{\"1\":{\"585\":1}}],[\"数据同步和备份\",{\"0\":{\"1087\":1}}],[\"数据包络分析法\",{\"1\":{\"754\":1}}],[\"数据在输入层\",{\"1\":{\"654\":1}}],[\"数据科学\",{\"1\":{\"631\":1}}],[\"数据的输入和输出操作是非常基本但非常重要的功能\",{\"1\":{\"1189\":1}}],[\"数据的来源必须可靠\",{\"1\":{\"764\":1}}],[\"数据的可靠性和一致性\",{\"1\":{\"764\":1}}],[\"数据的方差可能集中在一个维度中\",{\"1\":{\"620\":1}}],[\"数据的质量直接影响模型的性能\",{\"1\":{\"536\":1}}],[\"数据维度指的是数据集中的特征数量或变量数量\",{\"1\":{\"614\":1}}],[\"数据维度和降维\",{\"0\":{\"614\":1}}],[\"数据特性和计算资源\",{\"1\":{\"599\":1}}],[\"数据采集与处理\",{\"1\":{\"1040\":1}}],[\"数据采集\",{\"1\":{\"585\":1}}],[\"数据点的特征\",{\"1\":{\"575\":1}}],[\"数据依赖性强\",{\"1\":{\"546\":1}}],[\"数据探索\",{\"1\":{\"545\":1}}],[\"数据质量\",{\"1\":{\"536\":1}}],[\"数据标准化\",{\"1\":{\"535\":1,\"551\":1,\"619\":1,\"763\":1}}],[\"数据预处理\",{\"1\":{\"532\":1}}],[\"数据收集\",{\"1\":{\"532\":1,\"763\":1}}],[\"数据需求\",{\"1\":{\"525\":1}}],[\"数据集中的目标值或结果\",{\"1\":{\"528\":1}}],[\"数据集中彼此相似的对象组成的组\",{\"1\":{\"509\":1}}],[\"数据集\",{\"1\":{\"524\":1}}],[\"数据准备\",{\"1\":{\"459\":1,\"662\":1}}],[\"数据分布\",{\"1\":{\"538\":1}}],[\"数据分组\",{\"1\":{\"458\":1}}],[\"数据分析及数值计算的高级技术计算语言和交互式环境\",{\"1\":{\"1116\":1}}],[\"数据分析处理的基础教程\",{\"1\":{\"456\":1}}],[\"数据分析的任务\",{\"0\":{\"359\":1}}],[\"数据分析\",{\"0\":{\"273\":1,\"363\":1},\"1\":{\"938\":1,\"1913\":1},\"2\":{\"361\":1,\"362\":1,\"1245\":1,\"1249\":1,\"1252\":1,\"1255\":1,\"2122\":1,\"2126\":1,\"2129\":1}}],[\"数据清洗\",{\"1\":{\"458\":1}}],[\"数据选择\",{\"1\":{\"458\":1}}],[\"数据处理方式\",{\"1\":{\"1892\":1}}],[\"数据处理方法\",{\"1\":{\"378\":1}}],[\"数据处理前应仔细检查数据的一致性\",{\"1\":{\"764\":1}}],[\"数据处理\",{\"1\":{\"458\":1}}],[\"数据从输入层经过隐藏层直接到达输出层\",{\"1\":{\"441\":1}}],[\"数据降维\",{\"1\":{\"378\":1}}],[\"数据库连接池等\",{\"1\":{\"2016\":1}}],[\"数据库连接成功\",{\"1\":{\"1979\":1}}],[\"数据库密码\",{\"1\":{\"1979\":1}}],[\"数据库用户名\",{\"1\":{\"1979\":1}}],[\"数据库的示例代码\",{\"1\":{\"1977\":1}}],[\"数据库协议的等\",{\"1\":{\"1975\":1}}],[\"数据库或者通过网络传输\",{\"1\":{\"1860\":1}}],[\"数据库优化\",{\"1\":{\"1460\":1}}],[\"数据库\",{\"0\":{\"328\":1},\"1\":{\"1261\":1,\"1460\":1,\"1979\":1},\"2\":{\"329\":1}}],[\"数据库编程\",{\"0\":{\"270\":1}}],[\"数字的二进制表示的最高位视为符号位\",{\"1\":{\"2154\":1}}],[\"数字签名\",{\"1\":{\"2045\":2}}],[\"数字或下划线字符\",{\"1\":{\"1947\":2}}],[\"数字信号处理\",{\"1\":{\"867\":1}}],[\"数字图像处理\",{\"1\":{\"378\":1,\"1040\":1}}],[\"数字数据类型用于存储数值\",{\"1\":{\"137\":1}}],[\"数字\",{\"0\":{\"137\":1},\"1\":{\"136\":1}}],[\"数字和下划线组成\",{\"1\":{\"131\":1}}],[\"编写junit测试用例\",{\"0\":{\"1852\":1}}],[\"编写的\",{\"1\":{\"1492\":1}}],[\"编写并编译一个简单的latex文档以测试安装\",{\"1\":{\"1103\":1}}],[\"编写一个简单的latex文档\",{\"1\":{\"1100\":1,\"1101\":1,\"1102\":1}}],[\"编译原理\",{\"0\":{\"2226\":1},\"2\":{\"2228\":1}}],[\"编译带有标志的正则表达式\",{\"1\":{\"1951\":1}}],[\"编译时异常\",{\"1\":{\"1895\":1}}],[\"编译时会被忽略\",{\"1\":{\"1845\":1}}],[\"编译时会报错\",{\"1\":{\"1365\":1}}],[\"编译时检查\",{\"1\":{\"1842\":1}}],[\"编译时多态\",{\"1\":{\"1472\":1,\"1526\":1}}],[\"编译正则表达式\",{\"1\":{\"1415\":1,\"1951\":1}}],[\"编译错误\",{\"1\":{\"1365\":1,\"1624\":1}}],[\"编译一次\",{\"1\":{\"1263\":1}}],[\"编译器会检查该接口是否符合要求\",{\"1\":{\"1843\":1}}],[\"编译器会检查方法签名是否正确\",{\"1\":{\"1843\":1}}],[\"编译器通过参数列表来决定调用哪个方法\",{\"1\":{\"1476\":1}}],[\"编译器技术的发展越来越接近于\",{\"1\":{\"1259\":1}}],[\"编译器是用\",{\"1\":{\"1259\":1}}],[\"编译文档\",{\"1\":{\"1100\":1}}],[\"编译模型\",{\"1\":{\"608\":1,\"610\":1,\"660\":1}}],[\"编程是计算机科学的核心技能\",{\"1\":{\"2217\":1}}],[\"编程语言\",{\"1\":{\"2209\":1}}],[\"编程工具和框架\",{\"1\":{\"2034\":1}}],[\"编程基础\",{\"0\":{\"2020\":1},\"1\":{\"2206\":1}}],[\"编程概述\",{\"0\":{\"2019\":1}}],[\"编程主要使用两大库\",{\"1\":{\"2018\":1}}],[\"编程的基础\",{\"1\":{\"1867\":1}}],[\"编程的核心\",{\"1\":{\"1188\":1}}],[\"编程效率和代码质量\",{\"1\":{\"1188\":1}}],[\"编程\",{\"1\":{\"1937\":1},\"2\":{\"264\":1,\"278\":1,\"288\":1,\"295\":1}}],[\"编码标签\",{\"1\":{\"608\":1}}],[\"编码\",{\"0\":{\"130\":1},\"1\":{\"130\":1}}],[\"输入流和输出流\",{\"1\":{\"2039\":1}}],[\"输入流\",{\"1\":{\"1868\":3}}],[\"输入输出设备\",{\"1\":{\"2207\":1}}],[\"输入输出设备等\",{\"1\":{\"2188\":1}}],[\"输入输出\",{\"0\":{\"1420\":1},\"1\":{\"1867\":1}}],[\"输入函数\",{\"1\":{\"1191\":1}}],[\"输入参数在函数调用时传递给函数体\",{\"1\":{\"1173\":1}}],[\"输入参数\",{\"1\":{\"1173\":1}}],[\"输入\",{\"1\":{\"575\":1,\"693\":1,\"1120\":1,\"1179\":1,\"2156\":1}}],[\"输入矩阵通常是\",{\"1\":{\"564\":2}}],[\"输入到模型中以进行预测\",{\"1\":{\"528\":1}}],[\"输入数据空间\",{\"1\":{\"2164\":1}}],[\"输入数据\",{\"1\":{\"446\":1,\"449\":1}}],[\"输入层\",{\"1\":{\"439\":1}}],[\"输入和输出\",{\"1\":{\"259\":1}}],[\"输出流\",{\"1\":{\"1868\":3}}],[\"输出列表\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"输出用户输入的信息\",{\"1\":{\"1427\":1}}],[\"输出用方括号括起来\",{\"1\":{\"1173\":1}}],[\"输出指定的内容\",{\"1\":{\"1426\":2}}],[\"输出整数\",{\"1\":{\"1425\":1}}],[\"输出信息\",{\"0\":{\"1424\":1}}],[\"输出反斜杠\",{\"1\":{\"1292\":1}}],[\"输出带单引号的字符串\",{\"1\":{\"1292\":1}}],[\"输出带制表符的字符串\",{\"1\":{\"1292\":1}}],[\"输出带换行符的字符串\",{\"1\":{\"1292\":1}}],[\"输出到命令行\",{\"0\":{\"1194\":1}}],[\"输出等\",{\"1\":{\"1179\":1}}],[\"输出参数\",{\"1\":{\"1173\":1}}],[\"输出预测概率\",{\"1\":{\"577\":1,\"601\":1}}],[\"输出预测的均方误差\",{\"1\":{\"606\":1}}],[\"输出预测的均方误差和r^2分数\",{\"1\":{\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1}}],[\"输出预测的准确率\",{\"1\":{\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"607\":1,\"608\":1,\"609\":2}}],[\"输出数据\",{\"1\":{\"446\":1,\"449\":1,\"1118\":1}}],[\"输出最终的预测结果\",{\"1\":{\"439\":1}}],[\"输出层之间按顺序前馈传递\",{\"1\":{\"654\":1}}],[\"输出层\",{\"1\":{\"439\":1}}],[\"输出结果\",{\"0\":{\"450\":1},\"1\":{\"394\":2,\"398\":1,\"399\":1,\"700\":1,\"722\":1,\"726\":1,\"732\":1,\"738\":1,\"958\":1,\"959\":1,\"960\":1,\"964\":1,\"965\":1,\"1292\":1,\"1677\":1}}],[\"输出多个值\",{\"1\":{\"261\":1}}],[\"输出字符串\",{\"1\":{\"261\":1,\"1425\":1}}],[\"输出0\",{\"1\":{\"208\":1}}],[\"输出0到4\",{\"1\":{\"206\":1,\"208\":1}}],[\"输出\",{\"0\":{\"1899\":1,\"1902\":1,\"1904\":1,\"1907\":1},\"1\":{\"187\":2,\"188\":2,\"189\":2,\"190\":2,\"191\":1,\"202\":1,\"210\":1,\"211\":5,\"212\":2,\"213\":1,\"214\":2,\"215\":1,\"216\":2,\"217\":2,\"219\":6,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"229\":3,\"242\":4,\"575\":1,\"1120\":1,\"1172\":1,\"1174\":1,\"1274\":1,\"1370\":5,\"1373\":4,\"1376\":4,\"1472\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1516\":1,\"1520\":1,\"1523\":3,\"1528\":3,\"1530\":2,\"1533\":2,\"1546\":1,\"1547\":1,\"1554\":2,\"1557\":2,\"1561\":2,\"1568\":4,\"1579\":2,\"1581\":1,\"1583\":2,\"1588\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1667\":1,\"1670\":1,\"1671\":1,\"1677\":6,\"1949\":1,\"1952\":1,\"1954\":1,\"1992\":1,\"2156\":1}}],[\"输出1\",{\"1\":{\"185\":1,\"207\":1}}],[\"输出42\",{\"1\":{\"185\":1,\"186\":1}}],[\"输出物体的重量\",{\"1\":{\"182\":1}}],[\"输出圆的面积\",{\"1\":{\"182\":2}}],[\"输出3\",{\"1\":{\"185\":1,\"186\":1}}],[\"输出35\",{\"1\":{\"180\":1}}],[\"输出30\",{\"1\":{\"180\":1}}],[\"使开发人员可以编写独立于数据库的应用程序\",{\"1\":{\"1973\":1}}],[\"使开发者能够编写出高效\",{\"1\":{\"1893\":1}}],[\"使当前线程等待\",{\"1\":{\"1970\":1}}],[\"使当前线程进入休眠状态\",{\"1\":{\"1965\":1}}],[\"使\",{\"1\":{\"1953\":1}}],[\"使方法可以处理不同类型的参数\",{\"1\":{\"1835\":1}}],[\"使线程等待\",{\"1\":{\"1673\":1}}],[\"使其进入就绪状态\",{\"1\":{\"1965\":1}}],[\"使其尽可能地通过所有已知数据点或尽可能地逼近数据的总体趋势\",{\"1\":{\"938\":1}}],[\"使其归一化到0到1之间\",{\"1\":{\"759\":1}}],[\"使不同指标可以在同一尺度下进行比较\",{\"1\":{\"763\":1}}],[\"使数据结构更加直观\",{\"1\":{\"617\":1}}],[\"使模型能够从数据中学习特征与标签之间的关系\",{\"1\":{\"532\":1}}],[\"使模型能够根据输入数据预测输出结果\",{\"1\":{\"527\":1}}],[\"使网络能够处理复杂问题\",{\"1\":{\"440\":1}}],[\"使得多个程序可以并发执行\",{\"1\":{\"2191\":1}}],[\"使得java开发更加高效和灵活\",{\"1\":{\"1998\":1}}],[\"使得java编程更加简洁\",{\"1\":{\"1988\":1}}],[\"使得编写高效\",{\"1\":{\"1694\":1}}],[\"使得代码更加清晰\",{\"1\":{\"1683\":1}}],[\"使得代码更灵活和可扩展\",{\"1\":{\"1585\":1}}],[\"使得项目的结构更加清晰\",{\"1\":{\"1617\":1}}],[\"使得外部代码更容易使用和理解\",{\"1\":{\"1569\":1}}],[\"使得一个类可以继承另一个类的属性和方法\",{\"1\":{\"1507\":1}}],[\"使得它们可以作为对象处理\",{\"1\":{\"1387\":1}}],[\"使得它在学术研究\",{\"1\":{\"925\":1}}],[\"使得基本数据类型可以作为对象来处理\",{\"1\":{\"1380\":1}}],[\"使得程序员不必为内存管理而担忧\",{\"1\":{\"1259\":1}}],[\"使得大多数程序员很容易学习和使用\",{\"1\":{\"1259\":1}}],[\"使得综合结果达到最优\",{\"1\":{\"839\":1}}],[\"使得图像的亮度分布更加均匀\",{\"1\":{\"823\":1}}],[\"使得图像的细节更加清晰\",{\"1\":{\"787\":1}}],[\"使得数据在同一单位向量内\",{\"1\":{\"763\":1}}],[\"使得目标函数\",{\"1\":{\"715\":1}}],[\"使得所有数据落在同一单位圆内\",{\"1\":{\"759\":1}}],[\"使得所有目标都得到优化\",{\"1\":{\"710\":1}}],[\"使得所有特征具有相同的量级\",{\"1\":{\"616\":1}}],[\"使得我们能够理解数据的结构\",{\"1\":{\"617\":1}}],[\"使得实现各种机器学习算法变得更加便捷\",{\"1\":{\"600\":1}}],[\"使得同一簇中的数据点彼此相似\",{\"1\":{\"538\":1}}],[\"使得同一簇中的对象彼此相似\",{\"1\":{\"508\":1}}],[\"使得不同类别之间的类间方差最大\",{\"1\":{\"520\":1}}],[\"使得金属晶体结构趋于稳定\",{\"1\":{\"422\":1}}],[\"使得从某一城市出发\",{\"1\":{\"410\":1}}],[\"使得从源点到汇点的总流量最大且总费用最小\",{\"1\":{\"401\":1}}],[\"使得总成本最小\",{\"1\":{\"409\":1}}],[\"使得总重量不超过j的情况下\",{\"1\":{\"408\":1}}],[\"使得背包内物品的总价值最大\",{\"1\":{\"408\":2}}],[\"使得对于每条边\",{\"1\":{\"392\":1}}],[\"使得每条边都连接\",{\"1\":{\"391\":1}}],[\"使代码更具可移植性\",{\"1\":{\"255\":1}}],[\"使用分散内存空间\",{\"1\":{\"2153\":1}}],[\"使用分离变量法\",{\"1\":{\"884\":1}}],[\"使用事件驱动机制来处理\",{\"1\":{\"2029\":1}}],[\"使用绝对布局\",{\"1\":{\"2022\":1}}],[\"使用重量级组件\",{\"1\":{\"2019\":1}}],[\"使用枚举实现单例是一种极为简洁的方式\",{\"1\":{\"2014\":1}}],[\"使用枚举代替常量\",{\"1\":{\"1613\":1}}],[\"使用标准的javadoc标签和格式\",{\"1\":{\"2003\":1}}],[\"使用javadoc工具可以自动生成html格式的api文档\",{\"1\":{\"2002\":1}}],[\"使用json模块读写json文件\",{\"1\":{\"258\":1}}],[\"使用静态方法引用\",{\"1\":{\"1991\":1}}],[\"使用lambda表达式来实现接口方法\",{\"1\":{\"1990\":1}}],[\"使用lambda表达式进行排序\",{\"1\":{\"1989\":1}}],[\"使用lambda表达式代替匿名内部类\",{\"1\":{\"1989\":1}}],[\"使用lambda表达式的场景\",{\"0\":{\"1687\":1}}],[\"使用权\",{\"1\":{\"1965\":1}}],[\"使用正则表达式替换字符串中的所有非数字字符\",{\"1\":{\"1952\":1}}],[\"使用正则化等方法来改进模型性能\",{\"1\":{\"532\":1}}],[\"使用参数化日志\",{\"1\":{\"1927\":1}}],[\"使用注解\",{\"1\":{\"1844\":1}}],[\"使用注意\",{\"1\":{\"1671\":1,\"1673\":1}}],[\"使用时编译器会给出警告\",{\"1\":{\"1843\":1}}],[\"使用泛型可以避免编写重复的代码\",{\"1\":{\"1837\":1}}],[\"使用尖括号\",{\"1\":{\"1836\":1}}],[\"使用对象的\",{\"1\":{\"1827\":1}}],[\"使用双向链表维护键值对的插入顺序\",{\"1\":{\"1802\":1}}],[\"使用双向链表维护元素的插入顺序\",{\"1\":{\"1787\":1,\"1799\":1}}],[\"使用包装类的\",{\"1\":{\"1701\":2}}],[\"使用包装类的parsexxx\",{\"1\":{\"1298\":1}}],[\"使用流和lambda表达式过滤和排序\",{\"1\":{\"1692\":1}}],[\"使用方法引用\",{\"1\":{\"1690\":1,\"1989\":1}}],[\"使用接口方法\",{\"1\":{\"1655\":1}}],[\"使用接口可以定义行为的契约\",{\"1\":{\"1559\":1}}],[\"使用反射获取类的信息\",{\"0\":{\"1831\":1}}],[\"使用反射动态访问和修改字段\",{\"1\":{\"1659\":1}}],[\"使用反射的代码较难阅读和维护\",{\"1\":{\"1650\":1}}],[\"使用反射来访问和修改字段\",{\"1\":{\"1655\":1}}],[\"使用反射来访问私有成员并执行测试\",{\"1\":{\"1649\":1}}],[\"使用反射来动态处理对象和配置\",{\"1\":{\"1649\":1}}],[\"使用唯一的包名\",{\"1\":{\"1631\":1}}],[\"使用内部类的好处\",{\"0\":{\"1599\":1}}],[\"使用匿名内部类实现接口\",{\"1\":{\"1597\":1}}],[\"使用封装来创建清晰的公共接口\",{\"1\":{\"1571\":1}}],[\"使用抽象类可以将这些共性行为提取到一个基类中\",{\"1\":{\"1559\":1}}],[\"使用同步代码块确保线程安全\",{\"1\":{\"1548\":1}}],[\"使用多线程来处理多个客户端的连接请求\",{\"1\":{\"1943\":1}}],[\"使用多态可以减少代码的重复\",{\"1\":{\"1531\":1}}],[\"使用多项式函数建立输入特征与输出之间的关系\",{\"1\":{\"531\":1}}],[\"使用自定义异常\",{\"1\":{\"1452\":1,\"1910\":1}}],[\"使用reader和writer类\",{\"1\":{\"1431\":1}}],[\"使用return关键字来返回值并结束方法的执行\",{\"1\":{\"1340\":1}}],[\"使用arrays\",{\"1\":{\"1363\":1}}],[\"使用arima模型进行时间序列分析\",{\"1\":{\"488\":1}}],[\"使用数组字面量初始化\",{\"0\":{\"1352\":1}}],[\"使用数字加点表示有序列表项\",{\"1\":{\"22\":1}}],[\"使用void\",{\"1\":{\"1335\":1}}],[\"使用stream\",{\"1\":{\"1992\":1}}],[\"使用string\",{\"1\":{\"1298\":1}}],[\"使用solve\",{\"1\":{\"853\":1,\"857\":1}}],[\"使用该子类创建的对象即为线程\",{\"1\":{\"1259\":1}}],[\"使用型构为\",{\"1\":{\"1259\":1}}],[\"使用符号变量和符号表达式\",{\"1\":{\"1224\":1}}],[\"使用这个类\",{\"1\":{\"1183\":1}}],[\"使用函数可以让代码更模块化\",{\"1\":{\"1171\":1}}],[\"使用函数创建特殊矩阵\",{\"0\":{\"1131\":1}}],[\"使用一致的日志格式\",{\"1\":{\"1927\":1}}],[\"使用一个优先队列\",{\"1\":{\"958\":1}}],[\"使用一维热传导方程\",{\"1\":{\"886\":1}}],[\"使用动态规划思想\",{\"1\":{\"957\":1}}],[\"使用动态规划解决tsp的方法是\",{\"1\":{\"410\":1}}],[\"使用贪心策略\",{\"1\":{\"957\":1,\"963\":2}}],[\"使用显式差分公式迭代计算种群密度分布\",{\"1\":{\"928\":1}}],[\"使用初始速度\",{\"1\":{\"911\":1}}],[\"使用有限差分法计算每个时间步的位移分布\",{\"1\":{\"912\":1}}],[\"使用有限差分法计算每个时间步的温度分布\",{\"1\":{\"890\":1,\"904\":1}}],[\"使用有限差分法\",{\"1\":{\"902\":1,\"910\":1}}],[\"使用有限差分法迭代求解拉普拉斯方程\",{\"1\":{\"896\":1}}],[\"使用有限差分法来数值求解这个pde\",{\"1\":{\"889\":1}}],[\"使用库如scipy\",{\"1\":{\"838\":1}}],[\"使用haar级联分类器进行人脸检测\",{\"1\":{\"827\":1}}],[\"使用维纳滤波进行去噪\",{\"1\":{\"814\":1}}],[\"使用阈值分割\",{\"1\":{\"811\":1}}],[\"使用不同的算法\",{\"1\":{\"810\":1}}],[\"使用逆滤波\",{\"1\":{\"791\":1}}],[\"使用卷积核\",{\"1\":{\"787\":1}}],[\"使用辅助变量\",{\"1\":{\"740\":1}}],[\"使用整数约束的索引\",{\"1\":{\"728\":1,\"734\":1}}],[\"使用的次数\",{\"1\":{\"700\":1}}],[\"使用matplotlib绘制每隔一定时间的位移分布\",{\"1\":{\"912\":1}}],[\"使用matplotlib绘制每隔一定时间的温度分布\",{\"1\":{\"904\":1}}],[\"使用matplotlib绘制结果\",{\"1\":{\"896\":1}}],[\"使用matplotlib绘制易感者\",{\"1\":{\"853\":1}}],[\"使用matplotlib的rectangle对象在指定的绘图区域内添加瓷砖\",{\"1\":{\"689\":1}}],[\"使用matplotlib中的plot\",{\"1\":{\"681\":1}}],[\"使用隐函数f\",{\"1\":{\"676\":1}}],[\"使用三角形或四边形网格来近似曲面\",{\"1\":{\"672\":1}}],[\"使用三个或更多的\",{\"1\":{\"28\":1}}],[\"使用三个反引号\",{\"1\":{\"28\":1}}],[\"使用基本几何体\",{\"1\":{\"671\":1}}],[\"使用顶点\",{\"1\":{\"671\":1}}],[\"使用训练好的模型进行预测\",{\"1\":{\"661\":1}}],[\"使用训练数据集训练模型\",{\"1\":{\"532\":1}}],[\"使用马尔科夫模型预测天气\",{\"1\":{\"649\":1}}],[\"使用gm\",{\"1\":{\"642\":1}}],[\"使用gmm进行数据点的分类\",{\"1\":{\"558\":1}}],[\"使用gmm进行聚类\",{\"1\":{\"558\":1}}],[\"使用了两层lstm层\",{\"1\":{\"662\":1}}],[\"使用了\",{\"1\":{\"600\":1}}],[\"使用主成分分析\",{\"0\":{\"590\":1}}],[\"使用朴素贝叶斯\",{\"0\":{\"589\":1}}],[\"使用支持向量机\",{\"0\":{\"588\":1}}],[\"使用树状结构进行分类\",{\"1\":{\"586\":1}}],[\"使用树状结构进行回归\",{\"1\":{\"504\":1}}],[\"使用适当的分类算法和评价指标\",{\"1\":{\"583\":1}}],[\"使用dbscan进行聚类\",{\"1\":{\"557\":1}}],[\"使用ward法进行层次聚类\",{\"1\":{\"556\":1}}],[\"使用测试集评估模型的性能\",{\"1\":{\"532\":1}}],[\"使用线性判别分析\",{\"1\":{\"486\":1}}],[\"使用线性回归来分析自变量与因变量之间的关系\",{\"1\":{\"484\":1}}],[\"使用kaplan\",{\"1\":{\"489\":1}}],[\"使用k\",{\"1\":{\"485\":1,\"555\":1}}],[\"使用梯度下降法更新权重\",{\"1\":{\"440\":1}}],[\"使用轮盘赌选择方法\",{\"1\":{\"435\":1}}],[\"使用遗传算法的启发式搜索来寻找近似最优解\",{\"1\":{\"410\":1}}],[\"使用队列来优化松弛操作\",{\"1\":{\"405\":1}}],[\"使用优先队列\",{\"1\":{\"404\":1}}],[\"使用示例\",{\"1\":{\"398\":1,\"399\":1,\"958\":1,\"959\":1,\"960\":1,\"964\":1,\"965\":1}}],[\"使用bfs或dfs寻找从源点\",{\"1\":{\"398\":1}}],[\"使用广度优先搜索\",{\"1\":{\"397\":1,\"399\":1}}],[\"使用边的集合来表示图\",{\"1\":{\"390\":1}}],[\"使用canny算法检测图像中的边缘\",{\"1\":{\"820\":1}}],[\"使用cronbach\",{\"1\":{\"480\":1}}],[\"使用cell数组\",{\"1\":{\"390\":1,\"954\":1}}],[\"使用csv模块读写csv文件\",{\"1\":{\"257\":1}}],[\"使用列表\",{\"1\":{\"390\":1}}],[\"使用inputstream和outputstream类\",{\"1\":{\"1431\":1}}],[\"使用input\",{\"1\":{\"262\":1}}],[\"使用格式化字符串\",{\"1\":{\"261\":1}}],[\"使用orelse提供默认值\",{\"1\":{\"1995\":1}}],[\"使用os模块可以执行各种文件和目录操作\",{\"1\":{\"256\":1}}],[\"使用os模块处理文件路径\",{\"1\":{\"255\":1}}],[\"使用open\",{\"1\":{\"251\":1}}],[\"使用private修饰符进行封装\",{\"1\":{\"1662\":1}}],[\"使用print\",{\"1\":{\"261\":1}}],[\"使用print语句\",{\"1\":{\"246\":1}}],[\"使用python的scikit\",{\"1\":{\"535\":1,\"543\":1}}],[\"使用pca进行数据降维\",{\"1\":{\"487\":1}}],[\"使用pdb模块\",{\"1\":{\"246\":1}}],[\"使用集成开发环境\",{\"1\":{\"246\":1}}],[\"使用断点和调试器\",{\"1\":{\"246\":1}}],[\"使用模块\",{\"0\":{\"228\":1}}],[\"使用生成器\",{\"1\":{\"225\":1}}],[\"使用迭代器\",{\"1\":{\"224\":1}}],[\"使用高阶函数map\",{\"1\":{\"214\":1}}],[\"使用常量\",{\"1\":{\"182\":1}}],[\"使用变量\",{\"1\":{\"180\":1}}],[\"使用元组可以提高效率\",{\"1\":{\"156\":1}}],[\"使用引号\",{\"1\":{\"138\":1}}],[\"使用冒号和缩进表示定义列表\",{\"1\":{\"35\":1}}],[\"使用两个美元符号\",{\"1\":{\"34\":1}}],[\"使用\",{\"0\":{\"619\":1,\"1356\":1,\"1357\":1,\"1414\":1,\"1421\":1,\"1424\":1,\"1688\":1,\"1689\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1817\":1,\"1819\":1,\"1820\":1,\"1823\":1,\"1903\":1,\"1906\":1,\"1908\":1,\"1922\":1,\"1926\":1,\"1932\":1,\"1940\":1,\"1941\":1,\"1942\":1,\"1951\":1,\"1963\":1,\"1966\":1,\"1968\":1,\"1969\":1,\"1984\":1,\"2002\":1,\"2047\":1,\"2048\":1},\"1\":{\"17\":1,\"19\":2,\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"27\":1,\"29\":2,\"30\":2,\"31\":1,\"32\":1,\"33\":1,\"153\":1,\"159\":1,\"160\":1,\"168\":1,\"169\":1,\"171\":2,\"174\":2,\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"229\":1,\"230\":1,\"608\":2,\"609\":2,\"728\":1,\"734\":1,\"740\":1,\"810\":1,\"928\":1,\"1178\":1,\"1191\":1,\"1192\":3,\"1194\":1,\"1195\":3,\"1227\":1,\"1339\":1,\"1384\":1,\"1469\":1,\"1513\":1,\"1533\":1,\"1548\":1,\"1553\":1,\"1556\":1,\"1574\":1,\"1610\":2,\"1676\":1,\"1677\":5,\"1689\":1,\"1690\":1,\"1691\":2,\"1705\":4,\"1706\":1,\"1713\":2,\"1739\":2,\"1750\":1,\"1761\":1,\"1793\":1,\"1814\":1,\"1816\":1,\"1827\":2,\"1857\":1,\"1863\":2,\"1873\":1,\"1874\":1,\"1887\":1,\"1897\":1,\"1910\":1,\"1920\":1,\"1925\":1,\"1946\":1,\"1954\":1,\"1963\":1,\"1965\":1,\"1976\":1,\"1979\":1,\"1980\":1,\"1981\":1,\"1986\":1,\"2011\":1}}],[\"二分搜索等\",{\"1\":{\"2208\":1}}],[\"二分查找在有序数组中的查找\",{\"1\":{\"2162\":1}}],[\"二分图\",{\"1\":{\"391\":1}}],[\"二进制与数据表示\",{\"1\":{\"2207\":1}}],[\"二进制位整体右移\",{\"1\":{\"1315\":2}}],[\"二进制位整体左移\",{\"1\":{\"1315\":1}}],[\"二进制位取反\",{\"1\":{\"1315\":1}}],[\"二进制模式\",{\"1\":{\"251\":1}}],[\"二\",{\"0\":{\"1025\":1,\"1026\":1,\"1031\":1,\"1035\":1,\"1059\":1,\"1697\":1,\"1710\":1,\"1745\":1,\"1760\":1,\"1774\":1,\"1784\":1,\"1799\":1,\"1816\":1,\"1869\":1,\"1882\":1,\"1896\":1,\"1914\":1,\"1931\":1,\"1947\":1,\"1960\":1,\"1975\":1,\"2020\":1,\"2042\":1},\"1\":{\"1027\":1}}],[\"二十年后\",{\"0\":{\"992\":1},\"1\":{\"992\":1}}],[\"二维折线图\",{\"1\":{\"1201\":1}}],[\"二维或多维的\",{\"1\":{\"1154\":1}}],[\"二维数组\",{\"1\":{\"954\":1,\"1154\":1}}],[\"二维数据的插值方法\",{\"1\":{\"933\":1}}],[\"二维拉普拉斯方程\",{\"1\":{\"884\":1}}],[\"二值化将图像转换为只有黑白两种颜色的图像\",{\"1\":{\"824\":1}}],[\"二元分类\",{\"1\":{\"530\":1}}],[\"二次的\",{\"1\":{\"939\":1}}],[\"二次判别分析\",{\"0\":{\"521\":1,\"570\":1},\"1\":{\"573\":1}}],[\"二次规划\",{\"1\":{\"415\":1}}],[\"二级标题\",{\"1\":{\"17\":1}}],[\"追加字符串\",{\"1\":{\"1373\":1,\"1376\":1}}],[\"追加\",{\"1\":{\"251\":1}}],[\"写操作时会创建一个新的副本来进行修改\",{\"1\":{\"1753\":1}}],[\"写入线程\",{\"1\":{\"1970\":1}}],[\"写入一个换行符\",{\"1\":{\"1874\":1}}],[\"写入字符数据\",{\"1\":{\"1874\":1}}],[\"写入字节数据\",{\"1\":{\"1871\":1}}],[\"写入文本数据到文件\",{\"1\":{\"1874\":1}}],[\"写入文件\",{\"0\":{\"253\":1},\"1\":{\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1440\":1}}],[\"写入json文件\",{\"1\":{\"258\":1}}],[\"写入csv文件\",{\"1\":{\"257\":1,\"259\":1}}],[\"写入\",{\"1\":{\"251\":1,\"1882\":1}}],[\"写作排版\",{\"2\":{\"1113\":1}}],[\"写作\",{\"2\":{\"37\":1,\"40\":1}}],[\"写作资源\",{\"2\":{\"15\":1}}],[\"写作模板\",{\"1\":{\"336\":1},\"2\":{\"3\":1,\"339\":1}}],[\"更灵活\",{\"1\":{\"1969\":1}}],[\"更详细的信息\",{\"1\":{\"1917\":1}}],[\"更加高效\",{\"1\":{\"1878\":1}}],[\"更高效和灵活的\",{\"1\":{\"1893\":1}}],[\"更高效的插入和删除操作\",{\"1\":{\"1765\":1}}],[\"更高效的代码\",{\"1\":{\"248\":1}}],[\"更高性能\",{\"1\":{\"1375\":1}}],[\"更具健壮性\",{\"1\":{\"1259\":1}}],[\"更名为java\",{\"1\":{\"1258\":1}}],[\"更名为\",{\"1\":{\"1258\":2}}],[\"更改类的内部实现不会影响到使用这个类的外部代码\",{\"1\":{\"1569\":1}}],[\"更改当前目录\",{\"1\":{\"1126\":1}}],[\"更改个人培养计划应得到导师\",{\"1\":{\"1034\":1}}],[\"更改引导介质\",{\"1\":{\"100\":1}}],[\"更新和删除操作\",{\"1\":{\"2213\":1}}],[\"更新等\",{\"1\":{\"2152\":1}}],[\"更新等功能\",{\"1\":{\"1824\":1}}],[\"更新及时\",{\"1\":{\"2003\":1}}],[\"更新或删除操作\",{\"1\":{\"1981\":1}}],[\"更新或删除元素\",{\"1\":{\"1744\":1}}],[\"更新语句\",{\"1\":{\"1974\":1}}],[\"更新最近一次\",{\"1\":{\"1822\":1}}],[\"更新其他所有顶点之间的最短路径\",{\"1\":{\"960\":1}}],[\"更新邻接顶点的距离\",{\"1\":{\"958\":1,\"965\":1}}],[\"更新权重\",{\"1\":{\"447\":1}}],[\"更新潜在收益\",{\"1\":{\"409\":2}}],[\"更新相邻顶点的距离\",{\"1\":{\"404\":1}}],[\"更节省空间\",{\"1\":{\"390\":1}}],[\"集中控制实例化过程\",{\"1\":{\"2015\":1}}],[\"集成到了jdk中\",{\"1\":{\"1997\":1}}],[\"集成于labview中\",{\"1\":{\"798\":1}}],[\"集成学习通过结合多个基学习器的预测结果来提高模型的泛化能力\",{\"1\":{\"597\":1}}],[\"集成开发环境\",{\"0\":{\"283\":1}}],[\"集成测试\",{\"1\":{\"247\":1}}],[\"集合中的元素\",{\"1\":{\"1821\":1}}],[\"集合与线程安全\",{\"0\":{\"1742\":1}}],[\"集合工具类\",{\"0\":{\"1741\":1}}],[\"集合框架中用于遍历集合元素的接口\",{\"1\":{\"1812\":1}}],[\"集合框架中用于键值对的映射操作\",{\"1\":{\"1810\":1}}],[\"集合框架中的一个重要接口\",{\"1\":{\"1811\":1,\"1824\":1}}],[\"集合框架中一个重要的接口\",{\"1\":{\"1794\":1}}],[\"集合框架\",{\"1\":{\"1780\":1,\"1837\":1,\"2038\":1}}],[\"集合框架的一部分\",{\"1\":{\"1756\":1}}],[\"集合框架的核心接口\",{\"0\":{\"1735\":1}}],[\"集合框架是\",{\"1\":{\"1742\":1}}],[\"集合框架由几个核心接口组成\",{\"1\":{\"1735\":1}}],[\"集合类主要位于\",{\"1\":{\"1734\":1}}],[\"集合类\",{\"1\":{\"1734\":1,\"1812\":1}}],[\"集合运算符用于处理集合操作\",{\"1\":{\"1150\":1}}],[\"集合运算符\",{\"0\":{\"1150\":1},\"1\":{\"1152\":1}}],[\"集合运算符以及一些特殊字符\",{\"1\":{\"1145\":1}}],[\"集合和字典\",{\"1\":{\"184\":1}}],[\"集合在需要处理唯一元素集合\",{\"1\":{\"166\":1}}],[\"集合推导式\",{\"0\":{\"163\":1,\"222\":1}}],[\"集合的应用场景\",{\"0\":{\"164\":1}}],[\"集合的其他常用方法\",{\"0\":{\"162\":1}}],[\"集合的一些基本操作和用法\",{\"1\":{\"158\":1}}],[\"集合操作是许多算法和数据处理任务的重要组成部分\",{\"1\":{\"166\":1}}],[\"集合操作\",{\"0\":{\"161\":1},\"1\":{\"1781\":1,\"1793\":1,\"2035\":1}}],[\"集合主要用于存储不重复的元素\",{\"1\":{\"158\":1}}],[\"集合\",{\"0\":{\"158\":1},\"1\":{\"136\":1,\"158\":1,\"188\":1,\"189\":1,\"220\":1,\"1457\":1,\"1720\":1,\"1734\":1}}],[\"测试和版本控制\",{\"1\":{\"2209\":1}}],[\"测试和测量\",{\"1\":{\"1116\":1}}],[\"测试常用注解\",{\"0\":{\"1855\":1}}],[\"测试成功通过时\",{\"1\":{\"1854\":1}}],[\"测试用例通常是一个包含测试方法的类\",{\"1\":{\"1852\":1}}],[\"测试框架\",{\"1\":{\"1649\":1,\"1832\":1}}],[\"测试工具\",{\"1\":{\"1649\":1}}],[\"测试工具等\",{\"1\":{\"1633\":1}}],[\"测试安装\",{\"1\":{\"1100\":1,\"1101\":1,\"1102\":1}}],[\"测试集\",{\"1\":{\"528\":1}}],[\"测试\",{\"0\":{\"1858\":1},\"1\":{\"448\":1,\"449\":1,\"1847\":1}}],[\"测试神经网络\",{\"0\":{\"448\":1}}],[\"测试系统的功能是否符合需求\",{\"1\":{\"247\":1}}],[\"测试多个组件或模块之间的交互\",{\"1\":{\"247\":1}}],[\"测试驱动开发\",{\"1\":{\"247\":1}}],[\"测试代码中的独立单元\",{\"1\":{\"247\":1}}],[\"测试方法\",{\"0\":{\"247\":1}}],[\"交错排列\",{\"1\":{\"686\":1}}],[\"交\",{\"1\":{\"671\":1}}],[\"交叉型\",{\"1\":{\"1024\":1}}],[\"交叉验证\",{\"1\":{\"533\":1}}],[\"交叉熵\",{\"1\":{\"440\":1}}],[\"交叉率和变异率等参数\",{\"1\":{\"436\":1}}],[\"交叉率\",{\"1\":{\"434\":1}}],[\"交叉操作\",{\"1\":{\"433\":1,\"434\":1,\"435\":1}}],[\"交叉\",{\"1\":{\"431\":1,\"432\":1,\"435\":1}}],[\"交通运输等多个领域有广泛应用\",{\"1\":{\"844\":1}}],[\"交通\",{\"1\":{\"395\":1}}],[\"交通规划等领域有广泛应用\",{\"1\":{\"952\":1}}],[\"交通规划等领域\",{\"1\":{\"388\":1}}],[\"交互式调试\",{\"1\":{\"246\":1}}],[\"交集\",{\"1\":{\"161\":1,\"1150\":1}}],[\"交集和差集\",{\"1\":{\"158\":1,\"1793\":1}}],[\"设想\",{\"0\":{\"2131\":1}}],[\"设施农业技术\",{\"1\":{\"1027\":1}}],[\"设施农业技术三个方向\",{\"1\":{\"1025\":1}}],[\"设决策变量为x1​\",{\"1\":{\"842\":1}}],[\"设p\",{\"1\":{\"697\":1}}],[\"设x\",{\"1\":{\"697\":1}}],[\"设计原则\",{\"0\":{\"2077\":1}}],[\"设计和更强大的功能\",{\"1\":{\"2034\":1}}],[\"设计和工程\",{\"1\":{\"710\":1}}],[\"设计更加合理和易用\",{\"1\":{\"1994\":1}}],[\"设计开发\",{\"1\":{\"1038\":1}}],[\"设计一个工厂布局\",{\"1\":{\"711\":1}}],[\"设计一个产品\",{\"1\":{\"710\":1}}],[\"设计一个优化的空气动力学形状\",{\"1\":{\"708\":1}}],[\"设计人员\",{\"1\":{\"677\":1}}],[\"设计模式\",{\"0\":{\"2005\":1,\"2078\":1},\"2\":{\"333\":1}}],[\"设定初始位移\",{\"1\":{\"912\":1}}],[\"设定边界上的位移为0\",{\"1\":{\"912\":1}}],[\"设定边界上的温度值为0\",{\"1\":{\"904\":1}}],[\"设定边界上的函数值\",{\"1\":{\"896\":1}}],[\"设定热扩散系数\",{\"1\":{\"890\":1,\"904\":1}}],[\"设定混合成分数量\",{\"1\":{\"558\":1}}],[\"设定簇的数量\",{\"1\":{\"555\":1}}],[\"设置布局管理器为\",{\"1\":{\"2027\":1,\"2028\":1}}],[\"设置按钮位置和大小\",{\"1\":{\"2022\":1}}],[\"设置第一个参数的值\",{\"1\":{\"1984\":1}}],[\"设置线程的中断状态标志\",{\"1\":{\"1965\":1}}],[\"设置日志级别为所有\",{\"1\":{\"1918\":1}}],[\"设置为非阻塞模式\",{\"1\":{\"1887\":1,\"1890\":1}}],[\"设置字段的值\",{\"1\":{\"1829\":1}}],[\"设置年份\",{\"1\":{\"1402\":1}}],[\"设置指定字段的值\",{\"1\":{\"1402\":1}}],[\"设置从1970年1月1日00\",{\"1\":{\"1401\":1}}],[\"设置首选项\",{\"0\":{\"1088\":1}}],[\"设置缩放比例\",{\"1\":{\"947\":1}}],[\"设置变量的上下界为0和1\",{\"1\":{\"740\":1}}],[\"设置下界为0\",{\"1\":{\"734\":1}}],[\"设置了图形的长宽比为1\",{\"1\":{\"689\":1}}],[\"设置绘图区域大小\",{\"1\":{\"688\":1}}],[\"设置图形的标签和视角\",{\"1\":{\"680\":1}}],[\"设置随机种子\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"558\":1}}],[\"设置随机种子以便复现结果\",{\"1\":{\"446\":1}}],[\"设置参数\",{\"1\":{\"428\":1,\"434\":1}}],[\"设置降温速率和终止条件\",{\"1\":{\"423\":1}}],[\"设置断点并逐步执行代码\",{\"1\":{\"246\":1}}],[\"设生产的数量分别为\",{\"1\":{\"384\":1}}],[\"设备管理\",{\"1\":{\"2192\":1}}],[\"设备驱动管理\",{\"1\":{\"2189\":1}}],[\"设备等\",{\"1\":{\"1038\":1}}],[\"设备选型\",{\"1\":{\"755\":1}}],[\"设备\",{\"1\":{\"69\":1,\"77\":1}}],[\"vue\",{\"0\":{\"2141\":1,\"2309\":1},\"2\":{\"2142\":1,\"2143\":1}}],[\"vue3\",{\"0\":{\"2281\":1},\"1\":{\"1460\":1},\"2\":{\"2283\":1}}],[\"v>\",{\"1\":{\"1735\":1,\"1740\":3,\"1837\":1}}],[\"volatilefield\",{\"1\":{\"1490\":1}}],[\"volatile\",{\"1\":{\"1308\":2,\"1490\":1,\"2012\":1}}],[\"volterra模型\",{\"1\":{\"850\":1,\"871\":1}}],[\"void\",{\"1\":{\"1274\":1,\"1275\":1,\"1292\":1,\"1301\":1,\"1302\":1,\"1307\":4,\"1308\":7,\"1309\":1,\"1335\":1,\"1336\":1,\"1338\":1,\"1339\":1,\"1346\":1,\"1370\":1,\"1373\":1,\"1376\":1,\"1384\":1,\"1392\":1,\"1393\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1418\":1,\"1422\":1,\"1425\":1,\"1427\":1,\"1428\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":1,\"1440\":1,\"1445\":1,\"1446\":1,\"1447\":2,\"1448\":2,\"1468\":2,\"1470\":1,\"1471\":2,\"1472\":2,\"1473\":2,\"1474\":2,\"1476\":2,\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1485\":1,\"1486\":1,\"1488\":1,\"1489\":1,\"1492\":1,\"1497\":1,\"1498\":2,\"1499\":1,\"1500\":2,\"1501\":2,\"1502\":1,\"1503\":1,\"1504\":2,\"1505\":1,\"1506\":1,\"1509\":3,\"1511\":3,\"1512\":1,\"1513\":3,\"1514\":3,\"1516\":3,\"1520\":3,\"1523\":1,\"1528\":4,\"1530\":4,\"1533\":4,\"1536\":3,\"1541\":1,\"1545\":1,\"1546\":1,\"1547\":1,\"1548\":2,\"1554\":4,\"1557\":4,\"1561\":4,\"1568\":3,\"1575\":1,\"1577\":2,\"1579\":4,\"1581\":3,\"1583\":5,\"1588\":2,\"1591\":2,\"1594\":3,\"1597\":3,\"1606\":1,\"1608\":1,\"1610\":1,\"1612\":1,\"1619\":1,\"1621\":1,\"1622\":1,\"1624\":2,\"1651\":2,\"1654\":2,\"1655\":1,\"1661\":12,\"1667\":1,\"1670\":1,\"1671\":1,\"1672\":2,\"1673\":5,\"1677\":1,\"1680\":4,\"1682\":3,\"1705\":1,\"1709\":11,\"1714\":2,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1813\":1,\"1814\":1,\"1818\":1,\"1820\":1,\"1822\":2,\"1823\":1,\"1831\":2,\"1836\":2,\"1838\":1,\"1839\":1,\"1843\":4,\"1844\":1,\"1846\":1,\"1853\":1,\"1855\":4,\"1856\":1,\"1857\":1,\"1858\":1,\"1863\":1,\"1865\":2,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":1,\"1883\":1,\"1890\":1,\"1891\":1,\"1898\":1,\"1901\":1,\"1903\":1,\"1906\":2,\"1908\":2,\"1909\":1,\"1918\":1,\"1922\":1,\"1926\":1,\"1933\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1949\":1,\"1950\":1,\"1952\":1,\"1954\":1,\"1956\":1,\"1961\":2,\"1962\":2,\"1963\":1,\"1966\":2,\"1968\":2,\"1969\":1,\"1970\":2,\"1990\":1,\"1993\":3,\"1996\":1,\"2014\":1,\"2022\":2,\"2027\":1,\"2028\":1,\"2031\":1,\"2033\":2,\"2047\":1,\"2048\":1}}],[\"v1\",{\"1\":{\"1221\":5}}],[\"v0\",{\"1\":{\"911\":2}}],[\"v2\",{\"1\":{\"805\":1,\"1221\":5}}],[\"vite\",{\"0\":{\"2278\":1},\"2\":{\"2280\":1}}],[\"visualvm\",{\"1\":{\"1267\":1}}],[\"vision\",{\"1\":{\"798\":1}}],[\"visited\",{\"1\":{\"398\":3,\"399\":3,\"958\":3}}],[\"virtual\",{\"1\":{\"1263\":1}}],[\"viridis\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"590\":1,\"895\":1}}],[\"vikor法通过对多个备选方案的评价\",{\"1\":{\"772\":1}}],[\"view\",{\"1\":{\"680\":1}}],[\"v为背包容量\",{\"1\":{\"408\":1}}],[\"vehicle\",{\"1\":{\"1473\":3,\"1501\":2,\"1516\":4}}],[\"version\",{\"1\":{\"2000\":1,\"2001\":1}}],[\"version=\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"version>\",{\"1\":{\"1851\":2,\"1858\":1,\"1920\":2,\"1924\":2}}],[\"verifyequal\",{\"1\":{\"1185\":1}}],[\"vertex\",{\"1\":{\"953\":1}}],[\"vecsum\",{\"1\":{\"1155\":1}}],[\"vector<>\",{\"1\":{\"1737\":1}}],[\"vector<string>\",{\"1\":{\"1737\":1}}],[\"vector<e>\",{\"1\":{\"1737\":1}}],[\"vectorizer\",{\"1\":{\"589\":2}}],[\"vector\",{\"0\":{\"502\":1},\"1\":{\"530\":1,\"531\":1,\"593\":2,\"1735\":1,\"1737\":4,\"1742\":1,\"1770\":1,\"1772\":1,\"1776\":1,\"1778\":1}}],[\"ve\",{\"1\":{\"406\":1}}],[\"ve^2\",{\"1\":{\"397\":1}}],[\"v\",{\"1\":{\"389\":17,\"391\":1,\"392\":2,\"396\":5,\"398\":20,\"399\":20,\"403\":1,\"406\":2,\"408\":4,\"409\":3,\"872\":1,\"958\":7,\"959\":10,\"964\":6,\"965\":13,\"1040\":1,\"1221\":3,\"1233\":2,\"1516\":2,\"1798\":1,\"1836\":1}}],[\"vscode配置latex环境需要安装\",{\"1\":{\"1104\":1}}],[\"vscode配置latex环境\",{\"0\":{\"1104\":1}}],[\"vs\",{\"0\":{\"1377\":2,\"1431\":1},\"1\":{\"246\":1}}],[\"vaes\",{\"1\":{\"598\":1}}],[\"varargout\",{\"1\":{\"1178\":1}}],[\"varargin\",{\"1\":{\"1178\":3}}],[\"varvalue\",{\"1\":{\"700\":1}}],[\"vars\",{\"1\":{\"700\":6}}],[\"var\",{\"1\":{\"480\":2,\"1229\":2}}],[\"variational\",{\"1\":{\"598\":1}}],[\"variance\",{\"1\":{\"480\":2,\"619\":4}}],[\"variances\",{\"1\":{\"480\":2}}],[\"variables\",{\"0\":{\"1301\":1,\"1302\":1,\"1303\":1}}],[\"variablename\",{\"1\":{\"1295\":1}}],[\"variable\",{\"0\":{\"562\":1},\"1\":{\"183\":1,\"1162\":4}}],[\"validateage\",{\"1\":{\"1906\":2}}],[\"validation\",{\"1\":{\"533\":1,\"608\":1,\"610\":1}}],[\"valid\",{\"1\":{\"1418\":2,\"1428\":1}}],[\"val\",{\"1\":{\"1183\":2,\"1218\":6,\"1219\":3,\"1229\":4}}],[\"vals\",{\"1\":{\"428\":3,\"1230\":2}}],[\"value是private\",{\"1\":{\"1309\":1}}],[\"valueof\",{\"1\":{\"1298\":2,\"1609\":1,\"1610\":2,\"1699\":1,\"1701\":1,\"1702\":1,\"1703\":1,\"1704\":3,\"1705\":5}}],[\"value2\",{\"1\":{\"1162\":2}}],[\"value1\",{\"1\":{\"1162\":2}}],[\"value=5\",{\"1\":{\"458\":1}}],[\"value\",{\"1\":{\"185\":2,\"188\":8,\"189\":8,\"190\":8,\"191\":4,\"225\":2,\"384\":1,\"428\":1,\"434\":2,\"460\":1,\"479\":3,\"481\":1,\"483\":3,\"643\":1,\"941\":2,\"1217\":2,\"1276\":2,\"1292\":1,\"1295\":1,\"1308\":1,\"1309\":1,\"1338\":1,\"1392\":1,\"1396\":2,\"1402\":1,\"1642\":1,\"1728\":1,\"1796\":2,\"1797\":1,\"1798\":2,\"1801\":4,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1829\":1,\"1836\":1,\"1844\":4,\"1846\":2,\"1995\":1}}],[\"valuesource\",{\"1\":{\"1857\":2}}],[\"values\",{\"1\":{\"172\":3,\"659\":1,\"1608\":1,\"1609\":1,\"1610\":2,\"1612\":1,\"1798\":1,\"1981\":1}}],[\"逻辑结构的分类\",{\"1\":{\"2153\":1}}],[\"逻辑分组\",{\"1\":{\"1599\":1}}],[\"逻辑返回不同的动物对象\",{\"1\":{\"1541\":1}}],[\"逻辑判断等\",{\"1\":{\"1310\":1}}],[\"逻辑非\",{\"1\":{\"1148\":1,\"1314\":1}}],[\"逻辑或运算符\",{\"1\":{\"1412\":1}}],[\"逻辑或\",{\"1\":{\"1148\":1,\"1314\":1}}],[\"逻辑与\",{\"1\":{\"1148\":1,\"1314\":1}}],[\"逻辑值1或0\",{\"1\":{\"1127\":1}}],[\"逻辑类型\",{\"1\":{\"1127\":1}}],[\"逻辑回归是用于二分类问题的线性模型\",{\"1\":{\"601\":1}}],[\"逻辑回归是一种用于二分类问题的线性模型\",{\"1\":{\"577\":1}}],[\"逻辑回归\",{\"0\":{\"577\":1,\"601\":1},\"1\":{\"530\":1,\"593\":1}}],[\"逻辑回归等\",{\"1\":{\"471\":1}}],[\"逻辑错误\",{\"1\":{\"245\":2}}],[\"逻辑运算\",{\"1\":{\"1273\":1}}],[\"逻辑运算符用于执行布尔逻辑操作\",{\"1\":{\"1314\":1}}],[\"逻辑运算符用于执行逻辑运算\",{\"1\":{\"1148\":1}}],[\"逻辑运算符\",{\"0\":{\"195\":1,\"1148\":1,\"1314\":1},\"1\":{\"1145\":1,\"1152\":1}}],[\"逻辑运算等\",{\"1\":{\"192\":1}}],[\"运算规则和异常处理机制\",{\"1\":{\"2154\":1}}],[\"运算\",{\"1\":{\"1457\":1}}],[\"运算符使用\",{\"0\":{\"1152\":1}}],[\"运算符分为多种类型\",{\"1\":{\"1145\":1}}],[\"运算符\",{\"0\":{\"1145\":1,\"1310\":1},\"1\":{\"198\":2,\"199\":2,\"1146\":1,\"1147\":1,\"1148\":1,\"1149\":1,\"1150\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1315\":1}}],[\"运算符用于执行各种操作\",{\"1\":{\"192\":1}}],[\"运算符合并字典\",{\"1\":{\"174\":1}}],[\"运输成本因仓库和客户的不同而异\",{\"1\":{\"717\":1}}],[\"运输和物流问题\",{\"1\":{\"716\":1}}],[\"运输问题\",{\"1\":{\"706\":1,\"716\":1,\"717\":1}}],[\"运行\",{\"1\":{\"1964\":1}}],[\"运行和管理测试用例\",{\"1\":{\"1859\":1}}],[\"运行测试\",{\"0\":{\"1854\":1}}],[\"运行时系统\",{\"1\":{\"1900\":1}}],[\"运行时异常\",{\"1\":{\"1895\":1}}],[\"运行时处理等\",{\"1\":{\"1842\":1}}],[\"运行时多态\",{\"1\":{\"1526\":1}}],[\"运行时数据区\",{\"1\":{\"1265\":1}}],[\"运行时错误\",{\"1\":{\"245\":1}}],[\"运行这个脚本时\",{\"1\":{\"1181\":1}}],[\"运行该代码\",{\"1\":{\"928\":1}}],[\"运行代码后\",{\"1\":{\"651\":1}}],[\"运行代码\",{\"0\":{\"644\":1}}],[\"运行遗传算法\",{\"1\":{\"434\":1}}],[\"运行上述代码后\",{\"1\":{\"430\":1,\"436\":1,\"644\":1}}],[\"运行结果\",{\"0\":{\"430\":1,\"436\":1,\"651\":1,\"682\":1,\"690\":1,\"1663\":1}}],[\"运行模拟退火算法\",{\"1\":{\"428\":1}}],[\"导数和积分\",{\"0\":{\"2249\":1}}],[\"导数和微分\",{\"0\":{\"2248\":1}}],[\"导数\",{\"0\":{\"2241\":1,\"2245\":1}}],[\"导言区即模板定义\",{\"1\":{\"1107\":1}}],[\"导言区可以留空\",{\"1\":{\"1107\":1}}],[\"导师不得担任本人指导研究生的答辩委员会委员\",{\"1\":{\"1038\":1}}],[\"导师或导师指导小组\",{\"1\":{\"1034\":1}}],[\"导致代码无法运行\",{\"1\":{\"245\":1}}],[\"导入文献\",{\"0\":{\"1084\":1}}],[\"导入\",{\"1\":{\"457\":1,\"458\":1,\"459\":1,\"460\":1}}],[\"导入必要的库\",{\"0\":{\"444\":1,\"622\":1,\"640\":1,\"658\":1}}],[\"导入整个模块\",{\"1\":{\"229\":1}}],[\"导入模块并给它起一个别名\",{\"1\":{\"229\":1}}],[\"导入模块中的特定函数\",{\"1\":{\"229\":1}}],[\"导入模块\",{\"0\":{\"229\":1}}],[\"调用默认方法\",{\"1\":{\"1993\":1}}],[\"调用数据库的本地客户端库\",{\"1\":{\"1986\":1}}],[\"调用转换为特定数据库的操作\",{\"1\":{\"1975\":1}}],[\"调用存储过程\",{\"1\":{\"1974\":1}}],[\"调用无参构造方法\",{\"1\":{\"1828\":1}}],[\"调用无返回值的方法\",{\"1\":{\"1336\":1}}],[\"调用另一个构造器\",{\"1\":{\"1713\":1}}],[\"调用它的\",{\"1\":{\"1682\":1}}],[\"调用私有方法\",{\"1\":{\"1651\":1}}],[\"调用接口的静态方法\",{\"1\":{\"1581\":1}}],[\"调用父类的\",{\"1\":{\"1714\":1}}],[\"调用父类的方法\",{\"1\":{\"1514\":1}}],[\"调用父类构造器\",{\"1\":{\"1714\":1}}],[\"调用父类构造函数\",{\"1\":{\"1504\":1,\"1512\":1}}],[\"调用父类方法\",{\"1\":{\"1504\":1}}],[\"调用静态方法\",{\"1\":{\"1344\":1,\"1993\":1}}],[\"调用有返回值的方法\",{\"1\":{\"1336\":1}}],[\"调用方法和访问字段\",{\"1\":{\"1634\":1}}],[\"调用方法\",{\"0\":{\"1336\":1,\"1830\":1},\"1\":{\"1645\":1,\"1655\":1,\"1659\":1,\"1825\":1,\"1830\":1}}],[\"调用\",{\"1\":{\"1177\":1,\"1348\":1,\"1758\":2}}],[\"调用匿名函数\",{\"1\":{\"1176\":1}}],[\"调用该函数\",{\"1\":{\"1173\":1,\"1178\":1}}],[\"调用示例\",{\"1\":{\"211\":1}}],[\"调研报告\",{\"1\":{\"1038\":1}}],[\"调查问卷\",{\"1\":{\"763\":1}}],[\"调度进程的执行\",{\"1\":{\"2192\":1}}],[\"调度\",{\"1\":{\"2189\":1}}],[\"调度问题等\",{\"1\":{\"426\":1}}],[\"调度问题等领域\",{\"1\":{\"420\":1}}],[\"调度等问题\",{\"1\":{\"408\":1}}],[\"调整对比度和滤波等方法增强图像\",{\"1\":{\"809\":1}}],[\"调整颜色通道等\",{\"1\":{\"804\":1}}],[\"调整\",{\"1\":{\"796\":1}}],[\"调整兰德指数\",{\"1\":{\"515\":1}}],[\"调整潜在收益\",{\"1\":{\"409\":1}}],[\"调整成本矩阵\",{\"1\":{\"409\":1}}],[\"调整假设和模型\",{\"1\":{\"381\":1}}],[\"调试\",{\"1\":{\"2209\":1}}],[\"调试程序\",{\"0\":{\"2057\":1}}],[\"调试和排查问题\",{\"1\":{\"1913\":1}}],[\"调试和测试是确保代码质量和正确性的关键步骤\",{\"1\":{\"244\":1}}],[\"调试和测试\",{\"0\":{\"244\":1,\"248\":1}}],[\"调试困难\",{\"1\":{\"1600\":1}}],[\"调试工具如mat\",{\"1\":{\"1269\":1}}],[\"调试时\",{\"1\":{\"1188\":1}}],[\"调试技巧\",{\"0\":{\"246\":1}}],[\"错误\",{\"0\":{\"244\":1},\"1\":{\"244\":1,\"1895\":1}}],[\"多做练习\",{\"1\":{\"2217\":1}}],[\"多进程的概念\",{\"1\":{\"2211\":1}}],[\"多媒体系统\",{\"0\":{\"2202\":1}}],[\"多处理机\",{\"0\":{\"2201\":1}}],[\"多用户以及分布式计算\",{\"1\":{\"2190\":1}}],[\"多任务\",{\"1\":{\"2190\":1}}],[\"多端解决方案\",{\"2\":{\"2146\":1}}],[\"多行文本输入框\",{\"1\":{\"2025\":1}}],[\"多行注释以\",{\"1\":{\"1282\":1}}],[\"多行注释\",{\"0\":{\"1282\":1},\"1\":{\"132\":1,\"1280\":1}}],[\"多地址\",{\"1\":{\"1933\":1}}],[\"多个\",{\"0\":{\"1901\":1}}],[\"多个方法具有相同的名称但参数不同\",{\"1\":{\"1709\":1}}],[\"多个静态代码块按照它们在类中定义的顺序依次执行\",{\"1\":{\"1547\":1}}],[\"多次调用结果应一致\",{\"1\":{\"1676\":1}}],[\"多线程的实现方式\",{\"0\":{\"1960\":1}}],[\"多线程编程是开发高性能和响应迅速应用程序的关键技术之一\",{\"1\":{\"1958\":1}}],[\"多线程服务器\",{\"1\":{\"1943\":1}}],[\"多线程支持\",{\"1\":{\"1892\":1}}],[\"多线程\",{\"0\":{\"1958\":1},\"1\":{\"1457\":1,\"1959\":1},\"2\":{\"2065\":1}}],[\"多继承\",{\"1\":{\"1259\":1}}],[\"多条曲线在同一图上\",{\"1\":{\"1210\":1}}],[\"多维数组\",{\"0\":{\"1358\":1},\"1\":{\"1154\":1}}],[\"多项式拟合等\",{\"1\":{\"939\":1}}],[\"多项式拟合通过一个多项式函数来逼近数据点\",{\"1\":{\"939\":1}}],[\"多项式拟合\",{\"0\":{\"942\":1},\"1\":{\"939\":1,\"942\":1,\"948\":1}}],[\"多项式插值通过一个多项式函数来拟合所有已知点\",{\"1\":{\"933\":1}}],[\"多项式插值\",{\"1\":{\"933\":1}}],[\"多项式回归通过引入特征的多项式变换来捕捉特征和目标变量之间的非线性关系\",{\"1\":{\"501\":1}}],[\"多项式回归\",{\"0\":{\"501\":1},\"1\":{\"504\":1,\"531\":1}}],[\"多项式回归是线性回归的扩展\",{\"1\":{\"494\":1}}],[\"多输出情况下的相对效率\",{\"1\":{\"771\":1}}],[\"多层次的复杂问题\",{\"1\":{\"766\":1}}],[\"多层感知器回归\",{\"1\":{\"593\":1}}],[\"多指标条件下\",{\"1\":{\"752\":1}}],[\"多目标粒子群优化等\",{\"1\":{\"841\":1}}],[\"多目标规划模型在工程\",{\"1\":{\"844\":1}}],[\"多目标规划模型的构建步骤\",{\"0\":{\"841\":1}}],[\"多目标规划模型的基本概念\",{\"0\":{\"840\":1}}],[\"多目标规划模型旨在在这些目标之间找到一个平衡点\",{\"1\":{\"839\":1}}],[\"多目标规划模型\",{\"0\":{\"839\":1},\"1\":{\"839\":1}}],[\"多目标规划问题涉及多个目标函数\",{\"1\":{\"710\":1}}],[\"多目标规划\",{\"0\":{\"710\":1}}],[\"多目标优化\",{\"1\":{\"701\":1}}],[\"多目标优化等\",{\"1\":{\"437\":1}}],[\"多视图表示\",{\"1\":{\"673\":1}}],[\"多边形网格\",{\"1\":{\"672\":1}}],[\"多样化应用\",{\"1\":{\"545\":1}}],[\"多类分类\",{\"1\":{\"530\":1}}],[\"多点交叉\",{\"1\":{\"432\":1}}],[\"多模态\",{\"1\":{\"417\":1}}],[\"多重背包问题\",{\"1\":{\"408\":1}}],[\"多态和抽象是\",{\"1\":{\"1716\":1}}],[\"多态和接口\",{\"1\":{\"1659\":1}}],[\"多态性的支持\",{\"1\":{\"1665\":1}}],[\"多态性等\",{\"1\":{\"1308\":1}}],[\"多态允许我们在运行时根据实际对象的类型调用适当的方法\",{\"1\":{\"1541\":1}}],[\"多态的应用\",{\"0\":{\"1541\":1}}],[\"多态也可以通过接口实现\",{\"1\":{\"1532\":1}}],[\"多态使得同一操作能够作用于不同的对象上\",{\"1\":{\"1525\":1}}],[\"多态主要有两种形式\",{\"1\":{\"1472\":1}}],[\"多态是指同一个方法在不同对象上会表现出不同的行为\",{\"1\":{\"1709\":1}}],[\"多态是指同一个方法在不同对象上表现出不同的行为\",{\"1\":{\"1472\":1}}],[\"多态是指不同类的对象可以通过相同的接口调用方法\",{\"1\":{\"242\":1}}],[\"多态\",{\"0\":{\"1472\":1,\"1525\":1},\"1\":{\"242\":1,\"1457\":1,\"1525\":1,\"1662\":1,\"1707\":1,\"1709\":1}}],[\"封装通常通过\",{\"1\":{\"1709\":1}}],[\"封装通过隐藏类的内部细节和提供公共接口来保护数据\",{\"1\":{\"1570\":1}}],[\"封装性\",{\"1\":{\"1599\":1}}],[\"封装的实践可以包括\",{\"1\":{\"1571\":1}}],[\"封装与多态\",{\"1\":{\"1570\":1}}],[\"封装与继承\",{\"1\":{\"1570\":1}}],[\"封装和抽象\",{\"1\":{\"1707\":1}}],[\"封装和继承可以结合使用\",{\"1\":{\"1570\":1}}],[\"封装和多态结合可以通过提供统一的接口来处理不同的对象\",{\"1\":{\"1570\":1}}],[\"封装和多态的使用\",{\"1\":{\"243\":1}}],[\"封装和多态\",{\"1\":{\"241\":1}}],[\"封装有助于保护数据不被外部随意修改\",{\"1\":{\"1564\":1}}],[\"封装涉及到以下几个方面\",{\"1\":{\"1564\":1}}],[\"封装使得对象的内部状态可以被保护\",{\"1\":{\"1563\":1}}],[\"封装在一个类中\",{\"1\":{\"1563\":1}}],[\"封装是将对象的属性和行为\",{\"1\":{\"1709\":1}}],[\"封装是将对象的属性和行为隐藏在类的内部\",{\"1\":{\"1471\":1}}],[\"封装是一种将数据和方法捆绑在一起\",{\"1\":{\"242\":1}}],[\"封装\",{\"0\":{\"1471\":1,\"1563\":1},\"1\":{\"242\":1,\"1457\":1,\"1563\":1,\"1653\":1,\"1659\":2,\"1662\":1,\"1696\":8,\"1709\":1,\"1716\":1}}],[\"继承了\",{\"1\":{\"1783\":1}}],[\"继承使用\",{\"1\":{\"1709\":1}}],[\"继承关系的根源\",{\"1\":{\"1665\":1}}],[\"继承自book\",{\"1\":{\"1661\":2}}],[\"继承自\",{\"1\":{\"1511\":1,\"1784\":1,\"1799\":1,\"1909\":1}}],[\"继承父类的类\",{\"1\":{\"1508\":1}}],[\"继承的类被称为父类或基类\",{\"1\":{\"1470\":1}}],[\"继承的类被称为子类或派生类\",{\"1\":{\"1470\":1}}],[\"继承是面向对象编程的一种机制\",{\"1\":{\"1709\":1}}],[\"继承是面向对象编程的一个核心概念\",{\"1\":{\"1470\":1}}],[\"继承是\",{\"1\":{\"1516\":1}}],[\"继承是一种代码重用的手段\",{\"1\":{\"1507\":1}}],[\"继承是一种机制\",{\"1\":{\"1507\":1}}],[\"继承是一种创建新类的方式\",{\"1\":{\"242\":1}}],[\"继承\",{\"0\":{\"1470\":1,\"1507\":1,\"1961\":1},\"1\":{\"241\":1,\"242\":1,\"243\":1,\"1457\":1,\"1653\":1,\"1659\":1,\"1662\":1,\"1707\":1,\"1709\":1,\"1716\":1,\"1960\":1}}],[\"还实现了\",{\"1\":{\"1750\":1,\"1761\":1}}],[\"还提供了一个更加强大的迭代器接口\",{\"1\":{\"1821\":1}}],[\"还提供了\",{\"1\":{\"1742\":1}}],[\"还严格规定了各个基本数据类型的长度\",{\"1\":{\"1259\":1}}],[\"还支持许多高级绘图功能\",{\"1\":{\"1212\":1}}],[\"还包含一些特殊字符\",{\"1\":{\"1151\":1}}],[\"还需要考虑切割时间\",{\"1\":{\"701\":1}}],[\"还可以应用于各种需要预测状态转移的场景\",{\"1\":{\"652\":1}}],[\"还可以通过dp数组来恢复出解的具体方案\",{\"1\":{\"408\":1}}],[\"还可以包含可执行的代码\",{\"1\":{\"228\":1}}],[\"还有使用\",{\"1\":{\"1960\":1}}],[\"还有一种重要指令叫做环境\",{\"1\":{\"1106\":1}}],[\"还有一些常用的第三方模块\",{\"1\":{\"236\":1}}],[\"还有许多背包问题的变种\",{\"1\":{\"408\":1}}],[\"除非\",{\"1\":{\"1900\":1,\"1903\":1}}],[\"除非子类也是抽象类\",{\"1\":{\"1558\":1}}],[\"除后赋值\",{\"1\":{\"1312\":1}}],[\"除了输入数据之外\",{\"1\":{\"2164\":1}}],[\"除了\",{\"1\":{\"1821\":1}}],[\"除了自动装箱和拆箱\",{\"1\":{\"1701\":1}}],[\"除了行结束符\",{\"1\":{\"1412\":1}}],[\"除了public和private等访问修饰符外\",{\"1\":{\"1347\":1}}],[\"除了java提供的内置数据结构\",{\"1\":{\"1733\":1}}],[\"除了java\",{\"1\":{\"1259\":1}}],[\"除了内置模块\",{\"1\":{\"236\":1}}],[\"除源点和汇点外\",{\"1\":{\"396\":1}}],[\"除零错误\",{\"1\":{\"245\":1}}],[\"除法和幂运算\",{\"1\":{\"1216\":1}}],[\"除法赋值\",{\"1\":{\"197\":1}}],[\"除法\",{\"1\":{\"193\":1,\"1216\":1,\"1311\":1}}],[\"列出目录中的文件和子目录\",{\"1\":{\"1439\":1}}],[\"列出当前目录中的所有matlab文件\",{\"1\":{\"1126\":1}}],[\"列出当前目录中的所有文件\",{\"1\":{\"1126\":1}}],[\"列出当前目录下的文件和目录\",{\"1\":{\"232\":1}}],[\"列出当前变量\",{\"1\":{\"1125\":2}}],[\"列向量的第二个元素\",{\"1\":{\"1155\":1}}],[\"列向量\",{\"1\":{\"1155\":1,\"1221\":1}}],[\"列的元素\",{\"1\":{\"1138\":1,\"1139\":1,\"1144\":2}}],[\"列入培养计划\",{\"1\":{\"1031\":1}}],[\"列联表分析是一种用于分析两个或多个分类变量之间关系的统计方法\",{\"1\":{\"468\":1}}],[\"列联表分析\",{\"0\":{\"468\":1,\"481\":1},\"1\":{\"477\":1}}],[\"列减法\",{\"1\":{\"409\":1}}],[\"列表大小\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"列表转换为集合\",{\"1\":{\"190\":1}}],[\"列表转换为元组\",{\"1\":{\"189\":1}}],[\"列表是一种非常灵活和强大的数据结构\",{\"1\":{\"148\":1}}],[\"列表解析\",{\"1\":{\"148\":1}}],[\"列表推导式\",{\"0\":{\"221\":1},\"1\":{\"148\":1}}],[\"列表的键值对转换为字典\",{\"1\":{\"191\":1}}],[\"列表的基本用法和功能\",{\"1\":{\"148\":1}}],[\"列表的重复\",{\"1\":{\"148\":1}}],[\"列表的合并\",{\"1\":{\"148\":1}}],[\"列表的高级操作\",{\"0\":{\"148\":1}}],[\"列表的一些基本操作和用法\",{\"1\":{\"140\":1}}],[\"列表切片\",{\"0\":{\"144\":1},\"1\":{\"219\":1}}],[\"列表中的元素可以是任意类型\",{\"1\":{\"140\":1}}],[\"列表\",{\"0\":{\"20\":1,\"140\":1},\"1\":{\"136\":1,\"140\":2,\"184\":1,\"189\":1,\"190\":1,\"2025\":1}}],[\"卸载一个模块\",{\"1\":{\"230\":1}}],[\"类表示与\",{\"1\":{\"1940\":1}}],[\"类表示一个统一资源定位符\",{\"1\":{\"1940\":1}}],[\"类用于加密和解密数据\",{\"1\":{\"2045\":1}}],[\"类用于生成和验证数字签名\",{\"1\":{\"2045\":1}}],[\"类用于生成对称加密密钥\",{\"1\":{\"2045\":1}}],[\"类用于计算消息的摘要\",{\"1\":{\"2045\":1}}],[\"类用于读取或写入数据到指定的\",{\"1\":{\"1942\":1}}],[\"类用于在指定的端口上创建一个\",{\"1\":{\"1939\":1}}],[\"类用于创建一个\",{\"1\":{\"1938\":1}}],[\"类用于创建一个服务器端\",{\"1\":{\"1936\":1}}],[\"类用于创建一个客户端\",{\"1\":{\"1935\":1}}],[\"类用于实现\",{\"1\":{\"1934\":2}}],[\"类用于表示\",{\"1\":{\"1932\":1}}],[\"类处理\",{\"0\":{\"1932\":1}}],[\"类有两个主要的子类\",{\"1\":{\"1895\":1}}],[\"类有三个\",{\"1\":{\"1523\":1}}],[\"类派生的\",{\"1\":{\"1895\":1}}],[\"类派生出子类并重写\",{\"1\":{\"1259\":1}}],[\"类示例\",{\"1\":{\"1876\":1}}],[\"类需要实现\",{\"1\":{\"1876\":1}}],[\"类在\",{\"1\":{\"1776\":1}}],[\"类不仅可以作为\",{\"1\":{\"1761\":1}}],[\"类似\",{\"1\":{\"1737\":1}}],[\"类似于sql查询语句\",{\"1\":{\"1992\":1}}],[\"类似于定义接口\",{\"1\":{\"1844\":1}}],[\"类似于生成器的行为\",{\"1\":{\"1817\":1}}],[\"类似于c语言的printf\",{\"1\":{\"1426\":1}}],[\"类似于c的结构\",{\"1\":{\"1127\":1}}],[\"类似于adobe\",{\"1\":{\"794\":1}}],[\"类似于logistic曲线\",{\"1\":{\"636\":1}}],[\"类与对象\",{\"0\":{\"1710\":1}}],[\"类通过\",{\"1\":{\"1709\":1}}],[\"类作为栈的实现\",{\"1\":{\"1770\":1}}],[\"类作为\",{\"1\":{\"1678\":1}}],[\"类提供了一组基本的方法\",{\"1\":{\"1665\":1}}],[\"类都默认继承自\",{\"1\":{\"1665\":1}}],[\"类都有一个对应的\",{\"1\":{\"1634\":1}}],[\"类及其子类不需要处理\",{\"1\":{\"1895\":1}}],[\"类及其子类\",{\"1\":{\"1659\":1}}],[\"类成员对定义它的类可见\",{\"1\":{\"1623\":1}}],[\"类成员对同一包中的类及其子类可见\",{\"1\":{\"1623\":1}}],[\"类使用\",{\"1\":{\"1576\":1,\"1710\":1}}],[\"类实现了接口并可以使用这个默认方法\",{\"1\":{\"1579\":1}}],[\"类实现了\",{\"1\":{\"1561\":1,\"1577\":1}}],[\"类并实现了\",{\"1\":{\"1554\":1}}],[\"类重写了\",{\"1\":{\"1520\":1}}],[\"类可见\",{\"1\":{\"1506\":1}}],[\"类可以用来创建一个\",{\"1\":{\"1941\":1}}],[\"类可以实现这些接口\",{\"1\":{\"1532\":1}}],[\"类可以实现接口\",{\"1\":{\"1498\":1}}],[\"类可以通过\",{\"1\":{\"1474\":1}}],[\"类修饰符用于描述类的性质和行为\",{\"1\":{\"1484\":1}}],[\"类修饰符\",{\"1\":{\"1478\":1}}],[\"类源文件声明\",{\"0\":{\"1477\":1}}],[\"类中的\",{\"1\":{\"1475\":1}}],[\"类中使用\",{\"1\":{\"1471\":1}}],[\"类继承自\",{\"1\":{\"1772\":1}}],[\"类继承了\",{\"1\":{\"1554\":1,\"1709\":1}}],[\"类继承\",{\"1\":{\"1470\":1}}],[\"类创建对象\",{\"1\":{\"1469\":1}}],[\"类定义了对象的属性\",{\"1\":{\"1468\":1}}],[\"类读取用户输入\",{\"0\":{\"1421\":1}}],[\"类的超类\",{\"1\":{\"2037\":1}}],[\"类的版本必须兼容\",{\"1\":{\"1866\":1}}],[\"类的同步开销\",{\"1\":{\"1776\":1}}],[\"类的使用示例\",{\"0\":{\"1774\":1}}],[\"类的使用场景\",{\"0\":{\"1397\":1}}],[\"类的常用方法\",{\"0\":{\"1773\":1,\"1951\":1},\"1\":{\"1951\":2}}],[\"类的基本概念\",{\"0\":{\"1771\":1}}],[\"类的组成包括成员变量\",{\"1\":{\"1710\":1}}],[\"类的作用\",{\"1\":{\"1664\":1}}],[\"类的属性和方法通常被设置为\",{\"1\":{\"1564\":1}}],[\"类的引用变量\",{\"1\":{\"1530\":1}}],[\"类的\",{\"1\":{\"1520\":1,\"1709\":1,\"1863\":2,\"1953\":1}}],[\"类的方法可以提高代码的可读性\",{\"1\":{\"1674\":1}}],[\"类的方法\",{\"1\":{\"1511\":1,\"1634\":1}}],[\"类的方法转换类型\",{\"1\":{\"1384\":1}}],[\"类的类名是\",{\"1\":{\"1477\":1}}],[\"类的类名保持一致\",{\"1\":{\"1477\":1}}],[\"类的一个静态实例\",{\"1\":{\"1424\":1}}],[\"类的子类\",{\"0\":{\"1383\":1},\"1\":{\"1869\":1,\"1872\":1}}],[\"类的成员和方法\",{\"1\":{\"1283\":1}}],[\"类概述\",{\"0\":{\"1381\":1,\"1389\":1}}],[\"类变量也会有默认值\",{\"1\":{\"1303\":1}}],[\"类变量的作用域是整个类\",{\"1\":{\"1303\":1}}],[\"类变量使用\",{\"1\":{\"1303\":1}}],[\"类变量\",{\"0\":{\"1303\":1},\"1\":{\"1278\":1}}],[\"类名的首字母应该大写\",{\"1\":{\"1275\":1}}],[\"类名\",{\"1\":{\"1275\":1,\"1276\":1}}],[\"类是经典的栈实现\",{\"1\":{\"1779\":1}}],[\"类是同步的\",{\"1\":{\"1772\":1}}],[\"类是\",{\"1\":{\"1664\":1}}],[\"类是所有类的父类\",{\"1\":{\"1664\":1}}],[\"类是对象的模板或蓝图\",{\"1\":{\"1497\":1,\"1710\":1}}],[\"类是对象的蓝图或模板\",{\"1\":{\"242\":1}}],[\"类是对现实世界中对象的抽象\",{\"1\":{\"1468\":1}}],[\"类是一个模板\",{\"1\":{\"1273\":1}}],[\"类加载\",{\"1\":{\"1266\":1}}],[\"类加载器可以从文件系统\",{\"1\":{\"1265\":1}}],[\"类加载器\",{\"1\":{\"1265\":1}}],[\"类已经实现了\",{\"1\":{\"1259\":1}}],[\"类来捕获所有异常\",{\"1\":{\"1910\":1}}],[\"类来实现\",{\"1\":{\"1876\":1,\"1937\":1}}],[\"类来创建\",{\"1\":{\"1259\":1}}],[\"类来执行主成分分析\",{\"1\":{\"619\":1}}],[\"类或字段已过时\",{\"1\":{\"1843\":1}}],[\"类或成员对同一包中的其他类可见\",{\"1\":{\"1623\":1}}],[\"类或成员对所有其他类可见\",{\"1\":{\"1623\":1}}],[\"类或其子\",{\"1\":{\"1259\":1}}],[\"类或单元测试\",{\"1\":{\"1180\":1}}],[\"类别\",{\"1\":{\"1203\":1}}],[\"类别标签\",{\"1\":{\"575\":1}}],[\"类和\",{\"1\":{\"1779\":1,\"1958\":1}}],[\"类和对象\",{\"1\":{\"1662\":1,\"1707\":1,\"2209\":1}}],[\"类和继承\",{\"1\":{\"1659\":1}}],[\"类和方法\",{\"1\":{\"1485\":1}}],[\"类和单元测试文件能够显著提升你的\",{\"1\":{\"1188\":1}}],[\"类和变量\",{\"1\":{\"228\":1}}],[\"类文件中包含类的定义\",{\"1\":{\"1183\":1}}],[\"类间方差大于类内方差的情况下表现较好\",{\"1\":{\"520\":1}}],[\"类\",{\"0\":{\"1368\":1,\"1371\":1,\"1374\":1,\"1401\":1,\"1402\":1,\"1414\":1,\"1415\":1,\"1416\":1,\"1439\":1,\"1468\":1,\"1746\":1,\"1749\":1,\"1753\":1,\"1763\":1,\"1765\":1,\"1785\":1,\"1787\":1,\"1789\":1,\"1791\":1,\"1800\":1,\"1802\":1,\"1804\":1,\"1806\":1,\"1808\":1,\"1916\":1,\"1941\":1,\"1942\":1,\"1961\":1,\"1969\":1,\"1995\":1},\"1\":{\"242\":1,\"1259\":2,\"1273\":1,\"1307\":2,\"1308\":3,\"1429\":1,\"1441\":1,\"1470\":1,\"1477\":2,\"1480\":1,\"1482\":1,\"1486\":1,\"1511\":1,\"1653\":1,\"1664\":1,\"1665\":1,\"1679\":1,\"1710\":1,\"1770\":1,\"1779\":1,\"1828\":1,\"1845\":1,\"1875\":1,\"1909\":1,\"1940\":1,\"1946\":2,\"1957\":1,\"1960\":1,\"1961\":1,\"2037\":6,\"2038\":7,\"2039\":4,\"2040\":5,\"2041\":8,\"2043\":3}}],[\"类型擦除\",{\"1\":{\"1840\":1}}],[\"类型安全性和可读性\",{\"1\":{\"1840\":1}}],[\"类型安全\",{\"1\":{\"1833\":1,\"1837\":1}}],[\"类型的数据\",{\"1\":{\"1696\":8}}],[\"类型的引用可以指向任何实现了该接口的对象\",{\"1\":{\"1533\":1}}],[\"类型或顺序必须不同\",{\"1\":{\"1522\":1}}],[\"类型不匹配\",{\"1\":{\"1365\":1}}],[\"类型和名称成对出现\",{\"1\":{\"1337\":1}}],[\"类型转换为\",{\"1\":{\"1699\":1,\"1704\":2}}],[\"类型转换的注意事项\",{\"0\":{\"1299\":1}}],[\"类型转换\",{\"0\":{\"1293\":1},\"1\":{\"1534\":1}}],[\"类型就不能被改变了\",{\"1\":{\"1291\":1}}],[\"类型默认值\",{\"0\":{\"1290\":1}}],[\"类型会根据赋值自动确定\",{\"1\":{\"179\":1}}],[\"类型使用\",{\"1\":{\"137\":1}}],[\"类型\",{\"1\":{\"135\":1,\"137\":1,\"1527\":1,\"1700\":1,\"1986\":4}}],[\"保护系统资源和数据安全\",{\"1\":{\"2192\":1}}],[\"保护数据\",{\"1\":{\"1569\":1}}],[\"保证用户体验\",{\"1\":{\"2215\":1}}],[\"保证元素按照自然顺序或指定的比较器顺序排序\",{\"1\":{\"1789\":1}}],[\"保证在同一时刻只能有一个线程执行该方法\",{\"1\":{\"1308\":1}}],[\"保持文档与代码一致\",{\"1\":{\"2003\":1}}],[\"保持包结构清晰\",{\"1\":{\"1631\":1}}],[\"保持代码清晰\",{\"1\":{\"1452\":1}}],[\"保持函数的状态以供下次迭代\",{\"1\":{\"225\":1}}],[\"保存当前图为\",{\"1\":{\"1211\":1}}],[\"保存变量\",{\"1\":{\"1195\":1}}],[\"保存为\",{\"1\":{\"1195\":2}}],[\"保存为文本文件\",{\"1\":{\"1195\":1}}],[\"保存数据到文件\",{\"0\":{\"1195\":1}}],[\"保存上述代码为\",{\"1\":{\"1172\":1}}],[\"保存重建后的音频信号\",{\"1\":{\"948\":1}}],[\"保存结果\",{\"1\":{\"825\":1,\"826\":1,\"827\":1}}],[\"保存二值化后的图像\",{\"1\":{\"824\":1}}],[\"保存均衡化后的图像\",{\"1\":{\"823\":1}}],[\"保存旋转后的图像\",{\"1\":{\"822\":1}}],[\"保存缩放后的图像\",{\"1\":{\"821\":1}}],[\"保存边缘检测结果\",{\"1\":{\"820\":1}}],[\"保存模糊后的图像\",{\"1\":{\"819\":1}}],[\"保存灰度图像\",{\"1\":{\"818\":1}}],[\"保存\",{\"1\":{\"801\":1}}],[\"保留元素的插入顺序\",{\"1\":{\"1738\":1}}],[\"保留插入顺序或访问顺序\",{\"1\":{\"1740\":1}}],[\"保留插入顺序\",{\"1\":{\"1726\":1,\"1728\":1}}],[\"保留前两个主成分\",{\"1\":{\"619\":1}}],[\"保留最大方差的维度\",{\"1\":{\"614\":1}}],[\"保留字即关键字\",{\"1\":{\"133\":1}}],[\"用指定的元素替换指定索引位置的元素\",{\"1\":{\"1745\":1}}],[\"用途\",{\"1\":{\"1549\":1,\"1667\":1,\"1668\":1,\"1670\":1,\"1671\":1,\"1673\":1}}],[\"用法\",{\"1\":{\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1485\":1,\"1486\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1492\":1,\"1494\":1}}],[\"用给定的替换字符串替换所有匹配的子字符串\",{\"1\":{\"1416\":1}}],[\"用逗号分隔多个参数\",{\"1\":{\"1335\":1}}],[\"用差分近似代替偏导数\",{\"1\":{\"883\":1}}],[\"用户界面设计\",{\"1\":{\"2215\":1}}],[\"用户管理\",{\"1\":{\"2192\":1}}],[\"用户名和密码\",{\"1\":{\"1979\":1}}],[\"用户数据报协议\",{\"1\":{\"1930\":1,\"1937\":1}}],[\"用户可以创建图书对象\",{\"1\":{\"1660\":1}}],[\"用户输入输出\",{\"0\":{\"1427\":1},\"1\":{\"1420\":1}}],[\"用户既可以用它来快速编写简单的程序\",{\"1\":{\"1120\":1}}],[\"用户满意度等指标\",{\"1\":{\"761\":1}}],[\"用户将成对的输入和预期输出提供给算法\",{\"1\":{\"368\":1}}],[\"用python实现一个简单的神经网络预测模型\",{\"0\":{\"657\":1}}],[\"用新生成的子代替换种群中的老个体\",{\"1\":{\"433\":1}}],[\"用最少的直线\",{\"1\":{\"409\":1}}],[\"用\",{\"1\":{\"225\":1,\"1117\":1,\"1709\":2}}],[\"用于决定什么时候由\",{\"1\":{\"2160\":1}}],[\"用于完成特定的任务或计算\",{\"1\":{\"2156\":1}}],[\"用于并发编程\",{\"1\":{\"2044\":1}}],[\"用于格式化和解析日期时间\",{\"1\":{\"2041\":1}}],[\"用于格式化和解析日期时间字符串\",{\"1\":{\"1408\":1}}],[\"用于访问网络资源\",{\"1\":{\"2040\":1}}],[\"用于访问父类的字段\",{\"1\":{\"1504\":1}}],[\"用于高效读取和写入字符文件\",{\"1\":{\"2039\":1}}],[\"用于高效地写入字节数据\",{\"1\":{\"1437\":1}}],[\"用于高效地写入字符数据\",{\"1\":{\"1434\":1}}],[\"用于高效地读取字节数据\",{\"1\":{\"1437\":1}}],[\"用于高效地读取字符数据\",{\"1\":{\"1434\":1}}],[\"用于操作日期时间\",{\"1\":{\"2038\":1}}],[\"用于可变字符串的操作\",{\"1\":{\"2037\":1}}],[\"用于可视化数据点之间的层次关系\",{\"1\":{\"550\":1}}],[\"用于显示文本或图像\",{\"1\":{\"2025\":1}}],[\"用于显式地抛出一个异常\",{\"1\":{\"1905\":1}}],[\"用于显式地抛出异常\",{\"1\":{\"1453\":1}}],[\"用于构建复杂的用户界面\",{\"1\":{\"2024\":1}}],[\"用于组织和布局组件\",{\"1\":{\"2021\":1}}],[\"用于组织代码逻辑\",{\"1\":{\"1544\":1}}],[\"用于连接和操作数据库的标准\",{\"1\":{\"1973\":1}}],[\"用于连续值的预测\",{\"1\":{\"593\":1}}],[\"用于匹配和查找字符串中的模式\",{\"1\":{\"1949\":1}}],[\"用于匹配和操作字符串\",{\"1\":{\"1410\":1}}],[\"用于接收客户端的请求\",{\"1\":{\"1939\":1}}],[\"用于发送和接收数据报文\",{\"1\":{\"1938\":1}}],[\"用于发送http请求\",{\"1\":{\"237\":1}}],[\"用于捕获异常\",{\"1\":{\"1897\":1}}],[\"用于捕获和处理异常\",{\"1\":{\"1453\":1}}],[\"用于包裹可能会引发异常的代码块\",{\"1\":{\"1897\":1}}],[\"用于包装double类型的值\",{\"1\":{\"1383\":1}}],[\"用于包装float类型的值\",{\"1\":{\"1383\":1}}],[\"用于包装long类型的值\",{\"1\":{\"1383\":1}}],[\"用于包装int类型的值\",{\"1\":{\"1383\":1}}],[\"用于包装short类型的值\",{\"1\":{\"1383\":1}}],[\"用于包装byte类型的值\",{\"1\":{\"1383\":1}}],[\"用于通过\",{\"1\":{\"1882\":2}}],[\"用于通过沿一条路径移动一个截面曲线\",{\"1\":{\"678\":1}}],[\"用于管理文件的存储\",{\"1\":{\"2189\":1}}],[\"用于管理线程池\",{\"1\":{\"1971\":1}}],[\"用于管理线程的生命周期和行为\",{\"1\":{\"1965\":1}}],[\"用于管理多个通道的\",{\"1\":{\"1881\":1}}],[\"用于管理图书集合\",{\"1\":{\"1661\":1}}],[\"用于标识网络中的计算机\",{\"1\":{\"1930\":1}}],[\"用于标识类的版本\",{\"1\":{\"1862\":1}}],[\"用于标明参数序号\",{\"1\":{\"1109\":1}}],[\"用于抑制使用泛型可变参数方法的警告\",{\"1\":{\"1843\":1}}],[\"用于抑制编译器警告\",{\"1\":{\"1843\":1}}],[\"用于\",{\"1\":{\"1832\":1}}],[\"用于遍历集合元素\",{\"1\":{\"1824\":1}}],[\"用于遍历集合中的元素\",{\"1\":{\"1783\":1}}],[\"用于遍历和操作集合中的元素\",{\"1\":{\"1813\":1}}],[\"用于返回一个\",{\"1\":{\"1812\":1}}],[\"用于检查表达式中的括号是否正确匹配\",{\"1\":{\"1775\":1}}],[\"用于检查其他条件\",{\"1\":{\"1321\":1}}],[\"用于中缀表达式到后缀表达式的转换\",{\"1\":{\"1775\":1}}],[\"用于按特定顺序保存一组待处理元素\",{\"1\":{\"1735\":1}}],[\"用于指定输入参数\",{\"1\":{\"1685\":1}}],[\"用于指定包的位置\",{\"1\":{\"1627\":1}}],[\"用于映射到数据库中的表\",{\"1\":{\"1681\":1}}],[\"用于线程同步和通信\",{\"1\":{\"1678\":1}}],[\"用于线程间的通信和同步\",{\"1\":{\"1673\":1}}],[\"用于对象的序列化和反序列化\",{\"1\":{\"2039\":1}}],[\"用于对象的比较和在哈希结构中的使用\",{\"1\":{\"1678\":1}}],[\"用于对字符串列表进行排序\",{\"1\":{\"1689\":1}}],[\"用于对静态成员进行初始化\",{\"1\":{\"1547\":1}}],[\"用于清理资源\",{\"1\":{\"1672\":1}}],[\"用于反射机制\",{\"1\":{\"1670\":1}}],[\"用于测试图书管理系统\",{\"1\":{\"1661\":1}}],[\"用于表示一个类的对象可以序列化\",{\"1\":{\"2039\":1}}],[\"用于表示一个人的信息\",{\"1\":{\"248\":1}}],[\"用于表示文件和目录\",{\"1\":{\"2039\":1}}],[\"用于表示地区\",{\"1\":{\"2038\":1}}],[\"用于表示时区\",{\"1\":{\"2038\":1}}],[\"用于表示和操作字符串\",{\"1\":{\"2037\":1}}],[\"用于表示可能为空的值\",{\"1\":{\"1995\":1}}],[\"用于表示可以借阅的书籍\",{\"1\":{\"1661\":1}}],[\"用于表示互联网上资源的位置\",{\"1\":{\"1930\":1}}],[\"用于表示不确定的类型\",{\"1\":{\"1839\":1}}],[\"用于查找\",{\"1\":{\"1629\":1}}],[\"用于定义一组常量\",{\"1\":{\"1602\":1}}],[\"用于定义一个类的共同特征而不提供具体实现\",{\"1\":{\"1551\":1}}],[\"用于定义类应实现的行为规范\",{\"1\":{\"1573\":1}}],[\"用于定义类应该遵循的契约或行为规范\",{\"1\":{\"1572\":1}}],[\"用于定义类\",{\"1\":{\"1306\":1}}],[\"用于实现基于\",{\"1\":{\"1931\":2}}],[\"用于实现\",{\"1\":{\"1931\":1}}],[\"用于实现回溯算法\",{\"1\":{\"1775\":1}}],[\"用于实现优先队列\",{\"1\":{\"1731\":1}}],[\"用于实现多态和灵活的方法调用\",{\"1\":{\"1517\":1}}],[\"用于实例的通用初始化\",{\"1\":{\"1550\":1}}],[\"用于实例数据的通用初始化\",{\"1\":{\"1549\":1}}],[\"用于静态数据的初始化\",{\"1\":{\"1549\":1,\"1550\":1}}],[\"用于调用父类的方法\",{\"1\":{\"1514\":1}}],[\"用于调用父类的构造函数\",{\"1\":{\"1514\":1}}],[\"用于调用方法的名称\",{\"1\":{\"1335\":1}}],[\"用于控制类\",{\"1\":{\"1506\":1}}],[\"用于控制循环的执行流程\",{\"1\":{\"1332\":1}}],[\"用于声明一个方法可能抛出的异常类型\",{\"1\":{\"1905\":1}}],[\"用于声明一个方法可能抛出的异常\",{\"1\":{\"1897\":1}}],[\"用于声明方法\",{\"1\":{\"1498\":1}}],[\"用于声明本地方法\",{\"1\":{\"1308\":1}}],[\"用于创建菜单栏和菜单项\",{\"1\":{\"2021\":1}}],[\"用于创建和管理模拟对象\",{\"1\":{\"1858\":1}}],[\"用于创建对象时提供默认值\",{\"1\":{\"1711\":1}}],[\"用于创建对象\",{\"1\":{\"1468\":1}}],[\"用于创建具有复杂曲线和自由形状的建筑结构\",{\"1\":{\"683\":1}}],[\"用于无论是否发生异常都执行的代码块\",{\"1\":{\"1453\":1}}],[\"用于基本的编译时检查和指示\",{\"1\":{\"1843\":1}}],[\"用于基本的文件和目录操作\",{\"1\":{\"1441\":1}}],[\"用于基本类型与字符串之间的转换\",{\"1\":{\"1697\":1}}],[\"用于基于给定条件求解微分方程\",{\"1\":{\"854\":1}}],[\"用于读取和写入字符文件\",{\"1\":{\"2039\":1}}],[\"用于读取\",{\"1\":{\"1882\":1}}],[\"用于读取字符数据\",{\"1\":{\"1873\":1}}],[\"用于读取字符文件\",{\"1\":{\"1433\":1}}],[\"用于读取字节数据\",{\"1\":{\"1870\":1}}],[\"用于读取数据\",{\"1\":{\"1868\":1}}],[\"用于读取文件的字节数据\",{\"1\":{\"1436\":1}}],[\"用于写入字符数据\",{\"1\":{\"1874\":1}}],[\"用于写入字符文件\",{\"1\":{\"1433\":1}}],[\"用于写入字节数据\",{\"1\":{\"1871\":1}}],[\"用于写入数据\",{\"1\":{\"1868\":1}}],[\"用于写入文件的字节数据\",{\"1\":{\"1436\":1}}],[\"用于写作\",{\"1\":{\"336\":1}}],[\"用于从控制台读取用户输入\",{\"1\":{\"1429\":1}}],[\"用于从高维数据中提取重要信息\",{\"1\":{\"615\":1}}],[\"用于输出数据到控制台\",{\"1\":{\"1424\":1}}],[\"用于计算角度\",{\"1\":{\"1397\":1}}],[\"用于计算随机数\",{\"1\":{\"1397\":1}}],[\"用于单线程环境下需要高性能且频繁修改字符串的场景\",{\"1\":{\"1378\":1}}],[\"用于不可变的字符串\",{\"1\":{\"1378\":1}}],[\"用于不同的聚类目标\",{\"1\":{\"560\":1}}],[\"用于执行某种操作\",{\"1\":{\"1475\":1}}],[\"用于执行匹配操作\",{\"1\":{\"1410\":1}}],[\"用于执行特定任务\",{\"1\":{\"1333\":1}}],[\"用于执行本地方法\",{\"1\":{\"1265\":1}}],[\"用于重复执行代码\",{\"1\":{\"1332\":1}}],[\"用于根据条件执行不同的代码块\",{\"1\":{\"1332\":1}}],[\"用于退出switch语句\",{\"1\":{\"1322\":1}}],[\"用于序列化时\",{\"1\":{\"1308\":1}}],[\"用于多线程编程\",{\"1\":{\"1489\":1,\"1490\":1,\"2037\":1}}],[\"用于多线程环境下频繁修改字符串内容的场景\",{\"1\":{\"1378\":1}}],[\"用于多线程环境\",{\"1\":{\"1308\":1}}],[\"用于多阶段决策问题\",{\"1\":{\"382\":1}}],[\"用于监控jvm的性能\",{\"1\":{\"1267\":1}}],[\"用于绘制三维网格图和三维曲面图\",{\"1\":{\"1207\":1}}],[\"用于绘制三维曲线\",{\"1\":{\"1206\":1}}],[\"用于绘制饼图\",{\"1\":{\"1204\":1}}],[\"用于绘制柱状图\",{\"1\":{\"1203\":1}}],[\"用于绘制二维散点图\",{\"1\":{\"1202\":1}}],[\"用于绘制二维折线图\",{\"1\":{\"1201\":1}}],[\"用于绘制图形和可视化数据\",{\"1\":{\"240\":1}}],[\"用于索引\",{\"1\":{\"1151\":1}}],[\"用于储存交叉引用信息的文件\",{\"1\":{\"1110\":1}}],[\"用于存储按照某种顺序进行处理的元素集合\",{\"1\":{\"2038\":1}}],[\"用于存储键值对\",{\"1\":{\"2038\":1}}],[\"用于存储无序且唯一的元素集合\",{\"1\":{\"2038\":1}}],[\"用于存储有序的元素集合\",{\"1\":{\"2038\":1}}],[\"用于存储数据\",{\"1\":{\"1881\":1}}],[\"用于存储不允许重复的元素集合\",{\"1\":{\"1794\":1}}],[\"用于存储需要按特定顺序处理的元素\",{\"1\":{\"1756\":1}}],[\"用于存储\",{\"1\":{\"1734\":1}}],[\"用于存储和快速查找数据\",{\"1\":{\"1728\":1}}],[\"用于存储和操作相同类型的数据\",{\"1\":{\"1366\":1}}],[\"用于存储相同类型的元素\",{\"1\":{\"1722\":1}}],[\"用于存储生成树的边\",{\"1\":{\"964\":1}}],[\"用于存储一组有序的项目\",{\"1\":{\"140\":1,\"149\":1}}],[\"用于最先进的目标检测和分割任务\",{\"1\":{\"797\":1}}],[\"用于放大或缩小图像时恢复图像的细节\",{\"1\":{\"791\":1}}],[\"用于平滑物体边缘或断开细小的连接\",{\"1\":{\"789\":1}}],[\"用于处理窗口事件\",{\"1\":{\"2030\":1}}],[\"用于处理键盘按键事件\",{\"1\":{\"2030\":1}}],[\"用于处理鼠标点击\",{\"1\":{\"2030\":1}}],[\"用于处理按钮\",{\"1\":{\"2030\":1}}],[\"用于处理\",{\"1\":{\"1931\":1,\"1940\":1}}],[\"用于处理原始字节数据\",{\"1\":{\"1441\":1}}],[\"用于处理字符数据\",{\"1\":{\"1441\":1}}],[\"用于处理用户输入错误\",{\"1\":{\"1429\":1}}],[\"用于处理二值图像的形态操作\",{\"1\":{\"789\":1}}],[\"用于处理日期和时间\",{\"1\":{\"234\":1}}],[\"用于图像匹配和识别\",{\"1\":{\"813\":1}}],[\"用于图像处理和计算机视觉任务的深度学习框架\",{\"1\":{\"797\":1}}],[\"用于图像生成\",{\"1\":{\"792\":1}}],[\"用于图像分类\",{\"1\":{\"792\":1}}],[\"用于图像分析和处理\",{\"1\":{\"516\":1}}],[\"用于图像压缩\",{\"1\":{\"786\":1}}],[\"用于将递归算法转换为迭代算法\",{\"1\":{\"1775\":1}}],[\"用于将基本数据类型封装成对象\",{\"1\":{\"1695\":1}}],[\"用于将对象的状态\",{\"1\":{\"1563\":1}}],[\"用于将信息输出到控制台\",{\"1\":{\"1429\":1}}],[\"用于将模式分组\",{\"1\":{\"1412\":1}}],[\"用于将数值转换为相应的基本数据类型\",{\"1\":{\"1382\":1}}],[\"用于将数据集中的对象划分为多个簇\",{\"1\":{\"508\":1}}],[\"用于将图像从空间域转换到频率域\",{\"1\":{\"786\":1}}],[\"用于在输入字符串中匹配正则表达式\",{\"1\":{\"2043\":1}}],[\"用于在客户端和服务器之间建立全双工通信通道\",{\"1\":{\"1943\":1}}],[\"用于在编译时生成代码\",{\"1\":{\"1847\":1}}],[\"用于在创建对象时传递初始值\",{\"1\":{\"1711\":1}}],[\"用于在创建对象时初始化对象的状态\",{\"1\":{\"1711\":1}}],[\"用于在基于哈希的数据结构中定位对象\",{\"1\":{\"1669\":1}}],[\"用于在多个线程之间进行通信\",{\"1\":{\"1970\":1}}],[\"用于在多个冲突性指标下做出最优决策\",{\"1\":{\"752\":1}}],[\"用于在多线程环境中保护共享资源\",{\"1\":{\"1550\":1}}],[\"用于在方法或构造函数中组织代码逻辑\",{\"1\":{\"1550\":1}}],[\"用于在方法体或构造函数中组织代码\",{\"1\":{\"1545\":1}}],[\"用于在浮点运算中强制执行严格的ieee\",{\"1\":{\"1308\":1}}],[\"用于在同一图上绘制多条曲线\",{\"1\":{\"1210\":1}}],[\"用于在同一个窗口中绘制多个子图\",{\"1\":{\"1209\":1}}],[\"用于在图像中检测出显著的角点\",{\"1\":{\"790\":1}}],[\"用于在满足一定约束条件下最大化或最小化一个线性目标函数\",{\"1\":{\"714\":1}}],[\"用于在指定的位置绘制一个瓷砖\",{\"1\":{\"689\":1}}],[\"用于在没有标签的情况下从数据中发现潜在的模式或结构\",{\"1\":{\"537\":1}}],[\"用于设计管道系统\",{\"1\":{\"683\":1}}],[\"用于模拟液体或软体物体的形状\",{\"1\":{\"676\":1}}],[\"用于模式匹配和文本操作\",{\"1\":{\"2043\":1}}],[\"用于模式匹配和文本处理\",{\"1\":{\"1409\":1}}],[\"用于模式匹配\",{\"1\":{\"202\":1}}],[\"用于时间序列预测\",{\"1\":{\"657\":1}}],[\"用于解决一些递归定义的问题\",{\"1\":{\"1345\":1}}],[\"用于解决一个基本的分类问题\",{\"1\":{\"442\":1}}],[\"用于解决回归和分类问题\",{\"1\":{\"654\":1}}],[\"用于提高预测精度\",{\"1\":{\"631\":1}}],[\"用于分类和回归的监督学习模型\",{\"1\":{\"631\":1}}],[\"用于分类和回归的树状模型\",{\"1\":{\"631\":1}}],[\"用于分类任务\",{\"1\":{\"579\":1,\"603\":1}}],[\"用于分析和预测时间序列数据的方法\",{\"1\":{\"631\":1}}],[\"用于动态更新散点图\",{\"1\":{\"626\":1}}],[\"用于生成程序的api文档\",{\"1\":{\"1999\":1}}],[\"用于生成代码文档\",{\"1\":{\"1283\":1}}],[\"用于生成角色的骨骼\",{\"1\":{\"683\":1}}],[\"用于生成具有簇状结构的3d数据集\",{\"1\":{\"626\":1}}],[\"用于生成随机数\",{\"1\":{\"235\":1,\"2038\":1}}],[\"用于自然语言处理\",{\"1\":{\"598\":1}}],[\"用于离散标签的预测\",{\"1\":{\"593\":1}}],[\"用于减少特征数量\",{\"1\":{\"586\":1}}],[\"用于需要层次关系或不知道簇数的数据\",{\"1\":{\"553\":1}}],[\"用于评估模型性能的技术\",{\"1\":{\"533\":1}}],[\"用于评估模型性能的数据集\",{\"1\":{\"528\":1}}],[\"用于评估每个个体的优劣\",{\"1\":{\"432\":1}}],[\"用于训练模型的数据集\",{\"1\":{\"528\":1}}],[\"用于人脸识别或手写数字识别\",{\"1\":{\"523\":1}}],[\"用于预测系统未来的状态\",{\"1\":{\"645\":1}}],[\"用于预测因变量与一个或多个自变量之间关系的方法\",{\"1\":{\"631\":1}}],[\"用于预测数据点的类别\",{\"1\":{\"518\":1}}],[\"用于预测或分析多个因素对结果的综合影响\",{\"1\":{\"492\":1}}],[\"用于简化模型\",{\"1\":{\"493\":1}}],[\"用于简短的函数定义\",{\"1\":{\"212\":1}}],[\"用于比较多个样本的均值\",{\"1\":{\"483\":1}}],[\"用于引入非线性特性\",{\"1\":{\"440\":1}}],[\"用于超参数调优\",{\"1\":{\"426\":1}}],[\"用于寻找全局最优解\",{\"1\":{\"421\":1}}],[\"用于优化非线性目标函数\",{\"1\":{\"415\":1}}],[\"用于优化目标函数\",{\"1\":{\"415\":1}}],[\"用于优化线性目标函数\",{\"1\":{\"415\":1}}],[\"用于边权重可以为负的图\",{\"1\":{\"392\":1}}],[\"用于边权重非负的图\",{\"1\":{\"392\":1}}],[\"用于描述代码的属性或行为\",{\"1\":{\"1842\":1}}],[\"用于描述可能抛出的异常等等\",{\"1\":{\"1283\":1}}],[\"用于描述返回值\",{\"1\":{\"1283\":1}}],[\"用于描述方法参数\",{\"1\":{\"1283\":1}}],[\"用于描述种群密度的变化\",{\"1\":{\"927\":1}}],[\"用于描述连续变化的系统\",{\"1\":{\"879\":1}}],[\"用于描述易感者\",{\"1\":{\"851\":1}}],[\"用于描述非整数维度的复杂性\",{\"1\":{\"677\":1}}],[\"用于描述数据的属性或变量\",{\"1\":{\"528\":1}}],[\"用于描述因变量与自变量之间的非线性关系\",{\"1\":{\"494\":1}}],[\"用于描述因变量与多个自变量之间的关系\",{\"1\":{\"492\":1}}],[\"用于描述两个变量之间的线性关系\",{\"1\":{\"491\":1}}],[\"用于描述空间和时间变化的连续系统\",{\"1\":{\"382\":1}}],[\"用于描述随时间变化的连续系统\",{\"1\":{\"382\":1}}],[\"用于验证数据是否符合某种假设\",{\"1\":{\"382\":1}}],[\"用于求解非线性目标函数的最优化问题\",{\"1\":{\"382\":1}}],[\"用于求解线性目标函数的最优化问题\",{\"1\":{\"382\":1}}],[\"用于数据分析和处理\",{\"1\":{\"239\":1}}],[\"用于科学计算\",{\"1\":{\"238\":1}}],[\"语言环境\",{\"1\":{\"2038\":1}}],[\"语言\",{\"1\":{\"1707\":1}}],[\"语言的核心类\",{\"1\":{\"2037\":1}}],[\"语言的基础包\",{\"1\":{\"2037\":1}}],[\"语言的一个重要版本\",{\"1\":{\"1988\":1}}],[\"语言的设计目标之一是适应于动态变化的环境\",{\"1\":{\"1259\":1}}],[\"语言的语法与\",{\"1\":{\"1259\":1}}],[\"语言中所有类的根类\",{\"1\":{\"1664\":1}}],[\"语言中\",{\"1\":{\"1259\":1}}],[\"语言具有的许多安全特性以外\",{\"1\":{\"1259\":1}}],[\"语言支持多个线程的同时执行\",{\"1\":{\"1259\":1}}],[\"语言支持\",{\"1\":{\"1259\":1}}],[\"语言全面支持动态绑定\",{\"1\":{\"1259\":1}}],[\"语言提供类\",{\"1\":{\"1259\":1}}],[\"语言是动态的\",{\"1\":{\"1259\":1}}],[\"语言是多线程的\",{\"1\":{\"1259\":1}}],[\"语言是解释型的\",{\"1\":{\"1259\":1}}],[\"语言是可移植的\",{\"1\":{\"1259\":1}}],[\"语言是体系结构中立的\",{\"1\":{\"1259\":1}}],[\"语言是健壮的\",{\"1\":{\"1259\":1}}],[\"语言是面向对象的\",{\"1\":{\"1259\":1}}],[\"语言是简单的\",{\"1\":{\"1259\":1}}],[\"语言不使用指针\",{\"1\":{\"1259\":1}}],[\"语言很接近\",{\"1\":{\"1259\":1}}],[\"语言和\",{\"1\":{\"1259\":1}}],[\"语\",{\"1\":{\"1117\":1}}],[\"语音识别等\",{\"1\":{\"645\":1,\"652\":1}}],[\"语音识别等领域有广泛应用\",{\"1\":{\"598\":1}}],[\"语音识别\",{\"1\":{\"584\":1}}],[\"语法为条件表达式\",{\"1\":{\"1316\":1}}],[\"语法如下\",{\"1\":{\"1176\":1}}],[\"语法错误\",{\"1\":{\"245\":1}}],[\"语法\",{\"0\":{\"1836\":1},\"1\":{\"219\":1,\"1295\":1,\"1548\":1}}],[\"语句到数据库\",{\"1\":{\"1980\":1}}],[\"语句对象\",{\"0\":{\"1980\":1},\"1\":{\"1976\":1}}],[\"语句对源文件中定义的所有类都有效\",{\"1\":{\"1477\":1}}],[\"语句的\",{\"1\":{\"1974\":1}}],[\"语句和\",{\"1\":{\"1477\":1}}],[\"语句和类定义之间\",{\"1\":{\"1477\":1}}],[\"语句应该在源文件中最前面\",{\"1\":{\"1477\":1}}],[\"语句应该在源文件的首行\",{\"1\":{\"1477\":1}}],[\"语句导入模块\",{\"1\":{\"229\":1}}],[\"语句返回值\",{\"1\":{\"225\":1}}],[\"语句用于跳过本次循环的剩余部分\",{\"1\":{\"1168\":1}}],[\"语句用于跳过当前迭代并继续下一次迭代\",{\"1\":{\"207\":1}}],[\"语句用于提前终止循环\",{\"1\":{\"1167\":1}}],[\"语句用于提前退出循环\",{\"1\":{\"206\":1}}],[\"语句用于判断一个变量或表达式的值\",{\"1\":{\"1162\":1}}],[\"语句用于根据条件执行代码块\",{\"1\":{\"1159\":1}}],[\"语句用于根据条件执行不同的代码块\",{\"1\":{\"201\":1}}],[\"语句\",{\"0\":{\"206\":1,\"207\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1445\":1,\"1446\":1,\"1981\":1},\"1\":{\"1107\":1,\"1161\":1,\"1457\":1,\"1477\":2,\"1976\":1,\"1984\":1,\"1987\":1}}],[\"语句之间使用分号\",{\"1\":{\"134\":1}}],[\"装箱\",{\"1\":{\"1698\":1}}],[\"装箱和拆箱\",{\"0\":{\"1698\":1}}],[\"装饰器\",{\"0\":{\"226\":1},\"1\":{\"226\":1}}],[\"装饰器是一种用于修改或增强函数的功能的设计模式\",{\"1\":{\"216\":1}}],[\"装机\",{\"2\":{\"104\":1}}],[\"装机流程\",{\"0\":{\"100\":1}}],[\"高并发的网络编程场景\",{\"1\":{\"1893\":1}}],[\"高性能\",{\"1\":{\"1892\":1}}],[\"高\",{\"1\":{\"1752\":1}}],[\"高位补0\",{\"1\":{\"1315\":1}}],[\"高于微波波段的频率\",{\"1\":{\"1052\":1}}],[\"高斯模糊用于去除图像中的噪声\",{\"1\":{\"819\":1}}],[\"高斯模糊\",{\"0\":{\"819\":1}}],[\"高斯混合模型\",{\"0\":{\"514\":1},\"1\":{\"552\":1,\"594\":1}}],[\"高维数据中可能包含一些对最终分析没有贡献的特征\",{\"1\":{\"614\":1}}],[\"高维数据在处理时往往需要更多的计算资源\",{\"1\":{\"614\":1}}],[\"高级用法\",{\"0\":{\"922\":1}}],[\"高级建模系统\",{\"1\":{\"383\":1}}],[\"高级特性\",{\"0\":{\"218\":1}}],[\"高阶函数返回函数\",{\"1\":{\"214\":1}}],[\"高阶函数是接受函数作为参数或返回函数的函数\",{\"1\":{\"214\":1}}],[\"高阶函数\",{\"0\":{\"214\":1}}],[\"高效的双端队列实现\",{\"1\":{\"1769\":1}}],[\"高效的内存管理和强大的多线程支持\",{\"1\":{\"1269\":1}}],[\"高效的方式来处理不可变的有序数据\",{\"1\":{\"157\":1}}],[\"高效成员检测和基本集合操作的场景中非常有用\",{\"1\":{\"166\":1}}],[\"位二进制代码来表示实数\",{\"1\":{\"2154\":3}}],[\"位\",{\"1\":{\"1868\":2,\"2154\":9}}],[\"位于\",{\"1\":{\"1756\":1,\"1770\":1,\"1780\":1}}],[\"位于java\",{\"1\":{\"1380\":1,\"1388\":1,\"1994\":1}}],[\"位于大括号内\",{\"1\":{\"1335\":1}}],[\"位于括号内\",{\"1\":{\"1335\":1}}],[\"位字符\",{\"1\":{\"1288\":1}}],[\"位双精度浮点数\",{\"1\":{\"1287\":1}}],[\"位单精度浮点数\",{\"1\":{\"1287\":1}}],[\"位有符号整数\",{\"1\":{\"1286\":4}}],[\"位置等\",{\"1\":{\"528\":1}}],[\"位置参数\",{\"1\":{\"211\":1}}],[\"位运算符用于对整数类型的二进制位进行操作\",{\"1\":{\"1315\":1}}],[\"位运算符\",{\"0\":{\"196\":1,\"1315\":1}}],[\"关系\",{\"1\":{\"2213\":1}}],[\"关系数据库\",{\"1\":{\"2213\":1}}],[\"关系运算符用于比较两个值\",{\"1\":{\"1147\":1}}],[\"关系运算符\",{\"0\":{\"1147\":1},\"1\":{\"1145\":1,\"1152\":1}}],[\"关闭自动提交\",{\"1\":{\"1985\":1}}],[\"关闭连接\",{\"0\":{\"1983\":1},\"1\":{\"1976\":1}}],[\"关闭scanner\",{\"1\":{\"1422\":1}}],[\"关闭日记文件录制\",{\"1\":{\"1126\":1}}],[\"关闭文件\",{\"0\":{\"254\":1},\"1\":{\"1192\":1,\"1195\":1}}],[\"关于\",{\"1\":{\"1276\":1}}],[\"关于学习\",{\"0\":{\"979\":1}}],[\"关于生活\",{\"0\":{\"977\":1}}],[\"关于江湖\",{\"0\":{\"45\":1}}],[\"关键字保证线程安全\",{\"1\":{\"2011\":1}}],[\"关键字可以修饰方法或代码块\",{\"1\":{\"1968\":1}}],[\"关键字的函数\",{\"1\":{\"1816\":1}}],[\"关键字用于引用父类的成员\",{\"1\":{\"1714\":1}}],[\"关键字用于访问当前对象的字段和方法\",{\"1\":{\"1505\":1}}],[\"关键字在\",{\"1\":{\"1713\":1}}],[\"关键字创建\",{\"1\":{\"1710\":1}}],[\"关键字定义\",{\"1\":{\"1709\":1,\"1710\":1}}],[\"关键字定义同步代码块\",{\"1\":{\"1548\":1}}],[\"关键字将类的成员变量声明为私有\",{\"1\":{\"1709\":1}}],[\"关键字来导入类或整个包\",{\"1\":{\"1620\":1}}],[\"关键字来实现\",{\"1\":{\"1618\":1,\"1709\":1}}],[\"关键字来实现一个或多个接口\",{\"1\":{\"1576\":1}}],[\"关键字来调用父类的构造函数\",{\"1\":{\"1512\":1}}],[\"关键字常用于子类构造函数中调用父类构造函数\",{\"1\":{\"1504\":1}}],[\"关键字也用于静态初始化块\",{\"1\":{\"1503\":1}}],[\"关键字实现接口\",{\"1\":{\"1474\":1,\"1709\":1}}],[\"关键字声明的类\",{\"1\":{\"1709\":1}}],[\"关键字声明一个接口\",{\"1\":{\"1556\":1,\"1574\":1}}],[\"关键字声明一个类为抽象类\",{\"1\":{\"1553\":1}}],[\"关键字声明\",{\"1\":{\"1303\":1,\"1603\":1}}],[\"关键字声明全局变量\",{\"1\":{\"1174\":1}}],[\"关键字\",{\"0\":{\"1279\":1,\"1447\":1,\"1713\":1,\"1714\":1,\"1864\":1,\"1968\":1},\"1\":{\"1911\":1,\"1968\":2}}],[\"关键字不能用作标识符\",{\"1\":{\"1276\":1}}],[\"关键字为\",{\"1\":{\"1259\":2}}],[\"关键字参数\",{\"1\":{\"211\":1}}],[\"关键字参数和可变参数\",{\"1\":{\"211\":1}}],[\"关键词\",{\"1\":{\"780\":1}}],[\"关联度越大\",{\"1\":{\"769\":1}}],[\"默认在\",{\"1\":{\"2026\":1}}],[\"默认是\",{\"1\":{\"1840\":1}}],[\"默认是浅拷贝\",{\"1\":{\"1671\":1}}],[\"默认实现比较对象的引用是否指向同一对象\",{\"1\":{\"1668\":1}}],[\"默认实现\",{\"1\":{\"1667\":1,\"1668\":1,\"1669\":1,\"1671\":1}}],[\"默认实现返回类的全限定名和对象的哈希码\",{\"1\":{\"1667\":1}}],[\"默认方法可以有方法体\",{\"1\":{\"1993\":1}}],[\"默认方法和静态方法\",{\"0\":{\"1993\":1}}],[\"默认方法\",{\"1\":{\"1561\":1,\"1579\":1,\"1993\":1}}],[\"默认方法用于为接口提供一些默认行为\",{\"1\":{\"1560\":1}}],[\"默认访问级别\",{\"1\":{\"1307\":2}}],[\"默认值\",{\"1\":{\"1301\":1,\"1302\":1,\"1303\":1}}],[\"默认\",{\"1\":{\"251\":2,\"1712\":1,\"1845\":1}}],[\"默认参数\",{\"1\":{\"211\":2}}],[\"默认情况下在\",{\"1\":{\"2026\":1}}],[\"默认情况下\",{\"1\":{\"130\":1,\"722\":1,\"1763\":1}}],[\"它确保这些资源能够有效地分配和使用\",{\"1\":{\"2189\":1}}],[\"它确保一个类只有一个实例\",{\"1\":{\"2006\":1}}],[\"它管理计算机硬件和软件资源\",{\"1\":{\"2188\":1}}],[\"它反映了随着输入数据规模的增大\",{\"1\":{\"2163\":1}}],[\"它反映了算法在处理输入数据时\",{\"1\":{\"2162\":1}}],[\"它定义了浮点数的编码格式\",{\"1\":{\"2154\":1}}],[\"它定义了一些通用的方法\",{\"1\":{\"1381\":1}}],[\"它定义了一组属性和方法\",{\"1\":{\"242\":1}}],[\"它具有以下设计目标\",{\"1\":{\"2152\":1}}],[\"它创建了一个窗口\",{\"1\":{\"2022\":1}}],[\"它为构建桌面应用程序提供了强大的工具\",{\"1\":{\"2019\":1}}],[\"它能够解析源代码中的文档注释并生成html格式的文档\",{\"1\":{\"1999\":1}}],[\"它解决了java\",{\"1\":{\"1994\":1}}],[\"它负责处理文件的读写\",{\"1\":{\"2189\":1}}],[\"它负责记录日志信息\",{\"1\":{\"1916\":1}}],[\"它负责将编译后的java字节码\",{\"1\":{\"1264\":1}}],[\"它无需额外引入第三方依赖\",{\"1\":{\"1915\":1}}],[\"它用于检查一个或多个通道的状态\",{\"1\":{\"1886\":1}}],[\"它用来直接引用已有的方法\",{\"1\":{\"1690\":1}}],[\"它类似于传统\",{\"1\":{\"1882\":1}}],[\"它适用于需要处理大量数据的高性能服务器\",{\"1\":{\"1880\":1}}],[\"它提供用户认证\",{\"1\":{\"2189\":1}}],[\"它提供了类和接口来访问类的内部结构\",{\"1\":{\"1826\":1}}],[\"它提供了阻塞的\",{\"1\":{\"1767\":1}}],[\"它提供了一些静态方法来获取主机的\",{\"1\":{\"1932\":1}}],[\"它提供了一种存储和操作键值对的方式\",{\"1\":{\"1795\":1}}],[\"它提供了一种标准化的方式来定义和使用类\",{\"1\":{\"1683\":1}}],[\"它提供了一组基本的方法\",{\"1\":{\"1664\":1}}],[\"它提供了用于网络应用编程的类库\",{\"1\":{\"1259\":1}}],[\"它提供了许多符号数学工具\",{\"1\":{\"913\":1}}],[\"它提供了大量的库和工具\",{\"1\":{\"600\":1}}],[\"它提高了代码的重用性\",{\"1\":{\"1840\":1}}],[\"它位于\",{\"1\":{\"1812\":1}}],[\"它没有容量限制\",{\"1\":{\"1765\":1}}],[\"它没有类型\",{\"1\":{\"135\":1}}],[\"它不允许\",{\"1\":{\"1806\":1,\"1808\":1}}],[\"它不保证元素的顺序\",{\"1\":{\"1785\":1}}],[\"它不保证插入顺序\",{\"1\":{\"1763\":1}}],[\"它不依赖于外部类的实例\",{\"1\":{\"1590\":1}}],[\"它常用于任务调度\",{\"1\":{\"1757\":1}}],[\"它支持读写文件\",{\"1\":{\"1867\":1}}],[\"它支持在双向遍历\",{\"1\":{\"1821\":1}}],[\"它支持在一端插入元素\",{\"1\":{\"1757\":1}}],[\"它支持多种预训练模型\",{\"1\":{\"805\":1}}],[\"它基于写时复制\",{\"1\":{\"1753\":1}}],[\"它基于双向链表实现\",{\"1\":{\"1749\":1}}],[\"它基于数组实现\",{\"1\":{\"1746\":1}}],[\"它会被阻塞\",{\"1\":{\"1888\":1}}],[\"它会根据需要自动调整容量\",{\"1\":{\"1747\":1}}],[\"它会在工作空间中定义变量\",{\"1\":{\"1181\":1}}],[\"它继承自\",{\"1\":{\"1743\":1,\"1770\":1}}],[\"它使得可以以更简洁的方式来表达函数或匿名类\",{\"1\":{\"1989\":1}}],[\"它使得可以更加简洁\",{\"1\":{\"1684\":1}}],[\"它使得代码在出现错误时不会立即崩溃\",{\"1\":{\"1894\":1}}],[\"它使代码更加简洁\",{\"1\":{\"1694\":1}}],[\"它与复杂度分析息息相关\",{\"1\":{\"2158\":1}}],[\"它与lambda表达式结合使用\",{\"1\":{\"1692\":1}}],[\"它与其他科学计算库\",{\"1\":{\"802\":1}}],[\"它演示了如何创建对象\",{\"1\":{\"1651\":1}}],[\"它比传统的\",{\"1\":{\"1602\":1}}],[\"它只是在当前方法或构造函数执行过程中被执行\",{\"1\":{\"1545\":1}}],[\"它只是在java\",{\"1\":{\"1261\":1}}],[\"它允许开发者在java代码中直接嵌入和执行javascript代码\",{\"1\":{\"1996\":1}}],[\"它允许开发者用一种简洁的方式来搜索\",{\"1\":{\"1945\":1}}],[\"它允许存储重复的元素\",{\"1\":{\"1743\":1}}],[\"它允许对象以多种形式出现\",{\"1\":{\"1525\":1}}],[\"它允许一个类从另一个类继承属性和方法\",{\"1\":{\"1470\":1}}],[\"它允许每个类别有不同的协方差矩阵\",{\"1\":{\"570\":1}}],[\"它包括以下两个维度\",{\"1\":{\"2157\":1}}],[\"它包括了pca降维的实现以及动态模拟降维过程的可视化\",{\"1\":{\"621\":1}}],[\"它包含一些要写入或要读出的数据\",{\"1\":{\"1884\":1}}],[\"它包含了属性\",{\"1\":{\"1468\":1}}],[\"它已经不推荐使用\",{\"1\":{\"1401\":1}}],[\"它描述一类对象的行为和状态\",{\"1\":{\"1273\":1}}],[\"它还通过跨平台能力\",{\"1\":{\"1269\":1}}],[\"它还支持视频处理\",{\"1\":{\"800\":1}}],[\"它必须由\",{\"1\":{\"1259\":1}}],[\"它被定义于控制命令\",{\"1\":{\"1106\":1}}],[\"它要求我们回到问题的最基本的真理或事实上\",{\"1\":{\"998\":1}}],[\"它可以被看作是一个清晰的指令集合\",{\"1\":{\"2156\":1}}],[\"它可以帮助开发人员发现问题\",{\"1\":{\"1912\":1}}],[\"它可以帮助编译器检查是否正确重写了父类的方法\",{\"1\":{\"1519\":1}}],[\"它可以使代码更加通用和灵活\",{\"1\":{\"1834\":1}}],[\"它可以用于区分成员变量和局部变量\",{\"1\":{\"1713\":1}}],[\"它可以读取不同类型的数据\",{\"1\":{\"1421\":1}}],[\"它可以方便地展示图像\",{\"1\":{\"804\":1}}],[\"它可以是0\",{\"1\":{\"707\":1}}],[\"它在某些情况下性能可能不够理想\",{\"1\":{\"1776\":1}}],[\"它在每次创建对象时都会被自动调用\",{\"1\":{\"1546\":1}}],[\"它在数据分析\",{\"1\":{\"932\":1}}],[\"它在数据较少且随机性较大的情况下\",{\"1\":{\"632\":1}}],[\"它在工程\",{\"1\":{\"752\":1}}],[\"它在经济学\",{\"1\":{\"744\":1}}],[\"它属于典型的裁剪\",{\"1\":{\"692\":1}}],[\"它的所有元素必须是同一个枚举类型\",{\"1\":{\"1791\":1}}],[\"它的性能稍慢于\",{\"1\":{\"1787\":1,\"1802\":1}}],[\"它的特性是新插入的元素位于栈顶\",{\"1\":{\"1771\":1}}],[\"它的作用范围仅限于定义它的块内\",{\"1\":{\"1593\":1}}],[\"它的状态有\",{\"1\":{\"1273\":1}}],[\"它的基本结构由多个神经元\",{\"1\":{\"653\":1}}],[\"它的计算公式为\",{\"1\":{\"616\":1}}],[\"它的目标是从输入数据中自动识别模式或规律\",{\"1\":{\"584\":1}}],[\"它的核心思想是通过构建多层的神经元\",{\"1\":{\"438\":1}}],[\"它假设系统的未来状态只与当前状态有关\",{\"1\":{\"645\":1}}],[\"它假设各类的协方差矩阵相同\",{\"1\":{\"568\":1}}],[\"它假设数据是由多个高斯分布混合而成的\",{\"1\":{\"552\":1}}],[\"它将输出字符串\",{\"1\":{\"1274\":1}}],[\"它将数据集划分为k个簇\",{\"1\":{\"549\":1}}],[\"它将程序结构化为对象的集合\",{\"1\":{\"241\":1}}],[\"它主要包含两个阶段\",{\"1\":{\"2160\":1}}],[\"它主要用于快速查找\",{\"1\":{\"1781\":1}}],[\"它主要关注于个体或群体在某个事件\",{\"1\":{\"476\":1}}],[\"它主要通过方法重写和方法重载来实现\",{\"1\":{\"1525\":1}}],[\"它主要通过构建列联表来展示不同分类组合下的频数分布\",{\"1\":{\"468\":1}}],[\"它主要通过图表和统计量\",{\"1\":{\"465\":1}}],[\"它根据已知的分类信息来预测新数据的分类\",{\"1\":{\"473\":1}}],[\"它根据数据之间的相似性将数据分为多个组或簇\",{\"1\":{\"472\":1}}],[\"它通常用于实现接口的实例\",{\"1\":{\"1596\":1}}],[\"它通常用于选择\",{\"1\":{\"729\":1}}],[\"它通常包含有关类\",{\"1\":{\"1283\":1}}],[\"它通常包括设定假设\",{\"1\":{\"466\":1}}],[\"它通过\",{\"1\":{\"1893\":1}}],[\"它通过编写小的\",{\"1\":{\"1848\":1}}],[\"它通过类的层次结构实现了代码的重用和扩展\",{\"1\":{\"1516\":1}}],[\"它通过对路径上的每个点进行平移和旋转来创建管道\",{\"1\":{\"681\":1}}],[\"它通过对特征的线性组合进行sigmoid变换\",{\"1\":{\"577\":1,\"601\":1}}],[\"它通过引入非线性增长项\",{\"1\":{\"636\":1}}],[\"它通过引入l1正则化来进行特征选择\",{\"1\":{\"499\":1}}],[\"它通过原始数据生成序列\",{\"1\":{\"634\":1}}],[\"它通过逐步添加或移除自变量来构建模型\",{\"1\":{\"493\":1}}],[\"它通过研究数据随时间变化的规律来预测未来的发展趋势\",{\"1\":{\"475\":1}}],[\"它通过将总变异分解为组内变异和组间变异来评估不同组之间是否存在显著差异\",{\"1\":{\"470\":1}}],[\"它通过模拟生物进化过程\",{\"1\":{\"431\":1}}],[\"它通过覆盖零元素和调整潜在收益来寻找最优解\",{\"1\":{\"409\":1}}],[\"它接受目标函数\",{\"1\":{\"429\":1}}],[\"它特别适用于复杂的\",{\"1\":{\"421\":1}}],[\"它们极大地简化了集合的处理和函数式编程\",{\"1\":{\"1998\":1}}],[\"它们定义了一个搜索模式\",{\"1\":{\"1947\":1}}],[\"它们封装了数据\",{\"1\":{\"1681\":1}}],[\"它们提供了不同的功能和灵活性\",{\"1\":{\"1914\":1}}],[\"它们提供了快速的随机访问\",{\"1\":{\"1722\":1}}],[\"它们提供了实现多态的基础\",{\"1\":{\"1534\":1}}],[\"它们提供了理解和预测复杂系统行为的工具\",{\"1\":{\"875\":1}}],[\"它们具有相同的名字但参数列表不同\",{\"1\":{\"1476\":1}}],[\"它们分别是\",{\"1\":{\"1383\":1}}],[\"它们分为四类\",{\"1\":{\"1285\":1}}],[\"它们只能在方法内访问\",{\"1\":{\"1346\":1}}],[\"它们允许你根据条件执行不同的代码块或重复执行某段代码\",{\"1\":{\"1319\":1}}],[\"它们在类加载时初始化\",{\"1\":{\"1303\":1}}],[\"它们的使用贯穿于\",{\"1\":{\"1695\":1}}],[\"它们的作用分别是\",{\"1\":{\"1109\":1}}],[\"它们的奇特性质源于其精密的几何结构以及尺寸大小\",{\"1\":{\"1053\":1}}],[\"它们拥有一些特别的性质\",{\"1\":{\"1053\":1}}],[\"它们可以用不同的编程语言实现\",{\"1\":{\"2156\":1}}],[\"它们可以用来描述化学反应中的物质浓度变化\",{\"1\":{\"926\":1}}],[\"它们可以应用于各种领域\",{\"1\":{\"663\":1}}],[\"它们涵盖了基本的图像处理操作到一些高级的处理任务\",{\"1\":{\"817\":1}}],[\"它们能够自然地表示复杂的形状\",{\"1\":{\"676\":1}}],[\"它们能够准确地描述物体的形状\",{\"1\":{\"671\":1}}],[\"它们主要用于多维数据分析\",{\"1\":{\"560\":1}}],[\"它们通常用于文档注释中\",{\"1\":{\"2001\":1}}],[\"它们通常用于表示光滑的自由形状\",{\"1\":{\"672\":1}}],[\"它们通常由反斜杠\",{\"1\":{\"1292\":1}}],[\"它们通常基于自然界或社会行为的模拟\",{\"1\":{\"420\":1}}],[\"它们通过提取数据中的主要成分或因子来简化数据结构\",{\"1\":{\"474\":1}}],[\"它们帮助你组织代码\",{\"1\":{\"209\":1}}],[\"它构建了一个分配结果\",{\"1\":{\"409\":1}}],[\"它涉及到如何以最低成本或最高效率将一组资源\",{\"1\":{\"409\":1}}],[\"它是对\",{\"1\":{\"1919\":1}}],[\"它是独立的接口\",{\"1\":{\"1795\":1}}],[\"它是运行java程序的运行时环境\",{\"1\":{\"1263\":1}}],[\"它是\",{\"1\":{\"801\":1}}],[\"它是最简单的三维模型类型\",{\"1\":{\"673\":1}}],[\"它是统计学\",{\"1\":{\"367\":1}}],[\"它是一个包含数据的连续块\",{\"1\":{\"1884\":1}}],[\"它是一个模板或蓝图\",{\"1\":{\"1468\":1}}],[\"它是一个针对嵌入式设备的\",{\"1\":{\"1261\":1}}],[\"它是一个接受函数并返回一个新函数的函数\",{\"1\":{\"226\":1}}],[\"它是一个函数\",{\"1\":{\"216\":1}}],[\"遍历一个数组\",{\"1\":{\"2162\":1}}],[\"遍历结果集\",{\"1\":{\"1982\":1}}],[\"遍历键值对\",{\"1\":{\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"遍历集合\",{\"0\":{\"1814\":1,\"1823\":1},\"1\":{\"1786\":1,\"1788\":1,\"1790\":1,\"1814\":1}}],[\"遍历\",{\"1\":{\"1366\":1}}],[\"遍历数组\",{\"0\":{\"1355\":1}}],[\"遍历或搜索图的一种算法\",{\"1\":{\"392\":2}}],[\"遍历字符串\",{\"1\":{\"204\":1}}],[\"遍历列表\",{\"1\":{\"204\":1,\"1754\":1}}],[\"循环与迭代器\",{\"0\":{\"1815\":1}}],[\"循环与流程控制是编写程序逻辑的基础\",{\"1\":{\"200\":1}}],[\"循环和分支语句是控制程序流程的基本构造\",{\"1\":{\"1319\":1}}],[\"循环和条件语句结合使用\",{\"1\":{\"1170\":1}}],[\"循环在\",{\"1\":{\"1167\":1}}],[\"循环在条件为真时反复执行代码块\",{\"1\":{\"203\":1}}],[\"循环的次数可能不固定\",{\"1\":{\"1166\":1}}],[\"循环不同\",{\"1\":{\"1166\":1}}],[\"循环用于在满足某个条件时重复执行代码块\",{\"1\":{\"1166\":1}}],[\"循环用于在已知循环次数的情况下重复执行代码块\",{\"1\":{\"1165\":1}}],[\"循环用于遍历序列\",{\"1\":{\"204\":1}}],[\"循环语句用于重复执行某段代码\",{\"1\":{\"1323\":1}}],[\"循环语句用于重复执行代码块\",{\"1\":{\"1164\":1}}],[\"循环语句\",{\"0\":{\"1164\":1,\"1323\":1},\"1\":{\"1332\":1,\"2209\":1}}],[\"循环神经网络\",{\"1\":{\"441\":1,\"598\":1}}],[\"循环正常结束\",{\"1\":{\"208\":3}}],[\"循环\",{\"0\":{\"203\":1,\"204\":1,\"1324\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1356\":1,\"1357\":1},\"1\":{\"1457\":1,\"1815\":1}}],[\"从内置的\",{\"1\":{\"1928\":1}}],[\"从内存中删除变量\",{\"1\":{\"1125\":1}}],[\"从低到高\",{\"1\":{\"1917\":1}}],[\"从服务器收到消息\",{\"1\":{\"1891\":1}}],[\"从头开始读取数据\",{\"1\":{\"1885\":1}}],[\"从通道读取数据到缓冲区\",{\"1\":{\"1883\":1}}],[\"从字符数组中读取字符流\",{\"1\":{\"1873\":1}}],[\"从字节数组中读取字节流\",{\"1\":{\"1870\":1}}],[\"从集合中移除上一次调用\",{\"1\":{\"1813\":1}}],[\"从集合中移除指定元素\",{\"1\":{\"1783\":1}}],[\"从栈中移除元素\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"从1970年1月1日00\",{\"1\":{\"1401\":1}}],[\"从小范围到大范围的数据类型可以自动转换\",{\"1\":{\"1294\":1}}],[\"从\",{\"1\":{\"1192\":2,\"1259\":1,\"1560\":1,\"1578\":1,\"1609\":1,\"1672\":1,\"1744\":1,\"1773\":1}}],[\"从文本中提取特定格式的数据\",{\"1\":{\"1417\":1}}],[\"从文本文件中读取数据\",{\"1\":{\"1196\":1}}],[\"从文本文件读取\",{\"1\":{\"1192\":1}}],[\"从文件读取对象\",{\"1\":{\"1876\":1}}],[\"从文件读取数据\",{\"0\":{\"1192\":1}}],[\"从文件中读取字符数据\",{\"1\":{\"1875\":1}}],[\"从文件中读取字符流\",{\"1\":{\"1873\":1}}],[\"从文件中读取字节数据\",{\"1\":{\"1875\":1}}],[\"从文件中读取字节流\",{\"1\":{\"1870\":1}}],[\"从文件加载工作区变量\",{\"1\":{\"1126\":1}}],[\"从命令行输入\",{\"0\":{\"1191\":1}}],[\"从0到10生成5个等间隔的点\",{\"1\":{\"1156\":1}}],[\"从java类构造的对象\",{\"1\":{\"1127\":1}}],[\"从用户定义的类构造的对象\",{\"1\":{\"1127\":1}}],[\"从基本运算\",{\"1\":{\"1119\":1}}],[\"从第一个顶点开始\",{\"1\":{\"965\":1}}],[\"从任意一个顶点开始\",{\"1\":{\"965\":1}}],[\"从某个顶点开始\",{\"1\":{\"963\":1}}],[\"从权重最小的边开始逐渐构建生成树\",{\"1\":{\"963\":1}}],[\"从该顶点出发的边数\",{\"1\":{\"953\":1}}],[\"从张某到受害者现场步行需5分钟\",{\"1\":{\"855\":1}}],[\"从图像中提取角点\",{\"1\":{\"813\":1}}],[\"从一个状态转移到另一个状态的概率矩阵\",{\"1\":{\"646\":1}}],[\"从数据中提取特征用于进一步分析\",{\"1\":{\"586\":1}}],[\"从原始数据中提取有用的特征或信息\",{\"1\":{\"585\":1}}],[\"从所有数据点组成一个大簇开始\",{\"1\":{\"512\":1}}],[\"从每个数据点单独一个簇开始\",{\"1\":{\"512\":1}}],[\"从每一组中选取物品\",{\"1\":{\"408\":1}}],[\"从搜索范围内随机生成一个初始解\",{\"1\":{\"429\":1}}],[\"从当前解\",{\"1\":{\"423\":1}}],[\"从队列中取出顶点\",{\"1\":{\"405\":1}}],[\"从而有效地发现和修复代码中的问题\",{\"1\":{\"1859\":1}}],[\"从而有效地解决各种实际问题\",{\"1\":{\"717\":1}}],[\"从而能够在需要对象的地方使用基本数据类型\",{\"1\":{\"1695\":1}}],[\"从而能够对复杂的模式进行识别和分类\",{\"1\":{\"438\":1}}],[\"从而访问子类特有的方法或属性\",{\"1\":{\"1543\":1}}],[\"从而提高效率\",{\"1\":{\"1958\":1}}],[\"从而提高了代码的安全性和可维护性\",{\"1\":{\"1563\":1}}],[\"从而提高模型的泛化能力\",{\"1\":{\"498\":1}}],[\"从而提供特定的实现\",{\"1\":{\"1532\":1}}],[\"从而保护数据的完整性\",{\"1\":{\"1471\":1,\"1569\":1}}],[\"从而模拟降维的过程\",{\"1\":{\"626\":1}}],[\"从而可能会忽略其他潜在重要的信息\",{\"1\":{\"620\":1}}],[\"从而获得降维后的数据\",{\"1\":{\"616\":1}}],[\"从而减少维度或识别变量之间的潜在结构\",{\"1\":{\"562\":1}}],[\"从而实现代码的重用\",{\"1\":{\"1709\":1}}],[\"从而实现动态方法调用和不同的行为实现\",{\"1\":{\"1570\":1}}],[\"从而实现多重继承\",{\"1\":{\"1559\":1}}],[\"从而实现多态性\",{\"1\":{\"1665\":1}}],[\"从而实现多态\",{\"1\":{\"1533\":1}}],[\"从而实现了方法的重载\",{\"1\":{\"1523\":1}}],[\"从而实现特征选择\",{\"1\":{\"499\":1}}],[\"从而实现丰富的功能\",{\"1\":{\"199\":1}}],[\"从而优化模型\",{\"1\":{\"440\":1}}],[\"从而逐步逼近全局最优解\",{\"1\":{\"421\":1}}],[\"从而利用数学方法进行分析和解决的过程\",{\"1\":{\"380\":1}}],[\"从csv文件读取数据\",{\"1\":{\"239\":1}}],[\"从列表中移除\",{\"1\":{\"1814\":1}}],[\"从列表中随机选择一个元素\",{\"1\":{\"235\":1}}],[\"从列表中去除重复元素\",{\"1\":{\"165\":1}}],[\"从python\",{\"1\":{\"202\":1}}],[\"相比\",{\"1\":{\"1880\":1}}],[\"相比传统的\",{\"1\":{\"1878\":1}}],[\"相对较高\",{\"1\":{\"1752\":1}}],[\"相对较低\",{\"1\":{\"1752\":1}}],[\"相较于传统匿名类的实现方式\",{\"1\":{\"1688\":1}}],[\"相等\",{\"1\":{\"1668\":1}}],[\"相当于\",{\"1\":{\"1312\":5,\"1412\":4,\"1705\":2}}],[\"相当于x\",{\"1\":{\"197\":12}}],[\"相关的类\",{\"1\":{\"2039\":1}}],[\"相关专业及企业专家组成的专家组参加的开题报告会上进行口头报告\",{\"1\":{\"1038\":1}}],[\"相关分析等\",{\"1\":{\"477\":1}}],[\"相关分析可以帮助研究者了解变量之间的线性或非线性关系\",{\"1\":{\"469\":1}}],[\"相关分析用于研究两个或多个变量之间关系的方向和强度\",{\"1\":{\"469\":1}}],[\"相关分析\",{\"0\":{\"469\":1,\"482\":1}}],[\"相似性\",{\"1\":{\"509\":1}}],[\"相同的字符串字面量会引用同一个对象\",{\"1\":{\"1369\":1}}],[\"相同协方差矩阵\",{\"1\":{\"525\":1}}],[\"相同\",{\"1\":{\"406\":1}}],[\"相册\",{\"2\":{\"61\":1}}],[\"与他人交流学习经验和问题\",{\"1\":{\"2217\":1}}],[\"与计算机进行交互\",{\"1\":{\"2189\":1}}],[\"与传统\",{\"0\":{\"1892\":1}}],[\"与传统的\",{\"1\":{\"1880\":1}}],[\"与stringbuffer类似\",{\"1\":{\"1375\":1}}],[\"与switch表达式的值匹配时执行对应的代码块\",{\"1\":{\"1322\":1}}],[\"与那些解释型的高级脚本语言相比\",{\"1\":{\"1259\":1}}],[\"与顶点相连的边的数量\",{\"1\":{\"953\":1}}],[\"与微分方程类似\",{\"1\":{\"862\":1}}],[\"与之前的所有状态无关\",{\"1\":{\"647\":1}}],[\"与监督学习不同\",{\"1\":{\"537\":1}}],[\"与聚类分析不同\",{\"1\":{\"518\":1}}],[\"与0\",{\"1\":{\"408\":1}}],[\"与\",{\"0\":{\"525\":1,\"1752\":1,\"1778\":1},\"1\":{\"195\":1,\"1109\":1,\"1166\":1,\"1275\":1,\"1676\":1,\"1694\":1}}],[\"<pattern>\",{\"1\":{\"1925\":1}}],[\"<patternlayout\",{\"1\":{\"1921\":1}}],[\"<encoder>\",{\"1\":{\"1925\":1}}],[\"<groupid>ch\",{\"1\":{\"1924\":1}}],[\"<groupid>org\",{\"1\":{\"1851\":2,\"1858\":1,\"1920\":2,\"1924\":1}}],[\"<root\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"<loggers>\",{\"1\":{\"1921\":1}}],[\"<console\",{\"1\":{\"1921\":1}}],[\"<configuration>\",{\"1\":{\"1925\":1}}],[\"<configuration\",{\"1\":{\"1921\":1}}],[\"<appender\",{\"1\":{\"1925\":2}}],[\"<appenderref\",{\"1\":{\"1921\":1}}],[\"<appenders>\",{\"1\":{\"1921\":1}}],[\"<artifactid>slf4j\",{\"1\":{\"1924\":1}}],[\"<artifactid>logback\",{\"1\":{\"1924\":1}}],[\"<artifactid>log4j\",{\"1\":{\"1920\":2}}],[\"<artifactid>mockito\",{\"1\":{\"1858\":1}}],[\"<artifactid>junit\",{\"1\":{\"1851\":2}}],[\"<version>1\",{\"1\":{\"1924\":2}}],[\"<version>2\",{\"1\":{\"1920\":2}}],[\"<version>4\",{\"1\":{\"1858\":1}}],[\"<version>5\",{\"1\":{\"1851\":2}}],[\"<scope>test<\",{\"1\":{\"1851\":2,\"1858\":1}}],[\"<dependency>\",{\"1\":{\"1851\":2,\"1858\":1,\"1920\":2,\"1924\":2}}],[\"<dependencies>\",{\"1\":{\"1851\":1}}],[\"<t\",{\"1\":{\"1838\":2}}],[\"<u>\",{\"1\":{\"1836\":1}}],[\"<>\",{\"1\":{\"1836\":1}}],[\"<jsp\",{\"1\":{\"1681\":1}}],[\"<<=\",{\"1\":{\"197\":1}}],[\"<<\",{\"1\":{\"196\":1,\"197\":1,\"1149\":2,\"1315\":3}}],[\"<\",{\"1\":{\"194\":1,\"203\":1,\"224\":1,\"410\":1,\"428\":3,\"434\":4,\"895\":1,\"958\":1,\"959\":2,\"965\":1,\"1147\":2,\"1152\":3,\"1161\":1,\"1313\":2,\"1321\":1,\"1324\":1,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1356\":1,\"1360\":2,\"1447\":1,\"1818\":1,\"1839\":2,\"1851\":3,\"1858\":1,\"1906\":1,\"1920\":2,\"1921\":6,\"1924\":2,\"1925\":5,\"1961\":1,\"1962\":1,\"1966\":1,\"2001\":1}}],[\"<=\",{\"1\":{\"166\":1,\"194\":1,\"700\":2,\"856\":1,\"1147\":2,\"1152\":1,\"1166\":1,\"1313\":2,\"1331\":2,\"1963\":1}}],[\"大规模并发的网络应用\",{\"1\":{\"1892\":1}}],[\"大量使用反射来实现依赖注入\",{\"1\":{\"1832\":1}}],[\"大多数\",{\"1\":{\"1797\":1}}],[\"大多数的文明都逃不过衰退消亡的命运\",{\"1\":{\"992\":1}}],[\"大数据\",{\"0\":{\"1463\":1}}],[\"大会召开\",{\"1\":{\"1258\":1}}],[\"大纲级别\",{\"1\":{\"1110\":1}}],[\"大小写\",{\"1\":{\"1953\":1}}],[\"大小写敏感\",{\"1\":{\"1275\":1}}],[\"大小尺度小于它作用的波长\",{\"1\":{\"1053\":1}}],[\"大小为\",{\"1\":{\"619\":1}}],[\"大型项目评估\",{\"1\":{\"775\":1}}],[\"大钢板的宽和长\",{\"1\":{\"700\":1}}],[\"大于等于\",{\"1\":{\"194\":1,\"1147\":1,\"1313\":1}}],[\"大于\",{\"1\":{\"194\":1,\"1147\":1,\"1313\":1}}],[\"大海\",{\"2\":{\"68\":1}}],[\"等方法\",{\"1\":{\"2037\":1}}],[\"等方法进行同步包装\",{\"1\":{\"1742\":1}}],[\"等包中\",{\"1\":{\"2036\":1}}],[\"等待写入线程调用\",{\"1\":{\"1970\":1}}],[\"等待调用\",{\"1\":{\"1965\":1}}],[\"等待客户端连接\",{\"1\":{\"1890\":1}}],[\"等协议\",{\"1\":{\"1940\":1,\"2040\":1}}],[\"等组件\",{\"1\":{\"1893\":1}}],[\"等核心组件\",{\"1\":{\"1878\":1}}],[\"等技术\",{\"1\":{\"1832\":1}}],[\"等集合\",{\"1\":{\"1824\":1}}],[\"等集合类本身是线程安全的\",{\"1\":{\"1742\":1}}],[\"等场景\",{\"1\":{\"1781\":1}}],[\"等同于\",{\"1\":{\"1699\":1,\"1700\":1}}],[\"等价性\",{\"1\":{\"1676\":1}}],[\"等价于\",{\"1\":{\"139\":1}}],[\"等函数\",{\"1\":{\"1192\":1}}],[\"等含义\",{\"1\":{\"1053\":1}}],[\"等多种指标\",{\"1\":{\"761\":1}}],[\"等库来实现梯度提升机\",{\"1\":{\"609\":1}}],[\"等库的基本用法\",{\"1\":{\"456\":1}}],[\"等\",{\"1\":{\"440\":1,\"718\":1,\"805\":1,\"1051\":2,\"1259\":1,\"1291\":1,\"1292\":2,\"1305\":1,\"1630\":2,\"1697\":1,\"1704\":1,\"1742\":1,\"1769\":1,\"1812\":1,\"1837\":1,\"1887\":1,\"1896\":1,\"1914\":1,\"1928\":1,\"1974\":2,\"1990\":1,\"2037\":4,\"2044\":4,\"2212\":1,\"2214\":1}}],[\"等于\",{\"1\":{\"194\":1,\"1147\":1,\"1162\":2,\"1167\":1,\"1168\":1,\"1313\":1}}],[\"取出并移除优先级最高的元素\",{\"1\":{\"1764\":1}}],[\"取出并移除队列头部元素\",{\"1\":{\"1762\":1,\"1766\":1,\"1768\":1}}],[\"取模后赋值\",{\"1\":{\"1312\":1}}],[\"取模\",{\"1\":{\"1311\":1}}],[\"取值范围为\",{\"1\":{\"1286\":4,\"1288\":1}}],[\"取得最大值或最小值\",{\"1\":{\"715\":1}}],[\"取负号因为scipy是最小化问题\",{\"1\":{\"384\":1}}],[\"取余赋值\",{\"1\":{\"197\":1}}],[\"取余\",{\"1\":{\"193\":1}}],[\"取整除赋值\",{\"1\":{\"197\":1}}],[\"取整除\",{\"1\":{\"193\":1}}],[\"加入学习小组或在线社区\",{\"1\":{\"2217\":1}}],[\"加密\",{\"1\":{\"2045\":1}}],[\"加后赋值\",{\"1\":{\"1312\":1}}],[\"加强理论联系实际的解决问题的能力培养\",{\"1\":{\"1028\":1}}],[\"加权和法\",{\"1\":{\"841\":1}}],[\"加权求和法\",{\"1\":{\"763\":1}}],[\"加快收敛速度\",{\"1\":{\"834\":1}}],[\"加载数据库驱动程序\",{\"0\":{\"1978\":1},\"1\":{\"1976\":1}}],[\"加载数据集\",{\"1\":{\"535\":1}}],[\"加载\",{\"1\":{\"1192\":1,\"1978\":1}}],[\"加载预训练的人脸检测模型\",{\"1\":{\"827\":1}}],[\"加载并预处理数据集\",{\"1\":{\"610\":1}}],[\"加载示例数据集\",{\"1\":{\"497\":1,\"524\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"590\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2}}],[\"加法函数\",{\"1\":{\"1179\":1}}],[\"加法赋值\",{\"1\":{\"197\":1}}],[\"加法\",{\"1\":{\"193\":1,\"1146\":1,\"1216\":2,\"1311\":1}}],[\"加粗\",{\"1\":{\"19\":2}}],[\"比\",{\"1\":{\"1969\":1}}],[\"比较两个对象是否\",{\"1\":{\"1668\":1}}],[\"比较操作\",{\"1\":{\"1310\":1}}],[\"比较运算符用于比较两个值的关系\",{\"1\":{\"1313\":1}}],[\"比较运算符\",{\"0\":{\"194\":1,\"1313\":1}}],[\"比较运算\",{\"1\":{\"192\":1}}],[\"比暴力法更高效\",{\"1\":{\"410\":1}}],[\"比如在\",{\"1\":{\"1681\":1}}],[\"比如类转换异常\",{\"1\":{\"1536\":1}}],[\"比如\",{\"1\":{\"1106\":2,\"1291\":1}}],[\"比如让光\",{\"1\":{\"1053\":1}}],[\"比如识别不同类别的样本\",{\"1\":{\"567\":1}}],[\"比如整数\",{\"1\":{\"139\":1}}],[\"比如数字\",{\"1\":{\"139\":1}}],[\"比如判断某个条件是否成立\",{\"1\":{\"139\":1}}],[\"整个输入序列是否匹配正则表达式\",{\"1\":{\"1951\":1}}],[\"整理\",{\"1\":{\"464\":1}}],[\"整数缓冲区\",{\"1\":{\"1884\":1}}],[\"整数常量\",{\"1\":{\"1292\":2}}],[\"整数类型\",{\"0\":{\"1286\":1},\"1\":{\"1285\":1}}],[\"整数约束\",{\"0\":{\"725\":1},\"1\":{\"725\":1,\"737\":1}}],[\"整数规划模型\",{\"0\":{\"723\":1}}],[\"整数规划问题的决策变量被限制为整数\",{\"1\":{\"707\":1}}],[\"整数规划\",{\"0\":{\"707\":1},\"1\":{\"382\":1,\"415\":1,\"694\":1}}],[\"整数转换为字符串\",{\"1\":{\"187\":1}}],[\"整数转换为浮点数\",{\"1\":{\"186\":1}}],[\"整型变量的默认值是\",{\"1\":{\"1302\":1}}],[\"整型是没有限制大小的\",{\"1\":{\"137\":1}}],[\"整型\",{\"1\":{\"137\":1}}],[\"转\",{\"1\":{\"2160\":1}}],[\"转置和求逆\",{\"1\":{\"1222\":1}}],[\"转置\",{\"1\":{\"1151\":1}}],[\"转置等操作\",{\"1\":{\"1151\":1}}],[\"转置矩阵以对变量进行聚类\",{\"1\":{\"565\":1}}],[\"转移到状态\",{\"1\":{\"646\":1}}],[\"转移概率矩阵\",{\"1\":{\"646\":1,\"649\":1,\"650\":1}}],[\"转换到频域求解\",{\"1\":{\"883\":1}}],[\"转换图像的颜色空间\",{\"1\":{\"808\":1}}],[\"转换\",{\"1\":{\"762\":1}}],[\"转换数据\",{\"1\":{\"616\":1}}],[\"转换为\",{\"1\":{\"1297\":2,\"1385\":1}}],[\"转换为灰度图像\",{\"1\":{\"808\":1,\"818\":1}}],[\"转换为字典\",{\"0\":{\"191\":1}}],[\"转换为字符串\",{\"0\":{\"187\":1}}],[\"转换为集合\",{\"0\":{\"190\":1},\"1\":{\"190\":1}}],[\"转换为元组\",{\"0\":{\"189\":1},\"1\":{\"189\":1}}],[\"转换为列表\",{\"0\":{\"188\":1},\"1\":{\"188\":1}}],[\"转换为浮点数\",{\"0\":{\"186\":1}}],[\"转换为整数\",{\"0\":{\"185\":1}}],[\"转义字符用于表示某些不能直接打印的字符或具有特殊含义的字符\",{\"1\":{\"1292\":1}}],[\"转义字符\",{\"0\":{\"33\":1},\"1\":{\"1292\":1,\"1947\":1}}],[\"命名和保护\",{\"1\":{\"2189\":1}}],[\"命名空间\",{\"1\":{\"1617\":1}}],[\"命名约定\",{\"1\":{\"183\":1}}],[\"命令窗口中调用这个函数\",{\"1\":{\"1182\":1}}],[\"命令的\",{\"1\":{\"1181\":1}}],[\"命令查看文档\",{\"1\":{\"1179\":1}}],[\"命令与环境\",{\"0\":{\"1106\":1}}],[\"命令\",{\"0\":{\"1124\":1},\"1\":{\"1109\":1},\"2\":{\"113\":1}}],[\"值可重复\",{\"1\":{\"1797\":1}}],[\"值可以在程序执行过程中更改\",{\"1\":{\"183\":1}}],[\"值仍然是正确的\",{\"1\":{\"1548\":1}}],[\"值得注意的是\",{\"1\":{\"1259\":1}}],[\"值为2\",{\"1\":{\"1364\":1}}],[\"值为1\",{\"1\":{\"1353\":1}}],[\"值为\",{\"1\":{\"1191\":1}}],[\"值为该数字平方的字典\",{\"1\":{\"223\":1}}],[\"值越大越好\",{\"1\":{\"515\":1}}],[\"值\",{\"1\":{\"427\":1,\"715\":1,\"933\":1,\"1203\":1,\"1705\":3,\"1728\":1,\"1784\":2,\"1799\":1,\"1800\":1,\"1806\":1,\"1808\":1}}],[\"值在程序执行过程中不应更改\",{\"1\":{\"183\":1}}],[\"值的可变性\",{\"1\":{\"183\":1}}],[\"值是它们的平方\",{\"1\":{\"173\":1}}],[\"重绕缓冲区\",{\"1\":{\"1885\":1}}],[\"重写时需遵循严格的契约\",{\"1\":{\"1678\":1}}],[\"重写时需要满足自反性\",{\"1\":{\"1668\":1}}],[\"重写原则\",{\"1\":{\"1676\":1}}],[\"重写建议\",{\"1\":{\"1668\":1,\"1669\":1}}],[\"重写发生在继承关系中\",{\"1\":{\"1524\":1}}],[\"重写是子类提供父类方法的具体实现\",{\"1\":{\"1518\":1}}],[\"重写\",{\"1\":{\"1517\":1,\"1524\":1,\"1677\":4,\"1682\":1}}],[\"重写和重载\",{\"0\":{\"1517\":1}}],[\"重写的方法必须具有相同的名称\",{\"1\":{\"1515\":1}}],[\"重写父类方法\",{\"1\":{\"1509\":1}}],[\"重载发生在同一个类中\",{\"1\":{\"1524\":1}}],[\"重载是指在同一个类中定义多个方法名相同但参数不同的方法\",{\"1\":{\"1521\":1}}],[\"重载\",{\"0\":{\"1476\":1},\"1\":{\"1457\":1,\"1524\":1}}],[\"重载以及修饰符的使用是学习java编程的重要部分\",{\"1\":{\"1348\":1}}],[\"重载方法可以有不同的参数数量或类型\",{\"1\":{\"1521\":1}}],[\"重载方法\",{\"1\":{\"1343\":2}}],[\"重启人生\",{\"0\":{\"1006\":1},\"2\":{\"1008\":1}}],[\"重建和拟合\",{\"1\":{\"674\":1}}],[\"重新构建复杂的概念和解决方案\",{\"1\":{\"998\":1}}],[\"重新计算每个簇的质心\",{\"1\":{\"511\":1}}],[\"重新赋值\",{\"1\":{\"182\":1}}],[\"重组\",{\"1\":{\"431\":1}}],[\"重复执行某个任务是很常见的\",{\"1\":{\"2158\":1}}],[\"重复元素\",{\"1\":{\"1786\":1,\"1788\":1}}],[\"重复元组\",{\"1\":{\"154\":1}}],[\"重复数组\",{\"1\":{\"1156\":1}}],[\"重复以下步骤直到所有顶点都加入生成树\",{\"1\":{\"965\":1}}],[\"重复步骤3\",{\"1\":{\"958\":1,\"964\":1}}],[\"重复步骤\",{\"1\":{\"511\":1}}],[\"重复步骤4和步骤5\",{\"1\":{\"409\":2}}],[\"重复步骤2\",{\"1\":{\"398\":1,\"959\":1}}],[\"重复上述过程直到队列为空\",{\"1\":{\"405\":1}}],[\"重复直到所有顶点都被访问\",{\"1\":{\"404\":1}}],[\"重命名文件等功能\",{\"1\":{\"2039\":1}}],[\"重命名文件或目录\",{\"1\":{\"1439\":1}}],[\"重命名文件\",{\"1\":{\"256\":1}}],[\"常与\",{\"1\":{\"1923\":1}}],[\"常数空间复杂度\",{\"1\":{\"2163\":1}}],[\"常数时间复杂度\",{\"1\":{\"2162\":1}}],[\"常数\",{\"0\":{\"1217\":1}}],[\"常见于一些简单的排序算法\",{\"1\":{\"2162\":1}}],[\"常见于许多高效的排序算法\",{\"1\":{\"2162\":1}}],[\"常见于电商\",{\"1\":{\"599\":1}}],[\"常见事件监听器接口\",{\"0\":{\"2030\":1}}],[\"常见用途\",{\"0\":{\"1837\":1}}],[\"常见集合类\",{\"0\":{\"1736\":1}}],[\"常见实现类有\",{\"1\":{\"1735\":4}}],[\"常见应用场景\",{\"0\":{\"1417\":1}}],[\"常见问题\",{\"0\":{\"1365\":1}}],[\"常见jvm问题与调试\",{\"0\":{\"1269\":1}}],[\"常见操作包括膨胀\",{\"1\":{\"825\":1}}],[\"常见博弈模型示例\",{\"0\":{\"748\":1}}],[\"常见分类算法\",{\"0\":{\"576\":1}}],[\"常见算法\",{\"1\":{\"530\":1,\"531\":1}}],[\"常见的数据结构包括数组\",{\"1\":{\"2208\":1}}],[\"常见的数据类型转换包括整数\",{\"1\":{\"184\":1}}],[\"常见的空间复杂度包括\",{\"1\":{\"2163\":1}}],[\"常见的时间复杂度有\",{\"1\":{\"2162\":1}}],[\"常见的标志有\",{\"1\":{\"1953\":1}}],[\"常见的标准化方法包括\",{\"1\":{\"759\":1,\"763\":1}}],[\"常见的协议有\",{\"1\":{\"1930\":1}}],[\"常见的日志级别有\",{\"1\":{\"1917\":1}}],[\"常见的元注解包括\",{\"1\":{\"1845\":1}}],[\"常见的内置注解\",{\"0\":{\"1843\":1}}],[\"常见的泛型参数符号包括\",{\"1\":{\"1836\":1}}],[\"常见的实现类包括\",{\"1\":{\"1767\":1}}],[\"常见的实体模型包括\",{\"1\":{\"671\":1}}],[\"常见的\",{\"1\":{\"1727\":1,\"1728\":1,\"1769\":1}}],[\"常见的链表类型有单向链表和双向链表\",{\"1\":{\"1723\":1}}],[\"常见的检查异常包括ioexception\",{\"1\":{\"1450\":1}}],[\"常见的转义字符包括\",{\"1\":{\"1292\":1}}],[\"常见的常量类型包括\",{\"1\":{\"1292\":1}}],[\"常见的插值方法包括最近邻插值\",{\"1\":{\"947\":1}}],[\"常见的多项式插值方法包括拉格朗日插值和牛顿插值\",{\"1\":{\"933\":1}}],[\"常见的偏微分方程\",{\"0\":{\"881\":1}}],[\"常见的模型如solow经济增长模型\",{\"1\":{\"850\":1}}],[\"常见的模型如sir模型和seir模型\",{\"1\":{\"850\":1}}],[\"常见的模型如捕食\",{\"1\":{\"850\":1}}],[\"常见的模型如自由落体运动\",{\"1\":{\"850\":1}}],[\"常见的模型如malthus模型和logistic模型\",{\"1\":{\"850\":1}}],[\"常见的模式包括\",{\"1\":{\"251\":1}}],[\"常见的颜色模型包括rgb\",{\"1\":{\"785\":1}}],[\"常见的计算方法包括\",{\"1\":{\"763\":1}}],[\"常见的权重赋值方法包括\",{\"1\":{\"763\":1}}],[\"常见的方法包括\",{\"1\":{\"760\":1}}],[\"常见的综合评价方法\",{\"0\":{\"754\":1}}],[\"常见的神经网络模型包括前馈神经网络\",{\"1\":{\"653\":1}}],[\"常见的神经网络类型\",{\"0\":{\"441\":1}}],[\"常见的预测方法包括\",{\"1\":{\"631\":1}}],[\"常见的降维方法有\",{\"1\":{\"614\":1}}],[\"常见的特征提取方法包括\",{\"1\":{\"586\":1}}],[\"常见的聚类算法包括\",{\"1\":{\"586\":1}}],[\"常见的分类算法包括\",{\"1\":{\"586\":1}}],[\"常见的回归分析方法包括线性回归\",{\"1\":{\"471\":1}}],[\"常见的假设检验方法包括t检验\",{\"1\":{\"466\":1}}],[\"常见的有均方误差\",{\"1\":{\"440\":1}}],[\"常见的激活函数有relu\",{\"1\":{\"440\":1}}],[\"常见的交叉方式有单点交叉\",{\"1\":{\"432\":1}}],[\"常见的智能优化算法包括\",{\"1\":{\"420\":1}}],[\"常见的启发式算法包括\",{\"1\":{\"416\":1}}],[\"常见的确定性优化算法包括\",{\"1\":{\"415\":1}}],[\"常见的错误类型\",{\"0\":{\"245\":1}}],[\"常微分方程模型\",{\"0\":{\"847\":1}}],[\"常微分方程\",{\"0\":{\"848\":1},\"1\":{\"378\":1,\"382\":1}}],[\"常用工具类和\",{\"0\":{\"2042\":1}}],[\"常用工具有lagrange乘数法\",{\"1\":{\"382\":1}}],[\"常用工具有simplex方法\",{\"1\":{\"382\":1}}],[\"常用类和api\",{\"0\":{\"2035\":1}}],[\"常用\",{\"0\":{\"2025\":1}}],[\"常用子类包括\",{\"1\":{\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1}}],[\"常用api\",{\"1\":{\"1457\":1}}],[\"常用正则表达式语法\",{\"0\":{\"1411\":1}}],[\"常用命令\",{\"0\":{\"1108\":1}}],[\"常用算法\",{\"0\":{\"834\":1}}],[\"常用算法包括canny\",{\"1\":{\"788\":1}}],[\"常用算法有ford\",{\"1\":{\"382\":1}}],[\"常用算法有dijkstra算法\",{\"1\":{\"382\":1}}],[\"常用模型\",{\"0\":{\"765\":1}}],[\"常用模块\",{\"0\":{\"236\":1}}],[\"常用聚类方法\",{\"0\":{\"510\":1}}],[\"常用方法有\",{\"1\":{\"2037\":2}}],[\"常用方法及其使用方式\",{\"1\":{\"1664\":1}}],[\"常用方法\",{\"0\":{\"1370\":1,\"1373\":1,\"1376\":1,\"1382\":1,\"1391\":1,\"1423\":1,\"1426\":1},\"1\":{\"508\":1,\"1401\":1,\"1402\":1,\"1415\":1,\"1416\":1,\"1439\":1,\"1778\":1}}],[\"常用的类和\",{\"1\":{\"2035\":1}}],[\"常用的javadoc标签\",{\"0\":{\"2001\":1}}],[\"常用的日志框架有\",{\"1\":{\"1914\":1}}],[\"常用的日志框架\",{\"0\":{\"1914\":1}}],[\"常用的缓冲区类型有\",{\"1\":{\"1884\":1}}],[\"常用的\",{\"0\":{\"1875\":1},\"1\":{\"1760\":1}}],[\"常用的方法包括\",{\"1\":{\"1424\":1}}],[\"常用的方法有轮盘赌选择\",{\"1\":{\"432\":1}}],[\"常用的方式有使用scanner类来读取用户输入\",{\"1\":{\"1420\":1}}],[\"常用的算法包括\",{\"1\":{\"834\":1}}],[\"常用的可视化方法包括雷达图\",{\"1\":{\"763\":1}}],[\"常用的评估指标包括\",{\"1\":{\"586\":1}}],[\"常用的评估指标包括准确率\",{\"1\":{\"532\":1}}],[\"常用的模式识别方法\",{\"0\":{\"586\":1}}],[\"常用的判别分析方法包括线性判别分析\",{\"1\":{\"567\":1}}],[\"常用的相关系数包括皮尔逊相关系数\",{\"1\":{\"469\":1}}],[\"常用的信度系数包括cronbach\",{\"1\":{\"467\":1}}],[\"常用的数学建模方法\",{\"0\":{\"382\":1}}],[\"常用于递归算法\",{\"1\":{\"1730\":1}}],[\"常用于任务调度\",{\"1\":{\"1727\":1}}],[\"常用于在不同层\",{\"1\":{\"1681\":1}}],[\"常用于线程安全控制\",{\"1\":{\"1308\":1}}],[\"常用于图像匹配和对象识别\",{\"1\":{\"826\":1}}],[\"常用于原型开发和算法验证\",{\"1\":{\"794\":1}}],[\"常用于自然物体的建模\",{\"1\":{\"677\":1}}],[\"常用于不确定性分析和风险评估\",{\"1\":{\"631\":1}}],[\"常用于一些无法获取大量数据的领域\",{\"1\":{\"631\":1}}],[\"常用于高维数据的可视化\",{\"1\":{\"617\":1}}],[\"常用于将高维数据降到2d或3d\",{\"1\":{\"614\":1}}],[\"常用于游戏ai\",{\"1\":{\"596\":1}}],[\"常用于变量归类和降维\",{\"1\":{\"566\":1}}],[\"常用于分类样本\",{\"1\":{\"566\":1}}],[\"常用于多元回归中\",{\"1\":{\"493\":1}}],[\"常用于预测和解释数据\",{\"1\":{\"490\":1}}],[\"常用于预测和因果分析\",{\"1\":{\"382\":1}}],[\"常用于排队论\",{\"1\":{\"382\":1}}],[\"常用于经济\",{\"1\":{\"382\":1}}],[\"常用于组合优化问题\",{\"1\":{\"382\":1}}],[\"常用来解决路径优化\",{\"1\":{\"382\":1}}],[\"常用库\",{\"0\":{\"293\":1}}],[\"常用链接\",{\"0\":{\"50\":1,\"91\":1}}],[\"常量更具类型安全性和可读性\",{\"1\":{\"1613\":1}}],[\"常量更具可读性和类型安全性\",{\"1\":{\"1602\":1}}],[\"常量是指在程序运行过程中其值保持不变的量\",{\"1\":{\"1292\":1}}],[\"常量是其值在程序的执行过程中不能改变的存储单元\",{\"1\":{\"181\":1}}],[\"常量和转义字符是编程中经常使用的概念\",{\"1\":{\"1292\":1}}],[\"常量的定义和使用\",{\"0\":{\"182\":1}}],[\"常量\",{\"0\":{\"181\":1,\"1292\":1,\"1396\":1},\"1\":{\"183\":2,\"1265\":1,\"1292\":1,\"1308\":1,\"1390\":1,\"1558\":1}}],[\"键盘\",{\"1\":{\"2207\":1}}],[\"键或\",{\"1\":{\"1806\":1,\"1808\":1}}],[\"键或值\",{\"1\":{\"1799\":1}}],[\"键值对按键的自然顺序或指定的比较器顺序排序\",{\"1\":{\"1799\":1,\"1804\":1}}],[\"键值对的集合\",{\"1\":{\"1735\":1}}],[\"键不能为\",{\"1\":{\"1797\":1}}],[\"键唯一\",{\"1\":{\"1797\":1}}],[\"键\",{\"1\":{\"1740\":1,\"1799\":1,\"1801\":1}}],[\"键按自然顺序或指定的比较器排序\",{\"1\":{\"1740\":1}}],[\"键按自然顺序或比较器排序\",{\"1\":{\"1728\":1}}],[\"键和值\",{\"1\":{\"1740\":1}}],[\"键和多个\",{\"1\":{\"1728\":1,\"1799\":1,\"1800\":1}}],[\"键无序\",{\"1\":{\"1728\":1}}],[\"键是\",{\"1\":{\"173\":1}}],[\"键必须是唯一的\",{\"1\":{\"167\":1}}],[\"通道的常用实现类有\",{\"1\":{\"1882\":1}}],[\"通道是双向的\",{\"1\":{\"1882\":1}}],[\"通道\",{\"0\":{\"1882\":1},\"1\":{\"1881\":1,\"1882\":1}}],[\"通道等\",{\"1\":{\"683\":1}}],[\"通配符还可以限定上下限\",{\"1\":{\"1839\":1}}],[\"通配符\",{\"0\":{\"1839\":1},\"1\":{\"1839\":1}}],[\"通用队列实现\",{\"1\":{\"1769\":1}}],[\"通信\",{\"1\":{\"1116\":1}}],[\"通解为\",{\"1\":{\"866\":1}}],[\"通货膨胀\",{\"1\":{\"850\":1}}],[\"通知材料\",{\"1\":{\"379\":1}}],[\"通过大量的编程练习\",{\"1\":{\"2217\":1}}],[\"通过大学生英语六级水平考试\",{\"1\":{\"1032\":1}}],[\"通过命令行或图形用户界面\",{\"1\":{\"2189\":1}}],[\"通过函数调用自身来解决问题\",{\"1\":{\"2160\":1}}],[\"通过函数你可以将复杂的代码分解为易于管理和理解的模块化代码\",{\"1\":{\"1179\":1}}],[\"通过熟悉它们可以提高开发效率和代码质量\",{\"1\":{\"2049\":1}}],[\"通过熟练使用迭代器和类似生成器的工具\",{\"1\":{\"1824\":1}}],[\"通过熟练掌握数组的基本操作\",{\"1\":{\"1366\":1}}],[\"通过调用组件的\",{\"1\":{\"2031\":1}}],[\"通过调整图像的亮度分布来增强对比度\",{\"1\":{\"787\":1}}],[\"通过调整超参数\",{\"1\":{\"532\":1}}],[\"通过确保类只有一个实例\",{\"1\":{\"2017\":1}}],[\"通过该访问点可以获取唯一的实例\",{\"1\":{\"2007\":1}}],[\"通过optional\",{\"1\":{\"1995\":1}}],[\"通过stream\",{\"1\":{\"1992\":1}}],[\"通过scikit\",{\"1\":{\"573\":1,\"583\":1}}],[\"通过实现接口的方式可以避免类继承的限制\",{\"1\":{\"1962\":1}}],[\"通过结合使用线程\",{\"1\":{\"1944\":1}}],[\"通过结合先验概率和条件概率来计算后验概率\",{\"1\":{\"522\":1}}],[\"通过处理流来增强基本流的功能\",{\"1\":{\"1879\":1}}],[\"通过网络传输对象的状态\",{\"1\":{\"1861\":1}}],[\"通过网络传输或在分布式系统中传递时非常有用\",{\"1\":{\"1680\":1}}],[\"通过编写单元测试\",{\"1\":{\"1849\":1}}],[\"通过注解配置依赖关系\",{\"1\":{\"1847\":1}}],[\"通过自定义逻辑生成序列元素\",{\"1\":{\"1817\":1}}],[\"通过自动学习图像的特征\",{\"1\":{\"792\":1}}],[\"通过根据应用场景选择合适的栈实现\",{\"1\":{\"1779\":1}}],[\"通过选择适合的队列实现类\",{\"1\":{\"1769\":1}}],[\"通过选择适当的阈值\",{\"1\":{\"788\":1}}],[\"通过选择合适的\",{\"1\":{\"1755\":1}}],[\"通过索引访问元素\",{\"1\":{\"1747\":1}}],[\"通过类和对象来组织代码\",{\"1\":{\"1716\":1}}],[\"通过类加载器将字节码加载到内存中\",{\"1\":{\"1266\":1}}],[\"通过隐藏具体实现细节而只展示必要特征\",{\"1\":{\"1709\":1}}],[\"通过它\",{\"1\":{\"1709\":1}}],[\"通过封装\",{\"1\":{\"1709\":1}}],[\"通过遵循\",{\"1\":{\"1683\":1}}],[\"通过配置文件或注解\",{\"1\":{\"1681\":1}}],[\"通过borrowable接口实现多态\",{\"1\":{\"1662\":1}}],[\"通过反射可以创建动态代理对象\",{\"1\":{\"1649\":1}}],[\"通过反射\",{\"1\":{\"1639\":1,\"1825\":1,\"1828\":1,\"1832\":1}}],[\"通过包可以将相关的类和接口组织在一起\",{\"1\":{\"1632\":1}}],[\"通过接口实现模块间的解耦\",{\"1\":{\"1585\":1}}],[\"通过接口引用不同的实现类\",{\"1\":{\"1585\":1}}],[\"通过良好的封装实践\",{\"1\":{\"1571\":1}}],[\"通过提供公共方法来操作数据\",{\"1\":{\"1569\":1}}],[\"通过公共方法访问和修改属性\",{\"1\":{\"1568\":1}}],[\"通过公共接口\",{\"1\":{\"1471\":1}}],[\"通过\",{\"1\":{\"1564\":1,\"1659\":1,\"1710\":1,\"1886\":1,\"1935\":1,\"1946\":1,\"1957\":1,\"1974\":1,\"1986\":1,\"1987\":1}}],[\"通过getanimal方法返回一个具体的animal对象\",{\"1\":{\"1541\":1}}],[\"通过向上转型\",{\"1\":{\"1541\":1}}],[\"通过方法重写\",{\"1\":{\"1531\":1}}],[\"通过方法可以实现代码重用\",{\"1\":{\"1348\":1}}],[\"通过不同的参数列表来区分不同的方法\",{\"1\":{\"1524\":1}}],[\"通过不断运行测试来驱动代码的开发\",{\"1\":{\"247\":1}}],[\"通过重写\",{\"1\":{\"1518\":1}}],[\"通过继承\",{\"1\":{\"1470\":1,\"1961\":1}}],[\"通过适当地使用java的异常处理机制\",{\"1\":{\"1453\":1}}],[\"通过异常处理\",{\"1\":{\"1442\":1}}],[\"通过元字符\",{\"1\":{\"1419\":1}}],[\"通过理解和利用number类及其子类\",{\"1\":{\"1387\":1}}],[\"通过理解和使用这些运算符\",{\"1\":{\"199\":1}}],[\"通过性能监控工具\",{\"1\":{\"1269\":1}}],[\"通过设置jvm启动参数\",{\"1\":{\"1267\":1}}],[\"通过垃圾回收机制回收不再使用的对象\",{\"1\":{\"1266\":1}}],[\"通过掌握这些基础\",{\"1\":{\"1156\":1}}],[\"通过以上两个算法的实现和示例\",{\"1\":{\"965\":1}}],[\"通过所有数据点\",{\"1\":{\"938\":1}}],[\"通过在两个方向上分别进行线性插值来估算未知点的值\",{\"1\":{\"933\":1}}],[\"通过在模型中增加惩罚项来约束模型复杂度\",{\"1\":{\"533\":1}}],[\"通过插值\",{\"1\":{\"932\":1}}],[\"通过数值方法近似求解\",{\"1\":{\"883\":1}}],[\"通过数值迭代的方法求解较复杂的差分方程\",{\"1\":{\"874\":1}}],[\"通过数学手段或计算方法寻找一个函数的最大值或最小值的过程\",{\"1\":{\"414\":1}}],[\"通过代入初始条件逐步求解\",{\"1\":{\"865\":1}}],[\"通过运行上述代码\",{\"1\":{\"858\":1}}],[\"通过比较法医到达时间前尸体温度\",{\"1\":{\"857\":1}}],[\"通过拟合实验数据建立模型\",{\"1\":{\"849\":1}}],[\"通过微分方程模型可以设计和优化控制策略\",{\"1\":{\"849\":1}}],[\"通过上述步骤构建模型\",{\"1\":{\"842\":1}}],[\"通过上面的代码\",{\"1\":{\"626\":1}}],[\"通过求解微分方程\",{\"1\":{\"849\":1}}],[\"通过求解得到一组pareto最优解\",{\"1\":{\"841\":1}}],[\"通过求解广义特征值问题\",{\"1\":{\"520\":1}}],[\"通过绘制pareto前沿来分析和选择最优解\",{\"1\":{\"841\":1}}],[\"通过绘制目标函数值随迭代次数的变化曲线来观察优化过程\",{\"1\":{\"429\":1}}],[\"通过引入罚函数处理约束条件\",{\"1\":{\"834\":1}}],[\"通过引入l2正则化来防止过拟合\",{\"1\":{\"498\":1}}],[\"通过直方图均衡化\",{\"1\":{\"809\":1}}],[\"通过成对比较\",{\"1\":{\"774\":1}}],[\"通过成对比较矩阵来确定各个指标的相对权重\",{\"1\":{\"766\":1}}],[\"通过隶属度函数来计算各个方案的模糊综合得分\",{\"1\":{\"770\":1}}],[\"通过层次结构的分解\",{\"1\":{\"766\":1}}],[\"通过科学合理的数据处理\",{\"1\":{\"764\":1}}],[\"通过专家评分确定各指标权重\",{\"1\":{\"763\":1}}],[\"通过专家讨论或问卷调查\",{\"1\":{\"758\":1}}],[\"通过减去均值后除以标准差\",{\"1\":{\"759\":1}}],[\"通过查阅相关文献\",{\"1\":{\"758\":1}}],[\"通过量化或定性描述不同方案的优劣\",{\"1\":{\"756\":1}}],[\"通过构建判断矩阵\",{\"1\":{\"763\":1}}],[\"通过构建层次结构模型\",{\"1\":{\"754\":1}}],[\"通过构建多棵决策树并结合它们的预测结果来提高分类性能\",{\"1\":{\"580\":1,\"604\":1}}],[\"通过建立微分方程模型\",{\"1\":{\"848\":1}}],[\"通过建立和求解这些线性规划模型\",{\"1\":{\"717\":1}}],[\"通过建立数学模型\",{\"1\":{\"694\":1}}],[\"通过连接沿路径曲线移动的截面曲线\",{\"1\":{\"679\":1}}],[\"通过连接顶点的边线来构造模型\",{\"1\":{\"673\":1}}],[\"通过分形几何描述自然界中复杂的形状\",{\"1\":{\"677\":1}}],[\"通过分析各方案与理想方案之间的灰色关联度来进行排序\",{\"1\":{\"769\":1}}],[\"通过分析不同序列之间的关联度来确定各因素的重要性\",{\"1\":{\"638\":1}}],[\"通过分析图像特征进行分类\",{\"1\":{\"523\":1}}],[\"通过分析客户的历史数据来预测信用风险或贷款违约风险\",{\"1\":{\"523\":1}}],[\"通过3d扫描仪生成的点云可以用来创建物体的数字模型\",{\"1\":{\"674\":1}}],[\"通过参数化方程来定义曲面\",{\"1\":{\"672\":1}}],[\"通过布尔运算\",{\"1\":{\"671\":1}}],[\"通过表示对象的表面来定义实体的几何形状\",{\"1\":{\"671\":1}}],[\"通过一个简单的python示例来展示如何构建和使用马尔科夫预测模型\",{\"1\":{\"648\":1}}],[\"通过马尔科夫链的状态转移来修正灰色预测的结果\",{\"1\":{\"637\":1}}],[\"通过最小化观测值与拟合函数之间的误差平方和来确定模型参数\",{\"1\":{\"939\":1}}],[\"通过最小化误差平方和来确定模型参数\",{\"1\":{\"939\":1}}],[\"通过最小化废料或优化材料使用来进行切割\",{\"1\":{\"692\":1}}],[\"通过最小二乘法估计参数\",{\"1\":{\"634\":1}}],[\"通过最大化方差保留数据的最重要信息\",{\"1\":{\"620\":1}}],[\"通过最大化类间方差与类内方差之比来寻找最优投影方向\",{\"1\":{\"614\":1}}],[\"通过随机采样和统计方法模拟系统行为\",{\"1\":{\"631\":1}}],[\"通过随机抽样和统计分析解决复杂问题\",{\"1\":{\"382\":1}}],[\"通过先验知识和新的数据进行预测\",{\"1\":{\"631\":1}}],[\"通过特征值分解获得特征值和特征向量\",{\"1\":{\"626\":1}}],[\"通过线性规划技术\",{\"1\":{\"771\":1}}],[\"通过线性规划方法\",{\"1\":{\"754\":1}}],[\"通过线性变换将原始特征转换为一组新的不相关特征\",{\"1\":{\"615\":1}}],[\"通过线性判别分析对花卉的种类进行分类\",{\"1\":{\"524\":1}}],[\"通过将相似的邻近像素合并来分割区域\",{\"1\":{\"788\":1}}],[\"通过将图像表示为一系列余弦函数的加权和\",{\"1\":{\"786\":1}}],[\"通过将空间划分为体素\",{\"1\":{\"675\":1}}],[\"通过将数据隐藏在类内部\",{\"1\":{\"1569\":1}}],[\"通过将数据映射到2d或3d空间\",{\"1\":{\"617\":1}}],[\"通过将数据投影到主成分方向上\",{\"1\":{\"614\":1}}],[\"通过将问题分解为子问题\",{\"1\":{\"415\":1}}],[\"通过降维可以去除这些无关或噪声特征\",{\"1\":{\"614\":1}}],[\"通过降维可以减少计算时间和存储空间\",{\"1\":{\"614\":1}}],[\"通过降维技术\",{\"1\":{\"542\":1}}],[\"通过多线程\",{\"1\":{\"1958\":1}}],[\"通过多轮专家打分与反馈\",{\"1\":{\"758\":1}}],[\"通过多个输入变量来预测单一输出变量\",{\"1\":{\"635\":1}}],[\"通过多层网络结构来提取数据中的复杂特征\",{\"1\":{\"598\":1}}],[\"通过多次训练和测试分割来获得更稳健的性能估计\",{\"1\":{\"533\":1}}],[\"通过挖掘数据的内在结构进行分析和建模\",{\"1\":{\"594\":1}}],[\"通过学习输入与输出之间的映射关系来进行预测\",{\"1\":{\"593\":1}}],[\"通过合理使用java修饰符\",{\"1\":{\"1309\":1}}],[\"通过合理的优化算法可以显著降低材料浪费\",{\"1\":{\"701\":1}}],[\"通过合适的算法和工具\",{\"1\":{\"591\":1}}],[\"通过合并或分裂簇逐步生成聚类\",{\"1\":{\"540\":1}}],[\"通过计算每个方案与理想解和负理想解的欧几里得距离\",{\"1\":{\"768\":1}}],[\"通过计算指标的数据离散度来确定权重\",{\"1\":{\"767\":1}}],[\"通过计算各方案与理想方案之间的关联度\",{\"1\":{\"754\":1}}],[\"通过计算样本与最近邻居的距离进行分类\",{\"1\":{\"586\":1}}],[\"通过计算损失函数对权重的导数\",{\"1\":{\"440\":1}}],[\"通过训练模型对数据进行分类\",{\"1\":{\"586\":1}}],[\"通过聚类或主题模型分析大量未标注的文本数据\",{\"1\":{\"542\":1}}],[\"通过聚类分析将客户分成不同的细分市场\",{\"1\":{\"542\":1}}],[\"通过发现数据中的异常模式来检测潜在问题\",{\"1\":{\"542\":1}}],[\"通过找到数据的主要方向\",{\"1\":{\"541\":1}}],[\"通过迭代优化簇内数据点到质心的距离平方和\",{\"1\":{\"549\":1}}],[\"通过迭代优化\",{\"1\":{\"540\":1}}],[\"通过使用javadoc注释和javadoc工具\",{\"1\":{\"2004\":1}}],[\"通过使用junit框架\",{\"1\":{\"1859\":1}}],[\"通过使用数组\",{\"1\":{\"1349\":1}}],[\"通过使用不同的几何模型\",{\"1\":{\"677\":1}}],[\"通过使用带有标签的数据来训练模型\",{\"1\":{\"527\":1}}],[\"通过使用私有属性\",{\"1\":{\"242\":1}}],[\"通过估计这些高斯分布的参数来实现聚类\",{\"1\":{\"514\":1}}],[\"通过密度连接的方式形成簇\",{\"1\":{\"513\":1}}],[\"通过核函数扩展线性回归的能力\",{\"1\":{\"504\":1}}],[\"通过正确使用线程同步\",{\"1\":{\"1972\":1}}],[\"通过正确使用\",{\"1\":{\"1911\":1}}],[\"通过正确使用变量和常量\",{\"1\":{\"183\":1}}],[\"通过正则化来控制模型复杂度\",{\"1\":{\"504\":1}}],[\"通过回归分析\",{\"1\":{\"471\":1}}],[\"通过这个示例\",{\"1\":{\"1663\":1}}],[\"通过这个模型\",{\"1\":{\"691\":1}}],[\"通过这个简单的神经网络\",{\"1\":{\"450\":1}}],[\"通过这些基本概念\",{\"1\":{\"394\":1}}],[\"通过这些转换函数\",{\"1\":{\"191\":1}}],[\"通过相互对抗训练生成高质量数据\",{\"1\":{\"441\":1}}],[\"通过权重和激活函数进行非线性变换\",{\"1\":{\"439\":1}}],[\"通过差分运算和变异来优化问题\",{\"1\":{\"420\":1}}],[\"通过鱼群的合作和竞争来寻找最优解\",{\"1\":{\"420\":1}}],[\"通过信息素的传播和更新来找到最优路径\",{\"1\":{\"420\":1}}],[\"通过群体中个体的相互作用来寻找最优解\",{\"1\":{\"420\":1}}],[\"通过交叉\",{\"1\":{\"420\":1}}],[\"通过逐步降低温度来寻找问题的最优解\",{\"1\":{\"420\":1}}],[\"通过逐步调整解的参数来寻找最优解\",{\"1\":{\"416\":1}}],[\"通过逐步选择局部最优解来构建整体解\",{\"1\":{\"416\":1}}],[\"通过系统地枚举候选解的集合\",{\"1\":{\"410\":1}}],[\"通过剪枝来减少搜索空间\",{\"1\":{\"408\":1}}],[\"通过增广路径\",{\"1\":{\"397\":1}}],[\"通过单元测试确保get\",{\"1\":{\"248\":1}}],[\"通过模拟用户操作来验证系统行为\",{\"1\":{\"247\":1}}],[\"通过键访问值\",{\"1\":{\"169\":1}}],[\"通常更高效\",{\"1\":{\"2161\":1}}],[\"通常输入更小或更简化的参数\",{\"1\":{\"2160\":1}}],[\"通常传入更小或更简化的参数\",{\"1\":{\"2160\":1}}],[\"通常与同步代码块或方法一起使用\",{\"1\":{\"1970\":1}}],[\"通常程序无法恢复\",{\"1\":{\"1895\":1}}],[\"通常遵循先进先出\",{\"1\":{\"1756\":1}}],[\"通常作为实体类\",{\"1\":{\"1681\":1}}],[\"通常作为其他类的基类\",{\"1\":{\"1501\":1}}],[\"通常需要记录异常日志\",{\"1\":{\"1910\":1}}],[\"通常需要通过\",{\"1\":{\"1742\":1}}],[\"通常需要实现\",{\"1\":{\"1680\":1}}],[\"通常需要使用instanceof关键字来检查对象是否是特定子类的实例\",{\"1\":{\"1538\":1}}],[\"通常需要大量的计算资源和时间进行训练\",{\"1\":{\"536\":1}}],[\"通常包含抽象方法\",{\"1\":{\"1473\":1}}],[\"通常包含在tex\",{\"1\":{\"1102\":1}}],[\"通常包含在mactex中\",{\"1\":{\"1101\":1}}],[\"通常包含在miktex中\",{\"1\":{\"1100\":1}}],[\"通常出现在递归算法中\",{\"1\":{\"2163\":1}}],[\"通常出现在一些需要额外临时存储的递归或分治算法中\",{\"1\":{\"2163\":1}}],[\"通常出现在一些组合问题中\",{\"1\":{\"2162\":1}}],[\"通常出现在一些递归算法中\",{\"1\":{\"2162\":1}}],[\"通常出现在二分查找等算法中\",{\"1\":{\"2162\":1}}],[\"通常出现在类\",{\"1\":{\"1283\":1}}],[\"通常出现在网络流理论和图论中\",{\"1\":{\"400\":1}}],[\"通常有两种方法来创建线程\",{\"1\":{\"1259\":1}}],[\"通常情况下\",{\"1\":{\"1170\":1}}],[\"通常描述波动过程\",{\"1\":{\"905\":1}}],[\"通常描述扩散过程\",{\"1\":{\"897\":1}}],[\"通常描述序列中一个元素与其前几个元素之间的关系\",{\"1\":{\"863\":1}}],[\"通常表示源项\",{\"1\":{\"881\":1}}],[\"通常表示为\",{\"1\":{\"715\":2}}],[\"通常用来更新循环变量\",{\"1\":{\"1324\":1}}],[\"通常用来初始化循环变量\",{\"1\":{\"1324\":1}}],[\"通常用c\",{\"1\":{\"1308\":1}}],[\"通常用计算机仿真来得到系统行为的近似解\",{\"1\":{\"874\":1}}],[\"通常用于类\",{\"1\":{\"2000\":1}}],[\"通常用于lambda表达式\",{\"1\":{\"1990\":1}}],[\"通常用于自定义异常处理\",{\"1\":{\"1905\":1}}],[\"通常用于处理文本数据\",{\"1\":{\"1868\":1}}],[\"通常用于处理二进制数据\",{\"1\":{\"1868\":1}}],[\"通常用于一次性清理\",{\"1\":{\"1855\":1}}],[\"通常用于一次性初始化\",{\"1\":{\"1855\":1}}],[\"通常用于清理\",{\"1\":{\"1855\":1}}],[\"通常用于初始化\",{\"1\":{\"1855\":1}}],[\"通常用于实现队列结构\",{\"1\":{\"1735\":1}}],[\"通常用于表示可重用的组件\",{\"1\":{\"1679\":1}}],[\"通常用于提供一些通用的行为和特征\",{\"1\":{\"1552\":1}}],[\"通常用于定义枚举常量\",{\"1\":{\"1494\":1}}],[\"通常用于调用本地系统库\",{\"1\":{\"1492\":1}}],[\"通常用于释放资源\",{\"1\":{\"1446\":1,\"1897\":1}}],[\"通常用于条件判断\",{\"1\":{\"1289\":1}}],[\"通常用于简单的计算或作为其他函数的输入\",{\"1\":{\"1176\":1}}],[\"通常用于图像分割或边缘检测前的预处理\",{\"1\":{\"824\":1}}],[\"通常用于数据增强或图像预处理\",{\"1\":{\"822\":1}}],[\"通常用于在制造业中\",{\"1\":{\"692\":1}}],[\"通常用于工程图中\",{\"1\":{\"673\":1}}],[\"通常用于工程设计和制造中\",{\"1\":{\"671\":1}}],[\"通常用于包含键值对的可迭代对象\",{\"1\":{\"191\":1}}],[\"通常权重较小\",{\"1\":{\"757\":1}}],[\"通常权重较大\",{\"1\":{\"757\":1}}],[\"通常通过专家打分或问卷调查等方式进行评估的指标\",{\"1\":{\"757\":1}}],[\"通常通过扩展型博弈树表示\",{\"1\":{\"746\":1}}],[\"通常通过战略型博弈表示\",{\"1\":{\"746\":1}}],[\"通常通过距离度量\",{\"1\":{\"509\":1}}],[\"通常指纳什均衡\",{\"1\":{\"745\":1}}],[\"通常假设决策变量是非负的\",{\"1\":{\"715\":1}}],[\"通常这些目标函数之间是冲突的\",{\"1\":{\"710\":1}}],[\"通常是计算机科学专业学生学习的第一门课程\",{\"1\":{\"2206\":1}}],[\"通常是更好的选择\",{\"1\":{\"1779\":1}}],[\"通常是\",{\"1\":{\"1564\":1}}],[\"通常是通过父类的引用变量指向子类对象来实现\",{\"1\":{\"1529\":1}}],[\"通常是通过父类引用指向子类对象来实现\",{\"1\":{\"1526\":1}}],[\"通常是c或c++实现的\",{\"1\":{\"1265\":1}}],[\"通常是三次多项式\",{\"1\":{\"933\":1}}],[\"通常是0到1之间\",{\"1\":{\"763\":1}}],[\"通常是矩形或正方形\",{\"1\":{\"686\":1}}],[\"通常是一个类中的方法\",{\"1\":{\"1849\":1}}],[\"通常是一个或多个固定尺寸的大钢板\",{\"1\":{\"693\":1}}],[\"通常是一个矩形平面\",{\"1\":{\"686\":1}}],[\"通常是一个简单的几何形状\",{\"1\":{\"679\":1}}],[\"通常是一行写完一条语句\",{\"1\":{\"134\":1}}],[\"通常\",{\"1\":{\"685\":1}}],[\"通常选择前几个特征值最大的主成分作为新特征空间的基底\",{\"1\":{\"616\":1}}],[\"通常可以根据学习方式\",{\"1\":{\"592\":1}}],[\"通常在命令行中使用以下命令\",{\"1\":{\"2002\":1}}],[\"通常在二维情况下表示为\",{\"1\":{\"892\":1}}],[\"通常在一元回归中使用\",{\"1\":{\"494\":1}}],[\"通常在\",{\"1\":{\"424\":1,\"1983\":1}}],[\"通常设置为\",{\"1\":{\"424\":1}}],[\"通常能找到较好的解\",{\"1\":{\"410\":1}}],[\"通常不用于解决大规模问题\",{\"1\":{\"408\":1}}],[\"通常使用公司域名的反向形式作为前缀\",{\"1\":{\"1631\":1}}],[\"通常使用其子类gregoriancalendar\",{\"1\":{\"1402\":1}}],[\"通常使用\",{\"1\":{\"1185\":1}}],[\"通常使用全大写字母和下划线的组合\",{\"1\":{\"183\":1}}],[\"通常使用全大写字母的变量名来表示常量\",{\"1\":{\"181\":1}}],[\"通常使用小写字母和下划线的组合\",{\"1\":{\"183\":1}}],[\"通常被称为是整型或整数\",{\"1\":{\"137\":1}}],[\"yaml\",{\"1\":{\"1921\":1}}],[\"yaxis\",{\"1\":{\"688\":1}}],[\"yes\",{\"1\":{\"1661\":1}}],[\"year\",{\"1\":{\"1402\":1,\"1497\":1,\"1661\":1,\"1663\":2,\"1711\":5}}],[\"years\",{\"1\":{\"211\":2,\"261\":1,\"262\":1,\"1302\":1,\"1422\":1,\"1956\":2}}],[\"yuval\",{\"1\":{\"1655\":1}}],[\"y2\",{\"1\":{\"1209\":2,\"1210\":2}}],[\"y1\",{\"1\":{\"1209\":2,\"1210\":2}}],[\"y1​−y0​\",{\"1\":{\"933\":1}}],[\"y1​\",{\"1\":{\"933\":1}}],[\"y方向步长\",{\"1\":{\"895\":1}}],[\"y方向网格点数\",{\"1\":{\"895\":1}}],[\"y方向长度\",{\"1\":{\"895\":1}}],[\"yyyy\",{\"1\":{\"1407\":1,\"1921\":1,\"1925\":1,\"2047\":1}}],[\"yy\",{\"1\":{\"884\":1}}],[\"yt​\",{\"1\":{\"871\":1}}],[\"y0​\",{\"1\":{\"933\":1}}],[\"y0\",{\"1\":{\"852\":2,\"856\":2}}],[\"yi​\",{\"1\":{\"837\":1}}],[\"yi​−f\",{\"1\":{\"837\":1}}],[\"yield\",{\"1\":{\"133\":1,\"225\":4,\"1816\":1,\"1965\":1}}],[\"y+h\",{\"1\":{\"827\":1}}],[\"ylim\",{\"1\":{\"624\":1,\"688\":1}}],[\"ylabel\",{\"1\":{\"240\":1,\"428\":1,\"459\":1,\"569\":1,\"590\":1,\"625\":1,\"643\":1,\"661\":1,\"680\":1,\"852\":1,\"856\":1,\"889\":1,\"895\":1,\"903\":1,\"911\":1,\"927\":1,\"1201\":1,\"1202\":1,\"1203\":1,\"1206\":1,\"1210\":1}}],[\"y=axb\",{\"1\":{\"939\":1}}],[\"y=aebx\",{\"1\":{\"939\":1}}],[\"y=a0​+a1​x+a2​x2+⋯+an​xn\",{\"1\":{\"939\":1}}],[\"y=a+bx\",{\"1\":{\"939\":1}}],[\"y=y0​+\",{\"1\":{\"933\":1}}],[\"y=\",{\"1\":{\"459\":1}}],[\"yolo\",{\"1\":{\"805\":1}}],[\"you\",{\"1\":{\"262\":1,\"1162\":2,\"1422\":1,\"1428\":1}}],[\"yourclass\",{\"1\":{\"2002\":2}}],[\"yourname\",{\"1\":{\"2000\":1}}],[\"your\",{\"1\":{\"262\":2,\"1422\":4,\"1427\":3,\"1428\":1}}],[\"york\",{\"1\":{\"168\":1,\"170\":2,\"258\":1}}],[\"y\",{\"1\":{\"180\":3,\"199\":4,\"212\":2,\"214\":2,\"240\":3,\"459\":2,\"482\":2,\"484\":2,\"486\":2,\"491\":2,\"492\":1,\"494\":1,\"495\":2,\"497\":10,\"498\":6,\"499\":6,\"500\":6,\"501\":9,\"502\":6,\"503\":6,\"517\":1,\"524\":8,\"535\":8,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"556\":2,\"569\":8,\"571\":8,\"577\":12,\"578\":12,\"579\":12,\"580\":12,\"581\":12,\"588\":8,\"589\":8,\"590\":1,\"601\":12,\"602\":12,\"603\":12,\"604\":12,\"605\":12,\"606\":8,\"607\":8,\"608\":17,\"609\":16,\"610\":8,\"641\":3,\"659\":4,\"660\":1,\"661\":3,\"676\":1,\"680\":16,\"688\":6,\"827\":2,\"852\":5,\"853\":1,\"856\":1,\"884\":5,\"894\":2,\"895\":9,\"916\":2,\"933\":1,\"935\":5,\"936\":5,\"937\":5,\"941\":5,\"942\":5,\"943\":5,\"944\":5,\"964\":2,\"1163\":4,\"1175\":2,\"1176\":2,\"1181\":6,\"1201\":5,\"1202\":3,\"1203\":2,\"1206\":3,\"1207\":4,\"1210\":1,\"1282\":1,\"1676\":6,\"1685\":1,\"1725\":1,\"1737\":1}}],[\"检索\",{\"1\":{\"2189\":1}}],[\"检索和操作数据\",{\"1\":{\"1734\":1}}],[\"检测负权环\",{\"1\":{\"959\":1}}],[\"检测人脸\",{\"1\":{\"827\":1}}],[\"检测图像中的边缘\",{\"1\":{\"810\":1}}],[\"检测图像中强度变化剧烈的区域\",{\"1\":{\"788\":1}}],[\"检测集合之间的关系\",{\"0\":{\"166\":1}}],[\"检查线程是否处于活动状态\",{\"1\":{\"1965\":1}}],[\"检查异常和非检查异常分别在编译时和运行时处理\",{\"1\":{\"1453\":1}}],[\"检查异常是在编译时检查的异常\",{\"1\":{\"1450\":1}}],[\"检查异常\",{\"0\":{\"1450\":1}}],[\"检查整个输入序列是否与正则表达式匹配\",{\"1\":{\"1416\":1}}],[\"检查文件是否存在\",{\"1\":{\"1439\":1}}],[\"检查文件或目录是否存在\",{\"1\":{\"1439\":1}}],[\"检查文件或变量的存在\",{\"1\":{\"1125\":1}}],[\"检查文本是否符合模式\",{\"1\":{\"1410\":1}}],[\"检查输出\",{\"1\":{\"1101\":1,\"1102\":1}}],[\"检查输出是否正确\",{\"1\":{\"1100\":1}}],[\"检查终止条件\",{\"1\":{\"433\":1}}],[\"检查是否存在负权环\",{\"1\":{\"959\":1}}],[\"检查是否存在负权回路\",{\"1\":{\"403\":1}}],[\"检查是否完成\",{\"1\":{\"409\":1}}],[\"检查键是否在字典中\",{\"1\":{\"172\":1}}],[\"检查元素是否在集合中\",{\"1\":{\"162\":1}}],[\"检查元素是否存在于元组中\",{\"1\":{\"155\":1}}],[\"到功能强大的\",{\"1\":{\"1928\":1}}],[\"到处运行\",{\"1\":{\"1263\":1}}],[\"到第\",{\"1\":{\"1139\":2,\"1144\":2}}],[\"到复杂算法\",{\"1\":{\"1119\":1}}],[\"到城市\",{\"1\":{\"737\":1}}],[\"到汇点\",{\"1\":{\"398\":1}}],[\"到顶点\",{\"1\":{\"390\":1}}],[\"到\",{\"1\":{\"163\":1,\"173\":1,\"424\":1,\"515\":1,\"1165\":1,\"1167\":1,\"1170\":1,\"1195\":1,\"1286\":5,\"1288\":1,\"1930\":1}}],[\"复制和权限控制等操作\",{\"1\":{\"2189\":1}}],[\"复制集合\",{\"1\":{\"162\":1}}],[\"复选框\",{\"1\":{\"2025\":1}}],[\"复用了书籍的基本属性和方法\",{\"1\":{\"1662\":1}}],[\"复合型高层次人才\",{\"1\":{\"1024\":1}}],[\"复杂性理论\",{\"1\":{\"2210\":1}}],[\"复杂图案\",{\"1\":{\"691\":1}}],[\"复杂的监督学习模型\",{\"1\":{\"536\":1}}],[\"复杂度\",{\"0\":{\"406\":1}}],[\"复数的实部a和虚部b都是浮点型\",{\"1\":{\"137\":1}}],[\"复数由实数部分和虚数部分构成\",{\"1\":{\"137\":1}}],[\"复数\",{\"1\":{\"137\":1}}],[\"对应\",{\"1\":{\"2160\":2}}],[\"对应的二进制位相同为0\",{\"1\":{\"1315\":1}}],[\"对应的波长范围从1mm到0\",{\"1\":{\"1052\":1}}],[\"对应的特征向量被称为主成分\",{\"1\":{\"616\":1}}],[\"对文件流进行包装\",{\"1\":{\"1877\":1}}],[\"对节点流进行包装\",{\"1\":{\"1868\":1}}],[\"对每个基本数据类型提供了一个对应的包装类\",{\"1\":{\"1696\":1}}],[\"对称性\",{\"1\":{\"1668\":1,\"1676\":1}}],[\"对称差\",{\"1\":{\"1150\":1}}],[\"对称差集\",{\"1\":{\"161\":1}}],[\"对同一包内的类可见\",{\"1\":{\"1712\":1}}],[\"对同一包内的类和所有子类可见\",{\"1\":{\"1712\":1}}],[\"对同一包和子类可见\",{\"1\":{\"1506\":2}}],[\"对同一包中的类可见\",{\"1\":{\"1482\":1}}],[\"对同一包中的类和任何子类可见\",{\"1\":{\"1481\":1}}],[\"对所有类可见\",{\"1\":{\"1480\":1,\"1506\":2,\"1712\":1}}],[\"对所有边进行\",{\"1\":{\"403\":1}}],[\"对数空间复杂度\",{\"1\":{\"2163\":1}}],[\"对数时间复杂度\",{\"1\":{\"2162\":1}}],[\"对数\",{\"1\":{\"1397\":1,\"1398\":1}}],[\"对数和幂运算\",{\"0\":{\"1394\":1}}],[\"对数据进行处理\",{\"1\":{\"1196\":1}}],[\"对数据要求较高\",{\"1\":{\"767\":1}}],[\"对数据的敏感性较高\",{\"1\":{\"754\":1}}],[\"对数据的要求较高\",{\"1\":{\"525\":1}}],[\"对数据的要求较低\",{\"1\":{\"525\":1}}],[\"对操作数进行逻辑取反\",{\"1\":{\"1314\":1}}],[\"对通过网络下载的类具有一个安全防范机制\",{\"1\":{\"1259\":1}}],[\"对指针的丢弃是\",{\"1\":{\"1259\":1}}],[\"对\",{\"1\":{\"1225\":1,\"1741\":1}}],[\"对研究的问题应有创新\",{\"1\":{\"1037\":1}}],[\"对提前完成培养计划\",{\"1\":{\"1026\":1}}],[\"对空间\",{\"1\":{\"887\":1,\"898\":1,\"906\":1}}],[\"对时间\",{\"1\":{\"887\":1,\"898\":1,\"906\":1}}],[\"对权重设置敏感\",{\"1\":{\"768\":1}}],[\"对权重敏感\",{\"1\":{\"754\":1}}],[\"对不同权重\",{\"1\":{\"764\":1}}],[\"对各个指标分配权重\",{\"1\":{\"763\":1}}],[\"对各项指标数据进行整理\",{\"1\":{\"762\":1}}],[\"对评价结果有一定影响\",{\"1\":{\"757\":1}}],[\"对评价结果起决定性作用的关键指标\",{\"1\":{\"757\":1}}],[\"对多个决策单元的多输入多输出进行效率评价\",{\"1\":{\"754\":1}}],[\"对多个备选方案进行评价和选择的分析方法\",{\"1\":{\"752\":1}}],[\"对齐\",{\"1\":{\"685\":1}}],[\"对原始数据进行累加\",{\"1\":{\"634\":1}}],[\"对特征值排序并选择前两个主成分\",{\"1\":{\"624\":1}}],[\"对非线性关系无法很好地处理\",{\"1\":{\"620\":1}}],[\"对分类结果的详细分析\",{\"1\":{\"586\":1}}],[\"对变量进行聚类\",{\"1\":{\"565\":1}}],[\"对变量聚类\",{\"1\":{\"563\":1}}],[\"对样本进行聚类\",{\"1\":{\"565\":1}}],[\"对样本聚类\",{\"1\":{\"563\":1}}],[\"对噪声敏感\",{\"1\":{\"541\":1}}],[\"对异常值敏感\",{\"1\":{\"526\":1}}],[\"对初始参数敏感\",{\"1\":{\"514\":1}}],[\"对初始质心敏感\",{\"1\":{\"511\":1,\"540\":1}}],[\"对参数选择敏感\",{\"1\":{\"540\":1}}],[\"对参数\",{\"1\":{\"513\":1}}],[\"对测试集进行预测\",{\"1\":{\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":2}}],[\"对子代进行变异操作\",{\"1\":{\"433\":1}}],[\"对选中的父代进行交叉操作\",{\"1\":{\"433\":1}}],[\"对成本矩阵的每一列元素减去该列的最小值\",{\"1\":{\"409\":1}}],[\"对成本矩阵的每一行元素减去该行的最小值\",{\"1\":{\"409\":1}}],[\"对于业务逻辑中的特定错误\",{\"1\":{\"1452\":1}}],[\"对于所有的类来说\",{\"1\":{\"1275\":1}}],[\"对于超材料的初步研究是负折射率超材料\",{\"1\":{\"1053\":1}}],[\"对于简单线性回归模型\",{\"1\":{\"939\":1}}],[\"对于任意的\",{\"1\":{\"933\":1}}],[\"对于两个已知点\",{\"1\":{\"933\":1}}],[\"对于复杂系统\",{\"1\":{\"874\":1}}],[\"对于复杂路径和截面\",{\"1\":{\"684\":1}}],[\"对于较大的问题规模\",{\"1\":{\"735\":1}}],[\"对于这个简单的钢板切割问题\",{\"1\":{\"696\":1}}],[\"对于数据的分布假设较强\",{\"1\":{\"526\":1}}],[\"对于每列\",{\"1\":{\"409\":1}}],[\"对于每行\",{\"1\":{\"409\":1}}],[\"对于每一条边\",{\"1\":{\"959\":1}}],[\"对于每一列\",{\"1\":{\"409\":1}}],[\"对于每一行\",{\"1\":{\"409\":1}}],[\"对于每条边\",{\"1\":{\"396\":1}}],[\"对于一个有\",{\"1\":{\"390\":1}}],[\"对有向无环图\",{\"1\":{\"392\":1}}],[\"对模型结果进行分析\",{\"1\":{\"381\":1}}],[\"对象图\",{\"1\":{\"1866\":1}}],[\"对象关系映射等功能\",{\"1\":{\"1832\":1}}],[\"对象克隆\",{\"1\":{\"1664\":1}}],[\"对象中都是可用的\",{\"1\":{\"1664\":1,\"1665\":1}}],[\"对象时\",{\"1\":{\"1546\":1}}],[\"对象及其交互方式\",{\"1\":{\"1496\":1}}],[\"对象修饰符\",{\"0\":{\"1478\":1}}],[\"对象是具有状态和行为的实体\",{\"1\":{\"1469\":1}}],[\"对象是类的一个实例\",{\"1\":{\"1273\":1}}],[\"对象是类的实例\",{\"1\":{\"242\":1,\"1469\":1,\"1710\":1}}],[\"对象转换为\",{\"1\":{\"1385\":1,\"1700\":1}}],[\"对象的各种方法来访问结果集中的数据\",{\"1\":{\"1982\":1}}],[\"对象的\",{\"1\":{\"1980\":1,\"1981\":1,\"1985\":1}}],[\"对象的默认值是\",{\"1\":{\"1302\":1}}],[\"对象的状态由这些实例变量的值决定\",{\"1\":{\"1273\":1}}],[\"对象检测和跟踪\",{\"1\":{\"800\":1}}],[\"对象检测\",{\"1\":{\"797\":1,\"805\":1}}],[\"对象检测等任务\",{\"1\":{\"792\":1}}],[\"对象并拟合数据\",{\"1\":{\"619\":1}}],[\"对象\",{\"0\":{\"1469\":1,\"1827\":1},\"1\":{\"241\":1,\"242\":1,\"243\":1,\"563\":1,\"1273\":2,\"1291\":1,\"1385\":1,\"1568\":1,\"1634\":2,\"1635\":1,\"1651\":1,\"1659\":1,\"1670\":1,\"1682\":1,\"1699\":1,\"1704\":2,\"1705\":3,\"1707\":1,\"1710\":1,\"1812\":1,\"1814\":1,\"1823\":1,\"1827\":1,\"1936\":1,\"1941\":1,\"1946\":2,\"1949\":2,\"1951\":1,\"1980\":2,\"1982\":1,\"1983\":1}}],[\"对象🎍\",{\"0\":{\"11\":1}}],[\"可用性测试\",{\"1\":{\"2215\":1}}],[\"可控实例化\",{\"1\":{\"2015\":1}}],[\"可移植性和数据库无关性\",{\"1\":{\"1987\":1}}],[\"可靠的网络应用程序\",{\"1\":{\"1944\":1}}],[\"可靠的\",{\"1\":{\"1934\":1}}],[\"可靠性和性能\",{\"1\":{\"1674\":1}}],[\"可靠性\",{\"1\":{\"757\":1}}],[\"可独立执行的测试代码来检测代码中的错误\",{\"1\":{\"1848\":1}}],[\"可选\",{\"1\":{\"1814\":1}}],[\"可选操作\",{\"1\":{\"1813\":1}}],[\"可扩展和重用的代码\",{\"1\":{\"1716\":1}}],[\"可重用性和易于维护的特点\",{\"1\":{\"1707\":1}}],[\"可序列化\",{\"1\":{\"1680\":1}}],[\"可维护\",{\"1\":{\"1683\":1}}],[\"可维护和易于理解的代码\",{\"1\":{\"1571\":1}}],[\"可维护性\",{\"1\":{\"1531\":1}}],[\"可维护性和扩展性\",{\"1\":{\"1309\":1}}],[\"可再生能源\",{\"1\":{\"1040\":1}}],[\"可再生能源利用\",{\"1\":{\"716\":1}}],[\"可将研究论文\",{\"1\":{\"1038\":1}}],[\"可采用集中实践与分段实践相结合的方式\",{\"1\":{\"1035\":1}}],[\"可申请免修免考\",{\"1\":{\"1032\":1}}],[\"可申请延长学习年限\",{\"1\":{\"1026\":1}}],[\"可操作性等\",{\"1\":{\"757\":1}}],[\"可持续发展评估\",{\"1\":{\"755\":1}}],[\"可行性等\",{\"1\":{\"757\":1}}],[\"可行性\",{\"1\":{\"753\":1,\"761\":1}}],[\"可视化与报告\",{\"1\":{\"763\":1}}],[\"可视化最终降维结果\",{\"1\":{\"625\":1}}],[\"可视化完整的降维过程\",{\"0\":{\"625\":1}}],[\"可视化pca结果\",{\"1\":{\"590\":1}}],[\"可视化聚类结果\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"555\":1,\"556\":1,\"557\":1,\"558\":1}}],[\"可视化\",{\"1\":{\"459\":1,\"614\":1,\"617\":1,\"662\":1}}],[\"可视化结果\",{\"1\":{\"428\":1,\"643\":1,\"661\":1}}],[\"可能导致反序列化漏洞\",{\"1\":{\"1866\":1}}],[\"可能导致性能问题和不可预知的行为\",{\"1\":{\"1672\":1}}],[\"可能发生溢出\",{\"1\":{\"1299\":1}}],[\"可能会创建多个实例\",{\"1\":{\"2010\":1}}],[\"可能会引起数据不一致问题\",{\"1\":{\"1967\":1}}],[\"可能会引发\",{\"1\":{\"1901\":1}}],[\"可能会引发异常的代码\",{\"1\":{\"1898\":1}}],[\"可能会引发arithmeticexception\",{\"1\":{\"1445\":1}}],[\"可能会让代码调试变得更加复杂\",{\"1\":{\"1600\":1}}],[\"可能会导致内存泄漏\",{\"1\":{\"1600\":1}}],[\"可能会导致数据精度丢失或溢出\",{\"1\":{\"1295\":1}}],[\"可能会遇到异常\",{\"1\":{\"1428\":1}}],[\"可能会发生数据溢出\",{\"1\":{\"1299\":1}}],[\"可能希望同时最小化成本和最大化产量\",{\"1\":{\"840\":1}}],[\"可能存在多个局部最优解\",{\"1\":{\"833\":1}}],[\"可能需要进行插补或修正\",{\"1\":{\"763\":1}}],[\"可能需要考虑经济性\",{\"1\":{\"761\":1}}],[\"可能需要更多的计算和调整\",{\"1\":{\"684\":1}}],[\"可能表现不佳\",{\"1\":{\"526\":1}}],[\"可能受非线性约束条件的限制\",{\"1\":{\"415\":1}}],[\"可能是任意一个元素\",{\"1\":{\"160\":1}}],[\"可变性\",{\"1\":{\"1372\":1,\"1375\":1}}],[\"可变参数\",{\"0\":{\"1339\":1},\"1\":{\"211\":1}}],[\"可变的\",{\"1\":{\"167\":1}}],[\"可以强化所学的知识\",{\"1\":{\"2217\":1}}],[\"可以跨平台运行\",{\"1\":{\"2019\":1}}],[\"可以跨越多行\",{\"1\":{\"1187\":1}}],[\"可以避免重复创建对象带来的资源浪费\",{\"1\":{\"2017\":1}}],[\"可以避免不同包中的类名冲突\",{\"1\":{\"1617\":1}}],[\"可以对getinstance\",{\"1\":{\"2011\":1}}],[\"可以选择性地重写默认方法\",{\"1\":{\"1993\":1}}],[\"可以选择放入或不放入背包\",{\"1\":{\"408\":1}}],[\"可以与各种数据库\",{\"1\":{\"1974\":1}}],[\"可以与其他线程并发执行\",{\"1\":{\"1959\":1}}],[\"可以方便地执行\",{\"1\":{\"1987\":1}}],[\"可以方便地对字符串进行搜索\",{\"1\":{\"1957\":1}}],[\"可以方便地开发基于\",{\"1\":{\"1944\":1}}],[\"可以构建更强大和高效的网络系统\",{\"1\":{\"1944\":1}}],[\"可以由程序本身处理\",{\"1\":{\"1895\":1}}],[\"可以让一个线程发起一个\",{\"1\":{\"1888\":1}}],[\"可以让用户输入\",{\"1\":{\"1118\":1}}],[\"可以监听新进来的\",{\"1\":{\"1882\":1}}],[\"可以轻松编写\",{\"1\":{\"1859\":1}}],[\"可以确保每个单元功能正常\",{\"1\":{\"1849\":1}}],[\"可以动态创建代理对象\",{\"1\":{\"1832\":1}}],[\"可以动态地创建类的实例\",{\"1\":{\"1639\":1}}],[\"可以维护插入顺序或访问顺序\",{\"1\":{\"1797\":1}}],[\"可以作为栈和队列使用\",{\"1\":{\"1765\":1}}],[\"可以作为队列和双端队列\",{\"1\":{\"1750\":1}}],[\"可以满足不同的需求\",{\"1\":{\"1760\":1}}],[\"可以为空\",{\"1\":{\"1758\":1}}],[\"可以为枚举定义方法来处理与常量相关的行为\",{\"1\":{\"1613\":1}}],[\"可以实现更高效和更简洁的代码\",{\"1\":{\"1779\":1}}],[\"可以实现对数据的保护\",{\"1\":{\"1709\":1}}],[\"可以实现封装\",{\"1\":{\"242\":1}}],[\"可以更优雅地处理null值\",{\"1\":{\"1995\":1}}],[\"可以更好地管理和操作数据集合\",{\"1\":{\"1794\":1}}],[\"可以更好地编写\",{\"1\":{\"1706\":1}}],[\"可以更好地处理长期依赖关系\",{\"1\":{\"656\":1}}],[\"可以更简洁地操作集合\",{\"1\":{\"1692\":1}}],[\"可以没有参数\",{\"1\":{\"1685\":1}}],[\"可以存储其名称或序号\",{\"1\":{\"1614\":1}}],[\"可以不创建外部类的实例而直接创建静态内部类的实例\",{\"1\":{\"1592\":1}}],[\"可以不分析\",{\"1\":{\"780\":1}}],[\"可以防止外部代码直接访问和修改数据\",{\"1\":{\"1569\":1}}],[\"可以防止行末\",{\"1\":{\"1109\":1}}],[\"可以添加条件控制属性的有效性\",{\"1\":{\"1568\":1}}],[\"可以添加新特性或重写父类的方法\",{\"1\":{\"1508\":1}}],[\"可以包含重复的元素\",{\"1\":{\"1744\":1}}],[\"可以包含重复元素\",{\"1\":{\"1735\":1}}],[\"可以包含重复元素的集合\",{\"1\":{\"1725\":1}}],[\"可以包含构造函数\",{\"1\":{\"1558\":1}}],[\"可以包含抽象方法和非抽象方法\",{\"1\":{\"1558\":1,\"1584\":1}}],[\"可以包含负权边\",{\"1\":{\"959\":1}}],[\"可以操作类的实例成员\",{\"1\":{\"1549\":1}}],[\"可以调用dog类中特有的bark方法\",{\"1\":{\"1536\":1}}],[\"可以调用子类特有的方法\",{\"1\":{\"1536\":1}}],[\"可以调用父类的方法\",{\"1\":{\"1536\":1}}],[\"可以一起使用\",{\"1\":{\"1495\":2}}],[\"可以提高程序的性能和稳定性\",{\"1\":{\"1755\":1}}],[\"可以提高程序的稳定性和可维护性\",{\"1\":{\"1453\":1}}],[\"可以提高代码的可读性\",{\"1\":{\"1678\":1}}],[\"可以提高代码的可读性和维护性\",{\"1\":{\"183\":1}}],[\"可以创建一个新的线程类\",{\"1\":{\"1961\":1}}],[\"可以创建更安全\",{\"1\":{\"1571\":1}}],[\"可以创建特定的异常类来表示特定的错误条件\",{\"1\":{\"1453\":1}}],[\"可以创建自定义异常类\",{\"1\":{\"1452\":1}}],[\"可以读取各种数据类型\",{\"1\":{\"1429\":1}}],[\"可以帮助开发者编写高效\",{\"1\":{\"1944\":1}}],[\"可以帮助开发人员编写更易于维护\",{\"1\":{\"1716\":1}}],[\"可以帮助提高应用程序的可维护性和稳定性\",{\"1\":{\"1928\":1}}],[\"可以帮助在编程中更高效地进行各种数学计算\",{\"1\":{\"1398\":1}}],[\"可以帮助查找和解决内存泄漏问题\",{\"1\":{\"1269\":1}}],[\"可以直接调用\",{\"1\":{\"1398\":1}}],[\"可以直接通过类名调用\",{\"1\":{\"1344\":1}}],[\"可以修改其内容\",{\"1\":{\"1375\":1}}],[\"可以控制类和成员的可见性\",{\"1\":{\"1309\":1}}],[\"可以被同一包中的类访问\",{\"1\":{\"1307\":1}}],[\"可以被所有类访问\",{\"1\":{\"1307\":2}}],[\"可以给变量赋值\",{\"1\":{\"1304\":1}}],[\"可以识别和解决jvm性能瓶颈\",{\"1\":{\"1269\":1}}],[\"可以优化内存使用\",{\"1\":{\"1267\":1}}],[\"可以访问外部类的成员和方法中声明为final的局部变量\",{\"1\":{\"1595\":1}}],[\"可以访问外部类的所有成员\",{\"1\":{\"1589\":1}}],[\"可以访问\",{\"1\":{\"1175\":1}}],[\"可以高效地实现各种功能\",{\"1\":{\"1170\":1}}],[\"可以理解为\",{\"1\":{\"1107\":1}}],[\"可以计算无向图的最小生成树\",{\"1\":{\"965\":1}}],[\"可以检测负权环\",{\"1\":{\"957\":1}}],[\"可以表示为\",{\"1\":{\"933\":1}}],[\"可以得到尸体冷却的温度曲线\",{\"1\":{\"858\":1}}],[\"可以得到一组pareto最优解\",{\"1\":{\"842\":1}}],[\"可以预测系统在未来的行为\",{\"1\":{\"849\":1}}],[\"可以刻画系统随时间或其他变量变化的规律\",{\"1\":{\"848\":1}}],[\"可以处理各种图像分析任务\",{\"1\":{\"806\":1}}],[\"可以处理特征与目标之间的非线性关系\",{\"1\":{\"504\":1}}],[\"可以执行图像打开\",{\"1\":{\"801\":1}}],[\"可以去除噪声\",{\"1\":{\"789\":1}}],[\"可以进行更复杂的数据处理和数学计算\",{\"1\":{\"1156\":1}}],[\"可以进行敏感性分析\",{\"1\":{\"763\":1}}],[\"可以进一步探讨具体的操作步骤\",{\"1\":{\"764\":1}}],[\"可以考虑市场需求\",{\"1\":{\"761\":1}}],[\"可以详细讨论\",{\"1\":{\"755\":1}}],[\"可以使工厂的总利润达到最大化\",{\"1\":{\"727\":1}}],[\"可以使得工厂的总利润最大化\",{\"1\":{\"720\":1}}],[\"可以使用arrays\",{\"1\":{\"1364\":1}}],[\"可以使用for循环或for\",{\"1\":{\"1355\":1}}],[\"可以使用length属性获取数组的长度\",{\"1\":{\"1354\":1}}],[\"可以使用注释编写函数的文档\",{\"1\":{\"1179\":1}}],[\"可以使用有限差分法\",{\"1\":{\"893\":1}}],[\"可以使用python中的scipy库和numpy库来数值求解偏微分方程\",{\"1\":{\"886\":1}}],[\"可以使用一些专门的软件和工具来求解多目标规划问题\",{\"1\":{\"843\":1}}],[\"可以使用社会效益\",{\"1\":{\"761\":1}}],[\"可以使用matplotlib和numpy库来绘制瓷砖铺设的图形\",{\"1\":{\"687\":1}}],[\"可以使用类似的聚类算法来实现s型聚类和r型聚类\",{\"1\":{\"564\":1}}],[\"可以使用kmeans函数来实现\",{\"1\":{\"555\":1}}],[\"可以使用scikit\",{\"1\":{\"548\":1}}],[\"可以使用write\",{\"1\":{\"253\":1}}],[\"可以使用多种方法读取文件内容\",{\"1\":{\"252\":1}}],[\"可以使用\",{\"1\":{\"139\":1,\"608\":1,\"609\":1,\"610\":1,\"726\":1,\"732\":1,\"737\":1,\"738\":1,\"1161\":1,\"1174\":1,\"1512\":1,\"1515\":1,\"1620\":1,\"1675\":1,\"1828\":1,\"1982\":1,\"1985\":1}}],[\"可以使用方括号\",{\"1\":{\"138\":1}}],[\"可以扩展该模型以支持更复杂的瓷砖形状\",{\"1\":{\"691\":1}}],[\"可以根据不同的实现类选择不同的排序策略\",{\"1\":{\"1780\":1}}],[\"可以根据不同的截面形状和路径曲线生成复杂的管道几何形状\",{\"1\":{\"683\":1}}],[\"可以根据实际需求实现更高效的应用程序\",{\"1\":{\"1769\":1}}],[\"可以根据需要动态扩展\",{\"1\":{\"1765\":1}}],[\"可以根据设计要求改变瓷砖的颜色或生成不同颜色的瓷砖图案\",{\"1\":{\"691\":1}}],[\"可以根据病人特征将其分为不同组\",{\"1\":{\"561\":1}}],[\"可以精确地表示三维形状和结构\",{\"1\":{\"675\":1}}],[\"可以简单地描述复杂的几何结构\",{\"1\":{\"673\":1}}],[\"可以将函数句柄传递给其他函数或保存起来以便稍后调用\",{\"1\":{\"1177\":1}}],[\"可以将其分为多种类型\",{\"1\":{\"670\":1}}],[\"可以将相关的经济指标归类\",{\"1\":{\"562\":1}}],[\"可以将相关的问卷题目归为同一组\",{\"1\":{\"562\":1}}],[\"可以消除特征之间的相关性\",{\"1\":{\"620\":1}}],[\"可以从数据中提取有价值的信息并做出决策\",{\"1\":{\"591\":1}}],[\"可以有效避免线程安全问题\",{\"1\":{\"1972\":1}}],[\"可以有效地处理各种编程任务\",{\"1\":{\"1366\":1}}],[\"可以有效地解决各种分类问题\",{\"1\":{\"583\":1}}],[\"可以有抽象方法和非抽象方法\",{\"1\":{\"1715\":1}}],[\"可以有多个\",{\"1\":{\"1321\":1}}],[\"可以有多层\",{\"1\":{\"439\":1}}],[\"可以生成树状的聚类层次图\",{\"1\":{\"512\":1}}],[\"可以通过各种方式来操作这些数据\",{\"1\":{\"1884\":1}}],[\"可以通过实现\",{\"1\":{\"1865\":1}}],[\"可以通过实现接口来为枚举提供额外的功能和描述\",{\"1\":{\"1613\":1}}],[\"可以通过ide\",{\"1\":{\"1854\":1}}],[\"可以通过以下几种方式获得\",{\"1\":{\"1827\":1}}],[\"可以通过以下步骤来建立数学模型\",{\"1\":{\"696\":1}}],[\"可以通过索引来访问\",{\"1\":{\"1744\":1}}],[\"可以通过反射获取\",{\"1\":{\"1845\":1}}],[\"可以通过反射访问和调用构造函数\",{\"1\":{\"1646\":1}}],[\"可以通过反射访问和修改对象的字段\",{\"1\":{\"1640\":1}}],[\"可以通过反射调用对象的方法\",{\"1\":{\"1643\":1}}],[\"可以通过这个对象获取类的元数据\",{\"1\":{\"1634\":1}}],[\"可以通过\",{\"1\":{\"1569\":1,\"1681\":1,\"1819\":1,\"1953\":1}}],[\"可以通过异常处理机制来捕捉这些错误\",{\"1\":{\"1428\":1}}],[\"可以通过类名直接访问\",{\"1\":{\"1308\":1,\"1488\":1,\"1503\":1}}],[\"可以通过迭代的方法得到各期人口数量\",{\"1\":{\"875\":1}}],[\"可以通过求解微分方程来模拟尸体冷却过程\",{\"1\":{\"854\":1}}],[\"可以通过专家打分法\",{\"1\":{\"753\":1}}],[\"可以通过多次运行来观察不同的可能性\",{\"1\":{\"651\":1}}],[\"可以通过matlab的fitgmdist函数来实现\",{\"1\":{\"558\":1}}],[\"可以通过核函数处理复杂的非线性关系\",{\"1\":{\"502\":1}}],[\"可以通过构建一个二维数组dp\",{\"1\":{\"408\":1}}],[\"可以同时进行特征选择和复杂度控制\",{\"1\":{\"500\":1,\"504\":1}}],[\"可以建立自变量与因变量之间的数学模型\",{\"1\":{\"471\":1}}],[\"可以是\",{\"1\":{\"1932\":1}}],[\"可以是无限的\",{\"1\":{\"1819\":1}}],[\"可以是单个表达式或代码块\",{\"1\":{\"1685\":1}}],[\"可以是行向量或列向量\",{\"1\":{\"1155\":1}}],[\"可以是一维\",{\"1\":{\"1154\":1}}],[\"可以是线性的\",{\"1\":{\"939\":1}}],[\"可以是完全信息或不完全信息\",{\"1\":{\"745\":1}}],[\"可以是平行排列\",{\"1\":{\"686\":1}}],[\"可以是温度降低到某一阈值\",{\"1\":{\"424\":1}}],[\"可以是目标pc\",{\"1\":{\"100\":1}}],[\"可以重复\",{\"1\":{\"1797\":1}}],[\"可以重复选择多次\",{\"1\":{\"408\":1}}],[\"可以重用父类代码而无需修改它\",{\"1\":{\"1531\":1}}],[\"可以重用\",{\"1\":{\"242\":1}}],[\"可以告诉我你的需求\",{\"1\":{\"407\":1}}],[\"可以分为两个不相交的子集\",{\"1\":{\"391\":1}}],[\"可以在pom\",{\"1\":{\"1851\":1}}],[\"可以在运行时动态地操作类和对象\",{\"1\":{\"1652\":1}}],[\"可以在运行时创建对象\",{\"1\":{\"1634\":1}}],[\"可以在方法中指定一个对象作为锁\",{\"1\":{\"1548\":1}}],[\"可以在\",{\"1\":{\"1188\":1,\"1920\":1,\"1924\":1}}],[\"可以在一行中定义\",{\"1\":{\"1176\":1}}],[\"可以在浏览器中直接使用\",{\"1\":{\"796\":1}}],[\"可以在复杂的决策环境中找到最优解\",{\"1\":{\"717\":1}}],[\"可以在较短时间内找到接近最优的解\",{\"1\":{\"694\":1}}],[\"可以在代码中插入断点\",{\"1\":{\"246\":1}}],[\"可以在同一行中使用多条语句\",{\"1\":{\"134\":1}}],[\"可以用作栈\",{\"1\":{\"1776\":1}}],[\"可以用来注释多行代码\",{\"1\":{\"1282\":1}}],[\"可以用来可视化数据\",{\"1\":{\"1199\":1}}],[\"可以用来读写文件\",{\"1\":{\"251\":1}}],[\"可以用嵌套循环遍历一个二维矩阵的所有元素\",{\"1\":{\"1169\":1}}],[\"可以用于方法参数\",{\"1\":{\"1839\":1}}],[\"可以用于调用被覆盖的方法\",{\"1\":{\"1714\":1}}],[\"可以用于存储各种数据类型的值\",{\"1\":{\"1300\":1}}],[\"可以用于线性回归\",{\"1\":{\"939\":1}}],[\"可以用于二分类和多分类任务\",{\"1\":{\"573\":1}}],[\"可以用差分方程来描述\",{\"1\":{\"871\":1}}],[\"可以用具体数值表示的指标\",{\"1\":{\"757\":1}}],[\"可以用a\",{\"1\":{\"137\":1}}],[\"可以用中文作为变量名\",{\"1\":{\"131\":1}}],[\"可以当作\",{\"1\":{\"137\":1}}],[\"可以输出当前版本的所有关键字\",{\"1\":{\"133\":1}}],[\"随着计算机网络的快速发展\",{\"1\":{\"2190\":1}}],[\"随着计算机的发展\",{\"1\":{\"2190\":1}}],[\"随着个人计算机的普及\",{\"1\":{\"2190\":1}}],[\"随着数据规模的增大\",{\"1\":{\"2162\":1}}],[\"随着代码的更新\",{\"1\":{\"2003\":1}}],[\"随着大数据时代的到来\",{\"1\":{\"547\":1}}],[\"随机访问效率低\",{\"1\":{\"1750\":1}}],[\"随机访问\",{\"1\":{\"1747\":1}}],[\"随机数生成器等实用工具类\",{\"1\":{\"2038\":1}}],[\"随机数生成\",{\"0\":{\"1395\":1}}],[\"随机数组\",{\"1\":{\"1156\":1}}],[\"随机规划问题处理包含不确定性的优化问题\",{\"1\":{\"712\":1}}],[\"随机规划\",{\"0\":{\"712\":1}}],[\"随机森林是决策树的集成方法\",{\"1\":{\"580\":1,\"604\":1}}],[\"随机森林回归\",{\"1\":{\"531\":1}}],[\"随机森林\",{\"0\":{\"580\":1,\"604\":1},\"1\":{\"530\":1,\"593\":1,\"597\":1,\"631\":1}}],[\"随机选择\",{\"1\":{\"511\":1}}],[\"随机对子代进行变异\",{\"1\":{\"435\":1}}],[\"随机变异\",{\"1\":{\"434\":1}}],[\"随机生成初始种群\",{\"1\":{\"435\":1}}],[\"随机生成初始解\",{\"1\":{\"428\":1}}],[\"随机生成一组初始解\",{\"1\":{\"433\":1}}],[\"随机改变个体中的一个或多个基因值\",{\"1\":{\"432\":1}}],[\"随机删除并返回一个元素\",{\"1\":{\"160\":1}}],[\"随笔\",{\"0\":{\"80\":1}}],[\"添加事件监听器\",{\"0\":{\"2031\":1}}],[\"添加按钮到不同区域\",{\"1\":{\"2028\":1}}],[\"添加按钮\",{\"1\":{\"2027\":1}}],[\"添加按钮的点击事件监听器\",{\"1\":{\"2023\":1}}],[\"添加按钮点击事件监听器\",{\"1\":{\"2022\":1}}],[\"添加mockito依赖\",{\"1\":{\"1858\":1}}],[\"添加junit依赖\",{\"1\":{\"1851\":1}}],[\"添加键值对\",{\"1\":{\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"添加书籍到库存\",{\"1\":{\"1661\":1}}],[\"添加图书到库存\",{\"1\":{\"1660\":1,\"1661\":1}}],[\"添加图例\",{\"1\":{\"1210\":1}}],[\"添加图表标题\",{\"1\":{\"1201\":1}}],[\"添加\",{\"1\":{\"1201\":2,\"2152\":1}}],[\"添加多行注释\",{\"1\":{\"1187\":1}}],[\"添加单行注释\",{\"1\":{\"1187\":1}}],[\"添加约束条件\",{\"1\":{\"700\":1}}],[\"添加一个新学生的成绩\",{\"1\":{\"177\":1}}],[\"添加新键值对\",{\"1\":{\"170\":1}}],[\"添加与删除元素\",{\"0\":{\"160\":1}}],[\"添加元素到队列\",{\"1\":{\"1762\":1,\"1766\":1}}],[\"添加元素\",{\"0\":{\"145\":1},\"1\":{\"160\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1764\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1}}],[\"元数据\",{\"1\":{\"1634\":1,\"1842\":1}}],[\"元字符\",{\"0\":{\"1412\":1}}],[\"元\",{\"1\":{\"722\":1}}],[\"元启发式算法\",{\"1\":{\"694\":1}}],[\"元球\",{\"1\":{\"676\":1}}],[\"元素顺序访问\",{\"1\":{\"2153\":1}}],[\"元素会按照自然顺序或指定的比较器排序\",{\"1\":{\"1760\":1}}],[\"元素按自然顺序排序\",{\"1\":{\"1784\":1}}],[\"元素按自然顺序或指定的比较器排序\",{\"1\":{\"1726\":1,\"1738\":1}}],[\"元素按照自然顺序或提供的比较器顺序进行排序\",{\"1\":{\"1763\":1}}],[\"元素按照插入的顺序处理\",{\"1\":{\"1758\":1}}],[\"元素按优先级顺序出队\",{\"1\":{\"1727\":1,\"1739\":1}}],[\"元素按位幂运算\",{\"1\":{\"1146\":1}}],[\"元素按位除法\",{\"1\":{\"1146\":1}}],[\"元素按位运算\",{\"1\":{\"1146\":1}}],[\"元素按位乘法\",{\"1\":{\"1134\":1}}],[\"元素\",{\"1\":{\"1726\":1,\"1738\":2,\"1785\":1}}],[\"元素无序\",{\"1\":{\"1726\":1}}],[\"元素是否属于集合\",{\"1\":{\"1150\":1}}],[\"元素成对存储的集合\",{\"1\":{\"167\":1}}],[\"元素唯一的数据类型\",{\"1\":{\"158\":1}}],[\"元组转换为列表\",{\"1\":{\"188\":1}}],[\"元组在\",{\"1\":{\"157\":1}}],[\"元组非常适合用于多变量赋值和解包操作\",{\"1\":{\"156\":1}}],[\"元组的内存占用比列表更少\",{\"1\":{\"156\":1}}],[\"元组的使用场景\",{\"0\":{\"156\":1}}],[\"元组的一些基本操作和用法\",{\"1\":{\"149\":1}}],[\"元组切片\",{\"0\":{\"152\":1}}],[\"元组与列表非常相似\",{\"1\":{\"149\":1}}],[\"元组\",{\"0\":{\"149\":1},\"1\":{\"136\":1,\"149\":1,\"184\":1,\"188\":1,\"190\":1,\"204\":1,\"219\":1}}],[\"g1\",{\"1\":{\"1267\":1}}],[\"google\",{\"1\":{\"1933\":5}}],[\"googlehost\",{\"1\":{\"1933\":3}}],[\"google学术微软学术\",{\"1\":{\"1068\":1}}],[\"gosling和同事们共同研发\",{\"1\":{\"1258\":1}}],[\"gnu图像处理程序\",{\"1\":{\"794\":1}}],[\"gi​\",{\"1\":{\"832\":2,\"842\":1}}],[\"gimp\",{\"1\":{\"794\":1}}],[\"git\",{\"2\":{\"320\":1,\"321\":1}}],[\"git和github学习\",{\"0\":{\"319\":1}}],[\"github\",{\"1\":{\"237\":1},\"2\":{\"321\":1}}],[\"gc行为和性能表现\",{\"1\":{\"1267\":1}}],[\"gc等\",{\"1\":{\"1267\":1}}],[\"gc\",{\"1\":{\"1265\":1,\"1267\":1}}],[\"gcf\",{\"1\":{\"1211\":1}}],[\"gca\",{\"1\":{\"688\":1}}],[\"gcns\",{\"1\":{\"595\":1}}],[\"gmt起的秒数\",{\"1\":{\"1401\":1}}],[\"gmt起的毫秒数\",{\"1\":{\"1401\":2}}],[\"gmt起的毫秒数的date对象\",{\"1\":{\"1401\":1}}],[\"gm11\",{\"1\":{\"641\":1,\"642\":1,\"643\":2}}],[\"gm\",{\"1\":{\"632\":1,\"634\":1,\"635\":1,\"639\":1,\"641\":1,\"643\":1}}],[\"gmmodel\",{\"1\":{\"558\":4}}],[\"gmm是一种基于概率的聚类方法\",{\"1\":{\"552\":1}}],[\"gmm\",{\"0\":{\"552\":1,\"558\":1},\"1\":{\"552\":5,\"553\":1,\"559\":1,\"594\":1}}],[\"gmms\",{\"0\":{\"514\":1}}],[\"gbdt\",{\"1\":{\"597\":1}}],[\"gbm\",{\"0\":{\"609\":1},\"1\":{\"593\":1}}],[\"gscatter\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"558\":1}}],[\"glm\",{\"1\":{\"495\":1}}],[\"global\",{\"1\":{\"133\":1,\"1125\":1,\"1174\":3}}],[\"gamma\",{\"1\":{\"851\":3,\"852\":5,\"853\":2}}],[\"gamma=0\",{\"1\":{\"588\":1}}],[\"gams\",{\"1\":{\"383\":1,\"838\":1,\"843\":1}}],[\"gaussianblur\",{\"1\":{\"819\":1}}],[\"gaussiannb\",{\"1\":{\"607\":2}}],[\"gaussianmixture\",{\"1\":{\"552\":2}}],[\"gaussian\",{\"0\":{\"552\":1,\"558\":1},\"1\":{\"558\":2,\"594\":1,\"809\":2,\"814\":1}}],[\"gans\",{\"1\":{\"547\":1,\"595\":1,\"598\":1}}],[\"gan\",{\"1\":{\"441\":1,\"792\":1}}],[\"ga\",{\"1\":{\"420\":1,\"431\":1}}],[\"g\",{\"1\":{\"378\":2,\"389\":1,\"390\":1,\"393\":7,\"495\":2,\"864\":2,\"955\":11}}],[\"gui\",{\"0\":{\"2018\":1,\"2019\":1,\"2032\":1},\"1\":{\"2018\":1,\"2019\":4,\"2024\":1,\"2029\":2,\"2032\":2,\"2034\":3,\"2189\":1}}],[\"gui编程\",{\"0\":{\"268\":1}}],[\"gurobi等都可以用来求解线性规划问题\",{\"1\":{\"718\":1}}],[\"guest\",{\"1\":{\"211\":2}}],[\"geometry\",{\"1\":{\"671\":1}}],[\"gender\",{\"1\":{\"481\":2}}],[\"generics\",{\"1\":{\"1834\":1}}],[\"generalized\",{\"0\":{\"495\":1}}],[\"generate\",{\"1\":{\"680\":6,\"681\":3}}],[\"generative\",{\"1\":{\"441\":1,\"595\":1,\"598\":1}}],[\"generation\",{\"1\":{\"434\":1}}],[\"generations\",{\"1\":{\"434\":4}}],[\"generator\",{\"0\":{\"1816\":1},\"1\":{\"225\":3,\"1811\":1,\"1818\":3,\"1824\":1}}],[\"genetic\",{\"1\":{\"410\":1,\"420\":1,\"431\":1,\"434\":2,\"435\":1}}],[\"geq\",{\"1\":{\"384\":2,\"699\":1}}],[\"getenginebyname\",{\"1\":{\"1996\":1}}],[\"getstring\",{\"1\":{\"1982\":1,\"1984\":1}}],[\"getref\",{\"1\":{\"1941\":1}}],[\"getremoteaddress\",{\"1\":{\"1890\":1}}],[\"getquery\",{\"1\":{\"1941\":1}}],[\"getpath\",{\"1\":{\"1941\":1}}],[\"getpages\",{\"1\":{\"1654\":1}}],[\"getprotocol\",{\"1\":{\"1941\":1}}],[\"getport\",{\"1\":{\"1939\":1,\"1941\":1}}],[\"getlength\",{\"1\":{\"1938\":1,\"1939\":1}}],[\"getlocalhost\",{\"1\":{\"1933\":1}}],[\"getlogger\",{\"1\":{\"1918\":1,\"1922\":1,\"1926\":1}}],[\"getint\",{\"1\":{\"1982\":2}}],[\"getinetaddress\",{\"1\":{\"1936\":1}}],[\"getinputstream\",{\"1\":{\"1935\":1,\"1936\":1,\"1942\":1}}],[\"getinstance\",{\"1\":{\"1402\":1,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":1,\"2013\":2}}],[\"getoutputstream\",{\"1\":{\"1935\":1,\"1936\":1}}],[\"gethost\",{\"1\":{\"1941\":1}}],[\"gethostaddress\",{\"1\":{\"1933\":3,\"1936\":1}}],[\"gethostname\",{\"1\":{\"1933\":2}}],[\"getfirstname\",{\"1\":{\"1858\":1}}],[\"getformat\",{\"1\":{\"1654\":1}}],[\"getuserbyid\",{\"1\":{\"1858\":1}}],[\"getvalue\",{\"1\":{\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"getkey\",{\"1\":{\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"getmethod\",{\"1\":{\"1655\":1,\"1846\":1}}],[\"getmessage\",{\"1\":{\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":1,\"1856\":1,\"1898\":1,\"1901\":3,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":1}}],[\"getdata\",{\"1\":{\"1938\":1,\"1939\":1}}],[\"getdays\",{\"1\":{\"1406\":1}}],[\"getdeclaredmethods\",{\"1\":{\"1831\":1}}],[\"getdeclaredmethod\",{\"1\":{\"1644\":1,\"1651\":1,\"1830\":1}}],[\"getdeclaredfields\",{\"1\":{\"1831\":1}}],[\"getdeclaredfield\",{\"1\":{\"1641\":1,\"1651\":1,\"1655\":1,\"1829\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"1831\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"1639\":1,\"1647\":1,\"1651\":1}}],[\"getdescription\",{\"1\":{\"1612\":3}}],[\"getaddress\",{\"1\":{\"1939\":1}}],[\"getallbyname\",{\"1\":{\"1933\":1}}],[\"getannotation\",{\"1\":{\"1846\":1}}],[\"getanimal\",{\"1\":{\"1541\":2}}],[\"getauthor\",{\"1\":{\"1654\":1}}],[\"getage\",{\"1\":{\"1568\":3,\"1680\":2,\"1682\":2,\"1709\":1,\"1863\":2}}],[\"getbyname\",{\"1\":{\"1933\":1,\"1938\":1}}],[\"getbytes\",{\"1\":{\"1436\":1,\"1437\":1,\"1440\":1,\"1871\":1,\"1890\":1,\"1938\":1,\"1939\":1}}],[\"getbrand\",{\"1\":{\"1471\":1}}],[\"getchildren\",{\"1\":{\"2033\":1}}],[\"getchannel\",{\"1\":{\"1883\":1}}],[\"getclass\",{\"1\":{\"1638\":1,\"1655\":1,\"1667\":1,\"1668\":2,\"1670\":2,\"1676\":2,\"1677\":5,\"1678\":1,\"1827\":2}}],[\"getconnection\",{\"1\":{\"1979\":2}}],[\"getconstructor\",{\"1\":{\"1828\":1}}],[\"getcount\",{\"1\":{\"1548\":2,\"1968\":2,\"1969\":1}}],[\"getcolor\",{\"1\":{\"1471\":1}}],[\"getcwd\",{\"1\":{\"232\":1,\"255\":1}}],[\"gettitle\",{\"1\":{\"1654\":1,\"1661\":6}}],[\"gettime\",{\"1\":{\"1401\":2,\"1402\":4}}],[\"gettype\",{\"1\":{\"1608\":2,\"1610\":1,\"1654\":1}}],[\"getters\",{\"1\":{\"1862\":1,\"1864\":1,\"1865\":1}}],[\"getter\",{\"1\":{\"1471\":1,\"1564\":1,\"1567\":1,\"1568\":2,\"1571\":1,\"1680\":5,\"1681\":1,\"1682\":2,\"1709\":2}}],[\"getname\",{\"1\":{\"1439\":2,\"1568\":3,\"1667\":1,\"1670\":1,\"1677\":1,\"1680\":2,\"1682\":2,\"1709\":1,\"1863\":2,\"1918\":1,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1}}],[\"getgreeting\",{\"1\":{\"1342\":1}}],[\"get\",{\"1\":{\"157\":2,\"169\":3,\"237\":1,\"242\":3,\"243\":3,\"248\":4,\"1102\":2,\"1402\":1,\"1440\":1,\"1642\":1,\"1651\":2,\"1655\":2,\"1745\":1,\"1748\":1,\"1751\":1,\"1798\":1,\"1800\":1,\"1801\":1,\"1804\":1,\"1829\":1,\"1836\":1,\"1883\":1,\"1942\":1,\"1963\":2,\"1995\":1}}],[\"gridbaglayout\",{\"1\":{\"2026\":1}}],[\"gridlayout\",{\"1\":{\"2026\":1}}],[\"grid\",{\"1\":{\"625\":1,\"852\":1,\"856\":1,\"927\":1,\"1201\":1,\"1206\":1}}],[\"grey\",{\"1\":{\"632\":1,\"680\":1}}],[\"greater\",{\"1\":{\"1152\":2}}],[\"great\",{\"1\":{\"589\":1}}],[\"greedy\",{\"1\":{\"416\":1}}],[\"greeting\",{\"1\":{\"1292\":1,\"1831\":2}}],[\"greet\",{\"1\":{\"210\":2,\"211\":3,\"1509\":2}}],[\"groupid>\",{\"1\":{\"1851\":2,\"1858\":1,\"1920\":2,\"1924\":2}}],[\"group\",{\"1\":{\"1416\":2,\"1949\":1,\"1951\":1,\"1954\":1,\"1956\":3,\"2048\":1}}],[\"group3\",{\"1\":{\"483\":2}}],[\"group2\",{\"1\":{\"479\":2,\"483\":2}}],[\"group1\",{\"1\":{\"479\":2,\"483\":2}}],[\"groupby\",{\"1\":{\"458\":1}}],[\"grouped\",{\"1\":{\"458\":1}}],[\"grapes\",{\"1\":{\"1748\":1,\"1751\":1,\"1754\":2}}],[\"graph\",{\"1\":{\"388\":1,\"389\":5,\"391\":4,\"393\":1,\"595\":1,\"953\":4,\"955\":2,\"962\":1,\"1732\":3}}],[\"grayscale\",{\"1\":{\"947\":1}}],[\"graythresh\",{\"1\":{\"811\":1}}],[\"gray=true\",{\"1\":{\"802\":1}}],[\"gray\",{\"1\":{\"800\":3,\"808\":2,\"809\":1,\"810\":1,\"811\":3,\"813\":1,\"814\":1,\"818\":3,\"820\":2,\"823\":2,\"824\":2,\"826\":4,\"827\":2,\"947\":3}}],[\"gradientboostingclassifier\",{\"1\":{\"609\":2}}],[\"gradient\",{\"0\":{\"609\":1},\"1\":{\"593\":2,\"596\":1,\"597\":1,\"609\":1}}],[\"grade\",{\"1\":{\"177\":1}}],[\"grades\",{\"1\":{\"177\":3}}],[\"gravity\",{\"1\":{\"182\":2}}],[\"内部类特别是匿名内部类\",{\"1\":{\"1600\":1}}],[\"内部类的使用注意事项\",{\"0\":{\"1600\":1}}],[\"内部类的实例使用语法\",{\"1\":{\"1589\":1}}],[\"内部类可以访问外部类的私有成员\",{\"1\":{\"1599\":1}}],[\"内部类可以很好地组织代码\",{\"1\":{\"1599\":1}}],[\"内部类innerclass可以访问外部类的私有字段outerfield\",{\"1\":{\"1588\":1}}],[\"内部类允许将逻辑上相关的类进行分组\",{\"1\":{\"1586\":1}}],[\"内部类\",{\"0\":{\"1586\":1},\"1\":{\"1586\":1}}],[\"内存分配和回收\",{\"1\":{\"2192\":1}}],[\"内存分配和线程管理\",{\"1\":{\"1269\":1}}],[\"内存管理\",{\"1\":{\"2192\":1,\"2211\":1}}],[\"内存\",{\"1\":{\"2188\":1,\"2189\":1,\"2191\":1,\"2207\":1}}],[\"内存寻址访问\",{\"1\":{\"2153\":1}}],[\"内存节省\",{\"1\":{\"2015\":1}}],[\"内存消耗\",{\"1\":{\"1752\":1}}],[\"内存泄漏仍可能发生\",{\"1\":{\"1269\":1}}],[\"内存泄漏\",{\"1\":{\"1269\":1}}],[\"内存使用\",{\"1\":{\"1267\":1}}],[\"内存优化\",{\"1\":{\"156\":1}}],[\"内为\",{\"1\":{\"928\":1}}],[\"内点法\",{\"1\":{\"718\":1}}],[\"内置日志框架的示例\",{\"1\":{\"1918\":1}}],[\"内置日志框架的核心类\",{\"1\":{\"1916\":1}}],[\"内置日志框架\",{\"0\":{\"1915\":1},\"1\":{\"1914\":1}}],[\"内置函数式接口\",{\"0\":{\"1691\":1}}],[\"内置了一些常用的数学常数\",{\"1\":{\"1217\":1}}],[\"内置的编辑器创建和编辑\",{\"1\":{\"1186\":1}}],[\"内置库\",{\"0\":{\"292\":1}}],[\"内置模块\",{\"0\":{\"231\":1}}],[\"内容包括变量\",{\"1\":{\"2209\":1}}],[\"内容\",{\"1\":{\"1106\":1}}],[\"内容6\",{\"1\":{\"29\":1}}],[\"内容5\",{\"1\":{\"29\":1}}],[\"内容4\",{\"1\":{\"29\":1}}],[\"内容3\",{\"1\":{\"29\":1}}],[\"内容2\",{\"1\":{\"29\":1}}],[\"内容1\",{\"1\":{\"29\":1}}],[\"因客观原因未能按期完成学习任务者\",{\"1\":{\"1026\":1}}],[\"因为每次递归调用都会占用栈空间\",{\"1\":{\"2165\":1}}],[\"因为每次修改都会创建新对象\",{\"1\":{\"1377\":1}}],[\"因为只有这样\",{\"1\":{\"2157\":1}}],[\"因为referencebook不能被借阅\",{\"1\":{\"1661\":1}}],[\"因为\",{\"1\":{\"1495\":1,\"1624\":1,\"1962\":1}}],[\"因为它的结构决定了只有一个实例\",{\"1\":{\"2015\":1}}],[\"因为它内部使用位向量表示\",{\"1\":{\"1791\":1}}],[\"因为它支持在两端插入和删除元素\",{\"1\":{\"1776\":1}}],[\"因为它只包含一个抽象方法operation\",{\"1\":{\"1686\":1}}],[\"因为它不依赖于本地库\",{\"1\":{\"1986\":1}}],[\"因为它不依赖于任何标签信息\",{\"1\":{\"617\":1}}],[\"因为它不明确地显示出程序的结构\",{\"1\":{\"1650\":1}}],[\"因为它涉及到动态解析\",{\"1\":{\"1650\":1}}],[\"因为它没有\",{\"1\":{\"1776\":1}}],[\"因为它没有类名\",{\"1\":{\"1598\":1}}],[\"因为它没有同步开销\",{\"1\":{\"1375\":1}}],[\"因为它们定义了类\",{\"1\":{\"1496\":1}}],[\"因为它们是原始特征的线性组合\",{\"1\":{\"620\":1}}],[\"因为它设计上存在一些缺陷\",{\"1\":{\"1401\":1}}],[\"因为不同特征的量纲可能不同\",{\"1\":{\"616\":1}}],[\"因为降维后数据的结构可能更加简单明了\",{\"1\":{\"614\":1}}],[\"因为物品数量无限\",{\"1\":{\"408\":1}}],[\"因为元组是不可变的\",{\"1\":{\"156\":1}}],[\"因此其外观和行为依赖于操作系统\",{\"1\":{\"2019\":1}}],[\"因此线程安全\",{\"1\":{\"2009\":1}}],[\"因此它的操作\",{\"1\":{\"1789\":1}}],[\"因此它的作用域仅限于代码块内\",{\"1\":{\"1545\":1}}],[\"因此提供了许多常用的集合操作方法\",{\"1\":{\"1783\":1}}],[\"因此可以在多线程环境中安全使用\",{\"1\":{\"1772\":1}}],[\"因此可以在需要通用对象类型的地方使用\",{\"1\":{\"1665\":1}}],[\"因此可以作为队列使用\",{\"1\":{\"1761\":1}}],[\"因此可以更好地适应数据的复杂性\",{\"1\":{\"570\":1}}],[\"因此无法被借阅\",{\"1\":{\"1662\":1}}],[\"因此无需创建math类的实例即可直接调用这些方法\",{\"1\":{\"1388\":1}}],[\"因此不能访问外部类的非静态成员\",{\"1\":{\"1590\":1}}],[\"因此更适合在性能关键的单线程应用中使用\",{\"1\":{\"1376\":1}}],[\"因此适合多线程环境\",{\"1\":{\"1372\":1}}],[\"因此在单线程环境中使用性能更高\",{\"1\":{\"1375\":1}}],[\"因此在使用之前必须显式地初始化\",{\"1\":{\"1301\":1}}],[\"因此在需要大量存储数据且不修改数据时\",{\"1\":{\"156\":1}}],[\"因此得以对波施加影响\",{\"1\":{\"1053\":1}}],[\"因此必须在评价前深入分析和审慎选择\",{\"1\":{\"761\":1}}],[\"因此需要将它们转换为对应的包装类型\",{\"1\":{\"1386\":1}}],[\"因此需要使用显式的转换操作\",{\"1\":{\"1295\":1}}],[\"因此需要对各指标进行标准化处理\",{\"1\":{\"759\":1}}],[\"因此需要对每个特征进行标准化处理\",{\"1\":{\"616\":1}}],[\"因此需要考虑如何处理废料\",{\"1\":{\"701\":1}}],[\"因此你可以选择这两个主成分来减少维度\",{\"1\":{\"618\":1}}],[\"因此如果一个数据集有\",{\"1\":{\"614\":1}}],[\"因此\",{\"1\":{\"521\":1,\"525\":1,\"735\":1,\"866\":2,\"1110\":1,\"1259\":1,\"1652\":1,\"1697\":1,\"1840\":1,\"2158\":1}}],[\"因此布尔值可以被看作整数来使用\",{\"1\":{\"139\":1}}],[\"占位符忽略某些元素\",{\"1\":{\"153\":1}}],[\"但需要占用更大的内存空间\",{\"1\":{\"2152\":1}}],[\"但牺牲了数据访问速度\",{\"1\":{\"2152\":1}}],[\"但始终未被使用\",{\"1\":{\"2009\":1}}],[\"但与流不同的是\",{\"1\":{\"1882\":1}}],[\"但建议手动声明以避免潜在的问题\",{\"1\":{\"1866\":1}}],[\"但运行时不可见\",{\"1\":{\"1845\":1}}],[\"但可以通过实现\",{\"1\":{\"1824\":1}}],[\"但可以通过map和list等类来自行实现图结构\",{\"1\":{\"1732\":1}}],[\"但我们可以通过\",{\"1\":{\"1816\":1}}],[\"但\",{\"1\":{\"1811\":1,\"2032\":1}}],[\"但对应的值\",{\"1\":{\"1797\":1}}],[\"但同样位于\",{\"1\":{\"1795\":1}}],[\"但使用双向链表维护元素的插入顺序\",{\"1\":{\"1784\":1}}],[\"但使用过多的内部类会增加代码的复杂度\",{\"1\":{\"1600\":1}}],[\"但由于其同步性开销较大\",{\"1\":{\"1779\":1}}],[\"但由于其继承自\",{\"1\":{\"1776\":1}}],[\"但由于图像可以被视为多维数组\",{\"1\":{\"803\":1}}],[\"但每次检索或移除操作将返回优先级最高的元素\",{\"1\":{\"1763\":1}}],[\"但每种物品有无限件可用\",{\"1\":{\"408\":1}}],[\"但线程安全\",{\"1\":{\"1737\":1}}],[\"但随机访问效率低\",{\"1\":{\"1723\":1}}],[\"但插入和删除操作较慢\",{\"1\":{\"1722\":1}}],[\"但接口仍然不能被实例化\",{\"1\":{\"1560\":1}}],[\"但你尝试将它向下转型为dog类型\",{\"1\":{\"1539\":1}}],[\"但仅凭返回类型无法区分重载方法\",{\"1\":{\"1522\":1}}],[\"但返回类型可以相同也可以不同\",{\"1\":{\"1521\":1}}],[\"但子类可以调用父类的构造函数\",{\"1\":{\"1512\":1}}],[\"但有一些规则需要遵守\",{\"1\":{\"1495\":1}}],[\"但它们可以用于生成代码\",{\"1\":{\"1842\":1}}],[\"但它们可以用于给编译器\",{\"1\":{\"1841\":1}}],[\"但它们在实现方式和应用场景上有所不同\",{\"1\":{\"1517\":1}}],[\"但它们在许多情况下都非常有用\",{\"1\":{\"1366\":1}}],[\"但它们已经不推荐使用\",{\"1\":{\"1408\":1}}],[\"但它会先执行一次循环体\",{\"1\":{\"1327\":1}}],[\"但必须是相同类型\",{\"1\":{\"1339\":1}}],[\"但在需要维持顺序的场景中非常有用\",{\"1\":{\"1802\":1}}],[\"但在需要维持插入顺序的场景中非常有用\",{\"1\":{\"1787\":1}}],[\"但在中间插入和删除元素时效率较低\",{\"1\":{\"1725\":1}}],[\"但在静态上下文之外\",{\"1\":{\"1587\":1}}],[\"但在方法\",{\"1\":{\"1302\":1}}],[\"但在新数据上表现差\",{\"1\":{\"533\":1}}],[\"但支持接口之间的多继承\",{\"1\":{\"1259\":1}}],[\"但用于离散系统\",{\"1\":{\"862\":1}}],[\"但相对次要的指标\",{\"1\":{\"757\":1}}],[\"但计算复杂度较高\",{\"1\":{\"694\":1}}],[\"但也有一些实现\",{\"1\":{\"1797\":1}}],[\"但也带来了性能开销和安全风险\",{\"1\":{\"1652\":1}}],[\"但也要谨慎使用\",{\"1\":{\"1543\":1}}],[\"但也可以用于显示和处理图像\",{\"1\":{\"804\":1}}],[\"但也可以手动关闭文件\",{\"1\":{\"254\":1}}],[\"但也可能是曲面或不规则形状\",{\"1\":{\"686\":1}}],[\"但也更容易过拟合\",{\"1\":{\"573\":1}}],[\"但数据的输入矩阵不同\",{\"1\":{\"564\":1}}],[\"但应用的对象不同\",{\"1\":{\"563\":1}}],[\"但解释性较差\",{\"1\":{\"536\":1}}],[\"但仍然很高\",{\"1\":{\"410\":1}}],[\"但仍然只适用于较小的n\",{\"1\":{\"410\":1}}],[\"但其时间复杂度较高\",{\"1\":{\"408\":1}}],[\"但通常在实际应用中更快\",{\"1\":{\"406\":1}}],[\"但不同的哈希码可以提高哈希表的性能\",{\"1\":{\"1676\":1}}],[\"但不同的gc算法\",{\"1\":{\"1267\":1}}],[\"但不可借阅\",{\"1\":{\"1661\":1}}],[\"但不能访问非静态字段\",{\"1\":{\"1591\":1}}],[\"但不能访问\",{\"1\":{\"1515\":1}}],[\"但不能被继承\",{\"1\":{\"1309\":1}}],[\"但不提供具体的实现\",{\"1\":{\"1498\":1}}],[\"但不超过m次\",{\"1\":{\"1413\":1}}],[\"但不一定通过所有数据点\",{\"1\":{\"938\":1}}],[\"但不保证是最优解\",{\"1\":{\"694\":1}}],[\"但不保证最优\",{\"1\":{\"410\":1}}],[\"但不保证找到最优解\",{\"1\":{\"410\":1}}],[\"但不会抛出错误\",{\"1\":{\"245\":1}}],[\"但不建议这么做\",{\"1\":{\"182\":1}}],[\"但元组一旦创建\",{\"1\":{\"149\":1}}],[\"但如果语句很长\",{\"1\":{\"134\":1}}],[\"删除操作\",{\"1\":{\"1760\":1}}],[\"删除效率\",{\"1\":{\"1752\":1}}],[\"删除\",{\"1\":{\"1738\":1,\"1796\":1,\"2039\":1,\"2152\":1,\"2189\":1}}],[\"删除空值\",{\"1\":{\"458\":1}}],[\"删除文件或目录\",{\"1\":{\"1439\":1}}],[\"删除文件\",{\"1\":{\"256\":1,\"1126\":1,\"1439\":1}}],[\"删除和创建目录\",{\"1\":{\"256\":1}}],[\"删除目录\",{\"1\":{\"232\":1,\"256\":1}}],[\"删除字典元素\",{\"0\":{\"171\":1}}],[\"删除指定键值对\",{\"1\":{\"171\":1}}],[\"删除指定值的元素\",{\"1\":{\"146\":1}}],[\"删除指定位置的元素\",{\"1\":{\"146\":1}}],[\"删除并返回最后一个元素\",{\"1\":{\"146\":1}}],[\"删除元素\",{\"0\":{\"146\":1},\"1\":{\"160\":2,\"1748\":1,\"1751\":1}}],[\"访问数组的某个元素\",{\"1\":{\"2162\":1}}],[\"访问数组元素\",{\"0\":{\"1353\":1},\"1\":{\"1154\":1}}],[\"访问时间复杂度为o\",{\"1\":{\"1722\":1}}],[\"访问私有字段和方法\",{\"1\":{\"1833\":1}}],[\"访问私有字段\",{\"1\":{\"1651\":1}}],[\"访问字段和调用方法\",{\"1\":{\"1651\":1}}],[\"访问字典元素\",{\"0\":{\"169\":1}}],[\"访问和修改字段\",{\"0\":{\"1829\":1}}],[\"访问和修改字段等\",{\"1\":{\"1825\":1}}],[\"访问和修改私有字段和方法\",{\"1\":{\"1650\":1}}],[\"访问和遍历二维数组\",{\"0\":{\"1360\":1}}],[\"访问权限\",{\"1\":{\"1519\":1}}],[\"访问控制和加密等安全机制\",{\"1\":{\"2189\":1}}],[\"访问控制来保护类的内部状态\",{\"1\":{\"1659\":1}}],[\"访问控制\",{\"1\":{\"1515\":1,\"1617\":1}}],[\"访问控制修饰符\",{\"0\":{\"1712\":1},\"1\":{\"1277\":1}}],[\"访问当前对象的字段\",{\"1\":{\"1505\":1}}],[\"访问不存在的索引会抛出arrayindexoutofboundsexception异常\",{\"1\":{\"1365\":1}}],[\"访问修饰符用于控制类\",{\"1\":{\"1479\":1}}],[\"访问修饰符控制类\",{\"1\":{\"1307\":1}}],[\"访问修饰符\",{\"0\":{\"1307\":1},\"1\":{\"1335\":1,\"1478\":1,\"1506\":1}}],[\"访问修饰符和非访问修饰符\",{\"1\":{\"1306\":1}}],[\"访问向量元素\",{\"1\":{\"1155\":1}}],[\"访问矩阵中的一部分\",{\"1\":{\"1139\":1}}],[\"访问矩阵中的元素\",{\"1\":{\"1138\":1}}],[\"访问第一个元素\",{\"1\":{\"1353\":1}}],[\"访问第\",{\"1\":{\"1138\":1,\"1139\":1,\"1144\":2}}],[\"访问每个城市恰好一次并返回出发城市\",{\"1\":{\"410\":1}}],[\"访问\",{\"1\":{\"177\":1,\"2192\":1}}],[\"访问嵌套元组中的元素\",{\"1\":{\"151\":1}}],[\"访问嵌套列表中的元素\",{\"1\":{\"142\":1}}],[\"访问元组中的最后一个元素\",{\"1\":{\"151\":1}}],[\"访问元组中的第一个元素\",{\"1\":{\"151\":1}}],[\"访问元组元素\",{\"0\":{\"151\":1}}],[\"访问列表中的最后一个元素\",{\"1\":{\"142\":1}}],[\"访问列表中的第一个元素\",{\"1\":{\"142\":1}}],[\"访问列表元素\",{\"0\":{\"142\":1}}],[\"访问子字符串\",{\"1\":{\"138\":1}}],[\"如github\",{\"1\":{\"2217\":1}}],[\"如线性回归\",{\"1\":{\"2214\":1}}],[\"如线程池\",{\"1\":{\"2016\":1}}],[\"如机器学习\",{\"1\":{\"2214\":1}}],[\"如加密\",{\"1\":{\"2212\":1}}],[\"如加法\",{\"1\":{\"1119\":1}}],[\"如进程管理\",{\"1\":{\"2211\":1}}],[\"如进化\",{\"1\":{\"420\":1}}],[\"如big\",{\"1\":{\"2210\":1}}],[\"如使用git进行代码管理\",{\"1\":{\"2209\":1}}],[\"如中央处理器\",{\"1\":{\"2207\":1}}],[\"如cpu\",{\"1\":{\"2188\":1,\"2189\":1,\"2191\":1}}],[\"如冒泡排序和选择排序\",{\"1\":{\"2162\":1}}],[\"如快速排序和归并排序\",{\"1\":{\"2162\":1}}],[\"如树结构遍历\",{\"1\":{\"2161\":1}}],[\"如标准输入输出\",{\"1\":{\"2037\":1}}],[\"如窗口关闭\",{\"1\":{\"2030\":1}}],[\"如下所示\",{\"1\":{\"2026\":1}}],[\"如按钮\",{\"1\":{\"2019\":1}}],[\"如数据库连接\",{\"1\":{\"2006\":1}}],[\"如过滤\",{\"1\":{\"1992\":1}}],[\"如内存\",{\"1\":{\"1959\":1}}],[\"如除以零\",{\"1\":{\"1900\":1}}],[\"如除零错误\",{\"1\":{\"245\":1}}],[\"如图灵机\",{\"1\":{\"2210\":1}}],[\"如图片\",{\"1\":{\"1868\":1}}],[\"如图像变换\",{\"1\":{\"803\":1}}],[\"如图像分割\",{\"1\":{\"802\":1}}],[\"如图像识别\",{\"1\":{\"574\":1}}],[\"如intellij\",{\"1\":{\"1854\":1}}],[\"如arrays\",{\"1\":{\"1997\":1}}],[\"如arraylist\",{\"1\":{\"1386\":1}}],[\"如apt\",{\"1\":{\"1847\":1}}],[\"如spring\",{\"1\":{\"1847\":1}}],[\"如插入\",{\"1\":{\"1796\":1}}],[\"如交集\",{\"1\":{\"1781\":1}}],[\"如深度优先搜索\",{\"1\":{\"1775\":1}}],[\"如深度神经网络\",{\"1\":{\"536\":1}}],[\"如排序算法\",{\"1\":{\"2208\":1}}],[\"如排序\",{\"1\":{\"1741\":1,\"2038\":2,\"2156\":1}}],[\"如集合框架中\",{\"1\":{\"1706\":1}}],[\"如控制器层和视图层\",{\"1\":{\"1681\":1}}],[\"如密码\",{\"1\":{\"1675\":1}}],[\"如tcp\",{\"1\":{\"2212\":1}}],[\"如title\",{\"1\":{\"1662\":1}}],[\"如texworks\",{\"1\":{\"1103\":1}}],[\"如tensorflow或pytorch\",{\"1\":{\"450\":1}}],[\"如类\",{\"1\":{\"1659\":1,\"1845\":1}}],[\"如构造函数\",{\"1\":{\"1634\":1}}],[\"如启动\",{\"1\":{\"1468\":1}}],[\"如颜色\",{\"1\":{\"1468\":1}}],[\"如键盘\",{\"1\":{\"1421\":1}}],[\"如验证电子邮件地址\",{\"1\":{\"1417\":1}}],[\"如不易处理时区和格式问题\",{\"1\":{\"1401\":1}}],[\"如科学计算\",{\"1\":{\"1397\":1}}],[\"如拼接\",{\"1\":{\"1369\":1}}],[\"如阶乘\",{\"1\":{\"1345\":1}}],[\"如public\",{\"1\":{\"1335\":1}}],[\"如python\",{\"1\":{\"794\":1,\"2209\":1}}],[\"如pycharm\",{\"1\":{\"246\":1}}],[\"如静态特性\",{\"1\":{\"1308\":1}}],[\"如3\",{\"1\":{\"1292\":1}}],[\"如100\",{\"1\":{\"1292\":1}}],[\"如junit中的\",{\"1\":{\"1847\":1}}],[\"如jconsole\",{\"1\":{\"1267\":1}}],[\"如jpeg\",{\"1\":{\"786\":1}}],[\"如串行gc\",{\"1\":{\"1267\":1}}],[\"如分配不同的名字空间以防替代本地的同名类\",{\"1\":{\"1259\":1}}],[\"如分类问题\",{\"1\":{\"495\":1}}],[\"如操作符重载\",{\"1\":{\"1259\":1}}],[\"如等高线图\",{\"1\":{\"1212\":1}}],[\"如矩阵求逆\",{\"1\":{\"1119\":1}}],[\"如有更改\",{\"1\":{\"1038\":1}}],[\"如是否有负权边\",{\"1\":{\"960\":1}}],[\"如声波\",{\"1\":{\"881\":1}}],[\"如波动方程\",{\"1\":{\"880\":1}}],[\"如拉普拉斯方程\",{\"1\":{\"880\":1}}],[\"如热传导方程\",{\"1\":{\"880\":1}}],[\"如热传导\",{\"1\":{\"879\":1}}],[\"如张某离开办公室的时间\",{\"1\":{\"857\":1}}],[\"如ms\",{\"1\":{\"2190\":1}}],[\"如mocking\",{\"1\":{\"1859\":1}}],[\"如math\",{\"1\":{\"1390\":1}}],[\"如matlab\",{\"1\":{\"843\":1}}],[\"如miktex\",{\"1\":{\"1103\":1}}],[\"如my\",{\"1\":{\"183\":2}}],[\"如区域面积\",{\"1\":{\"816\":1}}],[\"如绘制直方图\",{\"1\":{\"804\":1}}],[\"如读取\",{\"1\":{\"800\":1}}],[\"如裁剪\",{\"1\":{\"796\":1}}],[\"如剪裁\",{\"1\":{\"794\":1}}],[\"如双线性插值\",{\"1\":{\"791\":1}}],[\"如小波变换\",{\"1\":{\"790\":1}}],[\"如共生矩阵\",{\"1\":{\"790\":1}}],[\"如harris角点检测\",{\"1\":{\"790\":1}}],[\"如html\",{\"1\":{\"16\":1}}],[\"如高斯滤波\",{\"1\":{\"787\":1}}],[\"如高度\",{\"1\":{\"614\":1}}],[\"如噪声过滤\",{\"1\":{\"786\":1}}],[\"如0到1之间\",{\"1\":{\"763\":1}}],[\"如环保指标\",{\"1\":{\"761\":1}}],[\"如环境影响评价\",{\"1\":{\"755\":1}}],[\"如社会影响\",{\"1\":{\"761\":1}}],[\"如社会福利分配\",{\"1\":{\"755\":1}}],[\"如技术难度\",{\"1\":{\"761\":1}}],[\"如技术成熟度\",{\"1\":{\"757\":1}}],[\"如将专家打分与熵值法结果结合\",{\"1\":{\"760\":1}}],[\"如熵值法\",{\"1\":{\"760\":1}}],[\"如层次分析法\",{\"1\":{\"760\":1}}],[\"如收益\",{\"1\":{\"757\":1}}],[\"如能源消耗\",{\"1\":{\"757\":1}}],[\"如就业影响\",{\"1\":{\"757\":1}}],[\"如工程方案选择\",{\"1\":{\"755\":1}}],[\"如企业绩效评价\",{\"1\":{\"755\":1}}],[\"如满意度\",{\"1\":{\"753\":1,\"757\":1}}],[\"如成本\",{\"1\":{\"753\":1,\"757\":3,\"761\":1}}],[\"如成本函数最优化\",{\"1\":{\"708\":1}}],[\"如算法设计\",{\"1\":{\"747\":1}}],[\"如算术运算\",{\"1\":{\"192\":1,\"1310\":1}}],[\"如动物行为的进化稳定策略\",{\"1\":{\"747\":1}}],[\"如国际关系\",{\"1\":{\"747\":1}}],[\"如市场竞争分析\",{\"1\":{\"747\":1}}],[\"如市场饱和\",{\"1\":{\"636\":1}}],[\"如其他玩家的策略或类型\",{\"1\":{\"746\":1}}],[\"如何运用第一性原理在工作和学习中\",{\"0\":{\"999\":1}}],[\"如何分配资金以最大化预期回报或最小化风险\",{\"1\":{\"717\":1}}],[\"如何分配生产资源以最大化总利润\",{\"1\":{\"717\":1}}],[\"如何安排运输以最小化总运输成本\",{\"1\":{\"717\":1}}],[\"如库存控制\",{\"1\":{\"712\":1}}],[\"如投资决策\",{\"1\":{\"712\":1}}],[\"如投资组合优化\",{\"1\":{\"706\":1}}],[\"如设备数量\",{\"1\":{\"711\":1}}],[\"如网络设计问题\",{\"1\":{\"711\":1}}],[\"如序列决策问题\",{\"1\":{\"709\":1}}],[\"如背包问题\",{\"1\":{\"709\":1}}],[\"如背包问题中加入物品之间的依赖关系等\",{\"1\":{\"408\":1}}],[\"如选择问题\",{\"1\":{\"707\":1}}],[\"如员工排班\",{\"1\":{\"707\":1}}],[\"如最优设计问题\",{\"1\":{\"711\":1}}],[\"如最短路径问题\",{\"1\":{\"706\":1}}],[\"如最小堆\",{\"1\":{\"404\":1}}],[\"如生产\",{\"1\":{\"706\":1}}],[\"如遗传算法\",{\"1\":{\"694\":1,\"834\":1,\"841\":1}}],[\"如贪心算法\",{\"1\":{\"694\":1}}],[\"如菱形排列\",{\"1\":{\"691\":1}}],[\"如六边形\",{\"1\":{\"691\":1}}],[\"如桥梁\",{\"1\":{\"683\":1}}],[\"如圆形\",{\"1\":{\"679\":1}}],[\"如海岸线\",{\"1\":{\"677\":1}}],[\"如气泡\",{\"1\":{\"676\":1}}],[\"如医学成像中的ct和mri数据\",{\"1\":{\"675\":1}}],[\"如前所述\",{\"1\":{\"1259\":1}}],[\"如前视图\",{\"1\":{\"673\":1}}],[\"如前面提到的遗传算法\",{\"1\":{\"417\":1}}],[\"如汽车车身\",{\"1\":{\"672\":1}}],[\"如并\",{\"1\":{\"671\":1}}],[\"如并集\",{\"1\":{\"158\":1}}],[\"如立方体\",{\"1\":{\"671\":1}}],[\"如金融市场预测\",{\"1\":{\"663\":1}}],[\"如金融市场的波动预测\",{\"1\":{\"637\":1}}],[\"如股票的历史价格\",{\"1\":{\"659\":1}}],[\"如时间序列\",{\"1\":{\"655\":1}}],[\"如时间序列预测\",{\"1\":{\"653\":1}}],[\"如用户行为预测\",{\"1\":{\"652\":1}}],[\"如天气预测\",{\"1\":{\"645\":1}}],[\"如多因素影响的经济系统\",{\"1\":{\"635\":1}}],[\"如经济效益与环境保护的平衡\",{\"1\":{\"710\":1}}],[\"如经济预测\",{\"1\":{\"633\":1}}],[\"如经济学\",{\"1\":{\"631\":1}}],[\"如简单指数平滑\",{\"1\":{\"631\":1}}],[\"如减去均值后除以标准差\",{\"1\":{\"616\":1}}],[\"如k\",{\"1\":{\"548\":1}}],[\"如人口增长\",{\"1\":{\"636\":1}}],[\"如人脸识别\",{\"1\":{\"534\":1}}],[\"如人员\",{\"1\":{\"409\":1}}],[\"如邻域半径和最小点数\",{\"1\":{\"513\":1,\"540\":1}}],[\"如欧氏距离\",{\"1\":{\"509\":1}}],[\"如二项分布\",{\"1\":{\"495\":1}}],[\"如二进制字符串\",{\"1\":{\"432\":1}}],[\"如死亡\",{\"1\":{\"476\":1}}],[\"如均值\",{\"1\":{\"465\":1}}],[\"如优化产品性能与成本\",{\"1\":{\"710\":1}}],[\"如优化\",{\"1\":{\"460\":1}}],[\"如结构优化\",{\"1\":{\"437\":1,\"708\":1}}],[\"如特征选择\",{\"1\":{\"437\":1}}],[\"如非线性函数优化\",{\"1\":{\"437\":1}}],[\"如旅行商问题\",{\"1\":{\"426\":1,\"437\":1}}],[\"如初始温度\",{\"1\":{\"425\":1}}],[\"如numpy\",{\"1\":{\"383\":1}}],[\"如重命名\",{\"1\":{\"256\":1}}],[\"如函数或类方法\",{\"1\":{\"247\":1}}],[\"如列表\",{\"1\":{\"204\":1,\"219\":1,\"1720\":1}}],[\"如字符串\",{\"1\":{\"188\":1,\"189\":1,\"190\":1}}],[\"如果想在某方面取得提升\",{\"1\":{\"2152\":1}}],[\"如果单例实例占用资源较多\",{\"1\":{\"2009\":1}}],[\"如果是查询操作\",{\"1\":{\"1976\":1}}],[\"如果某个\",{\"1\":{\"1901\":1}}],[\"如果找到匹配的\",{\"1\":{\"1900\":1}}],[\"如果有测试失败\",{\"1\":{\"1854\":1}}],[\"如果有一些选项是备选的\",{\"1\":{\"1106\":1}}],[\"如果向后遍历仍有元素可迭代\",{\"1\":{\"1822\":1}}],[\"如果向前遍历仍有元素可迭代\",{\"1\":{\"1822\":1}}],[\"如果仍有元素可以迭代\",{\"1\":{\"1813\":1}}],[\"如果映射中不包含该键\",{\"1\":{\"1798\":1}}],[\"如果键已存在\",{\"1\":{\"1798\":1}}],[\"如果键不存在\",{\"1\":{\"169\":1}}],[\"如果存在则返回\",{\"1\":{\"1783\":1}}],[\"如果集合中不存在该元素则返回\",{\"1\":{\"1783\":1}}],[\"如果不在栈中则返回\",{\"1\":{\"1773\":1}}],[\"如果不存在另一个解在所有目标上都优于它\",{\"1\":{\"840\":1}}],[\"如果栈为空则返回\",{\"1\":{\"1773\":1}}],[\"如果栈为空则抛出\",{\"1\":{\"1773\":2}}],[\"如果队列为空则返回\",{\"1\":{\"1759\":2}}],[\"如果队列为空则抛出异常\",{\"1\":{\"1759\":2}}],[\"如果队列已满\",{\"1\":{\"1759\":1}}],[\"如果成功则返回\",{\"1\":{\"1759\":2}}],[\"如果需要在多线程环境中使用\",{\"1\":{\"1746\":1}}],[\"如果需要在多个函数或工作区共享变量\",{\"1\":{\"1174\":1}}],[\"如果列表不包含该元素\",{\"1\":{\"1745\":1}}],[\"如果列表不包含元素\",{\"1\":{\"1745\":1}}],[\"如果列表包含指定的元素\",{\"1\":{\"1745\":1}}],[\"如果对象的类实现了\",{\"1\":{\"1671\":1}}],[\"如果对字符串进行任何修改操作\",{\"1\":{\"1369\":1}}],[\"如果一个类没有显式地继承其他类\",{\"1\":{\"1665\":1}}],[\"如果一个类定义在某个包中\",{\"1\":{\"1477\":1}}],[\"如果构造函数是私有的\",{\"1\":{\"1647\":1}}],[\"如果字段是私有的\",{\"1\":{\"1641\":1}}],[\"如果生命周期不一致\",{\"1\":{\"1600\":1}}],[\"如果animal引用指向的是一个cat对象\",{\"1\":{\"1539\":1}}],[\"如果尝试添加重复元素\",{\"1\":{\"1782\":1}}],[\"如果尝试将一个对象向下转型为不兼容的类型\",{\"1\":{\"1539\":1}}],[\"如果尝试存储不同类型的元素\",{\"1\":{\"1365\":1}}],[\"如果父类的方法是\",{\"1\":{\"1519\":1}}],[\"如果没有找到匹配的\",{\"1\":{\"1900\":1}}],[\"如果没有显式声明\",{\"1\":{\"1866\":1}}],[\"如果没有\",{\"1\":{\"1477\":1}}],[\"如果源文件包含\",{\"1\":{\"1477\":1}}],[\"如果方法是私有的\",{\"1\":{\"1644\":1}}],[\"如果方法不返回值\",{\"1\":{\"1335\":1}}],[\"如果方法名含有若干单词\",{\"1\":{\"1275\":1}}],[\"如果条件为true\",{\"1\":{\"1324\":1,\"1326\":1}}],[\"如果条件表达式为true\",{\"1\":{\"1316\":1}}],[\"如果两个操作数中至少有一个为true\",{\"1\":{\"1314\":1}}],[\"如果两个操作数都为true\",{\"1\":{\"1314\":1}}],[\"如果超出了目标类型的范围\",{\"1\":{\"1299\":1}}],[\"如果文件名和类名不相同则会导致编译错误\",{\"1\":{\"1275\":1}}],[\"如果文档中包含索引\",{\"1\":{\"1110\":1}}],[\"如果类的定义发生变化\",{\"1\":{\"1862\":1}}],[\"如果类没有无参构造方法\",{\"1\":{\"1828\":1}}],[\"如果类名由若干单词组成\",{\"1\":{\"1275\":1}}],[\"如果类别之间的协方差矩阵差异较大\",{\"1\":{\"526\":1}}],[\"如果前面的条件都为假\",{\"1\":{\"1161\":1}}],[\"如果在回车前输入这个命令\",{\"1\":{\"1109\":1}}],[\"如果在循环中使用break\",{\"1\":{\"208\":1}}],[\"如果这条边与生成树中的边不形成环\",{\"1\":{\"964\":1}}],[\"如果法医到达之前的尸体温度符合计算结果\",{\"1\":{\"858\":1}}],[\"如果数据存在缺失或异常值\",{\"1\":{\"763\":1}}],[\"如果你使用\",{\"1\":{\"1920\":1,\"1924\":1}}],[\"如果你使用maven构建工具\",{\"1\":{\"1851\":1}}],[\"如果你想访问这些对象的子类特有方法\",{\"1\":{\"1542\":1}}],[\"如果你有具体的案例或数据需要处理\",{\"1\":{\"764\":1}}],[\"如果你对某种具体方法的应用或计算步骤有进一步的需求\",{\"1\":{\"755\":1}}],[\"如果你需要具体的代码示例或进一步的详细信息\",{\"1\":{\"407\":1}}],[\"如果从城市\",{\"1\":{\"737\":1}}],[\"如果铺设区域是三维的\",{\"1\":{\"691\":1}}],[\"如果满足终止条件\",{\"1\":{\"433\":1}}],[\"如果\",{\"1\":{\"423\":2,\"864\":1,\"1159\":1,\"1160\":2,\"1161\":2,\"1162\":3,\"1676\":1}}],[\"如果新解更差\",{\"1\":{\"428\":1}}],[\"如果新解更好\",{\"1\":{\"428\":1}}],[\"如果新解较差\",{\"1\":{\"422\":1}}],[\"如果新解比当前解更优\",{\"1\":{\"422\":1}}],[\"如果该列有被直线覆盖的零元素\",{\"1\":{\"409\":1}}],[\"如果该行有被直线覆盖的零元素\",{\"1\":{\"409\":1}}],[\"如果覆盖零元素的直线数量等于矩阵的阶数n\",{\"1\":{\"409\":1}}],[\"如果相邻顶点的距离被更新\",{\"1\":{\"405\":1}}],[\"如果元素不存在不会引发错误\",{\"1\":{\"160\":1}}],[\"如果元素不存在会引发\",{\"1\":{\"160\":1}}],[\"如\",{\"1\":{\"139\":2,\"419\":1,\"575\":1,\"802\":1,\"805\":1,\"810\":1,\"838\":1,\"1100\":1,\"1212\":1,\"1267\":1,\"1283\":2,\"1292\":2,\"1305\":2,\"1492\":1,\"1630\":1,\"1631\":1,\"1649\":2,\"1668\":1,\"1669\":1,\"1676\":1,\"1678\":1,\"1679\":1,\"1681\":1,\"1697\":1,\"1742\":3,\"1769\":1,\"1776\":1,\"1782\":1,\"1783\":1,\"1785\":1,\"1789\":1,\"1794\":1,\"1797\":3,\"1800\":1,\"1804\":1,\"1810\":1,\"1812\":1,\"1832\":1,\"1837\":1,\"1840\":1,\"1868\":2,\"1887\":2,\"1895\":1,\"1896\":1,\"1914\":1,\"1921\":1,\"1927\":1,\"1947\":1,\"1964\":1,\"1974\":1,\"1990\":1,\"2031\":1,\"2037\":2,\"2038\":4,\"2039\":2,\"2045\":1}}],[\"零矩阵\",{\"1\":{\"1222\":1}}],[\"零和博弈\",{\"1\":{\"746\":1}}],[\"零和博弈与非零和博弈\",{\"1\":{\"746\":1}}],[\"零\",{\"1\":{\"139\":1}}],[\"会弹出一个消息对话框\",{\"1\":{\"2023\":1}}],[\"会造成资源浪费\",{\"1\":{\"2009\":1}}],[\"会返回一个\",{\"1\":{\"1982\":1}}],[\"会自动生成一个\",{\"1\":{\"1866\":1}}],[\"会自动将包装类对象转换为对应的基本数据类型\",{\"1\":{\"1700\":1}}],[\"会自动将基本数据类型转换为对应的包装类\",{\"1\":{\"1699\":1}}],[\"会看到如下输出\",{\"1\":{\"1663\":1}}],[\"会抛出arrayindexoutofboundsexception\",{\"1\":{\"1365\":1}}],[\"会在该行暂停执行\",{\"1\":{\"1188\":1}}],[\"会话管理\",{\"0\":{\"1125\":1}}],[\"会截断文件\",{\"1\":{\"251\":1}}],[\"会被转换成\",{\"1\":{\"139\":2}}],[\"会将\",{\"1\":{\"139\":1}}],[\"浮点缓冲区\",{\"1\":{\"1884\":1}}],[\"浮点计算\",{\"1\":{\"1308\":1}}],[\"浮点类型\",{\"0\":{\"1287\":1},\"1\":{\"1285\":1}}],[\"浮点数编码格式包括以下几种\",{\"1\":{\"2154\":1}}],[\"浮点数编码\",{\"1\":{\"2154\":1}}],[\"浮点数常量\",{\"1\":{\"1292\":2}}],[\"浮点数转换为字符串\",{\"1\":{\"187\":1}}],[\"浮点数转换为整数时\",{\"1\":{\"1299\":1}}],[\"浮点数转换为整数\",{\"1\":{\"185\":1}}],[\"浮点数\",{\"1\":{\"184\":1,\"1421\":1}}],[\"浮点数和字符串\",{\"1\":{\"139\":1}}],[\"浮点型也可以使用科学计数法表示\",{\"1\":{\"137\":1}}],[\"浮点型由整数部分与小数部分组成\",{\"1\":{\"137\":1}}],[\"浮点型\",{\"1\":{\"137\":1}}],[\"包包含了集合框架\",{\"1\":{\"2038\":1}}],[\"包来实现\",{\"1\":{\"1958\":1}}],[\"包来处理正则表达式\",{\"1\":{\"1946\":1}}],[\"包提供了加密\",{\"1\":{\"2045\":1}}],[\"包提供了线程安全的集合\",{\"1\":{\"2044\":1}}],[\"包提供了正则表达式\",{\"1\":{\"2043\":1}}],[\"包提供了进行网络编程的类\",{\"1\":{\"2040\":1}}],[\"包提供了输入输出\",{\"1\":{\"2039\":1}}],[\"包提供了以下核心类和接口\",{\"1\":{\"1931\":1}}],[\"包提供了命名空间的功能\",{\"1\":{\"1617\":1}}],[\"包中的并发集合类\",{\"1\":{\"1742\":1}}],[\"包中\",{\"1\":{\"1734\":1,\"1756\":1,\"1770\":1,\"1780\":1,\"1795\":1,\"1812\":1,\"1929\":1,\"2020\":1}}],[\"包访问权限\",{\"1\":{\"1712\":1}}],[\"包装类为基本数据类型提供了对象表示\",{\"1\":{\"1706\":1}}],[\"包装类提供了一些静态方法\",{\"1\":{\"1697\":1}}],[\"包装类的常用方法\",{\"0\":{\"1704\":1}}],[\"包装类的主要用途包括\",{\"1\":{\"1697\":1}}],[\"包装类的使用\",{\"0\":{\"1697\":1}}],[\"包装类有哪些\",{\"0\":{\"1696\":1}}],[\"包装类\",{\"0\":{\"1695\":1},\"1\":{\"1696\":1}}],[\"包是\",{\"1\":{\"1632\":1,\"2037\":1,\"2041\":1}}],[\"包通常与文件系统中的目录结构对应\",{\"1\":{\"1625\":1}}],[\"包级别的访问控制可以限制类和成员的访问范围\",{\"1\":{\"1623\":1}}],[\"包级可见\",{\"1\":{\"1506\":1}}],[\"包声明通常是\",{\"1\":{\"1618\":1}}],[\"包的创建通过\",{\"1\":{\"1618\":1}}],[\"包可以控制类和成员的访问级别\",{\"1\":{\"1617\":1}}],[\"包可以帮助你组织项目结构\",{\"1\":{\"1616\":1}}],[\"包将相关的类\",{\"1\":{\"1617\":1}}],[\"包\",{\"0\":{\"1403\":1,\"1616\":1,\"2037\":1,\"2038\":1,\"2039\":1,\"2040\":1,\"2041\":1,\"2043\":1,\"2044\":1,\"2045\":1},\"1\":{\"1408\":1,\"1457\":1,\"1616\":1,\"1659\":1,\"1695\":1,\"1826\":1,\"1971\":1}}],[\"包含用于操作数组\",{\"1\":{\"2038\":1}}],[\"包含用于操作集合\",{\"1\":{\"2038\":1}}],[\"包含文档注释的java源文件\",{\"1\":{\"2002\":1}}],[\"包含查询的结果数据\",{\"1\":{\"1982\":1}}],[\"包含了\",{\"1\":{\"2037\":1}}],[\"包含了一些更高级的并发工具类\",{\"1\":{\"1971\":1}}],[\"包含了lambda表达式要执行的代码\",{\"1\":{\"1685\":1}}],[\"包含了频率为0\",{\"1\":{\"1052\":1}}],[\"包含对象的关键字段信息\",{\"1\":{\"1675\":1}}],[\"包含书籍的基本属性\",{\"1\":{\"1661\":1}}],[\"包含集合框架\",{\"1\":{\"1630\":1}}],[\"包含核心类\",{\"1\":{\"1630\":1}}],[\"包含字段\",{\"1\":{\"1497\":1}}],[\"包含方法执行的代码\",{\"1\":{\"1335\":1}}],[\"包含标准的jvm和标准库\",{\"1\":{\"1261\":1}}],[\"包含在mactex中\",{\"1\":{\"1101\":1}}],[\"包含所有与其相连的顶点\",{\"1\":{\"954\":1}}],[\"包含等式和不等式约束\",{\"1\":{\"833\":1}}],[\"包含特征和对应的标签\",{\"1\":{\"528\":1}}],[\"包含许多有用的工具\",{\"1\":{\"460\":1}}],[\"包含\",{\"1\":{\"163\":1,\"618\":1,\"1878\":1}}],[\"包括互联网的工作原理\",{\"1\":{\"2212\":1}}],[\"包括编码\",{\"1\":{\"2209\":1}}],[\"包括注解类型\",{\"1\":{\"1845\":1}}],[\"包括私有方法\",{\"1\":{\"1830\":1}}],[\"包括私有字段\",{\"1\":{\"1829\":1}}],[\"包括私有成员\",{\"1\":{\"1587\":1,\"1589\":1}}],[\"包括但不限于以下这些\",{\"1\":{\"1745\":1}}],[\"包括图书的创建\",{\"1\":{\"1653\":1}}],[\"包括runtimeexception及其子类\",{\"1\":{\"1451\":1}}],[\"包括path\",{\"1\":{\"1441\":1}}],[\"包括pattern和matcher类\",{\"1\":{\"1419\":1}}],[\"包括字符流和字节流\",{\"1\":{\"1430\":1}}],[\"包括整数\",{\"1\":{\"1421\":1}}],[\"包括空格\",{\"1\":{\"1412\":1}}],[\"包括localdate\",{\"1\":{\"1408\":1}}],[\"包括日期的计算和格式化\",{\"1\":{\"1402\":1}}],[\"包括三角函数\",{\"1\":{\"1398\":1}}],[\"包括算术运算符\",{\"1\":{\"1145\":1}}],[\"包括创建\",{\"1\":{\"1128\":1}}],[\"包括程序流控制\",{\"1\":{\"1120\":1}}],[\"包括信号和图像处理\",{\"1\":{\"1116\":1}}],[\"包括学习计划\",{\"1\":{\"1034\":1}}],[\"包括环境温度\",{\"1\":{\"857\":1}}],[\"包括k\",{\"1\":{\"554\":1}}],[\"包括初始化\",{\"1\":{\"435\":1}}],[\"包括选择\",{\"1\":{\"431\":1}}],[\"包括工程设计\",{\"1\":{\"414\":1}}],[\"包括标准输入输出和文件i\",{\"1\":{\"259\":1}}],[\"包括位置参数\",{\"1\":{\"211\":1}}],[\"包括函数名\",{\"1\":{\"210\":1}}],[\"包括数字\",{\"1\":{\"140\":1}}],[\"包括\",{\"1\":{\"139\":1,\"205\":1,\"874\":1,\"1259\":1,\"1760\":1,\"1826\":1,\"2154\":3}}],[\"包围的代码\",{\"1\":{\"1544\":1}}],[\"包围公式内容\",{\"1\":{\"34\":1}}],[\"包围表情符号的名字来添加表情\",{\"1\":{\"32\":1}}],[\"包围文本可以实现加粗\",{\"1\":{\"19\":1}}],[\"包围文本可以实现斜体\",{\"1\":{\"19\":1}}],[\"其功能和特性决定了计算机的性能和使用体验\",{\"1\":{\"2192\":1}}],[\"其空间复杂度通常为o\",{\"1\":{\"2165\":1}}],[\"其余位表示数字的值\",{\"1\":{\"2154\":1}}],[\"其余点的距离为正无穷\",{\"1\":{\"403\":1,\"404\":1}}],[\"其它改进\",{\"0\":{\"1997\":1}}],[\"其它变种\",{\"1\":{\"408\":1}}],[\"其后的\",{\"1\":{\"1901\":1}}],[\"其操作\",{\"1\":{\"1804\":1}}],[\"其次是stringbuffer\",{\"1\":{\"1377\":1}}],[\"其二\",{\"1\":{\"1259\":1}}],[\"其一\",{\"1\":{\"1259\":1}}],[\"其旗下的产品包括matlab产品家族\",{\"1\":{\"1116\":1}}],[\"其实只有一件事儿\",{\"1\":{\"981\":1}}],[\"其形式为\",{\"1\":{\"927\":1}}],[\"其形式如下\",{\"1\":{\"854\":1}}],[\"其目标是在图中找到一棵包含所有顶点且边权重和最小的树\",{\"1\":{\"961\":1}}],[\"其目标是找到图中两个顶点之间的最短路径\",{\"1\":{\"956\":1}}],[\"其目标是找到一条经过若干城市且每个城市仅访问一次的最短路径\",{\"1\":{\"735\":1}}],[\"其目标是最大化或最小化一个线性目标函数\",{\"1\":{\"706\":1}}],[\"其组合可以表示复杂的三维结构\",{\"1\":{\"675\":1}}],[\"其核心在于充分利用已有的标注数据进行有效的模型训练\",{\"1\":{\"536\":1}}],[\"其生存和繁衍的机会越大\",{\"1\":{\"432\":1}}],[\"其解必须是整数\",{\"1\":{\"415\":1}}],[\"其价值为v\",{\"1\":{\"408\":2}}],[\"其主要步骤如下\",{\"1\":{\"403\":1}}],[\"其内容不能更改\",{\"1\":{\"149\":1}}],[\"其中junit\",{\"1\":{\"1851\":1}}],[\"其中键\",{\"1\":{\"1796\":1}}],[\"其中最常用的是\",{\"1\":{\"1743\":1}}],[\"其中最主要的类包括pattern\",{\"1\":{\"1409\":1}}],[\"其中存储了dog和cat对象\",{\"1\":{\"1542\":1}}],[\"其中许多工具是图形化用户接口\",{\"1\":{\"1118\":1}}],[\"其中的微结构\",{\"1\":{\"1053\":1}}],[\"其中外文文献应占10篇以上\",{\"1\":{\"1038\":1}}],[\"其中应获得的课程总学分要求不低于24学分\",{\"1\":{\"1030\":1}}],[\"其中a\",{\"1\":{\"954\":1}}],[\"其中目标函数或约束条件中至少有一个是非线性的\",{\"1\":{\"831\":1}}],[\"其中决策变量只能取0或1的值\",{\"1\":{\"729\":1}}],[\"其中每个工人都被分配了一个任务\",{\"1\":{\"409\":1}}],[\"其中每条边都有一个非负容量\",{\"1\":{\"396\":1}}],[\"其中每条边都连接前一个顶点和后一个顶点\",{\"1\":{\"389\":1,\"953\":1}}],[\"其中每条边是顶点对\",{\"1\":{\"390\":1}}],[\"其中\",{\"1\":{\"139\":1,\"389\":2,\"390\":1,\"396\":1,\"424\":1,\"491\":1,\"495\":1,\"564\":1,\"616\":1,\"634\":3,\"635\":1,\"646\":1,\"699\":1,\"715\":2,\"737\":2,\"832\":1,\"836\":1,\"837\":1,\"851\":1,\"854\":1,\"863\":1,\"864\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"880\":1,\"884\":1,\"887\":1,\"892\":2,\"898\":1,\"906\":1,\"926\":1,\"927\":1,\"939\":2,\"2018\":1,\"2154\":1}}],[\"其他异常类\",{\"1\":{\"1896\":1}}],[\"其他说明\",{\"0\":{\"1032\":1}}],[\"其他设为无穷大\",{\"1\":{\"960\":1}}],[\"其他点到源点的距离为无穷大\",{\"1\":{\"958\":1,\"959\":1}}],[\"其他插值方法\",{\"1\":{\"933\":1}}],[\"其他地方为\",{\"1\":{\"928\":1}}],[\"其他常用操作\",{\"0\":{\"155\":1}}],[\"其他常用方法\",{\"0\":{\"147\":1}}],[\"其他所有值转换为布尔值时均为\",{\"1\":{\"139\":1}}],[\"其他\",{\"0\":{\"55\":1,\"275\":1,\"1089\":1}}],[\"和更好的可移植性\",{\"1\":{\"2019\":1}}],[\"和更高效的\",{\"1\":{\"1943\":1}}],[\"和高级并发工具类\",{\"1\":{\"1944\":1}}],[\"和与其相关的连接\",{\"1\":{\"1931\":1}}],[\"和日志文件的滚动策略\",{\"1\":{\"1927\":1}}],[\"和多路复用\",{\"1\":{\"1880\":1}}],[\"和一个生成函数来生成序列\",{\"1\":{\"1820\":1}}],[\"和自动拆箱\",{\"1\":{\"1698\":1}}],[\"和自变量\",{\"1\":{\"491\":1}}],[\"和其他中间件技术中非常有用\",{\"1\":{\"1649\":1}}],[\"和重载\",{\"1\":{\"1517\":1}}],[\"和运行时多态\",{\"1\":{\"1472\":1,\"1709\":1}}],[\"和方法\",{\"1\":{\"1468\":1,\"1497\":1,\"1710\":1}}],[\"和行为\",{\"1\":{\"1468\":1,\"1563\":1}}],[\"和变量的其他特性\",{\"1\":{\"1308\":1}}],[\"和变量的访问级别\",{\"1\":{\"1307\":1}}],[\"和变异\",{\"1\":{\"431\":1}}],[\"和实例变量类似\",{\"1\":{\"1303\":1}}],[\"和类变量\",{\"1\":{\"1300\":1}}],[\"和强制类型转换\",{\"1\":{\"1293\":1}}],[\"和同步机制\",{\"1\":{\"1268\":1}}],[\"和累积分布函数\",{\"1\":{\"1230\":1}}],[\"和可选选项\",{\"1\":{\"1107\":1,\"1108\":1}}],[\"和论文研究计划\",{\"1\":{\"1034\":1}}],[\"和出度\",{\"1\":{\"953\":1}}],[\"和回归\",{\"1\":{\"938\":1}}],[\"和空间\",{\"1\":{\"926\":1}}],[\"和空映射\",{\"1\":{\"139\":1}}],[\"和初始速度\",{\"1\":{\"912\":1}}],[\"和初始温度\",{\"1\":{\"423\":1}}],[\"和时间步数\",{\"1\":{\"890\":1,\"904\":1,\"912\":1}}],[\"和康复者\",{\"1\":{\"851\":1}}],[\"和f2​\",{\"1\":{\"842\":1}}],[\"和灰度图像\",{\"1\":{\"785\":1}}],[\"和环境性\",{\"1\":{\"761\":1}}],[\"和常数项\",{\"1\":{\"740\":1}}],[\"和每对城市之间的距离矩阵\",{\"1\":{\"740\":1}}],[\"和城市\",{\"1\":{\"737\":1}}],[\"和右侧常数项向量\",{\"1\":{\"728\":1,\"734\":1}}],[\"和右侧常数项\",{\"1\":{\"726\":1,\"732\":1}}],[\"和铺设图案\",{\"1\":{\"691\":1}}],[\"和nurbs\",{\"1\":{\"672\":1}}],[\"和递归神经网络\",{\"1\":{\"653\":1}}],[\"和层组成\",{\"1\":{\"653\":1}}],[\"和二次判别分析\",{\"1\":{\"567\":2}}],[\"和生成对抗网络\",{\"1\":{\"547\":1}}],[\"和gru\",{\"1\":{\"441\":1}}],[\"和边集合\",{\"1\":{\"389\":1}}],[\"和连接这些顶点的边\",{\"1\":{\"388\":1,\"952\":1}}],[\"和writelines\",{\"1\":{\"253\":1}}],[\"和\",{\"0\":{\"459\":1,\"1400\":1,\"1404\":1,\"1406\":1,\"1414\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1905\":1,\"1923\":1,\"1926\":1,\"1940\":1,\"1951\":1,\"1963\":1,\"1966\":1,\"2047\":1,\"2048\":1},\"1\":{\"139\":3,\"205\":1,\"224\":1,\"384\":3,\"389\":1,\"391\":2,\"456\":1,\"458\":2,\"459\":1,\"504\":1,\"511\":1,\"531\":1,\"633\":1,\"634\":2,\"728\":1,\"797\":1,\"802\":1,\"871\":1,\"928\":1,\"933\":1,\"939\":1,\"1106\":1,\"1117\":1,\"1169\":1,\"1175\":1,\"1178\":1,\"1179\":1,\"1181\":2,\"1182\":1,\"1187\":1,\"1192\":1,\"1195\":1,\"1207\":1,\"1210\":1,\"1289\":1,\"1305\":1,\"1311\":1,\"1367\":1,\"1408\":1,\"1424\":1,\"1471\":1,\"1475\":1,\"1495\":3,\"1515\":1,\"1530\":2,\"1533\":1,\"1546\":1,\"1556\":1,\"1557\":1,\"1564\":1,\"1567\":1,\"1571\":1,\"1574\":1,\"1577\":1,\"1659\":2,\"1676\":1,\"1677\":2,\"1678\":1,\"1679\":1,\"1680\":4,\"1681\":1,\"1682\":2,\"1709\":2,\"1725\":1,\"1726\":1,\"1727\":1,\"1728\":1,\"1735\":1,\"1743\":1,\"1767\":1,\"1794\":1,\"1816\":1,\"1865\":1,\"1869\":1,\"1872\":1,\"1876\":1,\"1885\":1,\"1893\":1,\"1911\":1,\"1924\":1,\"1930\":1,\"1931\":3,\"1937\":1,\"1940\":1,\"1944\":1,\"1957\":1,\"1960\":1,\"1970\":1,\"1983\":1,\"2018\":1,\"2037\":1,\"2039\":3,\"2041\":1}}],[\"单精度浮点数使用\",{\"1\":{\"2154\":1}}],[\"单精度浮点数\",{\"1\":{\"2154\":1}}],[\"单精度数值数据\",{\"1\":{\"1127\":1}}],[\"单选按钮\",{\"1\":{\"2025\":1}}],[\"单行文本输入框\",{\"1\":{\"2025\":1}}],[\"单行注释以双斜杠\",{\"1\":{\"1281\":1}}],[\"单行注释\",{\"0\":{\"1281\":1},\"1\":{\"132\":1,\"1280\":1}}],[\"单例的全局访问可能导致不良的依赖关系\",{\"1\":{\"2015\":1}}],[\"单例类较难扩展\",{\"1\":{\"2015\":1}}],[\"单例模式是一种常用的设计模式\",{\"1\":{\"2017\":1}}],[\"单例模式的应用场景\",{\"0\":{\"2016\":1}}],[\"单例模式的优缺点\",{\"0\":{\"2015\":1}}],[\"单例模式的关键点\",{\"0\":{\"2007\":1}}],[\"单例模式在java中有多种实现方式\",{\"1\":{\"2008\":1}}],[\"单例模式在需要一个类只存在一个对象\",{\"1\":{\"2006\":1}}],[\"单例模式提供一个全局访问点\",{\"1\":{\"2007\":1}}],[\"单例模式通过限制实例化次数\",{\"1\":{\"2007\":1}}],[\"单例模式\",{\"0\":{\"2006\":1},\"1\":{\"2006\":1}}],[\"单向\",{\"1\":{\"1892\":1}}],[\"单个线程可以监视多个通道的\",{\"1\":{\"1886\":1}}],[\"单个字符用单引号包围\",{\"1\":{\"1292\":1}}],[\"单继承\",{\"1\":{\"1515\":1}}],[\"单引号字符\",{\"1\":{\"1292\":1}}],[\"单位矩阵\",{\"1\":{\"1156\":1,\"1222\":1}}],[\"单独输入一个反斜杠在你的行文中不会有任何帮助\",{\"1\":{\"1109\":1}}],[\"单因素方差分析\",{\"1\":{\"483\":1}}],[\"单点交叉\",{\"1\":{\"434\":1}}],[\"单片机\",{\"2\":{\"315\":1}}],[\"单片机及开发板\",{\"0\":{\"308\":1}}],[\"单元测试框架\",{\"0\":{\"1850\":1}}],[\"单元测试文件用于测试函数和类的正确性\",{\"1\":{\"1185\":1}}],[\"单元测试\",{\"0\":{\"1848\":1},\"1\":{\"247\":1,\"1849\":1}}],[\"单字符在\",{\"1\":{\"138\":1}}],[\"来分组和捕获匹配的子模式\",{\"1\":{\"1955\":1}}],[\"来自服务器的响应\",{\"1\":{\"1935\":1,\"1938\":1}}],[\"来支持网络编程\",{\"1\":{\"1929\":1}}],[\"来定义泛型参数\",{\"1\":{\"1836\":1}}],[\"来实现类似生成器的功能\",{\"1\":{\"1824\":1}}],[\"来实现多行语句\",{\"1\":{\"134\":1}}],[\"来区分成员变量和局部变量\",{\"1\":{\"1713\":1}}],[\"来组织代码的编程范式\",{\"1\":{\"1707\":1}}],[\"来访问或修改私有成员\",{\"1\":{\"1564\":1}}],[\"来访问和修改属性\",{\"1\":{\"1471\":1}}],[\"来保证线程安全\",{\"1\":{\"1548\":1}}],[\"来决定调用哪个方法\",{\"1\":{\"1527\":1}}],[\"来控制类\",{\"1\":{\"1478\":1}}],[\"来创建一个新的\",{\"1\":{\"1186\":1}}],[\"来创建字符串\",{\"1\":{\"138\":1}}],[\"来选择使用\",{\"1\":{\"960\":1}}],[\"来存储顶点及其当前的最短距离\",{\"1\":{\"958\":1}}],[\"来数值求解这个方程\",{\"1\":{\"902\":1,\"910\":1}}],[\"来求解这些方程\",{\"1\":{\"893\":1}}],[\"来展示如何在python中描述和求解偏微分方程\",{\"1\":{\"886\":1}}],[\"来平滑图像\",{\"1\":{\"787\":1}}],[\"来确定权重\",{\"1\":{\"763\":1}}],[\"来防止子环的形成\",{\"1\":{\"740\":1}}],[\"来生成不同铺设方式的瓷砖图案\",{\"1\":{\"690\":1}}],[\"来生成三维形状\",{\"1\":{\"678\":1}}],[\"来显示物体的形状\",{\"1\":{\"673\":1}}],[\"来捕捉系统的非线性特征\",{\"1\":{\"636\":1}}],[\"来预测系统的发展趋势\",{\"1\":{\"632\":1}}],[\"来表示空间中的物体\",{\"1\":{\"675\":1}}],[\"来表示\",{\"1\":{\"509\":1}}],[\"来描述数据的特征\",{\"1\":{\"465\":1}}],[\"来逐步逼近问题的最优解\",{\"1\":{\"431\":1}}],[\"来寻找增广路径\",{\"1\":{\"399\":1}}],[\"来截取字符串\",{\"1\":{\"138\":1}}],[\"没有方法实现\",{\"1\":{\"1715\":1}}],[\"没有方法体\",{\"1\":{\"1347\":1,\"1473\":1,\"1554\":1,\"1709\":1}}],[\"没有参数\",{\"1\":{\"1711\":1}}],[\"没有修饰符\",{\"1\":{\"1623\":1}}],[\"没有构造函数\",{\"1\":{\"1598\":1}}],[\"没有约束条件\",{\"1\":{\"833\":1}}],[\"没有循环结构\",{\"1\":{\"441\":1}}],[\"没有边的图\",{\"1\":{\"391\":1}}],[\"没有为算法提供输出数据\",{\"1\":{\"369\":1}}],[\"没有\",{\"1\":{\"137\":1}}],[\"所需的额外空间也是log\",{\"1\":{\"2163\":1}}],[\"所引用的远程对象的通信链接\",{\"1\":{\"2040\":1}}],[\"所有异常类都是从\",{\"1\":{\"1895\":1}}],[\"所有可达的对象\",{\"1\":{\"1866\":1}}],[\"所有实现了\",{\"1\":{\"1815\":1}}],[\"所有元素必须是枚举类型\",{\"1\":{\"1784\":1}}],[\"所有\",{\"1\":{\"1665\":1,\"2020\":1,\"2037\":1}}],[\"所有类都直接或间接继承自\",{\"1\":{\"1664\":1}}],[\"所有类都可以访问\",{\"1\":{\"1309\":1}}],[\"所有方法都是静态的\",{\"1\":{\"1390\":1}}],[\"所有对字符串内容的操作都是同步的\",{\"1\":{\"1372\":1}}],[\"所有引用类型的默认值都是null\",{\"1\":{\"1291\":1}}],[\"所有的字符流类都是\",{\"1\":{\"1872\":1}}],[\"所有的字节流类都是\",{\"1\":{\"1869\":1}}],[\"所有的泛型信息都会被擦除\",{\"1\":{\"1840\":1}}],[\"所有的方法都是\",{\"1\":{\"1709\":1}}],[\"所有的方法名都应该以小写字母开头\",{\"1\":{\"1275\":1}}],[\"所有的标识符都应该以字母\",{\"1\":{\"1276\":1}}],[\"所有的组成部分都需要名字\",{\"1\":{\"1276\":1}}],[\"所有的\",{\"1\":{\"1275\":1}}],[\"所有顶点对之间的最短距离\",{\"1\":{\"960\":1}}],[\"所有简单路径\",{\"1\":{\"955\":1}}],[\"所有玩家的策略和收益是公开的\",{\"1\":{\"746\":1}}],[\"所有玩家同时做出决策\",{\"1\":{\"746\":1}}],[\"所有满足方程的点都构成一个曲面\",{\"1\":{\"676\":1}}],[\"所有字符串都是\",{\"1\":{\"130\":1}}],[\"所以也叫作\",{\"1\":{\"1052\":1}}],[\"所以设置下界为\",{\"1\":{\"728\":1}}],[\"所以目标函数的系数使用负号表示\",{\"1\":{\"728\":1,\"734\":1}}],[\"所以这里使用负号\",{\"1\":{\"726\":1,\"732\":1}}],[\"所以对于每种物品\",{\"1\":{\"408\":1}}],[\"所以可以用作字典的键\",{\"1\":{\"156\":1}}],[\"所以\",{\"1\":{\"137\":1}}],[\"字段等\",{\"1\":{\"1634\":1,\"1845\":1}}],[\"字段等的属性\",{\"1\":{\"1825\":1}}],[\"字段等的访问权限和行为\",{\"1\":{\"1478\":1}}],[\"字段等的声明前面\",{\"1\":{\"1283\":1}}],[\"字段和构造函数等信息\",{\"1\":{\"1633\":1}}],[\"字段的访问权限\",{\"1\":{\"1506\":1}}],[\"字段的值不会被序列化\",{\"1\":{\"1491\":1}}],[\"字段修饰符用于描述字段的行为和性质\",{\"1\":{\"1493\":1}}],[\"字段值不能被修改\",{\"1\":{\"1486\":1}}],[\"字段\",{\"1\":{\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1486\":1,\"1488\":1,\"1490\":1,\"1491\":1,\"1494\":1,\"1497\":1,\"1634\":1,\"1680\":1,\"1845\":1,\"1862\":1,\"2000\":1}}],[\"字段或成员变量\",{\"1\":{\"1468\":1}}],[\"字节缓冲区\",{\"1\":{\"1884\":1}}],[\"字节的缓冲区\",{\"1\":{\"1883\":1}}],[\"字节输出流的抽象基类\",{\"1\":{\"1871\":1}}],[\"字节输出流\",{\"0\":{\"1871\":1}}],[\"字节输入流的抽象基类\",{\"1\":{\"1870\":1}}],[\"字节输入流\",{\"0\":{\"1870\":1}}],[\"字节流适合处理二进制数据\",{\"1\":{\"1879\":1}}],[\"字节流用于处理所有类型的二进制数据\",{\"1\":{\"1869\":1}}],[\"字节流\",{\"0\":{\"1431\":1,\"1435\":1,\"1869\":1},\"1\":{\"1431\":1,\"1441\":1,\"1868\":1,\"2039\":1}}],[\"字节码\",{\"1\":{\"1266\":1}}],[\"字节码校验\",{\"1\":{\"1266\":1}}],[\"字节代码检查\",{\"1\":{\"1259\":1}}],[\"字符缓冲区\",{\"1\":{\"1884\":1}}],[\"字符输出流的抽象基类\",{\"1\":{\"1874\":1}}],[\"字符输出流\",{\"0\":{\"1874\":1}}],[\"字符输入流的抽象基类\",{\"1\":{\"1873\":1}}],[\"字符输入流\",{\"0\":{\"1873\":1}}],[\"字符流用于处理文本数据\",{\"1\":{\"1872\":1}}],[\"字符流\",{\"0\":{\"1431\":1,\"1432\":1,\"1872\":1},\"1\":{\"1431\":1,\"1441\":1,\"1868\":1,\"2039\":1}}],[\"字符可以通过其对应的ascii码值与数值类型相互转换\",{\"1\":{\"1297\":1}}],[\"字符与数值类型的转换\",{\"0\":{\"1297\":1}}],[\"字符常量\",{\"1\":{\"1292\":2}}],[\"字符类型\",{\"0\":{\"1288\":1}}],[\"字符类型和布尔类型\",{\"1\":{\"1285\":1}}],[\"字符\",{\"1\":{\"1151\":1,\"1288\":1,\"1872\":1,\"2207\":1}}],[\"字符数据\",{\"1\":{\"1127\":1}}],[\"字符串替换等场景\",{\"1\":{\"1957\":1}}],[\"字符串比较\",{\"1\":{\"1370\":1}}],[\"字符串处理是非常常见的操作\",{\"1\":{\"1367\":1}}],[\"字符串连接运算符\",{\"0\":{\"1318\":1}}],[\"字符串与基本数据类型的转换\",{\"0\":{\"1298\":1}}],[\"字符串常量池\",{\"1\":{\"1369\":1}}],[\"字符串常量\",{\"1\":{\"1292\":2}}],[\"字符串存储为字符向量\",{\"1\":{\"1127\":1}}],[\"字符串切片\",{\"1\":{\"219\":1}}],[\"字符串转换为double\",{\"1\":{\"1298\":1}}],[\"字符串转换为int\",{\"1\":{\"1298\":1}}],[\"字符串转换为基本类型\",{\"1\":{\"1298\":1}}],[\"字符串转换为集合\",{\"1\":{\"190\":1}}],[\"字符串转换为元组\",{\"1\":{\"189\":1}}],[\"字符串转换为列表\",{\"1\":{\"188\":1}}],[\"字符串转换为浮点数\",{\"1\":{\"186\":1}}],[\"字符串转换为整数\",{\"1\":{\"185\":1}}],[\"字符串等\",{\"1\":{\"139\":1,\"1421\":1}}],[\"字符串的截取的语法格式如下\",{\"1\":{\"138\":1}}],[\"字符串是\",{\"1\":{\"138\":1}}],[\"字符串\",{\"0\":{\"138\":1,\"1367\":1},\"1\":{\"130\":1,\"136\":1,\"140\":1,\"184\":1,\"204\":1,\"219\":1,\"1127\":1,\"1457\":1}}],[\"字典等的方式\",{\"1\":{\"220\":1}}],[\"字典是\",{\"1\":{\"177\":1}}],[\"字典在需要快速查找\",{\"1\":{\"177\":1}}],[\"字典推导式\",{\"0\":{\"173\":1,\"223\":1}}],[\"字典的实际应用\",{\"0\":{\"175\":1}}],[\"字典的合并与更新\",{\"0\":{\"174\":1}}],[\"字典的长度\",{\"1\":{\"172\":1}}],[\"字典的其他常用操作\",{\"0\":{\"172\":1}}],[\"字典的一些基本操作和用法\",{\"1\":{\"167\":1}}],[\"字典主要用于通过键快速查找对应的值\",{\"1\":{\"167\":1}}],[\"字典中的每个元素由键和值组成\",{\"1\":{\"167\":1}}],[\"字典\",{\"0\":{\"167\":1},\"1\":{\"136\":1,\"167\":1}}],[\"n的矩阵\",{\"1\":{\"2163\":1}}],[\"n时\",{\"1\":{\"2163\":1}}],[\"n²\",{\"1\":{\"2162\":1,\"2163\":1,\"2165\":1}}],[\"n<\",{\"1\":{\"1925\":1}}],[\"nginx\",{\"0\":{\"2096\":1},\"1\":{\"1460\":1},\"2\":{\"2098\":1}}],[\"nworld\",{\"1\":{\"1292\":1}}],[\"n^3\",{\"1\":{\"957\":1}}],[\"n^2\",{\"1\":{\"410\":1,\"738\":5}}],[\"ny\",{\"1\":{\"895\":4}}],[\"nt\",{\"1\":{\"889\":6,\"890\":1,\"903\":6,\"904\":1,\"911\":6,\"912\":1,\"927\":3,\"928\":1}}],[\"nx\",{\"1\":{\"889\":5,\"890\":1,\"895\":4,\"903\":5,\"904\":1,\"911\":5,\"912\":1,\"927\":5,\"928\":1}}],[\"n​\",{\"1\":{\"836\":1}}],[\"nioclient\",{\"1\":{\"1891\":1}}],[\"nioserver\",{\"1\":{\"1890\":1}}],[\"nioexample\",{\"1\":{\"1440\":1}}],[\"nio包括了path\",{\"1\":{\"1440\":1}}],[\"nio包\",{\"1\":{\"1440\":1}}],[\"nio\",{\"0\":{\"1440\":1,\"1878\":1,\"1880\":1,\"1881\":1,\"1888\":1,\"1889\":1,\"1890\":1,\"1891\":1,\"1892\":1},\"1\":{\"1440\":4,\"1441\":1,\"1630\":2,\"1878\":3,\"1880\":2,\"1881\":1,\"1882\":1,\"1883\":2,\"1884\":1,\"1886\":1,\"1888\":2,\"1889\":1,\"1890\":3,\"1891\":2,\"1892\":1,\"1893\":2,\"1943\":1,\"1944\":1}}],[\"ni\",{\"1\":{\"798\":1}}],[\"n+j\",{\"1\":{\"738\":1}}],[\"n+n\",{\"1\":{\"738\":1}}],[\"n+1\",{\"1\":{\"738\":2,\"889\":1,\"903\":1,\"911\":3}}],[\"nullpointerexception\",{\"1\":{\"1895\":1}}],[\"null\",{\"1\":{\"1302\":1,\"1434\":1,\"1668\":1,\"1676\":2,\"1677\":1,\"1726\":1,\"1728\":2,\"1738\":2,\"1740\":2,\"1758\":1,\"1759\":2,\"1784\":2,\"1785\":1,\"1797\":3,\"1798\":1,\"1799\":4,\"1800\":2,\"1806\":2,\"1808\":2,\"1846\":1,\"1855\":1,\"1873\":1,\"1890\":1,\"1942\":1,\"1979\":1,\"1980\":1,\"1983\":3,\"2010\":1,\"2011\":1,\"2012\":2,\"2022\":1}}],[\"nurbs曲线等\",{\"1\":{\"679\":1}}],[\"numerator\",{\"1\":{\"2000\":1}}],[\"numobj\",{\"1\":{\"1699\":1,\"1700\":3,\"1702\":1,\"1703\":2}}],[\"num变量被lambda表达式捕获并使用\",{\"1\":{\"1693\":1}}],[\"num=len\",{\"1\":{\"948\":2}}],[\"num2str\",{\"1\":{\"738\":1,\"955\":1,\"1165\":1,\"1166\":1,\"1169\":2,\"1170\":2,\"1173\":2,\"1181\":1}}],[\"numnodes\",{\"1\":{\"398\":4,\"399\":4,\"958\":5,\"959\":8,\"960\":5,\"964\":5,\"965\":7}}],[\"numpy\",{\"0\":{\"457\":1,\"2123\":1,\"2124\":1},\"1\":{\"238\":1,\"370\":1,\"409\":1,\"428\":1,\"434\":1,\"444\":1,\"449\":1,\"456\":1,\"457\":3,\"477\":1,\"480\":1,\"484\":1,\"543\":1,\"549\":1,\"551\":1,\"552\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"590\":1,\"591\":1,\"619\":1,\"622\":1,\"640\":1,\"641\":1,\"642\":1,\"649\":3,\"658\":1,\"680\":1,\"688\":1,\"802\":1,\"803\":5,\"825\":1,\"826\":1,\"852\":1,\"856\":1,\"889\":1,\"895\":1,\"903\":1,\"911\":1,\"927\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"947\":1,\"948\":1},\"2\":{\"2126\":1}}],[\"num\",{\"1\":{\"204\":2,\"206\":3,\"207\":3,\"208\":5,\"224\":2,\"680\":14,\"681\":2,\"688\":4,\"1227\":1,\"1298\":3,\"1693\":2,\"1699\":3,\"1700\":1,\"1702\":2,\"1703\":1,\"1705\":2}}],[\"number>\",{\"1\":{\"1838\":2,\"1839\":1}}],[\"numberexample\",{\"1\":{\"1384\":1}}],[\"number类的子类包括integer\",{\"1\":{\"1387\":1}}],[\"number类的子类非常有用\",{\"1\":{\"1386\":1}}],[\"number类是所有数值类型的父类\",{\"1\":{\"1387\":1}}],[\"number类是一个抽象类\",{\"1\":{\"1380\":1}}],[\"number类有几个直接的子类\",{\"1\":{\"1383\":1}}],[\"number类定义了将数值类型转换为其他类型的抽象方法\",{\"1\":{\"1382\":1}}],[\"number类本身是抽象的\",{\"1\":{\"1381\":1}}],[\"number类\",{\"0\":{\"1380\":1}}],[\"numberstr\",{\"1\":{\"1298\":3}}],[\"numbers\",{\"1\":{\"141\":1,\"142\":2,\"143\":2,\"144\":2,\"145\":2,\"146\":4,\"147\":4,\"148\":2,\"150\":1,\"151\":2,\"152\":2,\"153\":3,\"154\":2,\"155\":4,\"159\":1,\"160\":4,\"162\":4,\"204\":2,\"211\":4,\"212\":2,\"214\":2,\"219\":6,\"459\":1,\"1325\":2,\"1339\":2,\"1363\":2,\"1364\":2,\"1365\":4,\"1722\":3,\"1949\":1,\"1992\":2,\"2000\":1}}],[\"number\",{\"0\":{\"137\":1},\"1\":{\"136\":1,\"142\":2,\"151\":2,\"185\":10,\"186\":8,\"187\":8,\"215\":2,\"1307\":4,\"1321\":6,\"1325\":2,\"1339\":2,\"1384\":3,\"1395\":1,\"1528\":6,\"1838\":3,\"1839\":1,\"1857\":2,\"2000\":3,\"2001\":3}}],[\"nn\",{\"1\":{\"530\":1,\"586\":1}}],[\"nashorn\",{\"0\":{\"1996\":1},\"1\":{\"1996\":3}}],[\"nativemethod\",{\"1\":{\"1308\":1,\"1492\":1}}],[\"native\",{\"1\":{\"1265\":1,\"1308\":2,\"1492\":1}}],[\"nargin\",{\"1\":{\"1178\":1}}],[\"naive\",{\"0\":{\"607\":1},\"1\":{\"589\":2,\"593\":1,\"607\":2}}],[\"nan\",{\"1\":{\"458\":1}}],[\"names\",{\"1\":{\"1689\":2,\"1692\":2,\"1989\":3,\"1991\":2}}],[\"name方法的正确性\",{\"1\":{\"248\":1}}],[\"name方法中加入print语句查看first\",{\"1\":{\"248\":1}}],[\"name的值\",{\"1\":{\"248\":1}}],[\"name和last\",{\"1\":{\"248\":1}}],[\"name=\",{\"1\":{\"168\":1,\"211\":2,\"1667\":2,\"1675\":1,\"1677\":5,\"1682\":1,\"1876\":1,\"1921\":1,\"1925\":1}}],[\"name\",{\"1\":{\"157\":4,\"168\":1,\"169\":2,\"170\":2,\"171\":3,\"172\":3,\"191\":2,\"210\":2,\"211\":3,\"216\":1,\"239\":1,\"242\":15,\"243\":7,\"247\":1,\"248\":25,\"256\":2,\"257\":1,\"258\":1,\"261\":3,\"262\":3,\"1302\":3,\"1303\":4,\"1422\":3,\"1427\":4,\"1504\":6,\"1505\":7,\"1506\":3,\"1509\":3,\"1568\":12,\"1609\":2,\"1667\":2,\"1668\":3,\"1669\":2,\"1671\":1,\"1675\":1,\"1676\":4,\"1677\":8,\"1680\":11,\"1682\":7,\"1692\":2,\"1709\":5,\"1713\":4,\"1829\":1,\"1831\":5,\"1862\":1,\"1863\":6,\"1864\":1,\"1865\":6,\"1876\":5,\"1981\":1,\"1982\":4,\"1984\":2}}],[\"nlp\",{\"0\":{\"708\":1},\"1\":{\"415\":1,\"831\":1}}],[\"n为物品数量\",{\"1\":{\"408\":1}}],[\"np\",{\"1\":{\"238\":3,\"409\":4,\"428\":5,\"434\":14,\"444\":1,\"445\":1,\"446\":4,\"447\":4,\"448\":2,\"449\":12,\"457\":7,\"458\":1,\"459\":2,\"460\":4,\"480\":2,\"484\":3,\"485\":1,\"486\":2,\"487\":1,\"543\":1,\"549\":1,\"551\":1,\"552\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"590\":1,\"619\":2,\"622\":1,\"624\":4,\"640\":1,\"641\":8,\"642\":5,\"643\":3,\"649\":5,\"658\":1,\"659\":5,\"680\":12,\"688\":3,\"689\":1,\"735\":1,\"803\":2,\"825\":3,\"826\":2,\"852\":2,\"856\":4,\"889\":5,\"895\":8,\"903\":5,\"911\":6,\"927\":3,\"935\":4,\"936\":4,\"937\":4,\"941\":3,\"942\":6,\"943\":5,\"944\":5,\"947\":1,\"948\":7}}],[\"n\",{\"1\":{\"213\":4,\"253\":4,\"390\":3,\"391\":2,\"408\":2,\"409\":19,\"410\":3,\"485\":1,\"487\":2,\"492\":2,\"494\":1,\"495\":2,\"517\":2,\"543\":2,\"549\":2,\"550\":2,\"551\":1,\"552\":2,\"564\":4,\"581\":1,\"590\":1,\"605\":1,\"614\":2,\"616\":1,\"618\":2,\"619\":2,\"623\":2,\"634\":1,\"635\":2,\"641\":4,\"642\":1,\"649\":1,\"726\":3,\"732\":4,\"736\":1,\"738\":20,\"740\":1,\"863\":1,\"864\":3,\"866\":1,\"889\":1,\"903\":1,\"911\":5,\"921\":3,\"927\":1,\"1141\":1,\"1144\":1,\"1149\":2,\"1170\":2,\"1194\":1,\"1195\":1,\"1196\":1,\"1292\":2,\"1345\":4,\"1413\":3,\"1425\":1,\"1427\":1,\"1722\":1,\"1723\":1,\"1789\":1,\"1804\":1,\"1921\":1,\"1947\":6,\"1992\":2,\"2162\":5,\"2163\":5,\"2165\":1}}],[\"negativity\",{\"1\":{\"715\":1}}],[\"negative\",{\"1\":{\"589\":1,\"1161\":1,\"1321\":1,\"2001\":2}}],[\"neighbor\",{\"1\":{\"541\":1,\"594\":1,\"933\":1}}],[\"neighbors=5\",{\"1\":{\"581\":1,\"605\":1}}],[\"neighbors\",{\"0\":{\"581\":1,\"605\":1},\"1\":{\"530\":1,\"581\":2,\"593\":1,\"605\":2}}],[\"nearest\",{\"0\":{\"581\":1,\"605\":1},\"1\":{\"530\":1,\"581\":1,\"593\":1,\"605\":1,\"933\":1,\"947\":4}}],[\"netinstall\",{\"1\":{\"1100\":1}}],[\"net\",{\"0\":{\"500\":1},\"1\":{\"500\":5,\"593\":1,\"1259\":1,\"1890\":1,\"1891\":1,\"1929\":1,\"1931\":1,\"1933\":2,\"1935\":1,\"1936\":2,\"1938\":3,\"1939\":2,\"1941\":1,\"1942\":2,\"2036\":1,\"2040\":1}}],[\"networks\",{\"0\":{\"608\":1},\"1\":{\"530\":1,\"593\":1,\"595\":2,\"598\":4,\"653\":1}}],[\"network\",{\"0\":{\"610\":1,\"654\":1,\"655\":1},\"1\":{\"396\":1,\"441\":4,\"531\":1,\"596\":1,\"608\":3,\"653\":3}}],[\"neural\",{\"0\":{\"608\":1,\"610\":1,\"654\":1,\"655\":1},\"1\":{\"441\":3,\"530\":1,\"531\":1,\"593\":1,\"598\":2,\"608\":3,\"653\":4}}],[\"nextboolean\",{\"1\":{\"1423\":1}}],[\"nextdouble\",{\"1\":{\"1422\":1,\"1423\":1,\"1427\":1}}],[\"nextint\",{\"1\":{\"1422\":1,\"1423\":1,\"1427\":1,\"1428\":1,\"1673\":1}}],[\"nextline\",{\"1\":{\"1422\":1,\"1423\":1,\"1427\":1}}],[\"nextweek\",{\"1\":{\"1406\":2}}],[\"next\",{\"1\":{\"224\":2,\"649\":2,\"1423\":1,\"1428\":1,\"1723\":2,\"1813\":2,\"1814\":1,\"1818\":2,\"1822\":2,\"1823\":1,\"1887\":1,\"1982\":1,\"1984\":1}}],[\"newfixedthreadpool\",{\"1\":{\"1963\":1}}],[\"newsecret\",{\"1\":{\"1651\":1}}],[\"newvalue\",{\"1\":{\"1642\":1}}],[\"newinstance\",{\"1\":{\"1639\":1,\"1648\":1,\"1651\":1,\"1828\":2,\"1829\":1,\"1830\":1}}],[\"newintvalue\",{\"1\":{\"1384\":2}}],[\"newline\",{\"1\":{\"1292\":1,\"1874\":1}}],[\"newline=\",{\"1\":{\"257\":1,\"259\":1}}],[\"newdist\",{\"1\":{\"958\":3,\"959\":3}}],[\"new\",{\"0\":{\"1440\":1,\"1878\":1},\"1\":{\"168\":1,\"170\":2,\"232\":2,\"256\":3,\"258\":1,\"889\":3,\"903\":3,\"927\":3,\"928\":1,\"935\":5,\"936\":5,\"937\":5,\"942\":5,\"943\":5,\"944\":2,\"948\":5,\"1186\":2,\"1291\":1,\"1336\":1,\"1351\":2,\"1359\":1,\"1362\":1,\"1365\":1,\"1373\":1,\"1376\":1,\"1401\":2,\"1422\":1,\"1427\":1,\"1428\":1,\"1433\":2,\"1434\":4,\"1436\":2,\"1437\":4,\"1439\":1,\"1440\":1,\"1447\":1,\"1448\":1,\"1469\":1,\"1472\":1,\"1511\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1516\":1,\"1520\":1,\"1523\":1,\"1528\":1,\"1530\":2,\"1533\":2,\"1536\":1,\"1538\":1,\"1539\":1,\"1541\":1,\"1542\":3,\"1546\":2,\"1547\":2,\"1548\":3,\"1554\":1,\"1557\":2,\"1561\":1,\"1568\":1,\"1579\":1,\"1583\":1,\"1588\":2,\"1589\":1,\"1591\":1,\"1592\":1,\"1594\":2,\"1597\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1630\":1,\"1638\":1,\"1655\":2,\"1661\":4,\"1667\":1,\"1671\":1,\"1673\":2,\"1677\":2,\"1682\":1,\"1688\":1,\"1710\":1,\"1722\":1,\"1723\":2,\"1725\":2,\"1726\":2,\"1727\":2,\"1728\":2,\"1730\":1,\"1731\":1,\"1732\":1,\"1737\":3,\"1738\":3,\"1739\":2,\"1740\":3,\"1741\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1818\":2,\"1820\":2,\"1823\":1,\"1827\":1,\"1843\":1,\"1853\":1,\"1855\":1,\"1858\":2,\"1863\":5,\"1870\":1,\"1871\":1,\"1873\":2,\"1874\":2,\"1876\":5,\"1880\":1,\"1883\":1,\"1890\":1,\"1891\":2,\"1901\":1,\"1906\":1,\"1908\":1,\"1909\":1,\"1935\":4,\"1936\":4,\"1938\":5,\"1939\":5,\"1941\":1,\"1942\":4,\"1943\":1,\"1961\":2,\"1962\":4,\"1963\":2,\"1964\":2,\"1966\":2,\"1969\":1,\"1970\":3,\"1991\":1,\"1993\":1,\"1996\":1,\"2000\":1,\"2001\":1,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":1,\"2013\":1,\"2022\":3,\"2027\":5,\"2028\":7,\"2031\":2,\"2033\":3}}],[\"nestedfunction\",{\"1\":{\"1175\":3}}],[\"nested\",{\"1\":{\"142\":1,\"151\":1}}],[\"north\",{\"1\":{\"2028\":1}}],[\"normcdf\",{\"1\":{\"1230\":1}}],[\"normpdf\",{\"1\":{\"1230\":1}}],[\"normvec\",{\"1\":{\"1155\":1}}],[\"normalization\",{\"1\":{\"763\":1}}],[\"normal\",{\"1\":{\"460\":1,\"659\":1,\"1230\":1}}],[\"norm\",{\"1\":{\"460\":1,\"895\":1,\"1155\":1}}],[\"noah\",{\"1\":{\"1655\":1}}],[\"node\",{\"1\":{\"1460\":1,\"1723\":6,\"1868\":1}}],[\"noisy\",{\"1\":{\"814\":2}}],[\"noise=0\",{\"1\":{\"551\":1}}],[\"noise\",{\"1\":{\"540\":1,\"594\":1}}],[\"now\",{\"1\":{\"234\":3,\"1401\":3,\"1404\":5,\"1405\":2,\"1406\":2,\"1407\":3,\"1994\":2,\"2047\":2}}],[\"no\",{\"1\":{\"150\":1,\"1661\":1,\"1663\":1,\"1818\":1,\"1865\":1}}],[\"notation\",{\"1\":{\"2162\":1}}],[\"notifyall\",{\"1\":{\"1673\":2,\"1678\":1,\"1970\":3}}],[\"notify\",{\"1\":{\"1673\":4,\"1678\":1,\"1970\":5}}],[\"notimplementederror\",{\"1\":{\"243\":1}}],[\"noteexpress\",{\"0\":{\"1078\":1}}],[\"not\",{\"1\":{\"133\":1,\"139\":1,\"172\":1,\"195\":1,\"198\":2,\"199\":2,\"202\":2,\"409\":12,\"1152\":3,\"1163\":2,\"1314\":1,\"1315\":1,\"1418\":1,\"1439\":1,\"1538\":1,\"1661\":1,\"2284\":1}}],[\"non\",{\"0\":{\"1308\":1},\"1\":{\"715\":1,\"939\":1,\"943\":1,\"1160\":1,\"1654\":1,\"1878\":1,\"1880\":1}}],[\"nonlinear\",{\"0\":{\"708\":1,\"711\":1},\"1\":{\"415\":1,\"831\":1}}],[\"nonlocal\",{\"1\":{\"133\":1}}],[\"none\",{\"1\":{\"133\":1,\"139\":1,\"169\":1,\"384\":1,\"410\":1,\"434\":1,\"722\":2}}],[\"是计算机系统中的一个重要软件\",{\"1\":{\"2188\":1}}],[\"是组织和存储数据的方式\",{\"1\":{\"2152\":1}}],[\"是组合优化中的经典问题之一\",{\"1\":{\"735\":1}}],[\"是成为\",{\"1\":{\"2049\":1}}],[\"是经典的\",{\"1\":{\"2034\":1}}],[\"是开发人员之间传递代码信息的重要工具\",{\"1\":{\"2002\":1}}],[\"是学习\",{\"1\":{\"1987\":1}}],[\"是操作系统能够调度的最小执行单元\",{\"1\":{\"1959\":1}}],[\"是程序运行时出现的非正常情况或错误\",{\"1\":{\"1895\":1}}],[\"是构建高性能网络应用的重要技能\",{\"1\":{\"1893\":1}}],[\"是实现非阻塞\",{\"1\":{\"1886\":1}}],[\"是实现机器学习算法的一个非常流行的编程语言\",{\"1\":{\"600\":1}}],[\"是将字节流恢复为对象的过程\",{\"1\":{\"1860\":1}}],[\"是将对象的状态转换为字节流的过程\",{\"1\":{\"1860\":1}}],[\"是将高维数据映射到低维空间的过程\",{\"1\":{\"614\":1}}],[\"是软件测试的一部分\",{\"1\":{\"1849\":1}}],[\"是java编程语言中一种强大的功能\",{\"1\":{\"1834\":1}}],[\"是java编程语言的核心组件之一\",{\"1\":{\"1263\":1}}],[\"是线程安全的\",{\"1\":{\"1808\":1}}],[\"是唯一的\",{\"1\":{\"1796\":1}}],[\"是基于红黑树的实现\",{\"1\":{\"1789\":1,\"1804\":1}}],[\"是否找到与正则表达式匹配的子字符串\",{\"1\":{\"1951\":1}}],[\"是否同步\",{\"1\":{\"1778\":1}}],[\"是否允许随机访问\",{\"1\":{\"1752\":1}}],[\"是否生产产品c\",{\"1\":{\"731\":1,\"732\":1,\"733\":1}}],[\"是否生产产品b\",{\"1\":{\"731\":1,\"732\":1,\"733\":1}}],[\"是否生产产品a\",{\"1\":{\"731\":1,\"732\":1,\"733\":1}}],[\"是进行高效数据管理的基础\",{\"1\":{\"1742\":1}}],[\"是单继承语言\",{\"1\":{\"1709\":1}}],[\"是定义在另一个类中的类\",{\"1\":{\"1586\":1}}],[\"是面向对象编程\",{\"1\":{\"1563\":1}}],[\"是在类中定义的一种代码块\",{\"1\":{\"1546\":1}}],[\"是两个常见的概念\",{\"1\":{\"1517\":1}}],[\"是两个不同的变量\",{\"1\":{\"1305\":1}}],[\"是类的实际表现形式\",{\"1\":{\"1469\":1}}],[\"是类的所有对象共享的变量\",{\"1\":{\"1303\":1}}],[\"是所有数值类的父类\",{\"1\":{\"1380\":1}}],[\"是代码块的封装\",{\"1\":{\"1333\":1}}],[\"是不同的\",{\"1\":{\"1275\":1}}],[\"是不等式约束\",{\"1\":{\"832\":1}}],[\"是大小写敏感的\",{\"1\":{\"1275\":2}}],[\"是垃圾回收器\",{\"1\":{\"1265\":1}}],[\"是高性能的\",{\"1\":{\"1259\":1}}],[\"是由\",{\"1\":{\"1258\":1,\"1923\":1}}],[\"是特征值对角矩阵\",{\"1\":{\"1233\":1}}],[\"是特征向量矩阵\",{\"1\":{\"1233\":1}}],[\"是领先的为工程师和科学家提供数学计算软件的供应商\",{\"1\":{\"1116\":1}}],[\"是什么的问题\",{\"0\":{\"1058\":1}}],[\"是武德充沛\",{\"1\":{\"992\":1}}],[\"是非法的\",{\"1\":{\"1840\":1}}],[\"是非同步的\",{\"1\":{\"1746\":1}}],[\"是非\",{\"1\":{\"981\":1}}],[\"是待定参数\",{\"1\":{\"939\":2}}],[\"是待估参数\",{\"1\":{\"837\":1}}],[\"是初始种群密度分布\",{\"1\":{\"928\":1}}],[\"是空间离散点数\",{\"1\":{\"928\":1}}],[\"是空间区间长度\",{\"1\":{\"928\":1}}],[\"是种群增长率\",{\"1\":{\"927\":1,\"928\":1}}],[\"是反应项\",{\"1\":{\"926\":1}}],[\"是扩散系数\",{\"1\":{\"926\":1,\"927\":1,\"928\":1}}],[\"是随时间\",{\"1\":{\"926\":1}}],[\"是波速\",{\"1\":{\"906\":1}}],[\"是位移随时间和空间的变化函数\",{\"1\":{\"906\":1}}],[\"是已知函数\",{\"1\":{\"892\":1}}],[\"是已知的系数\",{\"1\":{\"715\":2}}],[\"是拉普拉斯算子\",{\"1\":{\"892\":1}}],[\"是拉普拉斯方程的推广\",{\"1\":{\"881\":1}}],[\"是热扩散系数\",{\"1\":{\"887\":1,\"898\":1}}],[\"是温度随时间和空间的变化函数\",{\"1\":{\"887\":1,\"898\":1}}],[\"是独立变量\",{\"1\":{\"880\":1}}],[\"是未知函数\",{\"1\":{\"880\":1}}],[\"是包含多个独立变量和其偏导数的方程\",{\"1\":{\"879\":1}}],[\"是第\",{\"1\":{\"873\":1}}],[\"是消除速率常数\",{\"1\":{\"872\":1}}],[\"是分布容积\",{\"1\":{\"872\":1}}],[\"是每次给药剂量\",{\"1\":{\"872\":1}}],[\"是每期的固定需求量\",{\"1\":{\"873\":1}}],[\"是每期的固定取款\",{\"1\":{\"870\":1}}],[\"是每期的固定存款\",{\"1\":{\"870\":1}}],[\"是捕食者因捕食被捕食者而增长的比例\",{\"1\":{\"871\":1}}],[\"是捕食者的自然死亡率\",{\"1\":{\"871\":1}}],[\"是捕食率系数\",{\"1\":{\"871\":1}}],[\"是被捕食者的自然增长率\",{\"1\":{\"871\":1}}],[\"是利率\",{\"1\":{\"870\":1}}],[\"是环境的最大承载能力\",{\"1\":{\"927\":1,\"928\":1}}],[\"是环境承载能力\",{\"1\":{\"869\":1}}],[\"是环境温度\",{\"1\":{\"854\":1}}],[\"是内禀增长率\",{\"1\":{\"869\":1}}],[\"是常数\",{\"1\":{\"864\":1}}],[\"是描述离散变量之间关系的方程\",{\"1\":{\"862\":1}}],[\"是时间离散点数\",{\"1\":{\"928\":1}}],[\"是时间区间长度\",{\"1\":{\"928\":1}}],[\"是时间\",{\"1\":{\"854\":1}}],[\"是冷却常数\",{\"1\":{\"854\":1}}],[\"是尸体在时间\",{\"1\":{\"854\":1}}],[\"是康复率\",{\"1\":{\"851\":1}}],[\"是康复者数量\",{\"1\":{\"851\":1}}],[\"是传播率\",{\"1\":{\"851\":1}}],[\"是感染者数量\",{\"1\":{\"851\":1}}],[\"是易感者数量\",{\"1\":{\"851\":1}}],[\"是预测值\",{\"1\":{\"837\":1}}],[\"是观测值\",{\"1\":{\"837\":1}}],[\"是允许的最大风险\",{\"1\":{\"836\":1}}],[\"是资产\",{\"1\":{\"836\":2}}],[\"是投资组合的收益\",{\"1\":{\"836\":1}}],[\"是等式约束\",{\"1\":{\"832\":1}}],[\"是目标函数\",{\"1\":{\"832\":1}}],[\"是用于处理集合的强大工具\",{\"1\":{\"1992\":1}}],[\"是用于优化问题的一种数学方法\",{\"1\":{\"831\":1}}],[\"是用于数据处理和分析的强大库\",{\"1\":{\"458\":1}}],[\"是图像处理领域中非常强大且广泛使用的工具\",{\"1\":{\"806\":1}}],[\"是图像处理领域非常流行的编程语言\",{\"1\":{\"799\":1}}],[\"是图论中的一个经典问题\",{\"1\":{\"395\":1,\"961\":1}}],[\"是辅助变量\",{\"1\":{\"737\":1}}],[\"是约束条件的数量\",{\"1\":{\"715\":1}}],[\"是约束的常数项\",{\"1\":{\"715\":1}}],[\"是决策变量的可行域\",{\"1\":{\"832\":1}}],[\"是决策变量\",{\"1\":{\"715\":1}}],[\"是几何建模中一种常见的技术\",{\"1\":{\"678\":1}}],[\"是模型参数\",{\"1\":{\"634\":1}}],[\"是最常用的\",{\"1\":{\"1785\":1,\"1800\":1,\"2019\":1}}],[\"是最常用的灰色预测模型\",{\"1\":{\"634\":1}}],[\"是最基础的回归模型\",{\"1\":{\"504\":1}}],[\"是你的数据矩阵\",{\"1\":{\"619\":1}}],[\"是标准化后的数据矩阵\",{\"1\":{\"616\":1}}],[\"是人工智能和机器学习中的一个关键领域\",{\"1\":{\"584\":1}}],[\"是变量数量\",{\"1\":{\"564\":1}}],[\"是变量所指的内存中对象的类型\",{\"1\":{\"135\":1}}],[\"是样本数量\",{\"1\":{\"564\":1,\"616\":1}}],[\"是指在一个程序中同时运行多个线程\",{\"1\":{\"1959\":1}}],[\"是指在一个加权有向图中找到一条从源点到汇点的最小费用路径\",{\"1\":{\"400\":1}}],[\"是指在多维度\",{\"1\":{\"752\":1}}],[\"是指对变量进行聚类分析\",{\"1\":{\"562\":1}}],[\"是指对观测样本\",{\"1\":{\"561\":1}}],[\"是现代人工智能系统的核心方法之一\",{\"1\":{\"527\":1}}],[\"是因变量的期望值\",{\"1\":{\"495\":1}}],[\"是连接函数\",{\"1\":{\"495\":1}}],[\"是误差项\",{\"1\":{\"491\":1}}],[\"是斜率\",{\"1\":{\"491\":1}}],[\"是截距\",{\"1\":{\"491\":1}}],[\"是其改进版本\",{\"1\":{\"441\":1}}],[\"是运筹学中的一个经典问题\",{\"1\":{\"409\":1}}],[\"是解决背包问题的一种常见方法\",{\"1\":{\"408\":1}}],[\"是边的容量\",{\"1\":{\"396\":1}}],[\"是流的终点\",{\"1\":{\"396\":1}}],[\"是流的起点\",{\"1\":{\"396\":1}}],[\"是从数据中提取知识\",{\"1\":{\"367\":1}}],[\"是一组被大括号\",{\"1\":{\"1544\":1}}],[\"是一棵无环连通图\",{\"1\":{\"962\":1}}],[\"是一个容器类\",{\"1\":{\"1995\":1}}],[\"是一个为各种日志框架提供统一接口的日志门面\",{\"1\":{\"1923\":1}}],[\"是一个流行的\",{\"1\":{\"1919\":1}}],[\"是一个对象\",{\"1\":{\"1884\":1}}],[\"是一个增强版的迭代器接口\",{\"1\":{\"1824\":1}}],[\"是一个非常常用的数据结构\",{\"1\":{\"1795\":1}}],[\"是一个非常强大的工具\",{\"1\":{\"1692\":1}}],[\"是一个专门用于枚举类型的集合\",{\"1\":{\"1791\":1}}],[\"是一个支持线程安全操作的队列接口\",{\"1\":{\"1767\":1}}],[\"是一个线程安全的\",{\"1\":{\"1753\":1,\"1806\":1}}],[\"是一个可动态增长和缩减的数组\",{\"1\":{\"1747\":1}}],[\"是一个接口\",{\"1\":{\"1557\":1,\"1743\":1}}],[\"是一个抽象方法\",{\"1\":{\"1554\":1}}],[\"是一个抽象类\",{\"1\":{\"1554\":1}}],[\"是一个类变量\",{\"1\":{\"1303\":1}}],[\"是一个实例变量\",{\"1\":{\"1302\":1}}],[\"是一个实现了\",{\"1\":{\"224\":1}}],[\"是一个局部变量\",{\"1\":{\"1301\":1}}],[\"是一个强大的数学计算工具\",{\"1\":{\"1214\":1}}],[\"是一个强大的计算机视觉库\",{\"1\":{\"800\":1}}],[\"是一个函数\",{\"1\":{\"863\":1,\"864\":1}}],[\"是一个绘图库\",{\"1\":{\"804\":1}}],[\"是一个用于符号计算的\",{\"1\":{\"913\":1}}],[\"是一个用于基本图像处理的库\",{\"1\":{\"801\":1}}],[\"是一个用于科学计算的库\",{\"1\":{\"460\":1}}],[\"是一个免费的开源图像编辑工具\",{\"1\":{\"794\":1}}],[\"是一个基于数组的双端队列\",{\"1\":{\"1765\":1}}],[\"是一个基于优先级堆的队列\",{\"1\":{\"1763\":1}}],[\"是一个基于深度学习的图像处理库\",{\"1\":{\"805\":1}}],[\"是一个基于\",{\"1\":{\"459\":1,\"802\":1}}],[\"是一个经典的组合优化问题\",{\"1\":{\"410\":1}}],[\"是一个较为经典的算法\",{\"1\":{\"403\":1}}],[\"是一种算法策略\",{\"1\":{\"2160\":1}}],[\"是一种重复执行某个任务的控制结构\",{\"1\":{\"2159\":1}}],[\"是一种广泛使用的浮点数编码格式标准\",{\"1\":{\"2154\":1}}],[\"是一种广泛使用的降维技术\",{\"1\":{\"615\":1}}],[\"是一种推荐的单例实现方式\",{\"1\":{\"2013\":1}}],[\"是一种创建型设计模式\",{\"1\":{\"2006\":1}}],[\"是一种面向连接的\",{\"1\":{\"1934\":1}}],[\"是一种面向对象编程\",{\"1\":{\"1707\":1}}],[\"是一种面向对象的编程语言\",{\"1\":{\"1467\":1}}],[\"是一种为代码提供元数据的机制\",{\"1\":{\"1841\":1}}],[\"是一种强大的特性\",{\"1\":{\"1825\":1}}],[\"是一种强大的工具\",{\"1\":{\"620\":1}}],[\"是一种不允许存储重复元素的集合接口\",{\"1\":{\"1780\":1}}],[\"是一种不允许重复元素的集合\",{\"1\":{\"1726\":1}}],[\"是一种数据结构\",{\"1\":{\"1744\":1,\"1756\":1,\"1771\":1}}],[\"是一种数学优化技术\",{\"1\":{\"714\":1}}],[\"是一种键值对\",{\"1\":{\"1728\":1,\"1796\":1}}],[\"是一种先进先出\",{\"1\":{\"1727\":1}}],[\"是一种符合特定约定的\",{\"1\":{\"1679\":1}}],[\"是一种解决问题的方法\",{\"1\":{\"998\":1}}],[\"是一种特殊的注释类型\",{\"1\":{\"1999\":1}}],[\"是一种特殊的整数规划\",{\"1\":{\"729\":1}}],[\"是一种特殊的rnn\",{\"1\":{\"656\":1}}],[\"是一种特殊的迭代器\",{\"1\":{\"225\":1}}],[\"是一种模仿人脑神经元连接的机器学习模型\",{\"1\":{\"653\":1}}],[\"是一种多变量灰色预测模型\",{\"1\":{\"635\":1}}],[\"是一种线性方法\",{\"1\":{\"620\":1}}],[\"是一种无连接的\",{\"1\":{\"1937\":1}}],[\"是一种无监督学习算法\",{\"1\":{\"617\":1}}],[\"是一种无序的\",{\"1\":{\"158\":1,\"167\":1}}],[\"是一种统计分类方法\",{\"1\":{\"518\":1}}],[\"是一种灵活的线性回归模型\",{\"1\":{\"500\":1}}],[\"是一种用于执行\",{\"1\":{\"1974\":1}}],[\"是一种用于记录应用程序运行时信息的机制\",{\"1\":{\"1912\":1}}],[\"是一种用于存储和操作数据的线性数据结构\",{\"1\":{\"1770\":1}}],[\"是一种用于组织类和接口的机制\",{\"1\":{\"1616\":1}}],[\"是一种用于算法开发\",{\"1\":{\"1116\":1}}],[\"是一种用于解决包含多个目标的优化问题的方法\",{\"1\":{\"839\":1}}],[\"是一种用于分类的监督学习算法\",{\"1\":{\"567\":1}}],[\"是一种用于比较多个样本均数之间差异的统计方法\",{\"1\":{\"470\":1}}],[\"是一种用于修改或增强函数功能的设计模式\",{\"1\":{\"226\":1}}],[\"是一种基于自然选择和遗传学原理的优化算法\",{\"1\":{\"431\":1}}],[\"是一种基于物理退火过程的优化算法\",{\"1\":{\"421\":1}}],[\"是一种编程范式\",{\"1\":{\"241\":1}}],[\"是一种简洁的创建列表\",{\"1\":{\"220\":1}}],[\"是一种有序的集合\",{\"1\":{\"1743\":1,\"1757\":1}}],[\"是一种有序的\",{\"1\":{\"1725\":1}}],[\"是一种有序的不可变数据类型\",{\"1\":{\"149\":1}}],[\"是一种有序的可变数据类型\",{\"1\":{\"140\":1}}],[\"是一种轻量级标记语言\",{\"1\":{\"16\":1}}],[\"是没有名称的函数\",{\"1\":{\"212\":1}}],[\"是负数\",{\"1\":{\"201\":1}}],[\"是零\",{\"1\":{\"201\":1}}],[\"是正数\",{\"1\":{\"201\":1}}],[\"是正或负整数\",{\"1\":{\"137\":1}}],[\"是\",{\"1\":{\"139\":1,\"457\":1,\"459\":1,\"803\":1,\"887\":2,\"898\":2,\"906\":2,\"1384\":2,\"1424\":1,\"1525\":1,\"1572\":1,\"1602\":1,\"1624\":1,\"1633\":1,\"1683\":1,\"1716\":1,\"1737\":1,\"1746\":1,\"1749\":1,\"1752\":1,\"1778\":1,\"1787\":1,\"1802\":1,\"1811\":1,\"1812\":1,\"1824\":1,\"1878\":1,\"1880\":1,\"1882\":1,\"1886\":1,\"1915\":1,\"1916\":1,\"1969\":1,\"1973\":1,\"1984\":1,\"1987\":1,\"1988\":1,\"2018\":1,\"2020\":1,\"2032\":1,\"2035\":1}}],[\"是整型的子类型\",{\"1\":{\"137\":1}}],[\"分时操作系统的出现使得多个用户可以通过终端同时使用一台计算机\",{\"1\":{\"2190\":1}}],[\"分时操作系统阶段\",{\"1\":{\"2190\":1}}],[\"分治\",{\"0\":{\"2177\":1}}],[\"分为以下两类\",{\"1\":{\"1895\":1}}],[\"分段锁机制\",{\"1\":{\"1799\":1}}],[\"分布式微服务\",{\"0\":{\"1462\":1,\"2297\":1}}],[\"分组与捕获\",{\"0\":{\"1955\":1}}],[\"分组运算符\",{\"1\":{\"1412\":1}}],[\"分组背包问题\",{\"1\":{\"408\":1}}],[\"分\",{\"1\":{\"1404\":2}}],[\"分支\",{\"1\":{\"1457\":1}}],[\"分支语句根据条件的真或假来决定执行哪一段代码\",{\"1\":{\"1320\":1}}],[\"分支语句可以嵌套使用\",{\"1\":{\"1163\":1}}],[\"分支语句主要用于控制程序的执行流程\",{\"1\":{\"1158\":1}}],[\"分支语句\",{\"0\":{\"1158\":1,\"1320\":1},\"1\":{\"1332\":1}}],[\"分支限界法\",{\"1\":{\"408\":1,\"410\":1}}],[\"分别是用户自定义的面向对象的用户类类型和java类类型\",{\"1\":{\"1127\":1}}],[\"分别是空间步长和时间步长\",{\"1\":{\"928\":1}}],[\"分别解这两个方程\",{\"1\":{\"884\":1}}],[\"分别表示按钮\",{\"1\":{\"2021\":1}}],[\"分别表示true和false\",{\"1\":{\"1127\":1}}],[\"分别表示第\",{\"1\":{\"871\":1}}],[\"分别表示易感者\",{\"1\":{\"853\":1}}],[\"分离变量法\",{\"1\":{\"883\":1}}],[\"分水岭算法\",{\"1\":{\"811\":1}}],[\"分形模型具有分数维度\",{\"1\":{\"677\":1}}],[\"分形模型使用递归的数学方程来生成具有自相似特征的复杂几何形状\",{\"1\":{\"677\":1}}],[\"分形维度\",{\"1\":{\"677\":1}}],[\"分形几何\",{\"1\":{\"677\":1}}],[\"分数\",{\"1\":{\"582\":1}}],[\"分裂层次聚类\",{\"1\":{\"512\":1}}],[\"分析计算机技术对就业\",{\"1\":{\"2216\":1}}],[\"分析错误和记录重要的操作过程\",{\"1\":{\"1912\":1}}],[\"分析等丰富的功能\",{\"1\":{\"794\":1}}],[\"分析多个决策单元在多输入\",{\"1\":{\"771\":1}}],[\"分析各方案的优缺点\",{\"1\":{\"763\":1}}],[\"分析的过程\",{\"1\":{\"762\":1}}],[\"分析和优化算法\",{\"1\":{\"2208\":1}}],[\"分析和选择最优解\",{\"1\":{\"841\":1}}],[\"分析和操作三维形状\",{\"1\":{\"677\":1}}],[\"分析和解释数据的系统过程\",{\"1\":{\"464\":1}}],[\"分析两个分类变量之间的关系\",{\"1\":{\"481\":1}}],[\"分析时间序列数据的规律\",{\"1\":{\"382\":1}}],[\"分配内存并初始化数组\",{\"1\":{\"1351\":1}}],[\"分配和布尔决策等问题\",{\"1\":{\"729\":1}}],[\"分配结果\",{\"1\":{\"409\":1}}],[\"分配给一组任务\",{\"1\":{\"409\":1}}],[\"分配给每条边的数值\",{\"1\":{\"396\":1}}],[\"分类算法\",{\"1\":{\"586\":1,\"593\":1}}],[\"分类问题是机器学习中的核心任务之一\",{\"1\":{\"583\":1}}],[\"分类问题是监督学习中的一个重要任务\",{\"1\":{\"574\":1}}],[\"分类问题的评价指标\",{\"0\":{\"582\":1}}],[\"分类问题的输出是一个离散的标签或类别\",{\"1\":{\"575\":1}}],[\"分类问题的输出通常是离散值\",{\"1\":{\"530\":1}}],[\"分类问题的基本概念\",{\"0\":{\"575\":1}}],[\"分类问题在许多领域都有广泛应用\",{\"1\":{\"574\":1}}],[\"分类问题\",{\"1\":{\"572\":1}}],[\"分类或回归\",{\"1\":{\"532\":1}}],[\"分类是将输入数据分配到一组预定义类别中的任务\",{\"1\":{\"530\":1}}],[\"分类\",{\"0\":{\"293\":1,\"530\":1},\"1\":{\"336\":2,\"653\":1,\"880\":1,\"1653\":1},\"2\":{\"338\":1}}],[\"分割数据集为训练集和测试集\",{\"1\":{\"497\":1,\"501\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2}}],[\"分割\",{\"1\":{\"134\":1}}],[\"分隔参数和方法体\",{\"1\":{\"1685\":1}}],[\"分隔符\",{\"1\":{\"1151\":2}}],[\"分隔表头和其他行\",{\"1\":{\"29\":1}}],[\"分隔单元格\",{\"1\":{\"29\":1}}],[\"不论输入数据规模多大\",{\"1\":{\"2162\":1}}],[\"不推荐使用\",{\"1\":{\"2038\":2}}],[\"不直接调用\",{\"1\":{\"1965\":1}}],[\"不支持多重继承\",{\"1\":{\"1962\":1}}],[\"不支持单字符类型\",{\"1\":{\"138\":1}}],[\"不提供日志实现本身\",{\"1\":{\"1914\":1}}],[\"不属于\",{\"1\":{\"1795\":1}}],[\"不保证键值对的顺序\",{\"1\":{\"1799\":1,\"1800\":1}}],[\"不保证元素顺序\",{\"1\":{\"1782\":1}}],[\"不保证元素的顺序\",{\"1\":{\"1780\":1,\"1784\":1}}],[\"不保证顺序\",{\"1\":{\"1738\":1,\"1740\":1,\"1782\":1,\"1797\":1}}],[\"不允许存储重复的元素\",{\"1\":{\"1782\":1}}],[\"不允许重复元素\",{\"1\":{\"1782\":1}}],[\"不允许重复的键\",{\"1\":{\"1735\":1}}],[\"不允许随机访问\",{\"1\":{\"1758\":1}}],[\"不允许\",{\"1\":{\"1738\":1,\"1740\":1,\"1784\":1,\"1799\":2}}],[\"不允许包含重复元素的集合\",{\"1\":{\"1735\":1}}],[\"不接收任何参数\",{\"1\":{\"1691\":1}}],[\"不返回结果\",{\"1\":{\"1691\":1}}],[\"不要在日志中记录密码\",{\"1\":{\"1927\":1}}],[\"不要求连续内存块\",{\"1\":{\"1723\":1}}],[\"不要求不等的对象具有不同的哈希码\",{\"1\":{\"1676\":1}}],[\"不要捕获所有异常\",{\"1\":{\"1452\":1}}],[\"不建议依赖\",{\"1\":{\"1672\":1}}],[\"不会阻塞\",{\"1\":{\"1890\":1}}],[\"不会改变代码行为\",{\"1\":{\"1842\":1}}],[\"不会添加\",{\"1\":{\"1786\":1,\"1788\":1}}],[\"不会换行\",{\"1\":{\"1426\":1}}],[\"不会影响原始变量\",{\"1\":{\"1338\":1}}],[\"不会影响其他工作区或函数中的同名变量\",{\"1\":{\"1174\":1}}],[\"不会被序列化\",{\"1\":{\"1308\":1}}],[\"不定积分\",{\"1\":{\"1226\":1}}],[\"不再执行剩余的循环迭代\",{\"1\":{\"1167\":1}}],[\"不计入总学分\",{\"1\":{\"1031\":1}}],[\"不低于13学分\",{\"1\":{\"1030\":1}}],[\"不超过5年\",{\"1\":{\"1026\":1}}],[\"不可靠的协议\",{\"1\":{\"1937\":1}}],[\"不可变的字符串类\",{\"1\":{\"2037\":1}}],[\"不可变集合创建等\",{\"1\":{\"1741\":1}}],[\"不可变性\",{\"1\":{\"156\":1,\"1308\":1,\"1369\":1,\"1377\":1}}],[\"不可信\",{\"1\":{\"858\":1}}],[\"不适用于指标间存在较大差异或冲突的情况\",{\"1\":{\"773\":1}}],[\"不适合处理大规模数据\",{\"1\":{\"540\":1}}],[\"不适合大规模数据集\",{\"1\":{\"512\":1}}],[\"不依赖主观判断\",{\"1\":{\"767\":1}}],[\"不依赖主观权重\",{\"1\":{\"754\":1}}],[\"不完全信息博弈\",{\"1\":{\"746\":1}}],[\"不完全信息系统的预测方法\",{\"1\":{\"632\":1}}],[\"不能对\",{\"1\":{\"1885\":1}}],[\"不能重复\",{\"1\":{\"1796\":1}}],[\"不能直接在运行时检查泛型类型\",{\"1\":{\"1840\":1}}],[\"不能直接访问外部类的非静态成员\",{\"1\":{\"1592\":1}}],[\"不能直接实例化\",{\"1\":{\"1308\":1,\"1381\":1,\"1584\":1}}],[\"不能是\",{\"1\":{\"1519\":1}}],[\"不能一起使用\",{\"1\":{\"1495\":1}}],[\"不能给不同的类不同的包声明\",{\"1\":{\"1477\":1}}],[\"不能被子类重写\",{\"1\":{\"1347\":1}}],[\"不能被其他类访问\",{\"1\":{\"1307\":1}}],[\"不能被不同包中的类访问\",{\"1\":{\"1307\":1}}],[\"不能用于修饰类\",{\"1\":{\"1307\":2}}],[\"不能强制合作\",{\"1\":{\"746\":1}}],[\"不能处理非凸形状的簇\",{\"1\":{\"540\":1}}],[\"不等式约束的右侧常数项\",{\"1\":{\"722\":1}}],[\"不等式约束的系数矩阵\",{\"1\":{\"722\":1}}],[\"不等于任何一个\",{\"1\":{\"1162\":1}}],[\"不等于\",{\"1\":{\"194\":1,\"1147\":1,\"1313\":1}}],[\"不包含任何方法\",{\"1\":{\"1862\":1}}],[\"不包含表面或体积信息\",{\"1\":{\"673\":1}}],[\"不包含重复顶点的路径\",{\"1\":{\"389\":1}}],[\"不需要移动后续元素\",{\"1\":{\"1750\":1}}],[\"不需要在代码中显式地处理或声明\",{\"1\":{\"1451\":1}}],[\"不需要指定簇数\",{\"1\":{\"540\":1}}],[\"不需要预先指定簇数\",{\"1\":{\"512\":1}}],[\"不需要使用大括号\",{\"1\":{\"134\":1}}],[\"不断拆分成更小的簇\",{\"1\":{\"512\":1}}],[\"不断合并最近的簇\",{\"1\":{\"512\":1}}],[\"不断增加流量\",{\"1\":{\"397\":1}}],[\"不同类型的内部类适用于不同的场景\",{\"1\":{\"1601\":1}}],[\"不同为1\",{\"1\":{\"1315\":1}}],[\"不同的\",{\"1\":{\"1782\":2,\"1810\":1}}],[\"不同的模型适用于不同的应用场景和数据类型\",{\"1\":{\"765\":1}}],[\"不同的标准化方法适用于不同的情况\",{\"1\":{\"764\":1}}],[\"不同的数据类型之间可以进行转换\",{\"1\":{\"184\":1}}],[\"不同指标通常具有不同的量纲和数量级\",{\"1\":{\"759\":1}}],[\"不同规格的小钢板及其需求数量\",{\"1\":{\"693\":1}}],[\"不同簇之间的数据点差异较大\",{\"1\":{\"538\":1}}],[\"不同问题可能需要不同的调优\",{\"1\":{\"425\":1}}],[\"不写为默认\",{\"1\":{\"336\":1}}],[\"不带括号的元组\",{\"1\":{\"150\":1}}],[\"不带小数点\",{\"1\":{\"137\":1}}],[\"不小于16g\",{\"1\":{\"100\":1}}],[\"行为由方法实现\",{\"1\":{\"1710\":1}}],[\"行为\",{\"1\":{\"1497\":1,\"1710\":1}}],[\"行为和特性\",{\"1\":{\"1309\":1}}],[\"行为或特性\",{\"1\":{\"1306\":1}}],[\"行为有\",{\"1\":{\"1273\":1}}],[\"行列式\",{\"1\":{\"1222\":1}}],[\"行向量的第四个元素\",{\"1\":{\"1155\":1}}],[\"行向量\",{\"1\":{\"1155\":1,\"1221\":1}}],[\"行\",{\"1\":{\"1139\":1,\"1144\":1}}],[\"行第\",{\"1\":{\"1138\":1,\"1144\":1}}],[\"行业导师应充分发挥其行业优势\",{\"1\":{\"1028\":1}}],[\"行减法\",{\"1\":{\"409\":1}}],[\"行与缩进\",{\"0\":{\"134\":1}}],[\"行内代码\",{\"0\":{\"27\":1}}],[\"rw\",{\"1\":{\"1883\":1}}],[\"r>\",{\"1\":{\"1691\":1}}],[\"r1\",{\"1\":{\"1688\":2}}],[\"running\",{\"1\":{\"1964\":3}}],[\"runnableexample\",{\"1\":{\"1962\":1}}],[\"runnable\",{\"1\":{\"1259\":3,\"1688\":1,\"1960\":1,\"1962\":2,\"1963\":1,\"1964\":3}}],[\"run\",{\"1\":{\"1259\":3,\"1961\":2,\"1962\":1,\"1965\":2,\"1966\":1}}],[\"runtests\",{\"1\":{\"1185\":1}}],[\"runtimeexception\",{\"1\":{\"1896\":1,\"1909\":1}}],[\"runtime\",{\"1\":{\"245\":1,\"1265\":1,\"1844\":1,\"1845\":1}}],[\"rmi\",{\"1\":{\"1259\":1}}],[\"rmdir\",{\"1\":{\"232\":1,\"256\":1}}],[\"r语言数据分析和可视化\",{\"0\":{\"1250\":1}}],[\"r语言中的相关包等\",{\"1\":{\"843\":1}}],[\"r=2\",{\"1\":{\"866\":1}}],[\"r−2=0\",{\"1\":{\"866\":1}}],[\"r0\",{\"1\":{\"852\":2,\"853\":1}}],[\"right\",{\"1\":{\"1152\":1}}],[\"ri​\",{\"1\":{\"836\":1}}],[\"ridge\",{\"0\":{\"498\":1},\"1\":{\"498\":14,\"531\":1,\"593\":1}}],[\"rollback\",{\"1\":{\"1985\":2}}],[\"root>\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"rooty\",{\"1\":{\"964\":8}}],[\"rootx\",{\"1\":{\"964\":6}}],[\"root\",{\"1\":{\"964\":2,\"1394\":1,\"1979\":1,\"2001\":4,\"2033\":3}}],[\"rotate\",{\"1\":{\"822\":1}}],[\"rotated\",{\"1\":{\"815\":2,\"822\":3}}],[\"route\",{\"1\":{\"738\":4}}],[\"roc曲线和auc\",{\"1\":{\"586\":1}}],[\"roc曲线和auc值\",{\"1\":{\"582\":1}}],[\"rowvec\",{\"1\":{\"1155\":7}}],[\"rowsaffected\",{\"1\":{\"1981\":2}}],[\"rows\",{\"1\":{\"409\":2}}],[\"row\",{\"1\":{\"257\":2,\"409\":9,\"1142\":1,\"1144\":1}}],[\"r型聚类常用于数据降维\",{\"1\":{\"562\":1}}],[\"r型聚类的目的是将相似的变量组合在一起\",{\"1\":{\"562\":1}}],[\"r型聚类\",{\"0\":{\"562\":1},\"1\":{\"562\":1,\"564\":1,\"565\":1,\"566\":1}}],[\"rgb2gray\",{\"1\":{\"808\":1}}],[\"rgb\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"558\":1}}],[\"rng\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"565\":2}}],[\"rnn的特点是具有记忆功能\",{\"1\":{\"655\":1}}],[\"rnns\",{\"1\":{\"598\":1}}],[\"rnn\",{\"0\":{\"655\":1},\"1\":{\"441\":1,\"653\":1}}],[\"rbf\",{\"1\":{\"502\":1}}],[\"r^2\",{\"1\":{\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1}}],[\"r2\",{\"1\":{\"497\":4,\"498\":3,\"499\":3,\"500\":3,\"501\":3,\"502\":3,\"503\":3}}],[\"r\",{\"1\":{\"251\":2,\"252\":2,\"254\":1,\"257\":1,\"258\":1,\"259\":1,\"383\":1,\"643\":1,\"836\":1,\"851\":1,\"852\":1,\"856\":1,\"869\":1,\"870\":1,\"926\":1,\"927\":3,\"928\":1,\"941\":1,\"1131\":1,\"1182\":2,\"1192\":1,\"1196\":1,\"1210\":1,\"1292\":1},\"2\":{\"1252\":1}}],[\"ram\",{\"1\":{\"2207\":1}}],[\"radians\",{\"1\":{\"1393\":1}}],[\"radiation\",{\"1\":{\"1052\":1}}],[\"radius\",{\"1\":{\"680\":14,\"681\":2}}],[\"rainy\",{\"1\":{\"649\":3}}],[\"raise\",{\"1\":{\"133\":1,\"224\":1,\"243\":1}}],[\"ratio\",{\"1\":{\"619\":2}}],[\"ratio=0\",{\"1\":{\"500\":1}}],[\"rate\",{\"1\":{\"434\":12,\"447\":2,\"449\":2,\"948\":5}}],[\"rank\",{\"1\":{\"964\":7}}],[\"randarray\",{\"1\":{\"1156\":1}}],[\"randnarray\",{\"1\":{\"1156\":1}}],[\"randn\",{\"1\":{\"555\":3,\"556\":3,\"557\":3,\"558\":3,\"1156\":1,\"1202\":2,\"1230\":1}}],[\"rand\",{\"1\":{\"428\":1,\"434\":2,\"515\":1,\"565\":2,\"1131\":1,\"1156\":1,\"1230\":1}}],[\"randint\",{\"1\":{\"235\":1,\"434\":1}}],[\"randomaccessfile\",{\"1\":{\"1883\":3}}],[\"randomexample\",{\"1\":{\"1395\":1}}],[\"randomforestclassifier\",{\"1\":{\"580\":2,\"604\":2}}],[\"random\",{\"0\":{\"580\":1,\"604\":1},\"1\":{\"235\":5,\"428\":3,\"434\":8,\"446\":3,\"449\":3,\"485\":1,\"497\":1,\"501\":1,\"517\":1,\"524\":1,\"530\":1,\"531\":1,\"535\":1,\"543\":1,\"549\":1,\"550\":1,\"552\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":2,\"581\":1,\"588\":1,\"589\":1,\"593\":1,\"597\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":2,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"623\":1,\"649\":1,\"659\":2,\"1395\":3,\"1673\":1,\"2037\":1,\"2038\":1}}],[\"range=\",{\"1\":{\"659\":1}}],[\"range\",{\"1\":{\"148\":1,\"163\":1,\"173\":1,\"206\":1,\"207\":1,\"208\":2,\"221\":1,\"222\":1,\"223\":1,\"409\":10,\"410\":2,\"428\":1,\"434\":3,\"447\":1,\"449\":1,\"457\":1,\"641\":1,\"642\":1,\"649\":1,\"659\":1,\"680\":2,\"688\":2,\"700\":1,\"889\":3,\"895\":1,\"903\":3,\"911\":2,\"927\":2,\"1152\":1}}],[\"reentrantlock\",{\"1\":{\"1969\":3}}],[\"rewind\",{\"1\":{\"1885\":1}}],[\"required\",{\"1\":{\"1865\":1}}],[\"requests\",{\"1\":{\"230\":2,\"237\":2}}],[\"request\",{\"1\":{\"202\":1,\"1936\":2,\"1939\":2}}],[\"remaining\",{\"1\":{\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1}}],[\"removal\",{\"1\":{\"1762\":1,\"1814\":1}}],[\"removing\",{\"1\":{\"1748\":1,\"1751\":1,\"1786\":1,\"1790\":1,\"1792\":1,\"1801\":1}}],[\"removed\",{\"1\":{\"160\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1}}],[\"remove\",{\"1\":{\"146\":1,\"160\":1,\"256\":1,\"1673\":1,\"1745\":2,\"1748\":1,\"1751\":1,\"1758\":1,\"1759\":1,\"1783\":1,\"1785\":1,\"1786\":1,\"1789\":1,\"1790\":1,\"1792\":1,\"1798\":1,\"1800\":1,\"1801\":1,\"1804\":1,\"1813\":1,\"1814\":1,\"1887\":1}}],[\"ref\",{\"1\":{\"1925\":1}}],[\"ref=\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"references\",{\"0\":{\"1690\":1}}],[\"reference\",{\"1\":{\"1661\":1,\"1663\":1}}],[\"referencebook\",{\"1\":{\"1661\":4}}],[\"reflect\",{\"1\":{\"1651\":2,\"1655\":2,\"1826\":1,\"1831\":3,\"1846\":1}}],[\"reflectionexample\",{\"1\":{\"1651\":2,\"1831\":1}}],[\"reflection\",{\"1\":{\"1633\":1,\"1825\":1}}],[\"relational\",{\"0\":{\"1313\":1}}],[\"relu\",{\"1\":{\"608\":2,\"610\":4}}],[\"react\",{\"1\":{\"1460\":1}}],[\"reaction\",{\"1\":{\"927\":3,\"928\":1}}],[\"readfile\",{\"1\":{\"1908\":2}}],[\"readint\",{\"1\":{\"1865\":1}}],[\"reading\",{\"1\":{\"1654\":1}}],[\"readexternal\",{\"1\":{\"1865\":2}}],[\"reader和writer\",{\"1\":{\"1441\":1}}],[\"reader\",{\"0\":{\"1873\":1},\"1\":{\"257\":3,\"1433\":2,\"1434\":2,\"1868\":2,\"1872\":1,\"1873\":1,\"2039\":1}}],[\"readobject\",{\"1\":{\"1863\":2,\"1865\":1,\"1876\":1}}],[\"readmethod\",{\"1\":{\"1655\":2}}],[\"readable\",{\"1\":{\"1654\":3,\"1659\":1}}],[\"readallbytes\",{\"1\":{\"1440\":1}}],[\"readtable\",{\"1\":{\"1192\":1}}],[\"readlines\",{\"1\":{\"252\":2,\"259\":1}}],[\"readline\",{\"1\":{\"252\":1,\"1434\":1,\"1873\":1,\"1935\":1,\"1936\":1,\"1942\":1}}],[\"read\",{\"1\":{\"239\":1,\"252\":2,\"254\":1,\"948\":1,\"1433\":1,\"1436\":1,\"1437\":1,\"1654\":2,\"1655\":2,\"1870\":1,\"1883\":2,\"1887\":2,\"1891\":1,\"1970\":2}}],[\"retentionpolicy\",{\"1\":{\"1844\":2,\"1845\":3}}],[\"retention\",{\"1\":{\"1844\":2,\"1845\":1}}],[\"retinanet\",{\"1\":{\"805\":1}}],[\"returned\",{\"1\":{\"1661\":1,\"1663\":1}}],[\"returnbook\",{\"1\":{\"1661\":5}}],[\"return\",{\"1\":{\"133\":1,\"157\":1,\"202\":4,\"211\":2,\"213\":2,\"214\":2,\"215\":2,\"216\":3,\"217\":1,\"224\":2,\"226\":2,\"242\":4,\"243\":3,\"245\":1,\"246\":2,\"247\":1,\"248\":2,\"398\":1,\"399\":1,\"409\":1,\"410\":2,\"428\":2,\"434\":7,\"445\":2,\"449\":2,\"460\":1,\"624\":1,\"641\":2,\"642\":2,\"649\":2,\"659\":1,\"660\":2,\"680\":3,\"852\":1,\"856\":1,\"895\":1,\"943\":1,\"1283\":1,\"1335\":1,\"1341\":1,\"1342\":1,\"1343\":3,\"1344\":1,\"1345\":2,\"1471\":2,\"1503\":1,\"1523\":3,\"1541\":1,\"1548\":1,\"1568\":2,\"1608\":1,\"1612\":1,\"1654\":8,\"1661\":1,\"1667\":2,\"1668\":4,\"1669\":1,\"1671\":1,\"1675\":1,\"1676\":4,\"1677\":6,\"1680\":4,\"1682\":3,\"1709\":4,\"1818\":2,\"1836\":1,\"1843\":1,\"1863\":2,\"1876\":1,\"1963\":1,\"1968\":2,\"1969\":1,\"1970\":1,\"2000\":4,\"2001\":3,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":1,\"2013\":1}}],[\"replacing\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"replaced\",{\"1\":{\"1416\":1}}],[\"replacedtext\",{\"1\":{\"1416\":2}}],[\"replacement\",{\"1\":{\"1416\":1,\"1951\":1}}],[\"replaceall\",{\"1\":{\"1416\":2,\"1951\":1,\"1952\":1}}],[\"replace\",{\"1\":{\"1373\":1,\"1376\":1,\"2037\":1}}],[\"repmat\",{\"1\":{\"738\":2,\"1156\":1}}],[\"rep\",{\"1\":{\"671\":1}}],[\"representation\",{\"1\":{\"671\":1}}],[\"repeat=false\",{\"1\":{\"624\":1}}],[\"repeatedarray\",{\"1\":{\"1156\":1}}],[\"repeated\",{\"1\":{\"148\":1,\"154\":1}}],[\"regexgroupexample\",{\"1\":{\"1956\":1}}],[\"regexflagexample\",{\"1\":{\"1954\":1}}],[\"regexreplaceexample\",{\"1\":{\"1952\":1}}],[\"regexexample\",{\"1\":{\"1416\":1,\"1949\":1,\"2048\":1}}],[\"regex\",{\"1\":{\"1410\":1,\"1415\":1,\"1416\":4,\"1418\":2,\"1946\":1,\"1949\":4,\"1950\":2,\"1951\":2,\"1952\":2,\"1954\":4,\"1956\":2,\"2043\":1,\"2048\":2}}],[\"regex包提供\",{\"1\":{\"1409\":1,\"1419\":1}}],[\"regularbook类实现了这个接口\",{\"1\":{\"1662\":1}}],[\"regularbook类实现了该接口\",{\"1\":{\"1662\":1}}],[\"regularbook和referencebook类通过extends关键字继承自book类\",{\"1\":{\"1662\":1}}],[\"regularbook和referencebook是继承自book的子类\",{\"1\":{\"1662\":1}}],[\"regularbook\",{\"1\":{\"1661\":4}}],[\"regular\",{\"1\":{\"1409\":1}}],[\"regularization\",{\"1\":{\"533\":1}}],[\"register\",{\"1\":{\"1265\":1,\"1887\":1}}],[\"regionprops\",{\"1\":{\"816\":1}}],[\"regression\",{\"0\":{\"491\":1,\"492\":1,\"493\":1,\"494\":1,\"495\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1,\"531\":1,\"577\":1,\"601\":1,\"606\":1},\"1\":{\"501\":2,\"503\":2,\"530\":1,\"531\":8,\"577\":1,\"593\":8,\"601\":1,\"606\":1,\"939\":1,\"941\":1}}],[\"reduction\",{\"0\":{\"541\":1},\"1\":{\"538\":1,\"614\":1}}],[\"red\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"1469\":1}}],[\"recursion\",{\"1\":{\"2160\":1}}],[\"recurrent\",{\"0\":{\"655\":1},\"1\":{\"441\":1,\"598\":1,\"653\":1}}],[\"receive\",{\"1\":{\"1938\":1,\"1939\":1}}],[\"receivepacket\",{\"1\":{\"1938\":4,\"1939\":6}}],[\"receivebuffer\",{\"1\":{\"1938\":3,\"1939\":3}}],[\"reconstructed\",{\"1\":{\"948\":10}}],[\"recovered\",{\"1\":{\"851\":1,\"852\":1}}],[\"recognition\",{\"1\":{\"584\":1}}],[\"rectangle\",{\"1\":{\"688\":1,\"827\":1,\"1533\":5,\"1557\":5,\"1577\":3}}],[\"rect\",{\"1\":{\"688\":2}}],[\"rectified\",{\"1\":{\"440\":1}}],[\"recall\",{\"1\":{\"582\":1}}],[\"renameto\",{\"1\":{\"1439\":1}}],[\"rename\",{\"1\":{\"256\":1}}],[\"resource\",{\"1\":{\"1930\":1,\"1941\":1,\"2040\":1}}],[\"resources\",{\"1\":{\"1672\":1}}],[\"reset\",{\"1\":{\"1885\":1}}],[\"research\",{\"1\":{\"797\":1},\"2\":{\"93\":1}}],[\"resize\",{\"1\":{\"821\":1,\"947\":3}}],[\"resized\",{\"1\":{\"815\":2,\"821\":3}}],[\"residualgraph\",{\"1\":{\"398\":9,\"399\":9}}],[\"resnet50\",{\"1\":{\"805\":1}}],[\"resnet\",{\"1\":{\"805\":1}}],[\"reshape\",{\"1\":{\"484\":1,\"608\":1,\"610\":2,\"659\":1,\"738\":1}}],[\"res\",{\"1\":{\"384\":4}}],[\"responses\",{\"1\":{\"480\":5}}],[\"response\",{\"1\":{\"237\":3,\"1935\":2,\"1938\":2,\"1939\":3,\"1942\":3}}],[\"resultset\",{\"1\":{\"1974\":1,\"1981\":2,\"1982\":8,\"1983\":3,\"1984\":4}}],[\"results\",{\"1\":{\"1185\":1}}],[\"result\",{\"1\":{\"193\":7,\"194\":6,\"195\":3,\"196\":6,\"198\":2,\"199\":2,\"226\":2,\"245\":1,\"246\":4,\"460\":2,\"722\":4,\"1172\":2,\"1175\":2,\"1177\":1,\"1178\":4,\"1182\":3,\"1183\":4,\"1196\":3,\"1316\":1,\"1318\":1,\"1336\":3,\"1344\":1,\"1445\":1,\"1446\":3,\"1645\":1,\"1853\":3,\"1898\":1,\"1952\":2,\"1995\":2,\"2000\":1}}],[\"restored\",{\"1\":{\"814\":2}}],[\"rest\",{\"1\":{\"153\":2}}],[\"reverse\",{\"1\":{\"147\":1,\"1373\":1,\"1376\":1}}],[\"ln\",{\"1\":{\"1219\":1}}],[\"lnπ​\",{\"1\":{\"884\":1}}],[\"lnπx​\",{\"1\":{\"884\":1}}],[\"ly\",{\"1\":{\"895\":3}}],[\"lx\",{\"1\":{\"895\":3}}],[\"lb\",{\"1\":{\"726\":2,\"732\":2,\"738\":2}}],[\"ld2\",{\"1\":{\"569\":1}}],[\"ld1\",{\"1\":{\"569\":1}}],[\"lda还可以用于降维\",{\"1\":{\"572\":1}}],[\"lda用于寻找能够最有效地分开不同类别的线性组合\",{\"1\":{\"568\":1}}],[\"lda通过寻找一个线性组合\",{\"1\":{\"520\":1}}],[\"lda\",{\"0\":{\"520\":1,\"524\":1,\"525\":1,\"568\":1},\"1\":{\"486\":4,\"524\":3,\"525\":4,\"526\":1,\"567\":2,\"569\":9,\"573\":1,\"586\":1,\"594\":1,\"614\":1}}],[\"l1\",{\"1\":{\"500\":1}}],[\"l1正则化可以使一些特征的系数变为零\",{\"1\":{\"499\":1}}],[\"lstm模型\",{\"1\":{\"662\":1}}],[\"lstm\",{\"0\":{\"656\":1},\"1\":{\"441\":1,\"598\":1,\"656\":1,\"658\":1,\"660\":2,\"661\":1}}],[\"lpsum\",{\"1\":{\"700\":2}}],[\"lpvariable\",{\"1\":{\"700\":2}}],[\"lpminimize\",{\"1\":{\"700\":2}}],[\"lpproblem\",{\"1\":{\"700\":2}}],[\"lp\",{\"0\":{\"706\":1},\"1\":{\"415\":1}}],[\"left\",{\"1\":{\"1152\":1}}],[\"less\",{\"1\":{\"1152\":2}}],[\"least\",{\"1\":{\"939\":1}}],[\"learn数据降维\",{\"0\":{\"627\":1}}],[\"learn和matplotlib库\",{\"1\":{\"621\":1}}],[\"learn等库\",{\"1\":{\"583\":1}}],[\"learn库\",{\"1\":{\"573\":1}}],[\"learn库来实现线性判别分析\",{\"1\":{\"567\":1}}],[\"learn库来对鸢尾花数据集进行分类\",{\"1\":{\"535\":1}}],[\"learn库实现多种聚类分析算法\",{\"1\":{\"548\":1}}],[\"learn库对生成的二维数据进行聚类\",{\"1\":{\"543\":1}}],[\"learn库进行线性判别分析的示例\",{\"1\":{\"524\":1}}],[\"learn\",{\"1\":{\"370\":1,\"591\":1,\"600\":1,\"608\":2,\"609\":2,\"619\":1}}],[\"learning\",{\"0\":{\"2285\":1},\"1\":{\"367\":2,\"368\":1,\"369\":1,\"447\":2,\"449\":2,\"589\":1,\"596\":1}}],[\"level=\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"level\",{\"1\":{\"811\":2,\"1918\":2,\"1922\":6,\"1926\":4}}],[\"legend\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"643\":1,\"661\":1,\"852\":1,\"856\":1,\"889\":1,\"903\":1,\"911\":1,\"927\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"948\":2,\"1210\":1}}],[\"leq\",{\"1\":{\"384\":1,\"396\":2,\"423\":1,\"699\":2}}],[\"len\",{\"1\":{\"147\":1,\"155\":1,\"162\":1,\"172\":1,\"409\":3,\"410\":2,\"434\":4,\"480\":2,\"641\":1,\"642\":1,\"643\":3,\"649\":1,\"659\":1,\"700\":1,\"948\":2}}],[\"lengthcol\",{\"1\":{\"1155\":1}}],[\"lengthrow\",{\"1\":{\"1155\":1}}],[\"length\",{\"1\":{\"147\":1,\"155\":1,\"162\":1,\"172\":1,\"699\":2,\"700\":2,\"1155\":2,\"1354\":2,\"1356\":1,\"1360\":2,\"1362\":2,\"1370\":5,\"1691\":1,\"1938\":2,\"1939\":2}}],[\"locking\",{\"0\":{\"2012\":1}}],[\"lock\",{\"1\":{\"1969\":6}}],[\"locks\",{\"1\":{\"1969\":2}}],[\"lockobject\",{\"1\":{\"1548\":1}}],[\"locator\",{\"1\":{\"1930\":1,\"2040\":1}}],[\"location\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"558\":1}}],[\"locale\",{\"1\":{\"2038\":1}}],[\"localhost\",{\"1\":{\"1891\":1,\"1933\":3,\"1935\":1,\"1938\":1,\"1979\":1}}],[\"localinnerclass是定义在display\",{\"1\":{\"1594\":1}}],[\"localinnerclass\",{\"1\":{\"1594\":3}}],[\"localdate\",{\"1\":{\"1404\":6,\"1994\":4,\"2041\":1,\"2047\":3}}],[\"localdatetime等日期时间对象\",{\"1\":{\"1407\":1}}],[\"localdatetimeexample\",{\"1\":{\"1404\":1}}],[\"localdatetime\",{\"1\":{\"1403\":1,\"1404\":4,\"1406\":7,\"1407\":5,\"1408\":1,\"1994\":2,\"2041\":1,\"2047\":3}}],[\"localtime\",{\"1\":{\"1403\":1,\"1404\":4,\"1407\":1,\"1408\":1,\"1994\":2,\"2041\":1}}],[\"local\",{\"0\":{\"1301\":1},\"1\":{\"1594\":4}}],[\"localfunctions\",{\"1\":{\"1185\":1}}],[\"lookfor\",{\"1\":{\"1125\":1}}],[\"lot\",{\"1\":{\"1110\":1}}],[\"lotka\",{\"1\":{\"850\":1}}],[\"lof\",{\"1\":{\"1110\":1}}],[\"love\",{\"1\":{\"589\":1}}],[\"logmanager\",{\"1\":{\"1922\":2}}],[\"logged\",{\"1\":{\"1927\":1}}],[\"loggerfactory\",{\"1\":{\"1926\":2}}],[\"loggers>\",{\"1\":{\"1921\":1}}],[\"logger\",{\"1\":{\"1916\":1,\"1918\":12,\"1921\":1,\"1922\":9,\"1925\":1,\"1926\":7,\"1927\":1}}],[\"logging\",{\"1\":{\"1912\":1,\"1914\":2,\"1915\":1,\"1918\":2,\"1920\":2,\"1922\":2,\"1923\":1,\"1928\":1}}],[\"logback<\",{\"1\":{\"1924\":1}}],[\"logback\",{\"0\":{\"1923\":1,\"1926\":1},\"1\":{\"1914\":1,\"1923\":2,\"1924\":1,\"1925\":3,\"1928\":1}}],[\"log4j2example\",{\"1\":{\"1922\":2}}],[\"log4j2\",{\"1\":{\"1921\":1}}],[\"log4j<\",{\"1\":{\"1920\":2}}],[\"log4j\",{\"0\":{\"1919\":1,\"1922\":1},\"1\":{\"1914\":6,\"1919\":2,\"1920\":1,\"1921\":1,\"1922\":3,\"1923\":2,\"1928\":1}}],[\"logpowerexample\",{\"1\":{\"1394\":1}}],[\"log10\",{\"1\":{\"1219\":3,\"1394\":3}}],[\"logisticregression\",{\"1\":{\"535\":2,\"577\":2,\"601\":2}}],[\"logistic\",{\"0\":{\"577\":1,\"601\":1},\"1\":{\"530\":1,\"577\":1,\"593\":1,\"601\":1}}],[\"logical\",{\"0\":{\"1314\":1},\"1\":{\"1127\":1,\"1152\":3}}],[\"logic\",{\"1\":{\"245\":1}}],[\"log\",{\"1\":{\"406\":1,\"856\":1,\"1110\":1,\"1219\":2,\"1394\":3,\"1789\":1,\"1804\":1,\"1922\":6,\"1926\":4,\"2162\":2,\"2163\":2}}],[\"loader\",{\"1\":{\"1265\":1}}],[\"loadmodel\",{\"1\":{\"805\":1}}],[\"load\",{\"1\":{\"258\":1,\"459\":1,\"497\":2,\"524\":2,\"535\":2,\"569\":2,\"571\":2,\"577\":2,\"578\":2,\"579\":2,\"580\":2,\"581\":2,\"588\":1,\"590\":1,\"601\":2,\"602\":2,\"603\":2,\"604\":2,\"605\":2,\"606\":2,\"607\":2,\"608\":4,\"609\":4,\"610\":1,\"1126\":1,\"1192\":2}}],[\"loss=\",{\"1\":{\"608\":1,\"610\":1,\"660\":1}}],[\"loss\",{\"1\":{\"440\":1,\"608\":1,\"610\":1}}],[\"los\",{\"1\":{\"168\":1}}],[\"longbuffer\",{\"1\":{\"1884\":1}}],[\"long强制转换为int\",{\"1\":{\"1295\":1}}],[\"long自动转换为float\",{\"1\":{\"1294\":1}}],[\"longvalue\",{\"1\":{\"1382\":1}}],[\"longval\",{\"1\":{\"1294\":2,\"1295\":2}}],[\"long\",{\"0\":{\"656\":1},\"1\":{\"137\":2,\"598\":1,\"1286\":1,\"1294\":2,\"1295\":2,\"1380\":1,\"1383\":1,\"1401\":3,\"1696\":3,\"1862\":1,\"1863\":1,\"1864\":1,\"1965\":1}}],[\"l\",{\"1\":{\"159\":1,\"188\":2,\"189\":2,\"190\":1,\"409\":5,\"811\":2,\"884\":1,\"889\":3,\"890\":1,\"903\":3,\"904\":1,\"909\":1,\"911\":3,\"912\":1,\"927\":3,\"928\":1}}],[\"launch\",{\"1\":{\"2033\":1}}],[\"layout\",{\"1\":{\"2033\":1}}],[\"layers\",{\"1\":{\"608\":1,\"610\":9,\"658\":1}}],[\"layer\",{\"1\":{\"439\":3,\"447\":3,\"449\":3,\"608\":1}}],[\"lazy\",{\"0\":{\"2010\":1},\"1\":{\"2048\":1}}],[\"lang\",{\"1\":{\"1630\":1,\"1651\":2,\"1655\":2,\"1664\":1,\"1670\":1,\"1678\":1,\"1695\":1,\"1826\":1,\"1831\":3,\"1844\":4,\"1846\":1,\"1895\":1,\"1896\":5,\"1958\":1,\"2036\":1,\"2037\":1}}],[\"lang包中\",{\"1\":{\"1380\":1,\"1388\":1}}],[\"laboratory\",{\"1\":{\"1116\":1,\"1128\":1}}],[\"label2rgb\",{\"1\":{\"811\":1}}],[\"label=f\",{\"1\":{\"889\":1,\"903\":1,\"911\":1}}],[\"label=\",{\"1\":{\"643\":2,\"661\":2,\"852\":3,\"856\":3,\"927\":1,\"935\":2,\"936\":2,\"937\":2,\"941\":2,\"942\":2,\"943\":2,\"944\":2,\"948\":4}}],[\"labels\",{\"1\":{\"589\":2}}],[\"label\",{\"1\":{\"528\":1,\"609\":1}}],[\"latex基础\",{\"0\":{\"1105\":1}}],[\"latex环境配置\",{\"0\":{\"1099\":1}}],[\"latex\",{\"0\":{\"1098\":1},\"1\":{\"1100\":1,\"1104\":1,\"1106\":1,\"1109\":4},\"2\":{\"1113\":1}}],[\"latent\",{\"1\":{\"599\":1}}],[\"lagrange\",{\"1\":{\"937\":3}}],[\"laplace\",{\"1\":{\"895\":3,\"924\":5}}],[\"law\",{\"1\":{\"856\":2}}],[\"largedouble\",{\"1\":{\"1299\":2}}],[\"largeint\",{\"1\":{\"1299\":2}}],[\"large\",{\"1\":{\"699\":2}}],[\"lasso\",{\"0\":{\"499\":1},\"1\":{\"499\":14,\"531\":1,\"593\":1}}],[\"lasso回归是另一种线性回归变体\",{\"1\":{\"499\":1}}],[\"lasso回归\",{\"0\":{\"499\":1},\"1\":{\"504\":1,\"593\":1}}],[\"last\",{\"1\":{\"142\":1,\"146\":1,\"151\":1,\"248\":10,\"1770\":1}}],[\"lambda表达式和stream\",{\"1\":{\"1998\":1}}],[\"lambda表达式是java\",{\"1\":{\"1989\":1}}],[\"lambda表达式让java编程更加现代化\",{\"1\":{\"1694\":1}}],[\"lambda表达式在处理集合数据时非常强大\",{\"1\":{\"1694\":1}}],[\"lambda表达式在java中主要用于简化对接口的实现\",{\"1\":{\"1684\":1}}],[\"lambda表达式提供了一种简洁的语法来表示匿名函数\",{\"1\":{\"1694\":1}}],[\"lambda表达式提供了一种简洁的方式来表示匿名函数\",{\"1\":{\"1684\":1}}],[\"lambda表达式可以使用其外部范围内的变量\",{\"1\":{\"1693\":1}}],[\"lambda表达式实现了comparator接口中的compare方法\",{\"1\":{\"1689\":1}}],[\"lambda表达式实现\",{\"1\":{\"1686\":1}}],[\"lambda表达式通常与函数式接口一起使用\",{\"1\":{\"1686\":1}}],[\"lambda表达式与函数式接口\",{\"0\":{\"1686\":1}}],[\"lambda表达式的基本语法如下\",{\"1\":{\"1685\":1}}],[\"lambda表达式的语法形式如下\",{\"1\":{\"1989\":1}}],[\"lambda表达式的语法\",{\"0\":{\"1685\":1}}],[\"lambda函数\",{\"1\":{\"212\":2}}],[\"lambda\",{\"0\":{\"1684\":1,\"1989\":1},\"1\":{\"133\":1,\"212\":2,\"214\":1,\"460\":1,\"1688\":1,\"1689\":1,\"1690\":1,\"1990\":1}}],[\"like\",{\"1\":{\"1949\":1}}],[\"lifo\",{\"1\":{\"1730\":1,\"1737\":1,\"1770\":1,\"1772\":1}}],[\"lifelines\",{\"1\":{\"489\":1}}],[\"life\",{\"2\":{\"346\":1,\"364\":1,\"376\":1,\"974\":1,\"976\":1,\"978\":1}}],[\"live或mactex\",{\"1\":{\"1103\":1}}],[\"live中\",{\"1\":{\"1102\":1}}],[\"live\",{\"1\":{\"1100\":2,\"1102\":1}}],[\"library类用于管理书籍的集合\",{\"1\":{\"1662\":1}}],[\"librarymanagementsystem\",{\"1\":{\"1661\":1}}],[\"library\",{\"1\":{\"794\":1,\"801\":1,\"1654\":11,\"1655\":2,\"1657\":1,\"1658\":1,\"1661\":13,\"1663\":3}}],[\"license\",{\"1\":{\"336\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"1768\":1}}],[\"linkedblockingqueue\",{\"1\":{\"1767\":1,\"1768\":1,\"1769\":1}}],[\"linkedset\",{\"1\":{\"1738\":3}}],[\"linkedhashmapexample\",{\"1\":{\"1803\":1}}],[\"linkedhashmap<>\",{\"1\":{\"1740\":1,\"1803\":1}}],[\"linkedhashmap<k\",{\"1\":{\"1740\":1}}],[\"linkedhashmap\",{\"1\":{\"1728\":2,\"1735\":1,\"1740\":3,\"1797\":1,\"1799\":1,\"1802\":1,\"1803\":2,\"1810\":1,\"2038\":1}}],[\"linkedhashsetexample\",{\"1\":{\"1788\":1}}],[\"linkedhashset<>\",{\"1\":{\"1738\":1,\"1788\":1}}],[\"linkedhashset<e>\",{\"1\":{\"1738\":1}}],[\"linkedhashset\",{\"1\":{\"1726\":2,\"1735\":1,\"1782\":1,\"1784\":1,\"1787\":1,\"1788\":2,\"1794\":1,\"2038\":1}}],[\"linkedlistqueueexample\",{\"1\":{\"1762\":1}}],[\"linkedlistexample\",{\"1\":{\"1751\":1}}],[\"linkedlist<e>\",{\"1\":{\"1737\":1,\"1739\":1}}],[\"linkedlist<>\",{\"1\":{\"1673\":1,\"1725\":1,\"1727\":1,\"1737\":1,\"1739\":1,\"1751\":1,\"1762\":1}}],[\"linkedlist\",{\"1\":{\"1725\":5,\"1727\":2,\"1735\":2,\"1737\":3,\"1743\":1,\"1749\":2,\"1750\":2,\"1751\":1,\"1752\":1,\"1755\":1,\"1760\":1,\"1761\":1,\"1762\":1,\"1765\":1,\"1769\":1,\"2038\":2}}],[\"linkage\",{\"1\":{\"550\":1,\"556\":1,\"565\":2}}],[\"linregress\",{\"1\":{\"941\":1}}],[\"lingo\",{\"1\":{\"843\":1}}],[\"lindo\",{\"1\":{\"718\":1}}],[\"linalg\",{\"1\":{\"624\":1,\"641\":1,\"895\":1}}],[\"linspacearray\",{\"1\":{\"1156\":1}}],[\"linspace\",{\"1\":{\"459\":1,\"460\":1,\"680\":2,\"852\":1,\"856\":1,\"889\":1,\"895\":2,\"903\":1,\"911\":1,\"927\":1,\"935\":1,\"936\":1,\"937\":1,\"942\":1,\"943\":1,\"944\":2,\"948\":2,\"1156\":1}}],[\"linprog假定所有变量均为非负\",{\"1\":{\"722\":1}}],[\"linprog\",{\"1\":{\"384\":2,\"722\":2}}],[\"linewidth\",{\"1\":{\"555\":1,\"557\":1,\"558\":1}}],[\"lineardiscriminantanalysis\",{\"1\":{\"486\":2,\"524\":2,\"569\":2}}],[\"linearregression\",{\"1\":{\"484\":2,\"497\":2,\"501\":2,\"606\":2}}],[\"linear\",{\"0\":{\"491\":1,\"492\":1,\"495\":1,\"497\":1,\"520\":1,\"606\":1,\"706\":1},\"1\":{\"415\":1,\"440\":1,\"484\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"531\":1,\"535\":1,\"567\":1,\"577\":1,\"578\":1,\"593\":1,\"594\":1,\"601\":1,\"602\":1,\"606\":2,\"714\":1,\"933\":1,\"935\":1,\"939\":2,\"941\":1,\"943\":1,\"947\":1,\"948\":9}}],[\"linestyle=\",{\"1\":{\"856\":2}}],[\"lines\",{\"1\":{\"252\":2,\"253\":2,\"259\":2}}],[\"line\",{\"1\":{\"240\":1,\"252\":2,\"253\":3,\"259\":2,\"1434\":3,\"1873\":3}}],[\"linux服务器环境\",{\"2\":{\"2095\":1}}],[\"linux环境\",{\"0\":{\"282\":1,\"2093\":1}}],[\"linux相关工具\",{\"0\":{\"117\":1}}],[\"linux学习手册\",{\"0\":{\"114\":1}}],[\"linux\",{\"0\":{\"120\":1,\"1102\":1},\"1\":{\"1460\":1,\"2190\":1},\"2\":{\"112\":1,\"113\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"124\":1}}],[\"linux命令\",{\"0\":{\"111\":1}}],[\"limit\",{\"1\":{\"224\":4,\"1673\":2,\"1818\":5,\"1819\":1,\"1820\":1,\"1885\":2,\"1891\":1}}],[\"listener\",{\"0\":{\"2087\":1},\"2\":{\"2089\":1}}],[\"listiterator<string>\",{\"1\":{\"1823\":1}}],[\"listiteratorexample\",{\"1\":{\"1823\":1}}],[\"listiterator\",{\"1\":{\"1821\":1,\"1823\":3,\"1824\":1}}],[\"list<\",{\"1\":{\"1839\":1}}],[\"list<t>\",{\"1\":{\"1837\":1}}],[\"list<e>\",{\"1\":{\"1735\":1}}],[\"list<string>>\",{\"1\":{\"1732\":1}}],[\"list<string>\",{\"1\":{\"1689\":1,\"1692\":1,\"1725\":2,\"1737\":2,\"1748\":1,\"1751\":1,\"1754\":1,\"1814\":1,\"1823\":1,\"1989\":1,\"1991\":1}}],[\"list<integer>\",{\"1\":{\"1673\":1,\"1992\":2}}],[\"list<book>\",{\"1\":{\"1661\":1}}],[\"list<animal>\",{\"1\":{\"1542\":1}}],[\"listfiles\",{\"1\":{\"1439\":1}}],[\"listdir\",{\"1\":{\"232\":1}}],[\"list\",{\"0\":{\"140\":1,\"1743\":1},\"1\":{\"136\":1,\"140\":1,\"141\":1,\"144\":2,\"159\":1,\"165\":3,\"188\":7,\"189\":2,\"190\":2,\"191\":2,\"212\":1,\"214\":1,\"230\":1,\"390\":2,\"410\":1,\"641\":1,\"642\":2,\"954\":1,\"1725\":2,\"1735\":1,\"1737\":4,\"1741\":3,\"1743\":3,\"1744\":4,\"1745\":1,\"1746\":1,\"1748\":17,\"1749\":1,\"1751\":17,\"1753\":1,\"1754\":8,\"1755\":3,\"1761\":1,\"1812\":1,\"1814\":8,\"1815\":1,\"1821\":1,\"1823\":6,\"1824\":1,\"1839\":2,\"1843\":2,\"2038\":1}}],[\"lightroom\",{\"1\":{\"795\":1}}],[\"lightgray\",{\"1\":{\"688\":1}}],[\"lightgbm\",{\"1\":{\"597\":1}}],[\"light\",{\"0\":{\"57\":1}}],[\"kind=\",{\"1\":{\"948\":1}}],[\"kitty\",{\"1\":{\"242\":2,\"243\":1}}],[\"kpp\",{\"0\":{\"927\":1},\"1\":{\"927\":3}}],[\"kron\",{\"1\":{\"738\":1}}],[\"kruskalmst\",{\"1\":{\"394\":1,\"964\":2}}],[\"kruskal算法\",{\"0\":{\"964\":1},\"1\":{\"392\":1,\"963\":1,\"964\":1}}],[\"known\",{\"1\":{\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1}}],[\"kneighborsclassifier\",{\"1\":{\"581\":2,\"605\":2}}],[\"knn\",{\"0\":{\"581\":1,\"605\":1},\"1\":{\"586\":1,\"593\":1}}],[\"kx\",{\"1\":{\"555\":1,\"557\":1,\"558\":1}}],[\"kernel\",{\"1\":{\"825\":3}}],[\"kernel=\",{\"1\":{\"502\":1,\"578\":1,\"602\":1}}],[\"keras\",{\"1\":{\"608\":4,\"610\":4,\"658\":2,\"797\":1}}],[\"keygenerator\",{\"1\":{\"2045\":1}}],[\"keylistener\",{\"1\":{\"2030\":1}}],[\"key2\",{\"1\":{\"1740\":1}}],[\"key1\",{\"1\":{\"1740\":1}}],[\"key\",{\"1\":{\"1728\":1,\"1741\":1,\"1796\":2,\"1797\":1,\"1798\":4,\"1801\":2,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1836\":1,\"1887\":3}}],[\"keyset\",{\"1\":{\"1798\":1}}],[\"keys\",{\"1\":{\"172\":3}}],[\"keyerror\",{\"1\":{\"160\":1}}],[\"keyword\",{\"1\":{\"133\":3}}],[\"km\",{\"1\":{\"1502\":1}}],[\"kmf\",{\"1\":{\"489\":3}}],[\"kmeans\",{\"1\":{\"485\":4,\"517\":8,\"543\":8,\"549\":8,\"555\":1}}],[\"katsuhiko\",{\"1\":{\"1040\":1}}],[\"kaplan\",{\"1\":{\"489\":1}}],[\"kaplanmeierfitter\",{\"1\":{\"489\":2}}],[\"karp\",{\"1\":{\"410\":1}}],[\"karp算法是ford\",{\"1\":{\"399\":1}}],[\"karp算法\",{\"0\":{\"399\":1},\"1\":{\"397\":1,\"399\":1}}],[\"k+1\",{\"1\":{\"424\":1}}],[\"k\",{\"0\":{\"511\":1,\"517\":1,\"549\":1,\"555\":1,\"581\":2,\"605\":2},\"1\":{\"391\":1,\"409\":5,\"424\":1,\"485\":1,\"511\":3,\"517\":1,\"530\":3,\"540\":3,\"543\":1,\"549\":2,\"553\":1,\"555\":4,\"556\":2,\"558\":2,\"559\":1,\"563\":1,\"569\":1,\"581\":2,\"586\":2,\"593\":2,\"594\":2,\"605\":2,\"634\":2,\"854\":1,\"856\":4,\"857\":1,\"869\":1,\"872\":1,\"925\":3,\"927\":4,\"928\":1,\"960\":5,\"964\":4,\"1798\":1,\"1836\":1}}],[\"kwlist\",{\"1\":{\"133\":1}}],[\"的友好性和可用性\",{\"1\":{\"2215\":1}}],[\"的基础知识\",{\"1\":{\"2213\":1}}],[\"的基本用法\",{\"1\":{\"1915\":1}}],[\"的基本方法\",{\"0\":{\"1822\":1}}],[\"的基本操作步骤\",{\"0\":{\"1976\":1}}],[\"的基本操作\",{\"0\":{\"1885\":1},\"1\":{\"1785\":1,\"1800\":1}}],[\"的基本概念对学习\",{\"1\":{\"1467\":1}}],[\"的基本示例\",{\"1\":{\"915\":1}}],[\"的基本步骤\",{\"0\":{\"616\":1}}],[\"的静态方法\",{\"1\":{\"2038\":2}}],[\"的现代\",{\"0\":{\"2032\":1},\"1\":{\"2032\":1}}],[\"的轻量级\",{\"1\":{\"2019\":1}}],[\"的组件通常与操作系统的原生窗口小部件一一对应\",{\"1\":{\"2019\":1}}],[\"的早期\",{\"1\":{\"2019\":1}}],[\"的扩展和增强\",{\"1\":{\"2018\":1}}],[\"的情况下非常有用\",{\"1\":{\"2006\":1}}],[\"的子接口\",{\"1\":{\"1984\":1}}],[\"的子类\",{\"1\":{\"139\":1,\"1384\":2,\"1726\":1,\"1728\":1,\"1737\":1,\"1738\":1,\"1740\":1,\"1787\":1,\"1802\":1}}],[\"的架构主要包括两层\",{\"1\":{\"1975\":1}}],[\"的多线程编程为开发者提供了丰富的工具和\",{\"1\":{\"1972\":1}}],[\"的相关信息\",{\"1\":{\"1941\":1}}],[\"的网络编程知识\",{\"1\":{\"1944\":1}}],[\"的网络编程\",{\"0\":{\"1934\":1,\"1937\":1}}],[\"的通信链接\",{\"1\":{\"1940\":1}}],[\"的通信\",{\"1\":{\"1931\":1}}],[\"的通解为\",{\"1\":{\"866\":1}}],[\"的客户端\",{\"1\":{\"1931\":1}}],[\"的原作者开发的\",{\"1\":{\"1923\":1}}],[\"的原作者设计\",{\"1\":{\"1914\":1}}],[\"的重大升级\",{\"1\":{\"1919\":1}}],[\"的内置日志框架\",{\"1\":{\"1915\":1}}],[\"的继任者\",{\"1\":{\"1914\":1,\"1923\":1}}],[\"的升级版本\",{\"1\":{\"1914\":1}}],[\"的异常处理机制是一种处理程序运行期间可能出现的错误或异常情况的方式\",{\"1\":{\"1894\":1}}],[\"的非阻塞模式\",{\"0\":{\"1888\":1}}],[\"的使用步骤\",{\"0\":{\"1887\":1}}],[\"的核心类\",{\"0\":{\"2021\":1}}],[\"的核心属性和方法包括\",{\"1\":{\"1885\":1}}],[\"的核心组件包括\",{\"1\":{\"1881\":1,\"1974\":1}}],[\"的核心概念\",{\"1\":{\"1716\":1}}],[\"的主要组件\",{\"0\":{\"1881\":1}}],[\"的字段不会被序列化\",{\"1\":{\"1864\":1}}],[\"的概念并不像\",{\"1\":{\"1811\":1}}],[\"的概率\",{\"1\":{\"646\":1}}],[\"的常见操作和应用\",{\"0\":{\"1793\":1}}],[\"的常用方法\",{\"0\":{\"1759\":1}}],[\"的性能相比\",{\"1\":{\"1806\":1}}],[\"的性能非常高效\",{\"1\":{\"1791\":1}}],[\"的性质和应用\",{\"1\":{\"388\":1}}],[\"的时间复杂度为\",{\"1\":{\"1785\":1,\"1789\":1,\"1800\":1,\"1804\":1}}],[\"的应用场景\",{\"0\":{\"1775\":1}}],[\"的实现\",{\"0\":{\"1761\":1}}],[\"的实现类\",{\"0\":{\"1760\":1,\"1784\":1,\"1799\":1},\"1\":{\"1755\":1,\"1760\":1}}],[\"的实例\",{\"1\":{\"1682\":1}}],[\"的实例保存到文件\",{\"1\":{\"1680\":1}}],[\"的对比\",{\"0\":{\"1752\":1,\"1778\":1,\"1892\":1}}],[\"的对象\",{\"1\":{\"1530\":1}}],[\"的操作\",{\"1\":{\"1744\":1}}],[\"的集合框架\",{\"1\":{\"1695\":1,\"1697\":1}}],[\"的包装类\",{\"1\":{\"1695\":1}}],[\"的规范\",{\"1\":{\"1683\":1}}],[\"的用途\",{\"0\":{\"1681\":1}}],[\"的属性通常是私有的\",{\"1\":{\"1680\":1}}],[\"的详细介绍\",{\"1\":{\"1679\":1}}],[\"的所有数据都是用缓冲区处理的\",{\"1\":{\"1884\":1}}],[\"的所有方法\",{\"1\":{\"1664\":1}}],[\"的所有类都继承了\",{\"1\":{\"1664\":1}}],[\"的所有组合\",{\"1\":{\"1169\":1}}],[\"的增强型\",{\"1\":{\"1815\":1}}],[\"的增量操作是线程安全的\",{\"1\":{\"1548\":1}}],[\"的增广路径\",{\"1\":{\"398\":1}}],[\"的特点\",{\"0\":{\"1747\":1,\"1750\":1,\"1758\":1,\"1772\":1,\"1782\":1,\"1797\":1}}],[\"的特点和应用\",{\"0\":{\"617\":1}}],[\"的特征\",{\"0\":{\"1680\":1}}],[\"的特性\",{\"1\":{\"1507\":1}}],[\"的面向对象编程\",{\"1\":{\"1496\":1}}],[\"的关键组件\",{\"1\":{\"1886\":1}}],[\"的关键字\",{\"1\":{\"1305\":1}}],[\"的关键所在\",{\"1\":{\"1263\":1}}],[\"的构造子类将一个实现了\",{\"1\":{\"1259\":1}}],[\"的运行速度随着\",{\"1\":{\"1259\":1}}],[\"的运行环境是用\",{\"1\":{\"1259\":1}}],[\"的确是高性能的\",{\"1\":{\"1259\":1}}],[\"的文件\",{\"1\":{\"1259\":2}}],[\"的文档或使用帮助命令\",{\"1\":{\"1212\":1}}],[\"的安全检查机制使得\",{\"1\":{\"1259\":1}}],[\"的明智选择\",{\"1\":{\"1259\":1}}],[\"的强类型机制\",{\"1\":{\"1259\":1}}],[\"的各种版本已经更名\",{\"1\":{\"1258\":1}}],[\"的行列式\",{\"1\":{\"1222\":1}}],[\"的测试文件\",{\"1\":{\"1185\":1}}],[\"的类文件\",{\"1\":{\"1183\":1}}],[\"的乘积\",{\"1\":{\"1182\":1}}],[\"的函数文件\",{\"1\":{\"1182\":1}}],[\"的脚本文件\",{\"1\":{\"1181\":1}}],[\"的工作空间中直接运行\",{\"1\":{\"1181\":1}}],[\"的和\",{\"1\":{\"1179\":1,\"1181\":1}}],[\"的奇偶性\",{\"1\":{\"1170\":1}}],[\"的迭代次数\",{\"1\":{\"1165\":1}}],[\"的值将被替换\",{\"1\":{\"1801\":1}}],[\"的值为\",{\"1\":{\"1194\":1}}],[\"的值超过\",{\"1\":{\"1166\":1}}],[\"的值\",{\"1\":{\"1162\":1}}],[\"的值即为背包能够达到的最大价值\",{\"1\":{\"408\":1}}],[\"的随机矩阵\",{\"1\":{\"1131\":1}}],[\"的单位矩阵\",{\"1\":{\"1131\":1}}],[\"的全一矩阵\",{\"1\":{\"1131\":1}}],[\"的全零矩阵\",{\"1\":{\"1131\":1}}],[\"的缩写\",{\"1\":{\"1128\":1}}],[\"的简称\",{\"1\":{\"1116\":1}}],[\"的音频文件\",{\"1\":{\"948\":1}}],[\"的图像文件\",{\"1\":{\"947\":1}}],[\"的图像处理库\",{\"1\":{\"802\":1}}],[\"的设计目标是提供一个全功能的计算机代数系统\",{\"1\":{\"913\":1}}],[\"的二阶偏导数\",{\"1\":{\"887\":1,\"898\":1,\"906\":2}}],[\"的偏导数\",{\"1\":{\"887\":1,\"898\":1}}],[\"的问题\",{\"1\":{\"882\":2}}],[\"的温度\",{\"1\":{\"854\":1}}],[\"的风险\",{\"1\":{\"836\":1}}],[\"的预期收益\",{\"1\":{\"836\":1}}],[\"的开源对象检测平台\",{\"1\":{\"797\":1}}],[\"的一部分\",{\"1\":{\"1780\":1,\"2020\":1}}],[\"的一种强大特性\",{\"1\":{\"1652\":1}}],[\"的一个重要特性是支持非阻塞\",{\"1\":{\"1888\":1}}],[\"的一个基本原则\",{\"1\":{\"1563\":1}}],[\"的一个核心概念\",{\"1\":{\"1525\":1,\"1572\":1}}],[\"的一个强大的数值计算库\",{\"1\":{\"803\":1}}],[\"的一个分支和改进版\",{\"1\":{\"801\":1}}],[\"的一个分支\",{\"1\":{\"794\":1}}],[\"的一阶微分方程\",{\"1\":{\"634\":1}}],[\"的访问顺序\",{\"1\":{\"737\":1}}],[\"的模型较简单\",{\"1\":{\"525\":1}}],[\"的比较\",{\"0\":{\"525\":1}}],[\"的选择敏感\",{\"1\":{\"513\":1}}],[\"的高级绘图库\",{\"1\":{\"459\":1}}],[\"的邻域中随机生成一个新解\",{\"1\":{\"423\":1}}],[\"的步骤\",{\"1\":{\"409\":1}}],[\"的顶点进行排序\",{\"1\":{\"392\":1}}],[\"的边\",{\"1\":{\"390\":1}}],[\"的边的数量\",{\"1\":{\"389\":2}}],[\"的矩阵\",{\"1\":{\"390\":1}}],[\"的入度是指向\",{\"1\":{\"389\":1}}],[\"的度是连接到\",{\"1\":{\"389\":1}}],[\"的方法中\",{\"1\":{\"368\":1}}],[\"的数据结构与算法\",{\"1\":{\"2157\":1}}],[\"的数据结构\",{\"1\":{\"1727\":1,\"1730\":1}}],[\"的数据集里\",{\"1\":{\"614\":1}}],[\"的数学成绩\",{\"1\":{\"177\":1}}],[\"的数量决定标题的层级\",{\"1\":{\"17\":1}}],[\"的平方数\",{\"1\":{\"163\":1}}],[\"的\",{\"1\":{\"137\":1,\"1259\":1,\"1709\":1,\"1826\":1,\"1867\":1,\"1978\":1}}],[\"的标准库提供了一个\",{\"1\":{\"133\":1}}],[\"注入攻击并提高了性能\",{\"1\":{\"1984\":1}}],[\"注册按钮点击事件监听器\",{\"1\":{\"2031\":1}}],[\"注册到\",{\"1\":{\"1887\":2}}],[\"注册通道到\",{\"1\":{\"1887\":1}}],[\"注意事项\",{\"0\":{\"1840\":1},\"1\":{\"1672\":1}}],[\"注意\",{\"1\":{\"1547\":1}}],[\"注意逗号\",{\"1\":{\"150\":1}}],[\"注解的应用场景\",{\"0\":{\"1847\":1}}],[\"注解的元注解\",{\"0\":{\"1845\":1}}],[\"注解可以在运行时通过反射进行处理\",{\"1\":{\"1846\":1}}],[\"注解可以使用元注解来控制它们的行为\",{\"1\":{\"1845\":1}}],[\"注解本质上是一个特殊的接口\",{\"1\":{\"1842\":1}}],[\"注解类型\",{\"1\":{\"1842\":1}}],[\"注解不会改变编译后的代码行为\",{\"1\":{\"1842\":1}}],[\"注解不会直接影响程序的逻辑\",{\"1\":{\"1841\":1}}],[\"注解是附加在代码上的数据\",{\"1\":{\"1842\":1}}],[\"注解来确保正确重写父类方法\",{\"1\":{\"1515\":1}}],[\"注解来标识重写的方法\",{\"1\":{\"1513\":1}}],[\"注解\",{\"0\":{\"1841\":1},\"1\":{\"1457\":1,\"1519\":2,\"1841\":1}}],[\"注重实践能力和职业素质培养\",{\"1\":{\"1028\":1}}],[\"注释主要有三种类型\",{\"1\":{\"1280\":1}}],[\"注释符\",{\"1\":{\"1109\":1}}],[\"注释\",{\"0\":{\"132\":1,\"1280\":1},\"1\":{\"1108\":1}}],[\"注脚\",{\"0\":{\"31\":1}}],[\"awt\",{\"1\":{\"2018\":2,\"2019\":3,\"2022\":2,\"2027\":1,\"2028\":1}}],[\"aop\",{\"1\":{\"1649\":1,\"1832\":1}}],[\"atomicreference\",{\"1\":{\"2044\":1}}],[\"atomiclong\",{\"1\":{\"2044\":1}}],[\"atomicinteger\",{\"1\":{\"2044\":1}}],[\"at\",{\"1\":{\"1610\":1,\"1748\":3,\"1751\":3}}],[\"atan\",{\"1\":{\"1218\":2,\"1393\":1}}],[\"ajax\",{\"0\":{\"2260\":1},\"1\":{\"1460\":1},\"2\":{\"2262\":1}}],[\"a|b匹配字符a或b\",{\"1\":{\"1412\":1}}],[\"abc\",{\"1\":{\"1412\":1}}],[\"absolute\",{\"1\":{\"1392\":1}}],[\"abs\",{\"1\":{\"447\":1,\"449\":1,\"856\":1,\"1392\":2,\"2037\":1}}],[\"abstractmethod\",{\"1\":{\"1485\":1}}],[\"abstractclass\",{\"1\":{\"1485\":1}}],[\"abstraction\",{\"0\":{\"1473\":1},\"1\":{\"1709\":1}}],[\"abstract\",{\"1\":{\"243\":1,\"1277\":1,\"1308\":3,\"1347\":1,\"1473\":2,\"1485\":2,\"1495\":2,\"1501\":2,\"1553\":1,\"1554\":2,\"1556\":1,\"1574\":1,\"1709\":6,\"2018\":1}}],[\"a++\",{\"1\":{\"1311\":2}}],[\"a4paper\",{\"1\":{\"1106\":1}}],[\"a1​\",{\"1\":{\"939\":1}}],[\"a1​x1​+a2​x2​≤b\",{\"1\":{\"384\":1}}],[\"a0​\",{\"1\":{\"939\":1}}],[\"a0​=0\",{\"1\":{\"866\":2}}],[\"a=1\",{\"1\":{\"866\":1}}],[\"a=sample\",{\"1\":{\"460\":1}}],[\"ai\",{\"1\":{\"797\":1}}],[\"aij​\",{\"1\":{\"715\":1}}],[\"ahp\",{\"1\":{\"754\":1,\"758\":1,\"760\":1,\"763\":1}}],[\"aeq\",{\"1\":{\"738\":5,\"740\":1}}],[\"a和b\",{\"1\":{\"720\":1}}],[\"azim=45\",{\"1\":{\"680\":1}}],[\"axios\",{\"0\":{\"2263\":1},\"2\":{\"2265\":1}}],[\"axis=1\",{\"1\":{\"480\":1}}],[\"axis=0\",{\"1\":{\"480\":1,\"624\":1}}],[\"axis\",{\"1\":{\"240\":2,\"680\":3}}],[\"axvline\",{\"1\":{\"856\":2}}],[\"ax\",{\"1\":{\"623\":3,\"624\":5,\"634\":1,\"680\":6,\"688\":7,\"1232\":2}}],[\"axes3d\",{\"1\":{\"622\":1,\"680\":1}}],[\"a3c\",{\"1\":{\"596\":1}}],[\"a2c\",{\"1\":{\"596\":1}}],[\"agriculture\",{\"1\":{\"1040\":2}}],[\"agricultural\",{\"1\":{\"1040\":3}}],[\"ago序列\",{\"1\":{\"641\":1,\"642\":1}}],[\"ago\",{\"1\":{\"634\":2}}],[\"agglomerativeclustering\",{\"1\":{\"550\":2}}],[\"agglomerative\",{\"1\":{\"512\":1}}],[\"age=\",{\"1\":{\"1667\":1,\"1675\":1,\"1682\":1,\"1876\":1}}],[\"age=30\",{\"1\":{\"211\":1,\"1667\":1}}],[\"age=25\",{\"1\":{\"168\":1}}],[\"age\",{\"1\":{\"157\":4,\"168\":1,\"169\":2,\"170\":3,\"171\":3,\"172\":1,\"191\":2,\"211\":2,\"239\":1,\"242\":8,\"257\":1,\"258\":1,\"261\":2,\"262\":3,\"1276\":1,\"1301\":3,\"1302\":2,\"1303\":4,\"1422\":3,\"1425\":3,\"1427\":4,\"1428\":5,\"1447\":3,\"1506\":3,\"1509\":3,\"1568\":13,\"1667\":2,\"1668\":3,\"1669\":2,\"1671\":1,\"1675\":1,\"1676\":4,\"1680\":11,\"1682\":7,\"1709\":5,\"1713\":4,\"1831\":1,\"1862\":1,\"1863\":6,\"1864\":1,\"1865\":6,\"1876\":5,\"1906\":2,\"1981\":1,\"1982\":4,\"1984\":1}}],[\"afsa\",{\"1\":{\"420\":1}}],[\"afterall\",{\"1\":{\"1855\":1}}],[\"aftereach\",{\"1\":{\"1855\":2}}],[\"after\",{\"1\":{\"226\":2,\"447\":1,\"448\":1,\"449\":2,\"1402\":1,\"1651\":1,\"1748\":3,\"1751\":3,\"1754\":1,\"1762\":1,\"1768\":1,\"1774\":2,\"1777\":2,\"1786\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1814\":1}}],[\"acquire\",{\"1\":{\"1100\":1}}],[\"actionperformed\",{\"1\":{\"2022\":1,\"2031\":1}}],[\"actionlistener\",{\"1\":{\"2022\":2,\"2023\":1,\"2030\":1,\"2031\":1}}],[\"actionevent\",{\"1\":{\"2022\":2,\"2031\":1}}],[\"activation=\",{\"1\":{\"608\":3,\"610\":5}}],[\"activation\",{\"1\":{\"440\":1}}],[\"actual\",{\"1\":{\"661\":3,\"856\":3,\"1185\":2,\"1853\":1,\"1856\":2}}],[\"actor\",{\"1\":{\"596\":1}}],[\"accounts\",{\"1\":{\"1985\":2}}],[\"accept\",{\"1\":{\"1890\":1,\"1936\":2}}],[\"acceptance\",{\"1\":{\"428\":2}}],[\"accessing\",{\"1\":{\"1588\":2,\"1591\":2}}],[\"access\",{\"0\":{\"1307\":1,\"1308\":1},\"1\":{\"1624\":1}}],[\"acc\",{\"1\":{\"610\":2}}],[\"accuracy\",{\"1\":{\"524\":4,\"535\":4,\"569\":5,\"571\":5,\"577\":5,\"578\":5,\"579\":5,\"580\":5,\"581\":5,\"582\":1,\"588\":5,\"589\":5,\"601\":5,\"602\":5,\"603\":5,\"604\":5,\"605\":5,\"607\":5,\"608\":9,\"609\":10,\"610\":2}}],[\"acos\",{\"1\":{\"1218\":2,\"1393\":1}}],[\"aco\",{\"1\":{\"420\":1}}],[\"acge\",{\"1\":{\"379\":1}}],[\"august\",{\"1\":{\"1994\":1}}],[\"augmenting\",{\"1\":{\"397\":1}}],[\"auxiliary\",{\"1\":{\"2164\":1}}],[\"aux\",{\"1\":{\"1110\":1}}],[\"audio\",{\"1\":{\"948\":4}}],[\"autoboxing\",{\"0\":{\"1699\":1},\"1\":{\"1385\":1,\"1698\":1}}],[\"autoencoders\",{\"1\":{\"547\":1,\"598\":2}}],[\"author等\",{\"1\":{\"1662\":1}}],[\"author=\",{\"1\":{\"1654\":1}}],[\"author\",{\"1\":{\"336\":1,\"1654\":10,\"1661\":10,\"1663\":2,\"2000\":1,\"2001\":1}}],[\"adobe\",{\"1\":{\"795\":2}}],[\"adam\",{\"1\":{\"608\":1,\"610\":1,\"660\":1,\"1689\":1,\"1692\":1}}],[\"advantage\",{\"1\":{\"596\":1}}],[\"adversarial\",{\"1\":{\"441\":1,\"595\":1,\"598\":1}}],[\"adjusted\",{\"1\":{\"515\":1}}],[\"adjustments\",{\"1\":{\"447\":2,\"449\":2}}],[\"adjmatrix\",{\"1\":{\"394\":4,\"398\":6,\"399\":6,\"954\":1,\"958\":7,\"959\":9,\"960\":6,\"964\":7,\"965\":10}}],[\"adjlist\",{\"1\":{\"390\":1,\"954\":1}}],[\"adjacency\",{\"1\":{\"390\":2,\"393\":1,\"954\":2,\"955\":1}}],[\"addxxxlistener\",{\"1\":{\"2031\":1}}],[\"addactionlistener\",{\"1\":{\"2022\":1,\"2031\":2}}],[\"adds\",{\"1\":{\"2000\":1}}],[\"adding\",{\"1\":{\"1754\":1,\"1768\":1}}],[\"addition\",{\"1\":{\"1686\":1,\"1853\":1,\"2000\":1}}],[\"added\",{\"1\":{\"1661\":1,\"1663\":2}}],[\"addexact\",{\"1\":{\"1392\":3}}],[\"addbook\",{\"1\":{\"1661\":3}}],[\"address\",{\"1\":{\"1418\":2,\"1506\":3,\"1933\":2}}],[\"addnumbers\",{\"1\":{\"1172\":4,\"1177\":2,\"1179\":4}}],[\"add\",{\"1\":{\"160\":1,\"211\":2,\"212\":2,\"214\":2,\"245\":1,\"246\":4,\"247\":5,\"623\":1,\"660\":4,\"680\":1,\"688\":1,\"1152\":1,\"1221\":1,\"1335\":1,\"1336\":1,\"1343\":3,\"1402\":2,\"1503\":2,\"1523\":7,\"1542\":2,\"1661\":1,\"1673\":1,\"1709\":2,\"1725\":4,\"1726\":4,\"1727\":4,\"1731\":3,\"1737\":7,\"1738\":6,\"1739\":4,\"1745\":2,\"1748\":4,\"1751\":4,\"1754\":4,\"1759\":1,\"1783\":1,\"1785\":1,\"1786\":4,\"1788\":4,\"1789\":1,\"1790\":3,\"1792\":1,\"1814\":3,\"1822\":1,\"1823\":3,\"1853\":1,\"1855\":1,\"2000\":1,\"2022\":1,\"2027\":3,\"2028\":5,\"2033\":1}}],[\"amount\",{\"1\":{\"1402\":1}}],[\"american\",{\"1\":{\"1040\":2}}],[\"ampl\",{\"1\":{\"838\":1}}],[\"am\",{\"1\":{\"261\":1}}],[\"arithmeticexception\",{\"1\":{\"1445\":1,\"1446\":1,\"1856\":2,\"1898\":2,\"1901\":2,\"1903\":2,\"2000\":3}}],[\"arithmetic\",{\"0\":{\"1311\":1},\"1\":{\"2000\":1}}],[\"arima模型\",{\"1\":{\"488\":1}}],[\"arima\",{\"1\":{\"488\":3,\"631\":1}}],[\"arange\",{\"1\":{\"457\":1,\"643\":2}}],[\"arrconcatvert\",{\"1\":{\"1154\":1}}],[\"arrconcat\",{\"1\":{\"1154\":1}}],[\"arr3d\",{\"1\":{\"1154\":1}}],[\"arr\",{\"1\":{\"457\":3,\"1820\":6,\"1901\":2}}],[\"arr2d\",{\"1\":{\"1154\":5}}],[\"arr2\",{\"1\":{\"457\":1}}],[\"arr1d\",{\"1\":{\"1154\":5}}],[\"arr1\",{\"1\":{\"457\":6}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"1895\":1,\"1901\":2}}],[\"arrayindexoutofboundsexception等\",{\"1\":{\"1451\":1}}],[\"arrayblockingqueue\",{\"1\":{\"1767\":1,\"1769\":1}}],[\"arraydequeasstackexample\",{\"1\":{\"1777\":1}}],[\"arraydeque<>\",{\"1\":{\"1766\":1,\"1777\":1}}],[\"arraydequeexample\",{\"1\":{\"1766\":1}}],[\"arraydeque\",{\"1\":{\"1760\":1,\"1765\":2,\"1766\":1,\"1769\":1,\"1776\":2,\"1777\":1,\"1778\":1,\"1779\":2}}],[\"arraylistexample\",{\"1\":{\"1748\":1}}],[\"arraylist<e>\",{\"1\":{\"1737\":1}}],[\"arraylist<>\",{\"1\":{\"1542\":1,\"1661\":1,\"1725\":1,\"1737\":1,\"1741\":1,\"1748\":1,\"1814\":1,\"1823\":1}}],[\"arraylist\",{\"1\":{\"1697\":1,\"1725\":5,\"1735\":1,\"1737\":1,\"1742\":1,\"1743\":1,\"1746\":3,\"1747\":2,\"1748\":1,\"1752\":1,\"1755\":1,\"1814\":1,\"1823\":1,\"1843\":1,\"2038\":1}}],[\"arrays\",{\"1\":{\"1363\":2,\"1364\":1,\"1689\":1,\"1692\":1,\"1732\":2,\"1989\":1,\"1991\":1,\"1992\":1,\"2038\":1}}],[\"arraycopy\",{\"1\":{\"1362\":2,\"2037\":1}}],[\"array\",{\"1\":{\"238\":4,\"409\":1,\"434\":1,\"446\":2,\"448\":1,\"449\":3,\"457\":2,\"480\":1,\"484\":2,\"485\":1,\"486\":2,\"487\":1,\"619\":1,\"641\":1,\"642\":1,\"643\":1,\"649\":4,\"659\":2,\"680\":3,\"935\":2,\"936\":2,\"937\":2,\"941\":2,\"942\":2,\"943\":2,\"944\":2,\"1127\":1,\"1891\":1}}],[\"arg\",{\"1\":{\"1865\":1}}],[\"argmin\",{\"1\":{\"856\":1}}],[\"argmax\",{\"1\":{\"434\":1}}],[\"args\",{\"1\":{\"1274\":1,\"1275\":1,\"1292\":1,\"1336\":1,\"1370\":1,\"1373\":1,\"1376\":1,\"1384\":1,\"1392\":1,\"1393\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1418\":1,\"1422\":1,\"1425\":1,\"1427\":1,\"1428\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":1,\"1440\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":1,\"1503\":1,\"1511\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1516\":1,\"1520\":1,\"1523\":1,\"1528\":1,\"1530\":1,\"1533\":1,\"1536\":1,\"1541\":1,\"1546\":1,\"1547\":1,\"1548\":1,\"1554\":1,\"1557\":1,\"1561\":1,\"1568\":1,\"1579\":1,\"1581\":1,\"1583\":1,\"1588\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1606\":1,\"1608\":1,\"1610\":1,\"1612\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1651\":1,\"1655\":1,\"1661\":1,\"1667\":1,\"1670\":1,\"1671\":1,\"1677\":1,\"1682\":1,\"1705\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1818\":1,\"1820\":1,\"1823\":1,\"1831\":1,\"1843\":1,\"1846\":1,\"1863\":1,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":1,\"1883\":1,\"1890\":1,\"1891\":1,\"1898\":1,\"1901\":1,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":1,\"1918\":1,\"1922\":1,\"1926\":1,\"1933\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1949\":1,\"1950\":1,\"1952\":1,\"1954\":1,\"1956\":1,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1,\"1970\":1,\"1993\":1,\"1996\":1,\"2022\":1,\"2027\":1,\"2028\":1,\"2033\":2,\"2047\":1,\"2048\":1}}],[\"args=\",{\"1\":{\"852\":1,\"856\":1}}],[\"argsort\",{\"1\":{\"624\":1}}],[\"argv\",{\"1\":{\"233\":1}}],[\"artifactid>\",{\"1\":{\"1851\":2,\"1858\":1,\"1920\":2,\"1924\":2}}],[\"artificial\",{\"1\":{\"420\":1}}],[\"article\",{\"1\":{\"336\":2,\"1100\":1}}],[\"area\",{\"1\":{\"686\":1,\"688\":10,\"690\":1,\"816\":1,\"1265\":2}}],[\"are\",{\"1\":{\"262\":1,\"1163\":1,\"1422\":1}}],[\"apache\",{\"1\":{\"1914\":1,\"1920\":2,\"1922\":2}}],[\"apt\",{\"1\":{\"1102\":2}}],[\"api是最受欢迎的特性\",{\"1\":{\"1998\":1}}],[\"api进行数据处理\",{\"1\":{\"1992\":1}}],[\"api<\",{\"1\":{\"1851\":1,\"1920\":1,\"1924\":1}}],[\"api工具\",{\"2\":{\"324\":1}}],[\"api\",{\"0\":{\"1819\":1,\"1992\":1,\"1994\":1,\"2042\":1},\"1\":{\"237\":1,\"1117\":1,\"1283\":1,\"1630\":1,\"1816\":1,\"1819\":1,\"1824\":1,\"1853\":2,\"1855\":1,\"1858\":1,\"1867\":1,\"1878\":1,\"1880\":1,\"1893\":1,\"1929\":1,\"1944\":1,\"1972\":1,\"1973\":1,\"1974\":1,\"1975\":2,\"1986\":1,\"1987\":1,\"1992\":2,\"1997\":1,\"2035\":3,\"2043\":1,\"2049\":2}}],[\"app构建文档\",{\"1\":{\"1198\":1}}],[\"app构建\",{\"0\":{\"1198\":1}}],[\"approximation\",{\"1\":{\"594\":1}}],[\"application\",{\"1\":{\"2033\":3}}],[\"applications\",{\"1\":{\"540\":1,\"594\":1}}],[\"applied\",{\"1\":{\"1040\":1}}],[\"apple\",{\"1\":{\"141\":2,\"150\":2,\"154\":1,\"159\":1,\"176\":4,\"198\":2,\"235\":1,\"1162\":3,\"1726\":1,\"1728\":1,\"1738\":1,\"1748\":3,\"1751\":3,\"1754\":1,\"1762\":1,\"1766\":1,\"1768\":1,\"1786\":4,\"1788\":2,\"1790\":3,\"1792\":4,\"1801\":5,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1823\":1}}],[\"appender>\",{\"1\":{\"1925\":1}}],[\"appenders>\",{\"1\":{\"1921\":1}}],[\"append\",{\"1\":{\"145\":1,\"409\":1,\"428\":1,\"649\":1,\"659\":2,\"680\":3,\"1373\":1,\"1376\":1,\"1942\":1}}],[\"angle\",{\"1\":{\"1393\":7}}],[\"angeles\",{\"1\":{\"168\":1}}],[\"another\",{\"1\":{\"2000\":1}}],[\"anotherstr\",{\"1\":{\"1298\":1}}],[\"anotherchar\",{\"1\":{\"1297\":1}}],[\"anova在生物医学\",{\"1\":{\"470\":1}}],[\"anova\",{\"0\":{\"483\":1},\"1\":{\"470\":1}}],[\"anova等\",{\"1\":{\"466\":1}}],[\"ansi\",{\"1\":{\"1259\":1}}],[\"answer\",{\"1\":{\"261\":1}}],[\"any\",{\"1\":{\"958\":1}}],[\"anp​=n−1\",{\"1\":{\"866\":1}}],[\"anp​=an+b\",{\"1\":{\"866\":1}}],[\"anh​=c\",{\"1\":{\"866\":1}}],[\"an​−an−1​=0\",{\"1\":{\"866\":1}}],[\"an​−an−1​=n\",{\"1\":{\"866\":1}}],[\"an​−2an−1​=0\",{\"1\":{\"866\":1}}],[\"an​=n\",{\"1\":{\"866\":1}}],[\"an​=anh​+anp​=c+n−1\",{\"1\":{\"866\":1}}],[\"an​=c⋅2n\",{\"1\":{\"866\":1}}],[\"an​=c1​an−1​+c2​an−2​+⋯+ck​an−k​+g\",{\"1\":{\"864\":1}}],[\"an​=f\",{\"1\":{\"863\":1}}],[\"an​\",{\"1\":{\"863\":1,\"939\":1}}],[\"an−k​\",{\"1\":{\"863\":1}}],[\"an−2​\",{\"1\":{\"863\":1}}],[\"an−1​\",{\"1\":{\"863\":1}}],[\"an\",{\"1\":{\"754\":1,\"1162\":1,\"1445\":1,\"1446\":1,\"1538\":1,\"1922\":2,\"1926\":2}}],[\"ani\",{\"1\":{\"624\":1}}],[\"animation\",{\"1\":{\"622\":2,\"624\":1}}],[\"animal接口被一个匿名内部类实现\",{\"1\":{\"1597\":1}}],[\"animal引用实际上指向的是dog对象\",{\"1\":{\"1536\":1}}],[\"animal2\",{\"1\":{\"1530\":3}}],[\"animal1\",{\"1\":{\"1530\":3}}],[\"animals\",{\"1\":{\"242\":2,\"243\":2,\"1542\":4}}],[\"animal\",{\"1\":{\"242\":5,\"243\":5,\"1504\":4,\"1511\":4,\"1513\":3,\"1514\":4,\"1520\":7,\"1530\":8,\"1536\":7,\"1538\":5,\"1539\":3,\"1541\":7,\"1542\":6,\"1554\":6,\"1597\":3,\"1709\":10,\"1714\":5}}],[\"analyzer\",{\"1\":{\"1269\":1}}],[\"analytic\",{\"1\":{\"754\":1}}],[\"analytics\",{\"1\":{\"367\":1}}],[\"analysis\",{\"0\":{\"520\":1,\"521\":1,\"522\":1},\"1\":{\"486\":1,\"518\":1,\"524\":1,\"541\":2,\"567\":3,\"569\":1,\"571\":1,\"594\":3,\"615\":1,\"754\":1}}],[\"annotationprocessor\",{\"1\":{\"1846\":1}}],[\"annotation\",{\"1\":{\"1844\":4,\"1846\":3,\"1847\":1}}],[\"annotations\",{\"1\":{\"1841\":1}}],[\"annot=true\",{\"1\":{\"459\":1}}],[\"annealing\",{\"1\":{\"410\":1,\"420\":1,\"421\":1,\"428\":3,\"429\":1}}],[\"ant\",{\"1\":{\"410\":1,\"420\":1}}],[\"android等\",{\"1\":{\"2190\":1}}],[\"and\",{\"1\":{\"133\":1,\"139\":1,\"157\":2,\"195\":1,\"261\":1,\"409\":6,\"410\":1,\"434\":1,\"594\":1,\"948\":2,\"1040\":4,\"1152\":3,\"1163\":1,\"1181\":1,\"1314\":1,\"1315\":1,\"1392\":2,\"1395\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":2,\"1407\":2,\"1661\":1,\"1663\":1,\"1949\":1,\"2000\":2}}],[\"always\",{\"1\":{\"1446\":1}}],[\"already\",{\"1\":{\"1439\":1,\"1661\":1}}],[\"alladdresses\",{\"1\":{\"1933\":2}}],[\"allocate\",{\"1\":{\"1883\":1,\"1890\":1,\"1891\":1}}],[\"all\",{\"1\":{\"889\":4,\"903\":4,\"1918\":1}}],[\"allpaths\",{\"1\":{\"393\":2,\"955\":5}}],[\"alpha=0\",{\"1\":{\"499\":1,\"517\":1,\"543\":1,\"549\":1,\"680\":1,\"948\":4}}],[\"alpha=1\",{\"1\":{\"498\":1,\"500\":1}}],[\"alpha评估问卷的信度\",{\"1\":{\"480\":1}}],[\"alpha系数等\",{\"1\":{\"467\":1}}],[\"alpha\",{\"1\":{\"424\":2,\"428\":4,\"480\":4,\"889\":2,\"903\":2,\"1738\":1}}],[\"algorithm\",{\"0\":{\"405\":1},\"1\":{\"369\":1,\"409\":3,\"410\":1,\"416\":1,\"420\":2,\"431\":1,\"434\":2,\"435\":1}}],[\"alice\",{\"1\":{\"157\":2,\"168\":1,\"169\":1,\"170\":2,\"171\":3,\"172\":2,\"177\":4,\"191\":2,\"210\":2,\"211\":2,\"239\":1,\"242\":2,\"257\":1,\"258\":1,\"261\":1,\"1667\":2,\"1671\":1,\"1677\":6,\"1989\":1,\"1991\":1}}],[\"alt\",{\"1\":{\"24\":1}}],[\"a\",{\"1\":{\"137\":1,\"153\":2,\"174\":3,\"198\":1,\"202\":1,\"211\":2,\"245\":3,\"246\":6,\"247\":2,\"251\":1,\"253\":1,\"378\":7,\"384\":6,\"390\":3,\"393\":1,\"458\":3,\"481\":3,\"634\":2,\"641\":3,\"642\":5,\"643\":2,\"722\":2,\"726\":3,\"728\":1,\"730\":1,\"732\":3,\"734\":1,\"738\":8,\"866\":1,\"871\":1,\"921\":11,\"939\":1,\"943\":2,\"955\":1,\"1130\":1,\"1133\":3,\"1134\":3,\"1135\":2,\"1136\":2,\"1138\":3,\"1139\":2,\"1141\":2,\"1142\":4,\"1143\":3,\"1144\":13,\"1146\":9,\"1147\":6,\"1148\":2,\"1149\":4,\"1150\":6,\"1151\":2,\"1152\":35,\"1162\":1,\"1172\":2,\"1173\":3,\"1175\":3,\"1179\":4,\"1182\":4,\"1216\":1,\"1222\":11,\"1232\":2,\"1233\":1,\"1276\":4,\"1292\":5,\"1297\":2,\"1311\":9,\"1312\":16,\"1313\":6,\"1314\":3,\"1315\":6,\"1316\":2,\"1335\":2,\"1343\":6,\"1344\":2,\"1392\":6,\"1412\":1,\"1416\":1,\"1418\":5,\"1428\":1,\"1448\":1,\"1503\":2,\"1513\":1,\"1520\":1,\"1523\":6,\"1530\":1,\"1533\":4,\"1557\":4,\"1561\":2,\"1577\":2,\"1579\":2,\"1581\":2,\"1583\":2,\"1594\":2,\"1608\":1,\"1610\":1,\"1612\":1,\"1661\":1,\"1663\":1,\"1685\":2,\"1686\":3,\"1689\":2,\"1693\":2,\"1709\":5,\"1725\":1,\"1732\":2,\"1737\":1,\"1922\":4,\"1926\":2,\"1947\":1,\"1949\":1,\"1950\":2,\"1993\":2,\"2000\":7,\"2001\":2,\"2048\":1}}],[\"aslist\",{\"1\":{\"1689\":1,\"1692\":1,\"1732\":2,\"1989\":1,\"1991\":1,\"1992\":1}}],[\"asin\",{\"1\":{\"1218\":2,\"1393\":1}}],[\"asabe\",{\"1\":{\"1040\":1}}],[\"aspect\",{\"1\":{\"688\":1}}],[\"astype\",{\"1\":{\"610\":2,\"948\":2}}],[\"assignment\",{\"0\":{\"1312\":1},\"1\":{\"409\":6}}],[\"assets\",{\"1\":{\"336\":2}}],[\"assertthrows\",{\"1\":{\"1856\":2}}],[\"asserttrue\",{\"1\":{\"1856\":1,\"1857\":1}}],[\"assertnotnull\",{\"1\":{\"1856\":1}}],[\"assertnotequals\",{\"1\":{\"1856\":1}}],[\"assertnull\",{\"1\":{\"1856\":1}}],[\"assertfalse\",{\"1\":{\"1856\":1}}],[\"assertions\",{\"0\":{\"1856\":1},\"1\":{\"1853\":1}}],[\"assertequals\",{\"1\":{\"1853\":3,\"1855\":2,\"1856\":2,\"1858\":1}}],[\"assertequal\",{\"1\":{\"247\":3,\"248\":1}}],[\"assert\",{\"1\":{\"133\":1}}],[\"as\",{\"1\":{\"133\":1,\"229\":1,\"238\":1,\"239\":1,\"240\":1,\"252\":2,\"253\":2,\"257\":2,\"258\":2,\"259\":2,\"409\":1,\"428\":2,\"434\":1,\"444\":1,\"449\":1,\"457\":1,\"458\":1,\"459\":2,\"478\":1,\"480\":1,\"481\":1,\"484\":1,\"488\":1,\"517\":1,\"543\":2,\"549\":2,\"550\":2,\"551\":2,\"552\":2,\"569\":2,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"590\":2,\"608\":1,\"609\":1,\"610\":1,\"619\":1,\"622\":3,\"640\":2,\"649\":1,\"658\":3,\"680\":2,\"688\":2,\"802\":1,\"803\":1,\"804\":1,\"825\":1,\"826\":1,\"852\":2,\"856\":2,\"889\":2,\"895\":2,\"903\":2,\"911\":2,\"927\":2,\"935\":2,\"936\":2,\"937\":2,\"941\":2,\"942\":2,\"943\":2,\"944\":2,\"947\":2,\"948\":3,\"1384\":4,\"2000\":1}}],[\"ascii\",{\"1\":{\"131\":1}}],[\"非捕获组\",{\"1\":{\"1947\":1}}],[\"非受检异常\",{\"1\":{\"1895\":1}}],[\"非阻塞的\",{\"1\":{\"1893\":1}}],[\"非阻塞\",{\"1\":{\"1892\":1}}],[\"非阻塞模式\",{\"1\":{\"1890\":1}}],[\"非同步\",{\"1\":{\"1752\":2}}],[\"非同步集合\",{\"1\":{\"1742\":1}}],[\"非常方便\",{\"1\":{\"1793\":1}}],[\"非常有用\",{\"1\":{\"1684\":1}}],[\"非常适合研究和原型开发\",{\"1\":{\"797\":1}}],[\"非常适合数据分析和建模\",{\"1\":{\"383\":1}}],[\"非空性\",{\"1\":{\"1676\":1}}],[\"非检查异常是在运行时检查的异常\",{\"1\":{\"1451\":1}}],[\"非检查异常\",{\"0\":{\"1451\":1}}],[\"非线程安全\",{\"1\":{\"1375\":1,\"1778\":1,\"2037\":1}}],[\"非线性结构\",{\"1\":{\"2153\":1}}],[\"非线性函数定义\",{\"1\":{\"943\":1}}],[\"非线性拟合用于模型非线性关系的数据\",{\"1\":{\"939\":1}}],[\"非线性拟合\",{\"0\":{\"943\":1},\"1\":{\"939\":1,\"943\":1}}],[\"非线性回归\",{\"0\":{\"837\":1}}],[\"非线性问题\",{\"1\":{\"431\":1}}],[\"非线性规划可以分为几种类型\",{\"1\":{\"833\":1}}],[\"非线性规划问题的求解方法有很多\",{\"1\":{\"834\":1}}],[\"非线性规划问题的分类\",{\"0\":{\"833\":1}}],[\"非线性规划问题的目标函数或约束条件是非线性的\",{\"1\":{\"708\":1}}],[\"非线性规划模型在许多工程\",{\"1\":{\"831\":1}}],[\"非线性规划模型\",{\"0\":{\"831\":1}}],[\"非线性规划和多目标规划模型\",{\"0\":{\"830\":1}}],[\"非线性规划和多目标规范模型\",{\"1\":{\"378\":1}}],[\"非线性规划\",{\"0\":{\"708\":1},\"1\":{\"382\":1,\"415\":1,\"831\":1}}],[\"非静态内部类持有外部类的引用\",{\"1\":{\"1600\":1}}],[\"非静态内部类\",{\"0\":{\"1587\":1},\"1\":{\"1586\":1}}],[\"非静态方法\",{\"1\":{\"1336\":1}}],[\"非静态变量\",{\"1\":{\"1278\":1}}],[\"非访问修饰符用于实现类\",{\"1\":{\"1308\":1}}],[\"非访问修饰符\",{\"0\":{\"1308\":1}}],[\"非访问控制修饰符\",{\"1\":{\"1277\":1}}],[\"非法标识符举例\",{\"1\":{\"1276\":1}}],[\"非学位课程\",{\"1\":{\"1030\":1}}],[\"非齐次差分方程\",{\"1\":{\"866\":1}}],[\"非凸规划问题\",{\"1\":{\"833\":1}}],[\"非凸的\",{\"1\":{\"421\":1}}],[\"非凸的优化问题\",{\"1\":{\"417\":1}}],[\"非零和博弈\",{\"1\":{\"746\":1}}],[\"非合作博弈\",{\"1\":{\"746\":1}}],[\"非整数解是不可接受的\",{\"1\":{\"723\":1}}],[\"非负约束\",{\"1\":{\"715\":1,\"721\":1,\"722\":1,\"725\":1,\"726\":1}}],[\"非均匀有理b样条\",{\"1\":{\"672\":1}}],[\"非\",{\"1\":{\"131\":1,\"195\":1}}],[\"中添加以下依赖\",{\"1\":{\"1924\":1}}],[\"中引入的一套新的\",{\"1\":{\"1880\":1}}],[\"中引用当前对象\",{\"1\":{\"1713\":1}}],[\"中用于处理输入和输出操作的一套\",{\"1\":{\"1867\":1}}],[\"中用于判断对象的唯一性\",{\"1\":{\"1668\":1}}],[\"中没有直接的概念\",{\"1\":{\"1824\":1}}],[\"中没有像\",{\"1\":{\"1816\":1}}],[\"中那样明确\",{\"1\":{\"1811\":1}}],[\"中则不允许\",{\"1\":{\"1797\":1}}],[\"中被广泛使用\",{\"1\":{\"1776\":1}}],[\"中常见的正则表达式语法\",{\"1\":{\"1947\":1}}],[\"中常见的\",{\"1\":{\"1725\":1}}],[\"中常用的循环语句\",{\"1\":{\"1164\":1}}],[\"中常用的分支语句\",{\"1\":{\"1158\":1}}],[\"中广泛使用\",{\"1\":{\"1679\":1}}],[\"中所有类的根类\",{\"1\":{\"1678\":1}}],[\"中调用\",{\"1\":{\"1673\":1}}],[\"中调用这个函数\",{\"1\":{\"1172\":1}}],[\"中实现\",{\"1\":{\"1659\":1}}],[\"中实现抽象的关键工具\",{\"1\":{\"1562\":1}}],[\"中组织代码的基本单位\",{\"1\":{\"1632\":1}}],[\"中多态的详细解释及示例\",{\"1\":{\"1525\":1}}],[\"中一些常用的\",{\"1\":{\"1875\":1}}],[\"中一些常见的数学操作和函数\",{\"1\":{\"1214\":1}}],[\"中一些关键概念的解释\",{\"1\":{\"1467\":1}}],[\"中间容器\",{\"1\":{\"2021\":1}}],[\"中间件再连接数据库\",{\"1\":{\"1986\":1}}],[\"中间件\",{\"0\":{\"1461\":1,\"2296\":1}}],[\"中间的隐藏层\",{\"1\":{\"654\":1}}],[\"中有两种创建线程的主要方式\",{\"1\":{\"1960\":1}}],[\"中有八种基本数据类型\",{\"1\":{\"1285\":1}}],[\"中有许多字符有着特殊的含义\",{\"1\":{\"1109\":1}}],[\"中主要有如下几种类型的变量\",{\"1\":{\"1278\":1}}],[\"中很少使用的\",{\"1\":{\"1259\":1}}],[\"中运行测试\",{\"1\":{\"1185\":1}}],[\"中使用\",{\"1\":{\"1179\":1,\"2026\":2}}],[\"中矩阵的详细介绍和示例\",{\"1\":{\"1128\":1}}],[\"中文文献\",{\"0\":{\"1069\":1}}],[\"中期考核一般安排在第四学期\",{\"1\":{\"1036\":1}}],[\"中期考核\",{\"0\":{\"1036\":1}}],[\"中华民族是自强不息\",{\"1\":{\"992\":1}}],[\"中华民族依旧屹立在世界的东方\",{\"1\":{\"992\":1}}],[\"中华民族的历史文化\",{\"0\":{\"985\":1}}],[\"中华文明和古巴比伦一样进入了青铜器时代\",{\"0\":{\"987\":1}}],[\"中国土壤学会\",{\"1\":{\"1040\":1}}],[\"中国沼气学会\",{\"1\":{\"1040\":1}}],[\"中国沼气\",{\"1\":{\"1040\":1}}],[\"中国太阳能学会\",{\"1\":{\"1040\":1}}],[\"中国计算机学会\",{\"1\":{\"1040\":1}}],[\"中国光学学会\",{\"1\":{\"1040\":1}}],[\"中国科学院微生物所\",{\"1\":{\"1040\":1}}],[\"中国科学院软件研究所\",{\"1\":{\"1040\":1}}],[\"中国电工技术学会\",{\"1\":{\"1040\":1}}],[\"中国电机工程学会\",{\"1\":{\"1040\":1}}],[\"中国电机工程学报\",{\"1\":{\"1040\":1}}],[\"中国农机化学报\",{\"1\":{\"1040\":1}}],[\"中国农业科学院\",{\"1\":{\"1040\":1}}],[\"中国农业科学\",{\"1\":{\"1040\":1}}],[\"中国农业机械学会\",{\"1\":{\"1040\":1}}],[\"中国农业工程学会和aocabfe\",{\"1\":{\"1040\":1}}],[\"中国农业工程学会\",{\"1\":{\"1040\":1}}],[\"中国系统工程学会\",{\"1\":{\"1040\":1}}],[\"中国力学学会\",{\"1\":{\"1040\":1}}],[\"中国振动工程学会\",{\"1\":{\"1040\":1}}],[\"中国仪器仪表学会\",{\"1\":{\"1040\":2}}],[\"中国机械工程\",{\"1\":{\"1040\":1}}],[\"中国机械工程学会\",{\"1\":{\"1040\":3}}],[\"中国人是有着优秀品质的\",{\"1\":{\"992\":1}}],[\"中国人和埃及人一样对抗汹涌的洪水\",{\"0\":{\"986\":1}}],[\"中国和阿拉伯一样都是富足的地区\",{\"0\":{\"990\":1}}],[\"中国先贤和古希腊哲学家一样在思考这个世界\",{\"0\":{\"988\":1}}],[\"中国研究生数学建模竞赛\",{\"0\":{\"379\":1}}],[\"中位数\",{\"1\":{\"465\":1,\"1229\":2}}],[\"中最常用的绘图库\",{\"1\":{\"459\":1}}],[\"中最常用的数据类型\",{\"1\":{\"138\":1}}],[\"中进行数值计算的核心库\",{\"1\":{\"457\":1}}],[\"中提供了一种强类型的方式来表示一组固定的常量\",{\"1\":{\"1615\":1}}],[\"中提供了一种简洁\",{\"1\":{\"157\":1}}],[\"中提取子集\",{\"1\":{\"219\":1}}],[\"中断线程\",{\"1\":{\"1965\":1}}],[\"中断时执行\",{\"1\":{\"208\":1}}],[\"中断语句用于控制循环的执行\",{\"1\":{\"205\":1}}],[\"中断语句\",{\"0\":{\"205\":1}}],[\"中处理键值对数据的首选数据结构\",{\"1\":{\"177\":1}}],[\"中的线程有五个基本状态\",{\"1\":{\"1964\":1}}],[\"中的异常是通过类来表示的\",{\"1\":{\"1895\":1}}],[\"中的流\",{\"1\":{\"1882\":1}}],[\"中的核心概念之一\",{\"1\":{\"1882\":1}}],[\"中的核心地位\",{\"1\":{\"1128\":1}}],[\"中的生成器\",{\"0\":{\"1816\":1}}],[\"中的迭代器\",{\"0\":{\"1812\":1}}],[\"中的每个键\",{\"1\":{\"1797\":1}}],[\"中的多态分为编译时多态\",{\"1\":{\"1709\":1}}],[\"中的正确行为\",{\"1\":{\"1676\":1}}],[\"中的一个对象\",{\"1\":{\"1886\":1}}],[\"中的一个顶点\",{\"1\":{\"391\":1}}],[\"中的一种特殊类型\",{\"1\":{\"1602\":1}}],[\"中的抽象类和接口就是实现抽象的手段\",{\"1\":{\"1473\":1}}],[\"中的类有一个运行时刻的表示\",{\"1\":{\"1259\":1}}],[\"中的变量\",{\"1\":{\"1175\":1}}],[\"中的变量不需要声明\",{\"1\":{\"135\":1}}],[\"中的循环语句非常灵活\",{\"1\":{\"1170\":1}}],[\"中的保留字符有\",{\"1\":{\"1109\":1}}],[\"中的命令通常是由一个反斜杠加上命令名称\",{\"1\":{\"1106\":1}}],[\"中的实现示例\",{\"1\":{\"496\":1}}],[\"中的调试工具\",{\"1\":{\"246\":1}}],[\"中的元素是按插入顺序排序的\",{\"1\":{\"1744\":1}}],[\"中的元素\",{\"1\":{\"204\":1}}],[\"中的\",{\"1\":{\"140\":1,\"149\":1,\"158\":1,\"167\":1,\"1180\":1,\"1879\":1}}],[\"中也是作为一个字符串使用\",{\"1\":{\"138\":1}}],[\"中\",{\"1\":{\"131\":1,\"135\":1,\"139\":1,\"619\":1,\"726\":1,\"732\":1,\"1128\":1,\"1145\":1,\"1158\":1,\"1164\":1,\"1171\":1,\"1189\":1,\"1199\":1,\"1300\":1,\"1472\":1,\"1496\":1,\"1507\":1,\"1517\":1,\"1551\":1,\"1603\":1,\"1616\":1,\"1618\":1,\"1681\":3,\"1707\":1,\"1709\":1,\"1710\":1,\"1743\":1,\"1756\":1,\"1770\":1,\"1780\":1,\"1795\":1,\"1811\":1,\"1845\":1,\"1869\":1,\"1872\":1,\"1876\":1,\"1888\":1,\"1898\":1,\"1953\":1,\"1985\":1,\"2022\":1,\"2028\":1}}],[\"标志\",{\"1\":{\"1954\":1}}],[\"标记已废弃的类\",{\"1\":{\"2001\":1}}],[\"标记和重置缓冲区到特定位置\",{\"1\":{\"1885\":1}}],[\"标记为\",{\"1\":{\"1864\":1}}],[\"标记测试方法为忽略\",{\"1\":{\"1855\":1}}],[\"标记一个方法为测试方法\",{\"1\":{\"1853\":1}}],[\"标记一个方法\",{\"1\":{\"1843\":1}}],[\"标签访问它的属性\",{\"1\":{\"1681\":1}}],[\"标签引入\",{\"1\":{\"1681\":1}}],[\"标签可能是图像所属的类别\",{\"1\":{\"528\":1}}],[\"标签\",{\"1\":{\"336\":1,\"528\":1,\"2021\":1,\"2025\":1}}],[\"标准库提供了许多常用的包\",{\"1\":{\"1630\":1}}],[\"标准正态分布的\",{\"1\":{\"1230\":2}}],[\"标准差\",{\"1\":{\"1229\":1}}],[\"标准差与均值的比率\",{\"1\":{\"763\":1}}],[\"标准差为1\",{\"1\":{\"763\":1}}],[\"标准差标准化\",{\"1\":{\"759\":1}}],[\"标准差等\",{\"1\":{\"465\":1}}],[\"标准化方法选择不当可能影响结果\",{\"1\":{\"768\":1}}],[\"标准化方法等参数进行敏感性分析\",{\"1\":{\"764\":1}}],[\"标准化方法的选择\",{\"1\":{\"764\":1}}],[\"标准化\",{\"1\":{\"762\":1}}],[\"标准化处理\",{\"1\":{\"753\":1}}],[\"标准化数据\",{\"1\":{\"616\":1,\"624\":1}}],[\"标准输入通常指从用户获取输入\",{\"1\":{\"262\":1}}],[\"标准输入\",{\"0\":{\"262\":1}}],[\"标准输入输出\",{\"0\":{\"260\":1}}],[\"标准输出通常指将信息显示在屏幕上\",{\"1\":{\"261\":1}}],[\"标准输出\",{\"0\":{\"261\":1}}],[\"标准数据类型\",{\"0\":{\"136\":1}}],[\"标识符是大小写敏感的\",{\"1\":{\"1276\":1}}],[\"标识符也是允许的了\",{\"1\":{\"131\":1}}],[\"标识符对大小写敏感\",{\"1\":{\"131\":1}}],[\"标识符的其他的部分由字母\",{\"1\":{\"131\":1}}],[\"标识符\",{\"0\":{\"131\":1,\"1276\":1},\"1\":{\"1276\":1}}],[\"标题和关闭操作\",{\"1\":{\"2023\":1}}],[\"标题3\",{\"1\":{\"29\":1}}],[\"标题2\",{\"1\":{\"29\":1}}],[\"标题1\",{\"1\":{\"29\":1}}],[\"标题\",{\"0\":{\"17\":1,\"46\":1,\"47\":1,\"51\":1,\"52\":1,\"337\":1,\"2256\":1,\"2257\":1}}],[\"ux\",{\"1\":{\"2215\":1}}],[\"uxx​\",{\"1\":{\"887\":1,\"898\":1,\"906\":1}}],[\"udpserver\",{\"1\":{\"1939\":1}}],[\"udpclient\",{\"1\":{\"1938\":1}}],[\"udp\",{\"0\":{\"1937\":1,\"1938\":1,\"1939\":1},\"1\":{\"1882\":1,\"1930\":1,\"1931\":1,\"1937\":2,\"1938\":1,\"1939\":2,\"1944\":1,\"2040\":2}}],[\"uffff\",{\"1\":{\"1288\":1}}],[\"urlexample\",{\"1\":{\"1941\":1}}],[\"urlconnectionexample\",{\"1\":{\"1942\":1}}],[\"urlconnection\",{\"0\":{\"1940\":1},\"1\":{\"1259\":1,\"1931\":1,\"1940\":2,\"1942\":1,\"2040\":1}}],[\"url\",{\"0\":{\"1940\":1},\"1\":{\"1259\":1,\"1930\":1,\"1931\":2,\"1940\":3,\"1941\":13,\"1942\":6,\"1979\":4,\"2040\":2}}],[\"u=u\",{\"1\":{\"926\":1}}],[\"u0000\",{\"1\":{\"1288\":1}}],[\"u0\",{\"1\":{\"911\":8}}],[\"ui\",{\"1\":{\"2019\":1}}],[\"uint64\",{\"1\":{\"1127\":1}}],[\"uint32\",{\"1\":{\"1127\":1}}],[\"uint16\",{\"1\":{\"1127\":1}}],[\"uint8\",{\"1\":{\"825\":1,\"1127\":1}}],[\"ui​≥0\",{\"1\":{\"737\":1}}],[\"ui​\",{\"1\":{\"737\":1}}],[\"ui​−uj​+nxij​≤n−1∀i\",{\"1\":{\"737\":1}}],[\"ubuntu\",{\"1\":{\"1102\":1}}],[\"ub\",{\"1\":{\"726\":2,\"732\":2,\"738\":2}}],[\"ub=b\",{\"1\":{\"384\":1,\"722\":1}}],[\"ub=a\",{\"1\":{\"384\":1,\"722\":1}}],[\"utc时区的日期时间\",{\"1\":{\"1405\":1}}],[\"utc\",{\"1\":{\"1405\":2}}],[\"utcdatetime\",{\"1\":{\"1405\":2}}],[\"util\",{\"1\":{\"1363\":1,\"1399\":2,\"1401\":2,\"1402\":2,\"1408\":2,\"1409\":1,\"1416\":2,\"1418\":2,\"1419\":1,\"1422\":1,\"1427\":1,\"1428\":2,\"1630\":1,\"1677\":1,\"1734\":1,\"1742\":1,\"1748\":2,\"1751\":2,\"1754\":2,\"1756\":1,\"1762\":2,\"1764\":2,\"1766\":2,\"1768\":2,\"1770\":1,\"1774\":1,\"1777\":2,\"1780\":1,\"1786\":2,\"1788\":2,\"1790\":2,\"1792\":2,\"1795\":1,\"1801\":2,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1812\":1,\"1814\":3,\"1818\":1,\"1820\":1,\"1823\":3,\"1914\":1,\"1915\":1,\"1918\":2,\"1928\":1,\"1946\":1,\"1949\":2,\"1954\":2,\"1958\":1,\"1963\":5,\"1969\":2,\"1971\":1,\"1994\":2,\"2036\":1,\"2038\":1,\"2041\":2,\"2043\":1,\"2044\":1,\"2048\":2}}],[\"utils\",{\"1\":{\"610\":1}}],[\"utt​\",{\"1\":{\"906\":1}}],[\"utt​=c2uxx​\",{\"1\":{\"906\":1}}],[\"utt​=c2δu\",{\"1\":{\"880\":1,\"881\":1}}],[\"ut​\",{\"1\":{\"887\":1,\"898\":1,\"908\":1,\"912\":1}}],[\"ut​=αuxx​\",{\"1\":{\"884\":1,\"887\":1,\"898\":1}}],[\"ut​=αδu\",{\"1\":{\"880\":1,\"881\":1}}],[\"utf\",{\"1\":{\"130\":1,\"1921\":1,\"1925\":1}}],[\"using\",{\"1\":{\"625\":1,\"661\":1}}],[\"usebean>\",{\"1\":{\"1681\":1}}],[\"users\",{\"1\":{\"1981\":2,\"1982\":1,\"1984\":1}}],[\"userservice\",{\"1\":{\"1858\":4}}],[\"userservicetest\",{\"1\":{\"1858\":1}}],[\"username\",{\"1\":{\"1927\":1}}],[\"userrepository\",{\"1\":{\"1858\":5}}],[\"userinputoutputexample\",{\"1\":{\"1427\":1}}],[\"user\",{\"1\":{\"1127\":1,\"1427\":1,\"1858\":5,\"1927\":1,\"1979\":2}}],[\"use\",{\"1\":{\"609\":1}}],[\"usa\",{\"1\":{\"170\":2,\"171\":3}}],[\"umap\",{\"1\":{\"594\":1,\"614\":1}}],[\"u\",{\"1\":{\"389\":5,\"391\":2,\"392\":2,\"396\":5,\"398\":12,\"399\":12,\"409\":3,\"738\":1,\"740\":1,\"880\":2,\"884\":6,\"887\":3,\"888\":3,\"889\":17,\"894\":4,\"895\":23,\"896\":1,\"898\":3,\"900\":1,\"901\":1,\"903\":19,\"906\":3,\"908\":1,\"909\":2,\"911\":12,\"912\":1,\"926\":2,\"927\":15,\"928\":2,\"958\":6,\"959\":9,\"964\":4,\"965\":10,\"1836\":3}}],[\"unlock\",{\"1\":{\"1969\":1}}],[\"unexpected\",{\"1\":{\"1856\":1}}],[\"until\",{\"1\":{\"1855\":1}}],[\"unchecked\",{\"0\":{\"1451\":1},\"1\":{\"1843\":2,\"1895\":1}}],[\"unboxing\",{\"0\":{\"1700\":1},\"1\":{\"1385\":1,\"1698\":2}}],[\"underfitting\",{\"1\":{\"533\":1}}],[\"undirected\",{\"1\":{\"389\":1,\"953\":1,\"962\":1}}],[\"unsupervised\",{\"1\":{\"369\":1}}],[\"unknownhostexception\",{\"1\":{\"1933\":2}}],[\"unknown\",{\"1\":{\"169\":2,\"1162\":1,\"1711\":1,\"1713\":1}}],[\"uniform\",{\"1\":{\"428\":2,\"434\":2,\"594\":1,\"1230\":1,\"1930\":1,\"2040\":1}}],[\"unittest\",{\"1\":{\"247\":3,\"248\":3}}],[\"unit\",{\"1\":{\"247\":1,\"440\":1,\"1849\":1}}],[\"uninstall\",{\"1\":{\"230\":1}}],[\"unique\",{\"1\":{\"165\":1,\"1150\":2,\"1152\":2}}],[\"union\",{\"1\":{\"161\":4,\"964\":2,\"1150\":2,\"1152\":2}}],[\"unicode\",{\"1\":{\"130\":1,\"1288\":1,\"1868\":1,\"1953\":2}}],[\"upcasting\",{\"1\":{\"1536\":1}}],[\"upgrade\",{\"1\":{\"805\":1}}],[\"updatequery2\",{\"1\":{\"1985\":2}}],[\"updatequery1\",{\"1\":{\"1985\":2}}],[\"updated\",{\"1\":{\"1568\":4,\"1655\":1}}],[\"update\",{\"1\":{\"174\":2,\"624\":2,\"1985\":2}}],[\"up\",{\"0\":{\"57\":1}}],[\"脚本适合用于执行一系列固定的命令\",{\"1\":{\"1184\":1}}],[\"脚本文件没有输入或输出参数\",{\"1\":{\"1181\":1}}],[\"脚本文件是包含一系列\",{\"1\":{\"1181\":1}}],[\"脚本\",{\"1\":{\"1120\":1,\"1180\":1,\"1184\":1},\"2\":{\"125\":1}}],[\"cj\",{\"1\":{\"1978\":1}}],[\"cpu\",{\"1\":{\"1964\":1,\"1965\":1,\"2207\":1}}],[\"cp\",{\"1\":{\"1627\":1,\"1629\":2,\"1658\":1}}],[\"cpipc\",{\"1\":{\"379\":1}}],[\"cdf\",{\"1\":{\"1230\":3}}],[\"cd\",{\"1\":{\"1126\":1}}],[\"cdot\",{\"1\":{\"699\":1}}],[\"ctexart\",{\"1\":{\"1106\":2}}],[\"ct​\",{\"1\":{\"872\":1}}],[\"ct+1​=ct​+vd​−kct​\",{\"1\":{\"872\":1}}],[\"ck​\",{\"1\":{\"864\":1}}],[\"cvtcolor\",{\"1\":{\"800\":1,\"804\":1,\"818\":1,\"820\":1,\"823\":1,\"824\":1,\"826\":1,\"827\":1}}],[\"cv2\",{\"1\":{\"800\":5,\"803\":3,\"804\":4,\"818\":5,\"819\":4,\"820\":6,\"823\":6,\"824\":7,\"825\":6,\"826\":6,\"827\":8,\"947\":6}}],[\"cmyk\",{\"1\":{\"785\":1}}],[\"cmap=\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"590\":1,\"895\":1,\"947\":3}}],[\"c2​\",{\"1\":{\"715\":1,\"864\":1}}],[\"c1​\",{\"1\":{\"715\":1,\"864\":1}}],[\"cell\",{\"1\":{\"1127\":1}}],[\"ceil用于确保即使瓷砖不能完全适配区域\",{\"1\":{\"689\":1}}],[\"ceil\",{\"1\":{\"688\":2}}],[\"center\",{\"1\":{\"2028\":1}}],[\"centered\",{\"1\":{\"624\":3,\"625\":1}}],[\"centers=1\",{\"1\":{\"623\":1}}],[\"centers=4\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"552\":1}}],[\"centers\",{\"1\":{\"485\":2,\"517\":4,\"543\":4,\"549\":4}}],[\"centroids\",{\"1\":{\"555\":1,\"558\":1}}],[\"cz\",{\"1\":{\"680\":2}}],[\"cyclicbarrier\",{\"1\":{\"1971\":1,\"2044\":1}}],[\"cycle\",{\"1\":{\"389\":1,\"953\":1}}],[\"cyan\",{\"1\":{\"680\":1}}],[\"cy\",{\"1\":{\"680\":2}}],[\"cx\",{\"1\":{\"680\":2}}],[\"cipher\",{\"1\":{\"2045\":1}}],[\"circuit\",{\"1\":{\"1152\":2}}],[\"circle\",{\"1\":{\"680\":2,\"681\":1,\"1533\":5,\"1557\":5,\"1577\":3,\"1579\":9,\"1583\":10}}],[\"cities\",{\"1\":{\"410\":2}}],[\"city=\",{\"1\":{\"168\":1}}],[\"city\",{\"1\":{\"168\":1,\"170\":2,\"171\":1,\"258\":1}}],[\"css\",{\"0\":{\"2266\":1},\"1\":{\"1460\":1,\"2032\":1},\"2\":{\"2268\":1}}],[\"csg\",{\"1\":{\"671\":1}}],[\"csvfile\",{\"1\":{\"257\":4,\"259\":2}}],[\"csv\",{\"1\":{\"239\":2,\"257\":5,\"259\":3}}],[\"criteria\",{\"1\":{\"752\":1}}],[\"critic\",{\"1\":{\"596\":1}}],[\"createstatement\",{\"1\":{\"1980\":2}}],[\"created\",{\"1\":{\"1439\":1}}],[\"createnewfile\",{\"1\":{\"1439\":2}}],[\"create\",{\"1\":{\"659\":2}}],[\"cronbach\",{\"1\":{\"480\":3}}],[\"crossentropy\",{\"1\":{\"608\":1,\"610\":1}}],[\"crosstab\",{\"1\":{\"481\":1}}],[\"cross\",{\"1\":{\"440\":1,\"533\":1,\"680\":13,\"1221\":2}}],[\"crossover\",{\"1\":{\"432\":1,\"434\":19,\"435\":1}}],[\"c=1\",{\"1\":{\"866\":1}}],[\"c=100\",{\"1\":{\"502\":1}}],[\"c=\",{\"1\":{\"517\":1,\"543\":1,\"549\":1}}],[\"c=y\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"590\":1}}],[\"cn​\",{\"1\":{\"715\":1}}],[\"cnns\",{\"1\":{\"598\":1}}],[\"cnn\",{\"0\":{\"610\":1},\"1\":{\"441\":1,\"610\":1,\"653\":1,\"792\":1}}],[\"cn\",{\"1\":{\"379\":1}}],[\"custom\",{\"1\":{\"1448\":2,\"1844\":1}}],[\"customexceptionexample\",{\"1\":{\"1448\":1,\"1909\":1}}],[\"customexception\",{\"1\":{\"1448\":5}}],[\"cubic\",{\"1\":{\"939\":1,\"947\":1}}],[\"cube\",{\"1\":{\"217\":2}}],[\"curve\",{\"1\":{\"856\":1,\"943\":2}}],[\"currenttimemillis\",{\"1\":{\"2037\":1}}],[\"currentthread\",{\"1\":{\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1}}],[\"current\",{\"1\":{\"255\":3,\"428\":17,\"649\":3,\"1401\":1,\"1402\":1,\"1404\":2,\"1405\":1,\"1818\":3,\"1994\":3,\"2047\":2}}],[\"cutting\",{\"1\":{\"692\":1,\"700\":1}}],[\"cumsum\",{\"1\":{\"641\":1,\"642\":1,\"659\":1}}],[\"car\",{\"1\":{\"1468\":4,\"1469\":3,\"1470\":3,\"1471\":2,\"1472\":6,\"1473\":2,\"1474\":2,\"1475\":1,\"1476\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1502\":1,\"1516\":4,\"1711\":3}}],[\"caught\",{\"1\":{\"1447\":1,\"1448\":1}}],[\"casting\",{\"0\":{\"1294\":1,\"1295\":1}}],[\"cascadeclassifier\",{\"1\":{\"827\":1}}],[\"cascade\",{\"1\":{\"827\":2}}],[\"case\",{\"1\":{\"202\":4,\"1162\":6,\"1163\":1,\"1322\":4,\"1606\":4,\"1953\":2,\"1954\":2}}],[\"cannot\",{\"1\":{\"1661\":1,\"1663\":1,\"2001\":1}}],[\"canny算法\",{\"0\":{\"820\":1}}],[\"canny\",{\"1\":{\"810\":3,\"820\":1}}],[\"canva\",{\"1\":{\"796\":1}}],[\"candidate\",{\"1\":{\"428\":9}}],[\"cad\",{\"1\":{\"670\":1}}],[\"calculator\",{\"1\":{\"1853\":4,\"1855\":7,\"1856\":1,\"1857\":1,\"2000\":1}}],[\"calculatortest\",{\"1\":{\"1853\":1,\"1855\":1,\"1857\":1}}],[\"calculates\",{\"1\":{\"2001\":1}}],[\"calculate\",{\"1\":{\"410\":2,\"1173\":2,\"1308\":1,\"2001\":2}}],[\"call\",{\"1\":{\"1963\":2}}],[\"callableexample\",{\"1\":{\"1963\":1}}],[\"callable<integer>\",{\"1\":{\"1963\":1}}],[\"callable\",{\"1\":{\"1686\":1,\"1960\":1,\"1963\":3}}],[\"called\",{\"1\":{\"226\":4}}],[\"calendar的许多问题\",{\"1\":{\"1994\":1}}],[\"calendar提供了更全面的日期时间操作\",{\"1\":{\"1408\":1}}],[\"calendarexample\",{\"1\":{\"1402\":1}}],[\"calendar\",{\"1\":{\"1402\":11,\"1408\":1,\"2038\":1,\"2041\":1}}],[\"calendar类是抽象类\",{\"1\":{\"1402\":1}}],[\"calendar类提供了对日期和时间的更全面的操作\",{\"1\":{\"1402\":1}}],[\"calendar类\",{\"1\":{\"1399\":1}}],[\"capacity\",{\"1\":{\"396\":2,\"1885\":1}}],[\"catch块用于捕获和处理这些异常\",{\"1\":{\"1445\":1}}],[\"catch语句块\",{\"1\":{\"1442\":1}}],[\"catch\",{\"1\":{\"1428\":1,\"1433\":2,\"1434\":2,\"1436\":2,\"1437\":2,\"1439\":1,\"1440\":2,\"1443\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":1,\"1453\":1,\"1548\":1,\"1863\":2,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":2,\"1890\":1,\"1891\":1,\"1897\":1,\"1898\":2,\"1900\":3,\"1901\":7,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":1,\"1911\":1,\"1933\":1,\"1935\":1,\"1936\":2,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1963\":1,\"1966\":2,\"1970\":2,\"1978\":1,\"1979\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1983\":1,\"1985\":1}}],[\"cat=\",{\"1\":{\"700\":1}}],[\"categorical\",{\"1\":{\"608\":1,\"610\":4}}],[\"category\",{\"1\":{\"336\":1}}],[\"catboost\",{\"1\":{\"597\":1}}],[\"cat\",{\"1\":{\"242\":2,\"243\":2,\"1154\":1,\"1513\":5,\"1514\":7,\"1530\":3,\"1539\":1,\"1541\":5,\"1542\":6}}],[\"channels\",{\"1\":{\"1883\":1,\"1890\":2,\"1891\":1}}],[\"channel\",{\"0\":{\"1882\":1},\"1\":{\"1878\":1,\"1881\":1,\"1882\":1,\"1892\":1,\"1893\":1}}],[\"charbuffer\",{\"1\":{\"1884\":1}}],[\"charoutputexample\",{\"1\":{\"1874\":1}}],[\"charinputexample\",{\"1\":{\"1873\":1}}],[\"chararraywriter\",{\"1\":{\"1874\":1}}],[\"chararrayreader\",{\"1\":{\"1873\":1}}],[\"characters\",{\"1\":{\"1292\":1}}],[\"character\",{\"0\":{\"1288\":1,\"1872\":1},\"1\":{\"1292\":1,\"1696\":1,\"1868\":1}}],[\"charging\",{\"1\":{\"1470\":1}}],[\"charge\",{\"1\":{\"1470\":1}}],[\"charsequence\",{\"1\":{\"1415\":1}}],[\"charval\",{\"1\":{\"1297\":2}}],[\"char\",{\"1\":{\"204\":2,\"1127\":1,\"1288\":1,\"1292\":1,\"1297\":3,\"1433\":1,\"1436\":1,\"1437\":1,\"1696\":2,\"1870\":1,\"1883\":1}}],[\"charlie\",{\"1\":{\"177\":1,\"239\":1,\"1989\":1,\"1991\":1}}],[\"checked\",{\"0\":{\"1450\":1,\"2012\":1},\"1\":{\"1895\":1}}],[\"checkage\",{\"1\":{\"1447\":2}}],[\"cherry\",{\"1\":{\"141\":1,\"150\":1,\"154\":1,\"176\":2,\"235\":1,\"1726\":1}}],[\"ch\",{\"1\":{\"1433\":3,\"1925\":1}}],[\"chose\",{\"1\":{\"1162\":2}}],[\"choice\",{\"1\":{\"235\":1,\"434\":1,\"649\":1}}],[\"choices\",{\"1\":{\"235\":2}}],[\"child\",{\"1\":{\"1509\":2,\"1512\":7}}],[\"chinese\",{\"1\":{\"1083\":1}}],[\"chi2\",{\"1\":{\"481\":5}}],[\"chromosome\",{\"1\":{\"432\":1}}],[\"client\",{\"1\":{\"1936\":1,\"1939\":1}}],[\"clientsocket\",{\"1\":{\"1936\":4}}],[\"climbing\",{\"1\":{\"416\":1}}],[\"cloneable\",{\"1\":{\"1671\":3,\"1677\":1,\"1678\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"1671\":4,\"1677\":2}}],[\"clone\",{\"1\":{\"1671\":6,\"1677\":6,\"1678\":1,\"2037\":1}}],[\"close\",{\"1\":{\"254\":1,\"1422\":1,\"1427\":1,\"1428\":1,\"1883\":1,\"1890\":1,\"1891\":1,\"1942\":1,\"1983\":3,\"2022\":1,\"2027\":1,\"2028\":1}}],[\"clazz\",{\"1\":{\"1636\":1,\"1637\":1,\"1638\":1,\"1639\":2,\"1641\":1,\"1644\":1,\"1647\":1,\"1651\":4,\"1670\":2,\"1827\":3,\"1828\":3,\"1829\":3,\"1830\":3,\"1831\":4}}],[\"class=\",{\"1\":{\"1925\":1}}],[\"classic<\",{\"1\":{\"1924\":1}}],[\"classification\",{\"0\":{\"530\":1},\"1\":{\"530\":2}}],[\"classnotfoundexception\",{\"1\":{\"1863\":1,\"1865\":1,\"1876\":1,\"1978\":1}}],[\"classname\",{\"1\":{\"1827\":1,\"1991\":2}}],[\"class<myclass>\",{\"1\":{\"1827\":1,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1}}],[\"class<t>\",{\"1\":{\"1826\":1}}],[\"class<\",{\"1\":{\"1636\":1,\"1637\":1,\"1638\":1,\"1639\":1,\"1651\":1,\"1655\":1,\"1670\":2,\"1827\":2}}],[\"classpath\",{\"1\":{\"1627\":2}}],[\"classcastexception\",{\"1\":{\"1539\":1,\"1837\":1}}],[\"class文件\",{\"1\":{\"1264\":1,\"1265\":1}}],[\"classloader\",{\"1\":{\"1259\":1}}],[\"classdef\",{\"1\":{\"1183\":1}}],[\"classes\",{\"1\":{\"1127\":2,\"1695\":1,\"2020\":1}}],[\"class\",{\"0\":{\"1303\":1,\"1468\":1},\"1\":{\"133\":1,\"224\":1,\"242\":6,\"243\":3,\"247\":1,\"248\":3,\"530\":1,\"1107\":2,\"1108\":1,\"1259\":1,\"1265\":1,\"1274\":1,\"1283\":1,\"1292\":1,\"1302\":1,\"1303\":1,\"1305\":1,\"1307\":4,\"1308\":9,\"1309\":1,\"1335\":1,\"1336\":1,\"1343\":1,\"1344\":1,\"1370\":1,\"1373\":1,\"1376\":1,\"1384\":1,\"1392\":1,\"1393\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1418\":1,\"1422\":1,\"1425\":1,\"1427\":1,\"1428\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":1,\"1440\":1,\"1443\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":2,\"1468\":1,\"1470\":1,\"1471\":1,\"1472\":2,\"1473\":2,\"1474\":1,\"1476\":1,\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1485\":1,\"1486\":1,\"1488\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1502\":2,\"1503\":2,\"1504\":2,\"1505\":1,\"1506\":1,\"1509\":2,\"1511\":3,\"1512\":3,\"1513\":3,\"1514\":3,\"1516\":3,\"1520\":3,\"1523\":2,\"1528\":2,\"1530\":4,\"1533\":3,\"1536\":3,\"1541\":1,\"1545\":1,\"1546\":1,\"1547\":1,\"1548\":1,\"1554\":3,\"1557\":3,\"1561\":2,\"1568\":2,\"1577\":2,\"1579\":2,\"1581\":1,\"1583\":2,\"1586\":1,\"1588\":3,\"1591\":3,\"1594\":5,\"1597\":1,\"1606\":1,\"1608\":1,\"1610\":1,\"1612\":1,\"1619\":1,\"1621\":1,\"1622\":1,\"1624\":2,\"1628\":1,\"1629\":1,\"1634\":2,\"1635\":1,\"1636\":1,\"1637\":1,\"1639\":1,\"1644\":1,\"1647\":1,\"1651\":3,\"1654\":3,\"1655\":1,\"1661\":5,\"1667\":2,\"1668\":1,\"1669\":1,\"1670\":2,\"1671\":2,\"1673\":1,\"1676\":1,\"1677\":1,\"1680\":4,\"1682\":2,\"1705\":1,\"1709\":9,\"1710\":2,\"1711\":1,\"1713\":1,\"1714\":2,\"1723\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1818\":1,\"1820\":1,\"1823\":1,\"1827\":5,\"1828\":2,\"1829\":1,\"1830\":2,\"1831\":3,\"1836\":1,\"1844\":1,\"1845\":1,\"1846\":3,\"1853\":1,\"1855\":1,\"1856\":1,\"1857\":1,\"1858\":2,\"1862\":1,\"1863\":2,\"1864\":1,\"1865\":1,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":2,\"1883\":1,\"1890\":1,\"1891\":1,\"1898\":1,\"1901\":1,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":2,\"1918\":2,\"1922\":2,\"1926\":2,\"1933\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1949\":1,\"1950\":1,\"1952\":1,\"1954\":1,\"1956\":1,\"1961\":2,\"1962\":2,\"1963\":2,\"1966\":2,\"1968\":2,\"1969\":1,\"1970\":2,\"1978\":2,\"1993\":2,\"1996\":1,\"2000\":2,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":2,\"2013\":2,\"2022\":1,\"2027\":1,\"2028\":1,\"2033\":1,\"2047\":1,\"2048\":1}}],[\"clc\",{\"1\":{\"1125\":1}}],[\"cls\",{\"1\":{\"1110\":1}}],[\"clusters=4\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1}}],[\"clusters=2\",{\"1\":{\"485\":1}}],[\"clustering\",{\"0\":{\"512\":1,\"540\":1,\"550\":1,\"556\":1,\"561\":1,\"562\":1},\"1\":{\"512\":2,\"538\":1,\"540\":2,\"550\":2,\"555\":1,\"556\":2,\"557\":1,\"558\":1,\"594\":4}}],[\"cluster\",{\"1\":{\"485\":3,\"509\":1,\"517\":3,\"543\":3,\"549\":3,\"550\":3,\"551\":1,\"552\":1,\"555\":3,\"556\":4,\"557\":3,\"558\":4,\"565\":2}}],[\"clear\",{\"1\":{\"162\":1,\"171\":1,\"1125\":1,\"1783\":1,\"1798\":1,\"1883\":1,\"1885\":1}}],[\"c\",{\"1\":{\"153\":2,\"174\":3,\"378\":5,\"384\":2,\"396\":2,\"458\":1,\"555\":3,\"641\":3,\"722\":2,\"730\":1,\"866\":1,\"871\":1,\"906\":1,\"911\":2,\"912\":1,\"943\":2,\"1133\":1,\"1134\":1,\"1144\":1,\"1216\":1,\"1222\":1,\"1259\":2,\"1343\":2,\"1492\":1,\"1523\":2,\"1732\":1,\"1737\":1}}],[\"cookie\",{\"0\":{\"2084\":1},\"2\":{\"2086\":1}}],[\"cooling\",{\"1\":{\"856\":3}}],[\"coco\",{\"1\":{\"805\":1}}],[\"cos\",{\"1\":{\"680\":2,\"1206\":1,\"1209\":2,\"1210\":2,\"1218\":2,\"1393\":3,\"2037\":1}}],[\"cost\",{\"1\":{\"400\":1,\"409\":14}}],[\"cov\",{\"1\":{\"624\":3,\"626\":1}}],[\"covered\",{\"1\":{\"409\":18}}],[\"cover预览图\",{\"1\":{\"336\":1}}],[\"cover2\",{\"1\":{\"336\":2}}],[\"cover\",{\"1\":{\"336\":1}}],[\"cornerharris\",{\"1\":{\"826\":1}}],[\"corners\",{\"1\":{\"813\":2,\"826\":1}}],[\"core<\",{\"1\":{\"1858\":1,\"1920\":1}}],[\"coreldraw\",{\"1\":{\"795\":1}}],[\"core\",{\"1\":{\"557\":1,\"1925\":1}}],[\"corepts\",{\"1\":{\"557\":3}}],[\"correlation\",{\"1\":{\"482\":1}}],[\"corr\",{\"1\":{\"459\":3,\"482\":2}}],[\"coeffs\",{\"1\":{\"942\":2,\"948\":2}}],[\"coefficient\",{\"1\":{\"515\":1}}],[\"coefficients\",{\"1\":{\"484\":1}}],[\"coef\",{\"1\":{\"484\":1}}],[\"collectors\",{\"1\":{\"1992\":1}}],[\"collect\",{\"1\":{\"1992\":1}}],[\"collection\",{\"1\":{\"1743\":2,\"1781\":1,\"1783\":1,\"1795\":1,\"1798\":1}}],[\"collection<e>\",{\"1\":{\"1735\":1}}],[\"collections\",{\"1\":{\"1689\":1,\"1734\":1,\"1741\":4,\"1742\":1,\"1780\":1,\"2038\":1}}],[\"collaborative\",{\"1\":{\"599\":1}}],[\"colvec\",{\"1\":{\"1155\":4}}],[\"coloring\",{\"1\":{\"1583\":2}}],[\"colorable\",{\"1\":{\"1583\":2}}],[\"color\",{\"1\":{\"800\":1,\"804\":1,\"818\":1,\"820\":1,\"823\":1,\"824\":1,\"826\":1,\"827\":1,\"1468\":1,\"1469\":1,\"1471\":5,\"1476\":3,\"1497\":1,\"1583\":3}}],[\"color=color\",{\"1\":{\"688\":1}}],[\"color=\",{\"1\":{\"680\":1,\"688\":1,\"856\":2}}],[\"colorbar\",{\"1\":{\"590\":1,\"895\":1}}],[\"colony\",{\"1\":{\"410\":1,\"420\":1}}],[\"cols\",{\"1\":{\"409\":2}}],[\"col\",{\"1\":{\"409\":9}}],[\"column\",{\"1\":{\"1142\":1,\"1144\":1}}],[\"columns=\",{\"1\":{\"659\":1}}],[\"column3\",{\"1\":{\"259\":1}}],[\"column2\",{\"1\":{\"259\":1}}],[\"column1\",{\"1\":{\"259\":1}}],[\"code等\",{\"1\":{\"246\":1}}],[\"code\",{\"1\":{\"237\":1,\"1544\":1}}],[\"configuration>\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"configureblocking\",{\"1\":{\"1887\":1,\"1890\":1}}],[\"config\",{\"1\":{\"1917\":1,\"1918\":2}}],[\"concurrentlinkedqueue\",{\"1\":{\"1760\":1,\"1769\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"1809\":1}}],[\"concurrenthashmapexample\",{\"1\":{\"1809\":1}}],[\"concurrenthashmap\",{\"1\":{\"1742\":1,\"1799\":1,\"1808\":1,\"1809\":2,\"1810\":1,\"2044\":1}}],[\"concurrent\",{\"1\":{\"1742\":1,\"1754\":1,\"1768\":2,\"1809\":1,\"1958\":1,\"1963\":5,\"1969\":2,\"1971\":1,\"2044\":1}}],[\"conv2d\",{\"1\":{\"610\":3}}],[\"convolutional\",{\"0\":{\"610\":1},\"1\":{\"441\":1,\"595\":1,\"598\":1,\"653\":1}}],[\"condition2\",{\"1\":{\"1161\":2}}],[\"condition1\",{\"1\":{\"1161\":3}}],[\"condition\",{\"1\":{\"432\":1,\"1159\":2,\"1160\":3,\"1166\":1,\"1856\":2}}],[\"consoleappender\",{\"1\":{\"1925\":1}}],[\"console>\",{\"1\":{\"1921\":1}}],[\"console\",{\"1\":{\"1921\":2}}],[\"consumer\",{\"1\":{\"1990\":1}}],[\"consumer<t>\",{\"1\":{\"1691\":1}}],[\"consumer<string>\",{\"1\":{\"1690\":2}}],[\"consume\",{\"1\":{\"1673\":1}}],[\"conservation\",{\"1\":{\"396\":1}}],[\"constructors\",{\"1\":{\"1831\":1,\"1862\":1,\"1864\":1}}],[\"constructorparameter\",{\"1\":{\"1648\":1}}],[\"constructor<myclass>\",{\"1\":{\"1828\":1}}],[\"constructor<t>\",{\"1\":{\"1826\":1}}],[\"constructor<\",{\"1\":{\"1647\":1,\"1831\":1}}],[\"constructor\",{\"0\":{\"1711\":1},\"1\":{\"1512\":4,\"1546\":4,\"1547\":3,\"1647\":2,\"1648\":1,\"1714\":2,\"1828\":3,\"1831\":3,\"1865\":1}}],[\"constructive\",{\"1\":{\"671\":1}}],[\"constraints\",{\"1\":{\"715\":2}}],[\"constraint\",{\"1\":{\"396\":1}}],[\"constantsexample\",{\"1\":{\"1396\":1}}],[\"constants\",{\"1\":{\"1292\":1,\"1502\":1}}],[\"constant\",{\"1\":{\"183\":1}}],[\"connector\",{\"1\":{\"1978\":1}}],[\"connectivity\",{\"1\":{\"1973\":1}}],[\"connection\",{\"1\":{\"1942\":3,\"1974\":1,\"1979\":3,\"1980\":2,\"1983\":3,\"1984\":1,\"1985\":4}}],[\"connect\",{\"1\":{\"1891\":1}}],[\"connected\",{\"1\":{\"389\":2,\"953\":1}}],[\"conncomp\",{\"1\":{\"393\":1,\"955\":1}}],[\"containsvalue\",{\"1\":{\"1798\":1}}],[\"containskey\",{\"1\":{\"1798\":1}}],[\"containsbanana\",{\"1\":{\"1748\":2,\"1751\":2}}],[\"contains\",{\"1\":{\"1745\":1,\"1748\":2,\"1751\":2,\"1783\":1,\"1785\":1,\"1786\":2,\"1789\":1,\"1790\":2,\"1792\":2}}],[\"control\",{\"1\":{\"1267\":1,\"2033\":1}}],[\"contourf\",{\"1\":{\"895\":1}}],[\"contingency\",{\"1\":{\"481\":5}}],[\"continue语句用于跳过当前循环的剩余部分\",{\"1\":{\"1330\":1}}],[\"continue\",{\"0\":{\"207\":1},\"1\":{\"133\":1,\"205\":1,\"207\":2,\"1168\":2,\"1330\":1,\"1331\":1,\"1332\":1}}],[\"content\",{\"1\":{\"252\":2,\"254\":1,\"599\":1,\"1871\":2,\"1874\":2}}],[\"copyonwritearrayset\",{\"1\":{\"2044\":1}}],[\"copyonwritearraylist<>\",{\"1\":{\"1754\":1}}],[\"copyonwritearraylistexample\",{\"1\":{\"1754\":1}}],[\"copyonwritearraylist\",{\"1\":{\"1742\":1,\"1753\":1,\"1754\":1,\"1755\":1,\"2044\":1}}],[\"copy\",{\"1\":{\"162\":1,\"889\":2,\"895\":1,\"903\":2,\"927\":1,\"1362\":2,\"1753\":1}}],[\"copied\",{\"1\":{\"162\":1}}],[\"countdownlatch\",{\"1\":{\"1971\":1,\"2044\":1}}],[\"count++\",{\"1\":{\"1548\":1,\"1818\":1,\"1968\":2,\"1969\":1}}],[\"countvectorizer\",{\"1\":{\"589\":2}}],[\"counter\",{\"1\":{\"224\":4,\"1968\":2,\"1969\":1}}],[\"counts\",{\"1\":{\"176\":5}}],[\"country\",{\"1\":{\"169\":2,\"170\":2,\"171\":3}}],[\"count\",{\"1\":{\"147\":2,\"155\":2,\"203\":4,\"1304\":3,\"1308\":1,\"1548\":5,\"1818\":3,\"1968\":4,\"1969\":2}}],[\"commit\",{\"1\":{\"1985\":2}}],[\"comments\",{\"1\":{\"1953\":1,\"1999\":1}}],[\"comma\",{\"1\":{\"1152\":1}}],[\"compareto\",{\"1\":{\"1689\":1,\"1989\":2}}],[\"comparator等\",{\"1\":{\"1686\":1}}],[\"computers\",{\"1\":{\"1040\":1}}],[\"compile\",{\"1\":{\"608\":1,\"610\":1,\"660\":1,\"1415\":1,\"1416\":1,\"1418\":1,\"1946\":1,\"1949\":1,\"1951\":2,\"1953\":1,\"1954\":1,\"1956\":1,\"2048\":1}}],[\"component\",{\"1\":{\"541\":2,\"590\":2,\"594\":2,\"615\":1,\"625\":2}}],[\"components=4\",{\"1\":{\"552\":1}}],[\"components=2\",{\"1\":{\"487\":1,\"590\":1,\"619\":1}}],[\"components\",{\"1\":{\"393\":1,\"487\":3,\"624\":1,\"625\":1,\"955\":1}}],[\"complete\",{\"1\":{\"391\":1}}],[\"complex\",{\"1\":{\"137\":1}}],[\"comprehensions\",{\"1\":{\"220\":1}}],[\"combined\",{\"1\":{\"148\":1,\"154\":1}}],[\"com\",{\"1\":{\"23\":1,\"24\":1,\"237\":1,\"1076\":1,\"1077\":1,\"1078\":1,\"1080\":1,\"1083\":1,\"1100\":1,\"1101\":1,\"1102\":1,\"1418\":1,\"1619\":2,\"1621\":1,\"1622\":1,\"1624\":3,\"1625\":2,\"1626\":2,\"1628\":2,\"1629\":1,\"1631\":1,\"1636\":1,\"1639\":1,\"1651\":2,\"1654\":11,\"1655\":2,\"1657\":1,\"1658\":1,\"1677\":3,\"1827\":1,\"1933\":2,\"1941\":1,\"1942\":1,\"1950\":1,\"1978\":1}}],[\"c++等\",{\"1\":{\"2209\":1}}],[\"c++语言实现\",{\"1\":{\"1308\":1}}],[\"c++语言只对虚函数使用动态绑定\",{\"1\":{\"1259\":1}}],[\"c++的指针\",{\"1\":{\"1291\":1}}],[\"c++\",{\"0\":{\"105\":1},\"1\":{\"794\":1,\"1259\":3,\"1373\":2,\"1376\":2,\"1492\":1},\"2\":{\"106\":1,\"107\":1}}],[\"进程\",{\"0\":{\"2193\":1}}],[\"进程管理\",{\"1\":{\"2189\":1,\"2192\":1}}],[\"进程与线程\",{\"0\":{\"267\":1}}],[\"进而指导算法设计与优化过程\",{\"1\":{\"2157\":1}}],[\"进而推导出系统未来的行为\",{\"1\":{\"632\":1}}],[\"进入\",{\"1\":{\"2030\":1}}],[\"进入bios系统\",{\"1\":{\"100\":1}}],[\"进度条\",{\"1\":{\"2025\":1}}],[\"进化算法\",{\"1\":{\"834\":1,\"841\":1}}],[\"进一步提升了对数据的理解和处理能力\",{\"1\":{\"547\":1}}],[\"进行正则表达式匹配\",{\"0\":{\"2048\":1}}],[\"进行查询和更新\",{\"0\":{\"1984\":1}}],[\"进行交互\",{\"1\":{\"1974\":1}}],[\"进行网络编程\",{\"0\":{\"1940\":1}}],[\"进行输出\",{\"1\":{\"1916\":1}}],[\"进行迭代\",{\"1\":{\"1815\":1}}],[\"进行自然排序\",{\"1\":{\"1741\":1}}],[\"进行区域属性测量\",{\"1\":{\"816\":1}}],[\"进行去噪或反卷积处理\",{\"1\":{\"814\":1}}],[\"进行腐蚀操作\",{\"1\":{\"812\":1}}],[\"进行膨胀操作\",{\"1\":{\"812\":1}}],[\"进行膨胀\",{\"1\":{\"812\":1}}],[\"进行灰度化等操作\",{\"1\":{\"808\":1}}],[\"进行标准化\",{\"1\":{\"759\":1}}],[\"进行预测\",{\"0\":{\"661\":1}}],[\"进行预测或分类\",{\"1\":{\"532\":1}}],[\"进行\",{\"0\":{\"619\":1}}],[\"进行聚类分析\",{\"1\":{\"561\":1}}],[\"进行改进\",{\"1\":{\"381\":1}}],[\"进行转义\",{\"1\":{\"33\":1}}],[\"开头的名字\",{\"1\":{\"1692\":1}}],[\"开头\",{\"1\":{\"1305\":1,\"2000\":1}}],[\"开启事务\",{\"1\":{\"1985\":1}}],[\"开启\",{\"1\":{\"1126\":1}}],[\"开\",{\"1\":{\"1117\":1}}],[\"开题报告应在由导师\",{\"1\":{\"1038\":1}}],[\"开题报告内容应包括文献综述\",{\"1\":{\"1038\":1}}],[\"开运算\",{\"1\":{\"812\":1,\"825\":1}}],[\"开运算和闭运算\",{\"1\":{\"789\":1}}],[\"开始计数\",{\"1\":{\"1773\":1}}],[\"开始\",{\"1\":{\"142\":1,\"151\":1,\"1276\":1,\"1281\":1,\"1282\":1,\"1283\":1,\"1560\":1,\"1578\":1,\"1609\":1,\"1672\":1,\"1744\":1}}],[\"开机\",{\"1\":{\"100\":1}}],[\"开发的基础\",{\"1\":{\"2035\":1}}],[\"开发人员可以提供详细的代码说明\",{\"1\":{\"2004\":1}}],[\"开发人员可以执行\",{\"1\":{\"1974\":1}}],[\"开发者的基础\",{\"1\":{\"2049\":1}}],[\"开发者应根据具体场景选择合适的实现方式\",{\"1\":{\"2017\":1}}],[\"开发者应根据具体需求选择合适的内部类类型来实现功能\",{\"1\":{\"1601\":1}}],[\"开发者可以以一种流式操作的方式来处理集合数据\",{\"1\":{\"1992\":1}}],[\"开发者可以编写健壮\",{\"1\":{\"1911\":1}}],[\"开发者可以更高效地管理和处理集合中的数据\",{\"1\":{\"1824\":1}}],[\"开发者可以更灵活地处理java中的数值数据\",{\"1\":{\"1387\":1}}],[\"开发工具\",{\"0\":{\"325\":1},\"1\":{\"1841\":1},\"2\":{\"323\":1,\"326\":1,\"327\":1}}],[\"开发\",{\"0\":{\"6\":1},\"1\":{\"1024\":1,\"1025\":1}}],[\"资源管理\",{\"1\":{\"2189\":1}}],[\"资源管理器\",{\"1\":{\"2016\":1}}],[\"资源的限制\",{\"1\":{\"840\":1}}],[\"资源配置\",{\"1\":{\"771\":1}}],[\"资源消耗\",{\"1\":{\"761\":1}}],[\"资源分配等\",{\"1\":{\"767\":1}}],[\"资源分配等问题\",{\"1\":{\"382\":1}}],[\"资源分配问题\",{\"1\":{\"716\":1}}],[\"资源分配\",{\"1\":{\"419\":1,\"706\":1,\"707\":1,\"709\":1}}],[\"资源限制条件为\",{\"1\":{\"384\":1}}],[\"资源总量有限\",{\"1\":{\"384\":1}}],[\"资源\",{\"0\":{\"94\":1},\"2\":{\"95\":1}}],[\"文化等方面的影响\",{\"1\":{\"2216\":1}}],[\"文化遗产保护\",{\"1\":{\"674\":1}}],[\"文献管理工具\",{\"0\":{\"1075\":1}}],[\"文献管理\",{\"0\":{\"1074\":1,\"1085\":1},\"2\":{\"1091\":1}}],[\"文献搜索引擎\",{\"0\":{\"1068\":1}}],[\"文献检索平台\",{\"0\":{\"1067\":1}}],[\"文献检索\",{\"0\":{\"1066\":1},\"2\":{\"1073\":1}}],[\"文献阅读\",{\"0\":{\"1092\":1,\"2288\":1},\"2\":{\"1055\":1,\"1056\":1,\"1094\":1}}],[\"文献资料等\",{\"1\":{\"763\":1}}],[\"文献研究法\",{\"1\":{\"758\":1}}],[\"文本框和多行文本区\",{\"1\":{\"2021\":1}}],[\"文本框\",{\"1\":{\"2019\":1}}],[\"文本搜索和替换等场景\",{\"1\":{\"1419\":1}}],[\"文本搜索和替换\",{\"1\":{\"1417\":1}}],[\"文本等\",{\"1\":{\"655\":1}}],[\"文本\",{\"1\":{\"585\":1,\"591\":1}}],[\"文本分析等领域有广泛应用\",{\"1\":{\"584\":1}}],[\"文本分析\",{\"1\":{\"542\":1}}],[\"文本分类\",{\"0\":{\"589\":1},\"1\":{\"516\":1,\"534\":1,\"574\":1}}],[\"文本模式\",{\"1\":{\"251\":1}}],[\"文章列表包含\",{\"1\":{\"336\":1}}],[\"文章星标\",{\"1\":{\"336\":1}}],[\"文章置顶排名\",{\"1\":{\"336\":1}}],[\"文章内容描述\",{\"1\":{\"336\":1}}],[\"文章标题\",{\"1\":{\"336\":1}}],[\"文章信息\",{\"1\":{\"336\":1}}],[\"文章模板内容\",{\"1\":{\"336\":1}}],[\"文章模板\",{\"0\":{\"335\":1}}],[\"文件系统和设备管理\",{\"1\":{\"2211\":1}}],[\"文件系统\",{\"0\":{\"2198\":1}}],[\"文件系统管理\",{\"1\":{\"2192\":1}}],[\"文件管理\",{\"1\":{\"2189\":1}}],[\"文件句柄等\",{\"1\":{\"1959\":1}}],[\"文件进行配置\",{\"1\":{\"1925\":1}}],[\"文件未找到\",{\"1\":{\"1908\":1}}],[\"文件流\",{\"1\":{\"1877\":1}}],[\"文件流与缓冲流的区别\",{\"0\":{\"1877\":1}}],[\"文件放置在相应的包目录结构下\",{\"1\":{\"1628\":1}}],[\"文件的存储\",{\"1\":{\"2192\":1}}],[\"文件的第一行\",{\"1\":{\"1618\":1}}],[\"文件的详细介绍\",{\"1\":{\"1180\":1}}],[\"文件操作类\",{\"1\":{\"2039\":1}}],[\"文件操作\",{\"0\":{\"1438\":1}}],[\"文件操作基础\",{\"0\":{\"250\":1}}],[\"文件等\",{\"1\":{\"1421\":1,\"2191\":1}}],[\"文件名的后缀为\",{\"1\":{\"1275\":1}}],[\"文件名应与函数名相同\",{\"1\":{\"1172\":1}}],[\"文件io\",{\"0\":{\"1243\":1,\"1430\":1}}],[\"文件读取\",{\"1\":{\"1192\":2}}],[\"文件是\",{\"1\":{\"1188\":1}}],[\"文件是存储\",{\"1\":{\"1180\":1}}],[\"文件\",{\"1\":{\"1181\":1,\"1182\":1,\"1186\":2,\"1192\":1,\"1195\":3,\"1629\":1,\"1927\":1,\"2035\":1}}],[\"文件可以包含函数\",{\"1\":{\"1180\":1}}],[\"文件中添加以下依赖\",{\"1\":{\"1920\":1}}],[\"文件中的数据\",{\"1\":{\"1192\":1}}],[\"文件中设置断点\",{\"1\":{\"1188\":1}}],[\"文件中定义类\",{\"1\":{\"1183\":1}}],[\"文件中\",{\"1\":{\"1172\":1,\"1187\":1,\"1195\":1}}],[\"文件输出\",{\"0\":{\"1110\":1}}],[\"文件和目录操作\",{\"0\":{\"256\":1}}],[\"文件和输入输出\",{\"1\":{\"249\":1}}],[\"文件路径\",{\"0\":{\"255\":1},\"1\":{\"1654\":5,\"1655\":1}}],[\"文件与io\",{\"0\":{\"249\":1}}],[\"文学\",{\"2\":{\"89\":1}}],[\"文档注释应简洁明了\",{\"1\":{\"2003\":1}}],[\"文档注释的最佳实践\",{\"0\":{\"2003\":1}}],[\"文档注释的格式通常包含一些特定的标签\",{\"1\":{\"1283\":1}}],[\"文档注释支持使用html标签\",{\"1\":{\"2000\":1}}],[\"文档注释是以\",{\"1\":{\"2000\":1}}],[\"文档注释以\",{\"1\":{\"1283\":1}}],[\"文档注释\",{\"0\":{\"1283\":1,\"1999\":1},\"1\":{\"1280\":1,\"1999\":1}}],[\"文档类文件\",{\"1\":{\"1110\":1}}],[\"文档类的参数\",{\"1\":{\"1107\":1,\"1108\":1}}],[\"文档\",{\"0\":{\"43\":1},\"1\":{\"1283\":1}}],[\"毛泽东选集\",{\"0\":{\"87\":1},\"2\":{\"89\":1}}],[\"阅读\",{\"2\":{\"85\":1,\"88\":1,\"1018\":1}}],[\"阅读记录\",{\"0\":{\"82\":1}}],[\"枪炮\",{\"0\":{\"84\":1},\"2\":{\"86\":1}}],[\"无操作系统阶段\",{\"1\":{\"2190\":1}}],[\"无明显缺点\",{\"1\":{\"2013\":1}}],[\"无效的电子邮件地址\",{\"1\":{\"1950\":1}}],[\"无论异常是否被捕获\",{\"1\":{\"1900\":1}}],[\"无论是否发生异常\",{\"1\":{\"1897\":1,\"1898\":1,\"1903\":1}}],[\"无论是在同一包内还是在不同包中\",{\"1\":{\"1307\":1}}],[\"无同步开销\",{\"1\":{\"1778\":1}}],[\"无参构造器\",{\"1\":{\"1711\":2}}],[\"无参构造方法\",{\"1\":{\"1680\":2,\"1682\":1}}],[\"无返回值的方法\",{\"1\":{\"1335\":1}}],[\"无符号右移\",{\"1\":{\"1315\":2}}],[\"无修饰符\",{\"1\":{\"1307\":1,\"1506\":1,\"1712\":1}}],[\"无约束优化问题\",{\"1\":{\"833\":1}}],[\"无缝集成\",{\"1\":{\"802\":1}}],[\"无需显式转换\",{\"1\":{\"1536\":1}}],[\"无需创建对象\",{\"1\":{\"1390\":1}}],[\"无需主观赋权\",{\"1\":{\"771\":1}}],[\"无需预设权重\",{\"1\":{\"754\":1}}],[\"无需标签数据\",{\"1\":{\"545\":1}}],[\"无后效性\",{\"1\":{\"645\":1,\"647\":1}}],[\"无法包含构造函数\",{\"1\":{\"1558\":1}}],[\"无法完全掌握系统信息的场合\",{\"1\":{\"633\":1}}],[\"无法捕捉非线性结构\",{\"1\":{\"541\":1}}],[\"无法捕捉数据中的模式\",{\"1\":{\"533\":1}}],[\"无环的无向图\",{\"1\":{\"391\":1}}],[\"无环的连通图\",{\"1\":{\"391\":1}}],[\"无向图中对称\",{\"1\":{\"954\":1}}],[\"无向图中任意两个顶点间都有路径\",{\"1\":{\"389\":1}}],[\"无向图的邻接矩阵是对称的\",{\"1\":{\"390\":1}}],[\"无向图的边是对称的\",{\"1\":{\"389\":1}}],[\"无向图\",{\"1\":{\"389\":2,\"953\":1,\"955\":1,\"962\":1}}],[\"无监督学习正变得越来越重要\",{\"1\":{\"547\":1}}],[\"无监督学习不需要人工标注的标签\",{\"1\":{\"545\":1}}],[\"无监督学习不依赖预先标注的输出\",{\"1\":{\"537\":1}}],[\"无监督学习的发展趋势\",{\"0\":{\"547\":1}}],[\"无监督学习的效果高度依赖于数据的质量和分布\",{\"1\":{\"546\":1}}],[\"无监督学习的结果往往缺乏直观的解释性\",{\"1\":{\"546\":1}}],[\"无监督学习的优势与局限性\",{\"0\":{\"544\":1}}],[\"无监督学习的python实现示例\",{\"0\":{\"543\":1}}],[\"无监督学习的应用场景\",{\"0\":{\"542\":1}}],[\"无监督学习的常见方法\",{\"0\":{\"539\":1}}],[\"无监督学习的基本概念\",{\"0\":{\"538\":1}}],[\"无监督学习试图从数据的分布中提取有用的信息\",{\"1\":{\"538\":1}}],[\"无监督学习是一种机器学习方法\",{\"1\":{\"537\":1}}],[\"无监督学习算法用于处理未标注的数据\",{\"1\":{\"594\":1}}],[\"无监督学习算法\",{\"1\":{\"369\":1}}],[\"无监督学习\",{\"0\":{\"369\":1,\"537\":1},\"1\":{\"509\":1,\"617\":1}}],[\"无尽的远方\",{\"0\":{\"77\":1}}],[\"无序列表\",{\"0\":{\"21\":1}}],[\"o符号\",{\"1\":{\"2210\":1}}],[\"o设备等\",{\"1\":{\"2189\":1}}],[\"ois\",{\"1\":{\"1876\":2}}],[\"oos\",{\"1\":{\"1876\":2}}],[\"oop\",{\"1\":{\"241\":1,\"1183\":1,\"1467\":1,\"1496\":1,\"1563\":1,\"1659\":1,\"1707\":1,\"1716\":1}}],[\"occurred\",{\"1\":{\"1445\":1,\"1446\":1}}],[\"o效率\",{\"1\":{\"1441\":1}}],[\"o的基础知识和一些常用的操作示例\",{\"1\":{\"1430\":1}}],[\"olleh\",{\"1\":{\"1373\":1,\"1376\":1}}],[\"oldmethod\",{\"1\":{\"1843\":1}}],[\"older\",{\"1\":{\"1447\":1}}],[\"old\",{\"1\":{\"211\":2,\"256\":1,\"261\":1,\"262\":1,\"895\":6,\"1302\":1,\"1422\":1,\"1880\":1,\"1956\":2}}],[\"odbc\",{\"1\":{\"1986\":2}}],[\"odd\",{\"1\":{\"1170\":1}}],[\"ode\",{\"1\":{\"923\":2}}],[\"otherwise\",{\"1\":{\"1162\":2}}],[\"otsu\",{\"1\":{\"811\":1}}],[\"overflow\",{\"1\":{\"2217\":1}}],[\"overfitting\",{\"1\":{\"533\":1}}],[\"over\",{\"1\":{\"2048\":1}}],[\"overriding\",{\"1\":{\"1517\":1,\"1709\":1}}],[\"override\",{\"1\":{\"1472\":1,\"1473\":1,\"1474\":1,\"1499\":1,\"1500\":2,\"1504\":1,\"1509\":1,\"1513\":2,\"1515\":1,\"1519\":2,\"1520\":1,\"1530\":2,\"1533\":2,\"1554\":1,\"1557\":2,\"1561\":1,\"1577\":2,\"1579\":1,\"1583\":2,\"1597\":1,\"1612\":1,\"1654\":4,\"1661\":4,\"1667\":1,\"1668\":1,\"1669\":1,\"1671\":1,\"1675\":1,\"1676\":2,\"1677\":4,\"1682\":1,\"1709\":4,\"1714\":1,\"1818\":2,\"1843\":2,\"1865\":2,\"1876\":1,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1,\"2022\":1,\"2031\":1,\"2033\":1}}],[\"overloading\",{\"0\":{\"1476\":1},\"1\":{\"1343\":1,\"1517\":1,\"1709\":1}}],[\"overleaf\",{\"1\":{\"1100\":2,\"1101\":2,\"1102\":2}}],[\"ogata著\",{\"1\":{\"1040\":1}}],[\"on\",{\"1\":{\"555\":1,\"557\":1,\"558\":1,\"588\":1,\"589\":1,\"813\":1,\"1201\":1,\"1206\":1,\"1210\":2,\"1753\":1,\"2022\":1,\"2027\":1,\"2028\":1}}],[\"one\",{\"1\":{\"608\":1,\"1402\":1,\"1728\":1,\"1740\":1,\"2000\":1}}],[\"onehotencoder\",{\"1\":{\"608\":2}}],[\"oneway\",{\"1\":{\"483\":2}}],[\"onesarray\",{\"1\":{\"1156\":1}}],[\"ones\",{\"1\":{\"398\":1,\"399\":1,\"457\":2,\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"738\":4,\"825\":1,\"958\":1,\"959\":1,\"965\":1,\"1131\":1,\"1156\":1}}],[\"obj\",{\"1\":{\"1183\":6,\"1317\":1,\"1638\":2,\"1639\":1,\"1642\":2,\"1645\":1,\"1648\":1,\"1651\":5,\"1668\":8,\"1827\":2,\"1828\":2,\"1829\":3,\"1830\":2,\"1840\":1,\"1863\":2}}],[\"objectoutput\",{\"1\":{\"1865\":1}}],[\"objectoutputstream\",{\"1\":{\"1863\":3,\"1875\":1,\"1876\":3,\"2039\":1}}],[\"objectinput\",{\"1\":{\"1865\":1}}],[\"objectinputstream\",{\"1\":{\"1863\":3,\"1875\":1,\"1876\":3,\"2039\":1}}],[\"objective\",{\"0\":{\"710\":1},\"1\":{\"428\":6,\"429\":1,\"434\":6,\"435\":1,\"715\":1,\"839\":1}}],[\"objects\",{\"1\":{\"1668\":1,\"1669\":1,\"1676\":4,\"1677\":4}}],[\"object类\",{\"0\":{\"1664\":1}}],[\"objectdetection\",{\"1\":{\"805\":2}}],[\"object\",{\"0\":{\"1469\":1},\"1\":{\"242\":1,\"1384\":1,\"1630\":1,\"1639\":1,\"1642\":1,\"1645\":1,\"1648\":1,\"1651\":1,\"1664\":6,\"1665\":5,\"1668\":3,\"1671\":2,\"1674\":1,\"1676\":1,\"1677\":1,\"1678\":1,\"1707\":1,\"1710\":1,\"1745\":3,\"1773\":1,\"1783\":2,\"1798\":4,\"1839\":1,\"1840\":1,\"1856\":2,\"1863\":2,\"1896\":1,\"2037\":2}}],[\"observed=event\",{\"1\":{\"489\":1}}],[\"ok<agrow>\",{\"1\":{\"398\":1,\"399\":1}}],[\"o操作和类可以帮助你高效地处理文件和数据流\",{\"1\":{\"1441\":1}}],[\"o操作\",{\"1\":{\"259\":1,\"1440\":1,\"1441\":1}}],[\"outofmemoryerror\",{\"1\":{\"1895\":1}}],[\"out来读取用户输入并显示输出\",{\"1\":{\"1427\":1}}],[\"out来输出信息\",{\"1\":{\"1420\":1}}],[\"out\",{\"1\":{\"1110\":1,\"1274\":1,\"1292\":4,\"1301\":1,\"1302\":1,\"1321\":3,\"1322\":4,\"1324\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1331\":1,\"1335\":1,\"1336\":1,\"1339\":1,\"1356\":1,\"1357\":1,\"1360\":2,\"1370\":5,\"1373\":4,\"1376\":4,\"1384\":6,\"1392\":4,\"1393\":3,\"1394\":5,\"1395\":1,\"1396\":2,\"1401\":3,\"1402\":3,\"1404\":4,\"1405\":2,\"1406\":2,\"1407\":2,\"1416\":2,\"1418\":2,\"1422\":6,\"1424\":1,\"1425\":3,\"1427\":7,\"1428\":3,\"1429\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":6,\"1440\":1,\"1445\":1,\"1446\":3,\"1447\":1,\"1448\":1,\"1468\":2,\"1470\":1,\"1472\":2,\"1473\":1,\"1474\":1,\"1476\":2,\"1497\":1,\"1499\":1,\"1500\":2,\"1501\":1,\"1502\":1,\"1503\":1,\"1504\":2,\"1506\":3,\"1509\":4,\"1511\":2,\"1512\":2,\"1513\":2,\"1514\":2,\"1516\":2,\"1520\":2,\"1523\":3,\"1528\":3,\"1530\":3,\"1533\":2,\"1536\":2,\"1538\":1,\"1545\":2,\"1546\":2,\"1547\":2,\"1548\":1,\"1554\":2,\"1557\":2,\"1561\":2,\"1568\":4,\"1577\":2,\"1579\":2,\"1581\":1,\"1583\":2,\"1588\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1606\":4,\"1608\":1,\"1610\":2,\"1612\":1,\"1619\":1,\"1624\":1,\"1651\":3,\"1654\":1,\"1655\":4,\"1661\":12,\"1667\":1,\"1670\":1,\"1671\":1,\"1677\":6,\"1682\":2,\"1688\":1,\"1690\":2,\"1692\":1,\"1705\":6,\"1709\":7,\"1714\":4,\"1748\":7,\"1751\":7,\"1754\":2,\"1756\":1,\"1762\":4,\"1764\":3,\"1766\":3,\"1768\":3,\"1770\":1,\"1774\":6,\"1777\":5,\"1786\":4,\"1788\":2,\"1790\":4,\"1792\":3,\"1801\":4,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1814\":2,\"1815\":1,\"1818\":1,\"1820\":1,\"1823\":4,\"1831\":7,\"1836\":1,\"1838\":1,\"1839\":1,\"1846\":1,\"1863\":4,\"1865\":3,\"1870\":1,\"1873\":1,\"1876\":1,\"1883\":1,\"1890\":2,\"1891\":1,\"1898\":2,\"1901\":3,\"1903\":2,\"1906\":1,\"1908\":1,\"1909\":1,\"1921\":1,\"1933\":5,\"1935\":3,\"1936\":5,\"1938\":2,\"1939\":3,\"1941\":6,\"1942\":1,\"1949\":1,\"1950\":2,\"1952\":1,\"1954\":1,\"1956\":3,\"1961\":1,\"1962\":1,\"1963\":3,\"1966\":1,\"1970\":1,\"1979\":1,\"1981\":1,\"1982\":1,\"1984\":1,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":2,\"1994\":3,\"1995\":2,\"2031\":1,\"2033\":1,\"2037\":1,\"2047\":3,\"2048\":1}}],[\"output2\",{\"1\":{\"1172\":1}}],[\"output1\",{\"1\":{\"1172\":1}}],[\"outputstream\",{\"0\":{\"1871\":1},\"1\":{\"1868\":1,\"1869\":1,\"1871\":1,\"1892\":1,\"1935\":1,\"2039\":1}}],[\"outputs\",{\"1\":{\"446\":1,\"447\":1,\"449\":2}}],[\"output\",{\"1\":{\"259\":1,\"439\":1,\"446\":1,\"805\":1,\"947\":1,\"948\":1,\"1195\":3,\"1196\":1,\"1868\":1,\"1871\":1,\"1874\":1,\"1880\":1,\"1943\":1}}],[\"outerstaticfield\",{\"1\":{\"1591\":2}}],[\"outerfield\",{\"1\":{\"1588\":2}}],[\"outerclass\",{\"1\":{\"1588\":4,\"1589\":1,\"1591\":3,\"1592\":2,\"1594\":3}}],[\"outer\",{\"1\":{\"214\":2,\"1588\":6,\"1589\":1,\"1591\":4,\"1594\":2}}],[\"op\",{\"1\":{\"1887\":3}}],[\"operating\",{\"1\":{\"2188\":1}}],[\"operations\",{\"1\":{\"2000\":1}}],[\"operation\",{\"1\":{\"1686\":1}}],[\"operator\",{\"0\":{\"1316\":1}}],[\"operators\",{\"0\":{\"1311\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1315\":1}}],[\"openconnection\",{\"1\":{\"1942\":1}}],[\"opencv\",{\"1\":{\"794\":1,\"800\":2}}],[\"open\",{\"1\":{\"251\":2,\"252\":2,\"253\":2,\"254\":1,\"257\":2,\"258\":2,\"259\":2,\"801\":1,\"821\":1,\"822\":1,\"1887\":2,\"1890\":1,\"1891\":1}}],[\"optional类和默认方法等功能\",{\"1\":{\"1998\":1}}],[\"optional<string>\",{\"1\":{\"1995\":1}}],[\"optional\",{\"0\":{\"1995\":1},\"1\":{\"1995\":6}}],[\"options\",{\"1\":{\"1107\":2,\"1108\":1}}],[\"optimization\",{\"1\":{\"410\":1,\"420\":2,\"428\":1,\"596\":1,\"705\":1}}],[\"optimize库来求解这个问题\",{\"1\":{\"722\":1}}],[\"optimizer=\",{\"1\":{\"608\":1,\"610\":1,\"660\":1}}],[\"optimize\",{\"1\":{\"384\":1,\"460\":2,\"722\":2,\"943\":1}}],[\"optimal\",{\"1\":{\"384\":2}}],[\"oppo\",{\"1\":{\"69\":1,\"77\":1}}],[\"os等\",{\"1\":{\"2190\":1}}],[\"os\",{\"1\":{\"232\":5,\"255\":3,\"256\":5,\"2188\":1},\"2\":{\"2205\":1}}],[\"o\",{\"0\":{\"1440\":1},\"1\":{\"159\":1,\"188\":1,\"189\":1,\"190\":1,\"259\":2,\"397\":1,\"406\":2,\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"957\":1,\"1131\":1,\"1370\":3,\"1420\":1,\"1430\":1,\"1630\":1,\"1676\":5,\"1677\":5,\"1723\":2,\"1745\":3,\"1773\":1,\"1783\":2,\"1785\":1,\"1789\":1,\"1800\":1,\"1804\":1,\"1881\":1,\"1943\":2,\"1964\":1,\"2035\":1,\"2039\":3,\"2162\":8,\"2163\":5}}],[\"orelse\",{\"1\":{\"1995\":1}}],[\"orange\",{\"1\":{\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1766\":1,\"1768\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":2,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1823\":1}}],[\"oracle\",{\"1\":{\"1258\":2,\"1974\":1}}],[\"oriented\",{\"1\":{\"1707\":1}}],[\"origin\",{\"0\":{\"1246\":1,\"1247\":1},\"2\":{\"1249\":1}}],[\"original\",{\"1\":{\"165\":2,\"216\":3,\"623\":1,\"643\":1,\"948\":4,\"1362\":4,\"1655\":1}}],[\"orm\",{\"1\":{\"1681\":1}}],[\"ordinal\",{\"1\":{\"1609\":1,\"1610\":1}}],[\"ord=np\",{\"1\":{\"895\":1}}],[\"order\",{\"1\":{\"754\":1}}],[\"order=\",{\"1\":{\"488\":1}}],[\"org\",{\"1\":{\"379\":1,\"1079\":1,\"1082\":1,\"1100\":3,\"1101\":2,\"1853\":2,\"1855\":1,\"1857\":2,\"1858\":2,\"1922\":2,\"1926\":2}}],[\"or\",{\"1\":{\"133\":1,\"139\":1,\"195\":1,\"641\":1,\"642\":1,\"678\":1,\"715\":1,\"1152\":3,\"1314\":1,\"1315\":1,\"1447\":1}}],[\"ofnullable\",{\"1\":{\"1995\":1}}],[\"ofpattern\",{\"1\":{\"1407\":1,\"2047\":1}}],[\"ofweeks\",{\"1\":{\"1406\":1}}],[\"ofhours\",{\"1\":{\"1406\":1}}],[\"offer\",{\"1\":{\"1759\":1,\"1762\":3,\"1764\":3,\"1766\":3}}],[\"offset\",{\"1\":{\"856\":2}}],[\"offsets\",{\"1\":{\"624\":1}}],[\"offspring\",{\"1\":{\"434\":16}}],[\"off\",{\"1\":{\"555\":1,\"557\":1,\"558\":1,\"1210\":2}}],[\"of\",{\"0\":{\"74\":1},\"1\":{\"540\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"590\":1,\"594\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"610\":1,\"699\":2,\"921\":2,\"1040\":5,\"1181\":1,\"1370\":2,\"1392\":3,\"1394\":1,\"1396\":2,\"1404\":1,\"1405\":1,\"1538\":1,\"1606\":2,\"1762\":2,\"1766\":1,\"1774\":1,\"1792\":1,\"1994\":2,\"2000\":2,\"2001\":4}}],[\"摄影\",{\"2\":{\"71\":1,\"79\":1}}],[\"0<\",{\"1\":{\"1851\":2,\"1858\":1}}],[\"08\",{\"1\":{\"1407\":1}}],[\"0变1\",{\"1\":{\"1315\":1}}],[\"0到120分钟\",{\"1\":{\"856\":1}}],[\"04\",{\"1\":{\"826\":1}}],[\"0表示不生产\",{\"1\":{\"731\":3}}],[\"0来定义曲面\",{\"1\":{\"676\":1}}],[\"032\",{\"1\":{\"378\":1}}],[\"031\",{\"1\":{\"378\":1}}],[\"030\",{\"1\":{\"378\":1}}],[\"029\",{\"1\":{\"378\":1}}],[\"028\",{\"1\":{\"378\":1}}],[\"027\",{\"1\":{\"378\":1}}],[\"026\",{\"1\":{\"378\":1}}],[\"025\",{\"1\":{\"378\":1}}],[\"024\",{\"1\":{\"378\":1}}],[\"023\",{\"1\":{\"378\":1}}],[\"022\",{\"1\":{\"378\":1}}],[\"021\",{\"1\":{\"378\":1}}],[\"020\",{\"1\":{\"378\":1}}],[\"01\",{\"1\":{\"814\":1,\"826\":1,\"852\":1,\"889\":1,\"903\":1,\"1206\":1}}],[\"019\",{\"1\":{\"378\":1}}],[\"018\",{\"1\":{\"378\":1}}],[\"017\",{\"1\":{\"378\":1}}],[\"016\",{\"1\":{\"378\":1}}],[\"015\",{\"1\":{\"378\":1}}],[\"014\",{\"1\":{\"378\":1}}],[\"013\",{\"1\":{\"378\":1}}],[\"012\",{\"1\":{\"378\":1}}],[\"011\",{\"1\":{\"378\":1}}],[\"010\",{\"1\":{\"378\":1}}],[\"00\",{\"1\":{\"855\":1,\"856\":2,\"1401\":8,\"1416\":1}}],[\"00元\",{\"1\":{\"727\":1,\"733\":1}}],[\"009\",{\"1\":{\"378\":1}}],[\"008\",{\"1\":{\"378\":1}}],[\"007\",{\"1\":{\"378\":1}}],[\"006\",{\"1\":{\"378\":1}}],[\"005\",{\"1\":{\"378\":1}}],[\"004\",{\"1\":{\"378\":1}}],[\"003\",{\"1\":{\"378\":1}}],[\"002\",{\"1\":{\"378\":1}}],[\"001等\",{\"1\":{\"1292\":1}}],[\"001\",{\"1\":{\"378\":1,\"588\":1}}],[\"0j\",{\"1\":{\"139\":1}}],[\"0\",{\"0\":{\"729\":1,\"731\":1},\"1\":{\"139\":5,\"142\":2,\"143\":1,\"151\":2,\"186\":1,\"201\":2,\"203\":1,\"207\":1,\"213\":1,\"219\":4,\"224\":1,\"229\":3,\"245\":1,\"247\":4,\"384\":4,\"390\":5,\"394\":22,\"396\":1,\"398\":28,\"399\":28,\"408\":1,\"409\":9,\"410\":6,\"423\":4,\"424\":2,\"428\":2,\"434\":10,\"446\":6,\"447\":2,\"448\":2,\"449\":10,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"480\":2,\"486\":3,\"489\":3,\"491\":2,\"492\":1,\"494\":1,\"495\":1,\"498\":1,\"500\":1,\"517\":2,\"543\":2,\"549\":2,\"550\":1,\"551\":1,\"552\":1,\"555\":3,\"556\":3,\"557\":4,\"558\":3,\"569\":1,\"589\":2,\"590\":1,\"610\":2,\"623\":1,\"624\":1,\"625\":1,\"634\":6,\"641\":5,\"642\":3,\"649\":6,\"659\":6,\"661\":1,\"680\":6,\"688\":2,\"700\":2,\"707\":1,\"722\":3,\"726\":2,\"728\":1,\"729\":1,\"731\":2,\"732\":4,\"733\":1,\"737\":1,\"738\":5,\"805\":1,\"814\":2,\"815\":1,\"819\":1,\"825\":1,\"826\":4,\"827\":2,\"852\":9,\"856\":4,\"866\":1,\"884\":2,\"888\":2,\"889\":7,\"894\":2,\"895\":15,\"900\":1,\"901\":1,\"903\":10,\"908\":2,\"909\":1,\"911\":13,\"912\":2,\"920\":1,\"921\":1,\"923\":2,\"927\":9,\"928\":4,\"935\":3,\"936\":3,\"937\":3,\"941\":2,\"942\":3,\"943\":3,\"944\":4,\"948\":2,\"954\":5,\"958\":13,\"959\":20,\"960\":5,\"964\":13,\"965\":14,\"1134\":1,\"1156\":1,\"1159\":1,\"1160\":1,\"1161\":3,\"1163\":2,\"1170\":1,\"1178\":1,\"1201\":2,\"1206\":2,\"1207\":2,\"1209\":2,\"1210\":2,\"1218\":2,\"1226\":2,\"1227\":1,\"1230\":3,\"1288\":1,\"1292\":2,\"1302\":1,\"1308\":1,\"1321\":2,\"1324\":1,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1353\":1,\"1356\":1,\"1359\":2,\"1360\":2,\"1362\":2,\"1365\":1,\"1394\":3,\"1395\":4,\"1412\":1,\"1428\":1,\"1445\":1,\"1548\":1,\"1568\":1,\"1609\":1,\"1673\":1,\"1691\":1,\"1713\":1,\"1722\":2,\"1744\":1,\"1818\":2,\"1820\":3,\"1856\":1,\"1858\":1,\"1891\":1,\"1898\":1,\"1901\":1,\"1903\":1,\"1921\":1,\"1925\":1,\"1930\":1,\"1938\":1,\"1939\":1,\"1947\":3,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1,\"1968\":2,\"1969\":1,\"1992\":1,\"2000\":2,\"2001\":2}}],[\"07\",{\"1\":{\"69\":1,\"77\":1,\"336\":1}}],[\"0️⃣\",{\"1\":{\"12\":2}}],[\"在矩阵运算中\",{\"1\":{\"2163\":1}}],[\"在迭代中\",{\"1\":{\"2159\":1}}],[\"在介绍时间复杂度和空间复杂度之前\",{\"1\":{\"2158\":1}}],[\"在算法中\",{\"1\":{\"2158\":1}}],[\"在算法设计中\",{\"1\":{\"2157\":1}}],[\"在能够解决问题的前提下\",{\"1\":{\"2157\":1}}],[\"在类加载时就创建实例\",{\"1\":{\"2009\":1}}],[\"在类加载时执行\",{\"1\":{\"1549\":1,\"1550\":1}}],[\"在方法内部使用\",{\"1\":{\"1968\":1}}],[\"在方法声明中使用\",{\"1\":{\"1968\":1}}],[\"在匹配时考虑\",{\"1\":{\"1953\":1}}],[\"在反序列化时\",{\"1\":{\"1866\":1}}],[\"在序列化一个对象时\",{\"1\":{\"1866\":1}}],[\"在序列化过程中\",{\"1\":{\"1864\":1}}],[\"在分布式系统中\",{\"1\":{\"1861\":1}}],[\"在单元测试中\",{\"1\":{\"1858\":1}}],[\"在单线程环境中\",{\"1\":{\"1779\":1}}],[\"在单线程环境下\",{\"1\":{\"1375\":1}}],[\"在所有测试方法执行后运行\",{\"1\":{\"1855\":1}}],[\"在所有测试方法执行前运行\",{\"1\":{\"1855\":1}}],[\"在所有可能的生成树中\",{\"1\":{\"962\":1}}],[\"在junit\",{\"1\":{\"1857\":1}}],[\"在junit中\",{\"1\":{\"1852\":1}}],[\"在java\",{\"1\":{\"1692\":1}}],[\"在java编程中\",{\"1\":{\"1319\":1}}],[\"在java中\",{\"1\":{\"1291\":1,\"1292\":1,\"1293\":1,\"1306\":1,\"1333\":1,\"1335\":1,\"1367\":1,\"1380\":1,\"1399\":1,\"1409\":1,\"1420\":1,\"1442\":1,\"1535\":1,\"1544\":1,\"1586\":1,\"1999\":1}}],[\"在字节码中保留\",{\"1\":{\"1845\":1}}],[\"在某些实现中\",{\"1\":{\"1797\":1}}],[\"在需要去除重复数据的场景下\",{\"1\":{\"1793\":1}}],[\"在需要对象而不是基本数据类型的地方\",{\"1\":{\"1699\":1}}],[\"在另一端删除元素的操作\",{\"1\":{\"1757\":1}}],[\"在遍历期间修改列表\",{\"1\":{\"1754\":1}}],[\"在中间插入或删除元素时\",{\"1\":{\"1747\":1}}],[\"在指定的索引位置插入指定的元素\",{\"1\":{\"1745\":1}}],[\"在指定位置绘制一个瓷砖\",{\"1\":{\"688\":1}}],[\"在指定位置插入元素\",{\"1\":{\"145\":1}}],[\"在列表的中间位置插入或删除元素时\",{\"1\":{\"1750\":1}}],[\"在列表的末尾添加指定的元素\",{\"1\":{\"1745\":1}}],[\"在列表末尾添加元素\",{\"1\":{\"145\":1}}],[\"在排序列表中二分查找元素\",{\"1\":{\"1741\":1}}],[\"在同一个类中\",{\"1\":{\"1709\":1}}],[\"在同一源文件中\",{\"1\":{\"1477\":1}}],[\"在持久化框架\",{\"1\":{\"1681\":1}}],[\"在垃圾收集器回收对象之前调用\",{\"1\":{\"1672\":1}}],[\"在集合\",{\"1\":{\"1668\":1}}],[\"在集合中存储多态对象时\",{\"1\":{\"1542\":1}}],[\"在打印对象时自动调用\",{\"1\":{\"1667\":1}}],[\"在使用时\",{\"1\":{\"1682\":1}}],[\"在使用反射时\",{\"1\":{\"1652\":1}}],[\"在使用集合\",{\"1\":{\"1386\":1}}],[\"在编译和运行\",{\"1\":{\"1627\":1}}],[\"在编程过程中\",{\"1\":{\"244\":1}}],[\"在与数据库交互时\",{\"1\":{\"1614\":1}}],[\"在实际项目中\",{\"1\":{\"1928\":1}}],[\"在实际开发中\",{\"1\":{\"1678\":1,\"2019\":1}}],[\"在实际编程中\",{\"1\":{\"1571\":1}}],[\"在实际应用中\",{\"1\":{\"564\":1,\"701\":1,\"843\":1,\"1755\":1,\"1957\":1}}],[\"在对象创建时自动执行\",{\"1\":{\"1550\":1}}],[\"在面向对象编程中\",{\"1\":{\"1541\":1}}],[\"在进行向下转型之前\",{\"1\":{\"1538\":1}}],[\"在进行综合评价时\",{\"1\":{\"759\":1}}],[\"在将animal向下转型为dog类型后\",{\"1\":{\"1536\":1}}],[\"在上面的示例中\",{\"1\":{\"1820\":1}}],[\"在上面的例子中\",{\"1\":{\"1536\":1}}],[\"在上述代码中\",{\"1\":{\"1520\":1,\"1523\":1}}],[\"在处理异常时\",{\"1\":{\"1452\":1,\"1910\":1}}],[\"在处理用户输入时\",{\"1\":{\"1428\":1}}],[\"在文本中查找和替换符合某些模式的内容\",{\"1\":{\"1417\":1}}],[\"在文本中添加注脚\",{\"1\":{\"31\":1}}],[\"在涉及大量字符串修改的情况下\",{\"1\":{\"1377\":1}}],[\"在循环开始前执行一次\",{\"1\":{\"1324\":1}}],[\"在声明变量时\",{\"1\":{\"1304\":1}}],[\"在强制类型转换时\",{\"1\":{\"1299\":1}}],[\"在运行时保留\",{\"1\":{\"1845\":1}}],[\"在运行时\",{\"1\":{\"1259\":1,\"1534\":1,\"1840\":1}}],[\"在运行此代码前需要安装scipy库\",{\"1\":{\"948\":1}}],[\"在运行此代码前需要安装opencv库\",{\"1\":{\"947\":1}}],[\"在基本的\",{\"1\":{\"1259\":1}}],[\"在函数文件的开头\",{\"1\":{\"1179\":1}}],[\"在函数外部使用\",{\"1\":{\"1174\":1}}],[\"在函数中使用lambda\",{\"1\":{\"212\":1}}],[\"在帮助条目中搜索关键字\",{\"1\":{\"1125\":1}}],[\"在更新交叉引用\",{\"1\":{\"1110\":1}}],[\"在其后的该行命令都会视为注释\",{\"1\":{\"1109\":1}}],[\"在你生成文档时不会直接打印\",{\"1\":{\"1109\":1}}],[\"在导言区最常见的是宏包的加载工作\",{\"1\":{\"1107\":1}}],[\"在不低于学校有关规定的基础上\",{\"1\":{\"1039\":1}}],[\"在不确定需求的情况下\",{\"1\":{\"712\":1}}],[\"在新生入学后的1个月内完成\",{\"1\":{\"1034\":1}}],[\"在新产品开发中\",{\"1\":{\"761\":1}}],[\"在课程总学分中\",{\"1\":{\"1030\":1}}],[\"在有向图中\",{\"1\":{\"953\":1}}],[\"在每个测试方法执行后运行\",{\"1\":{\"1855\":1}}],[\"在每个测试方法执行前运行\",{\"1\":{\"1855\":1}}],[\"在每个区间内使用三次多项式\",{\"1\":{\"933\":1}}],[\"在每次创建对象时执行\",{\"1\":{\"1549\":1}}],[\"在每次循环前检查\",{\"1\":{\"1326\":1}}],[\"在每次循环迭代结束后执行\",{\"1\":{\"1324\":1}}],[\"在每次循环迭代前检查\",{\"1\":{\"1324\":1}}],[\"在每两个已知点之间进行插值\",{\"1\":{\"933\":1}}],[\"在线性插值中\",{\"1\":{\"933\":1}}],[\"在线图像编辑工具\",{\"1\":{\"796\":1}}],[\"在区间\",{\"1\":{\"928\":1}}],[\"在边界上\",{\"1\":{\"884\":1}}],[\"在复杂系统中\",{\"1\":{\"883\":1}}],[\"在时间上的变化\",{\"1\":{\"851\":1}}],[\"在时间序列预测中非常强大\",{\"1\":{\"663\":1}}],[\"在工程中\",{\"1\":{\"849\":1}}],[\"在工业监控\",{\"1\":{\"542\":1}}],[\"在多线程环境下不安全\",{\"1\":{\"2010\":1}}],[\"在多目标规划中\",{\"1\":{\"840\":1}}],[\"在多变量系统中\",{\"1\":{\"638\":1}}],[\"在现实世界中\",{\"1\":{\"839\":1}}],[\"在数据添加和删除操作上更加便捷\",{\"1\":{\"2152\":1}}],[\"在数据拟合中\",{\"1\":{\"837\":1}}],[\"在数学和物理学中有广泛应用\",{\"1\":{\"891\":1}}],[\"在数学建模中\",{\"1\":{\"705\":1,\"868\":1}}],[\"在图像处理中\",{\"1\":{\"947\":1}}],[\"在图像处理中的主要功能和一些基本操作示例\",{\"1\":{\"806\":1}}],[\"在图像处理中的作用非常重要\",{\"1\":{\"803\":1}}],[\"在图像分类任务中\",{\"1\":{\"528\":1}}],[\"在政策制定中\",{\"1\":{\"761\":1}}],[\"在项目投资中\",{\"1\":{\"761\":1}}],[\"在综合评价中\",{\"1\":{\"760\":1,\"765\":1}}],[\"在0\",{\"1\":{\"734\":1}}],[\"在满足需求的情况下\",{\"1\":{\"693\":1}}],[\"在给定的区域内铺设瓷砖\",{\"1\":{\"688\":1}}],[\"在构建过程中\",{\"1\":{\"684\":1}}],[\"在生成制造工艺中的工具路径\",{\"1\":{\"683\":1}}],[\"在管道设计中\",{\"1\":{\"683\":1}}],[\"在计算机图形学\",{\"1\":{\"670\":1}}],[\"在第\",{\"1\":{\"624\":1}}],[\"在这个例子中\",{\"1\":{\"1175\":1,\"1309\":1,\"1530\":1,\"1533\":1,\"1541\":1,\"1542\":1,\"1545\":1,\"1546\":1,\"1547\":1,\"1548\":1,\"1554\":1,\"1557\":1,\"1561\":1,\"1577\":1,\"1579\":1,\"1588\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1693\":1,\"1853\":1}}],[\"在这个步骤中\",{\"1\":{\"624\":1}}],[\"在这里编写代码\",{\"1\":{\"1172\":1}}],[\"在这种情况下\",{\"1\":{\"723\":1}}],[\"在这种叫作监督学习\",{\"1\":{\"368\":1}}],[\"在一个生产计划问题中\",{\"1\":{\"840\":1}}],[\"在一个包含三个特征\",{\"1\":{\"614\":1}}],[\"在一些实际问题中\",{\"1\":{\"723\":1}}],[\"在一定时间内通常能找到较好的解\",{\"1\":{\"410\":1}}],[\"在保持类别可分性的同时减少特征的维数\",{\"1\":{\"572\":1}}],[\"在经济学研究中\",{\"1\":{\"562\":1}}],[\"在r型聚类中\",{\"1\":{\"562\":1}}],[\"在医学研究中\",{\"1\":{\"561\":1}}],[\"在市场细分中\",{\"1\":{\"561\":1}}],[\"在市场营销中\",{\"1\":{\"516\":1,\"542\":1}}],[\"在s型聚类中\",{\"1\":{\"561\":1}}],[\"在matlab中\",{\"1\":{\"554\":1,\"556\":1,\"1153\":1}}],[\"在房价预测中\",{\"1\":{\"528\":1}}],[\"在训练过程中提供给模型\",{\"1\":{\"528\":1}}],[\"在已知类别先验分布或可以推测先验分布的情况下应用广泛\",{\"1\":{\"522\":1}}],[\"在特征维度较高\",{\"1\":{\"520\":1}}],[\"在自然语言处理中\",{\"1\":{\"516\":1,\"542\":1}}],[\"在心理学研究中\",{\"1\":{\"562\":1}}],[\"在心理学\",{\"1\":{\"467\":1}}],[\"在当前迭代位置添加一个元素\",{\"1\":{\"1822\":1}}],[\"在当前解的邻域内随机生成新解\",{\"1\":{\"429\":1}}],[\"在当前解的邻域内生成新解\",{\"1\":{\"428\":1}}],[\"在当前解的邻域中随机选择一个新解\",{\"1\":{\"422\":1}}],[\"在当前温度\",{\"1\":{\"423\":1}}],[\"在制造过程中优化资源的分配和使用\",{\"1\":{\"407\":1}}],[\"在无监督学习中\",{\"1\":{\"369\":1}}],[\"在调试时\",{\"1\":{\"248\":1}}],[\"在关键位置插入print语句\",{\"1\":{\"246\":1}}],[\"在python中实现一个简单的铺瓷砖模型\",{\"1\":{\"687\":1}}],[\"在python中\",{\"1\":{\"178\":1,\"179\":1,\"184\":1,\"192\":1,\"200\":1,\"241\":1,\"249\":1,\"251\":1,\"259\":1,\"477\":1,\"548\":1}}],[\"在转换时\",{\"1\":{\"139\":1}}],[\"在比较时\",{\"1\":{\"139\":1}}],[\"在\",{\"1\":{\"131\":1,\"135\":1,\"139\":1,\"392\":1,\"619\":1,\"726\":1,\"732\":1,\"890\":1,\"904\":1,\"1128\":1,\"1145\":1,\"1158\":1,\"1164\":1,\"1171\":1,\"1182\":1,\"1185\":1,\"1187\":1,\"1189\":1,\"1199\":1,\"1226\":1,\"1259\":2,\"1300\":1,\"1471\":1,\"1472\":1,\"1496\":1,\"1507\":1,\"1517\":1,\"1551\":1,\"1571\":1,\"1603\":1,\"1616\":1,\"1618\":1,\"1681\":2,\"1707\":1,\"1709\":1,\"1710\":1,\"1743\":1,\"1756\":1,\"1770\":1,\"1780\":1,\"1795\":1,\"1811\":1,\"1824\":1,\"1869\":1,\"1872\":1,\"1876\":1,\"1898\":1,\"1953\":1,\"1985\":1}}],[\"在北方\",{\"0\":{\"69\":1}}],[\"一致性\",{\"1\":{\"1676\":2}}],[\"一致性和非空性等原则\",{\"1\":{\"1668\":1}}],[\"一旦创建就无法更改\",{\"1\":{\"1369\":1}}],[\"一旦定义就不能更改\",{\"1\":{\"1349\":1}}],[\"一串字符用双引号包围\",{\"1\":{\"1292\":1}}],[\"一条狗是一个对象\",{\"1\":{\"1273\":1}}],[\"一般信息\",{\"1\":{\"1917\":1}}],[\"一般应在第三学期结束前完成论文选题和学位论文开题论证\",{\"1\":{\"1038\":1}}],[\"一般应补修不少于2\",{\"1\":{\"1031\":1}}],[\"一般形式为\",{\"1\":{\"939\":1}}],[\"一般形式如下\",{\"1\":{\"863\":1,\"880\":1}}],[\"一\",{\"0\":{\"1023\":1,\"1024\":1,\"1030\":1,\"1034\":1,\"1058\":1,\"1696\":1,\"1709\":1,\"1744\":1,\"1757\":1,\"1771\":1,\"1781\":1,\"1796\":1,\"1812\":1,\"1868\":1,\"1881\":1,\"1895\":1,\"1913\":1,\"1930\":1,\"1946\":1,\"1959\":1,\"1974\":1,\"2019\":1,\"2036\":1},\"1\":{\"1027\":1}}],[\"一些想法\",{\"0\":{\"995\":1}}],[\"一千年前\",{\"0\":{\"990\":1}}],[\"一维数组\",{\"1\":{\"1154\":1}}],[\"一维波动方程的形式为\",{\"1\":{\"906\":1}}],[\"一维热传导方程的形式为\",{\"1\":{\"898\":1}}],[\"一维热传导方程\",{\"0\":{\"887\":1},\"1\":{\"884\":1}}],[\"一个进程可以包含多个线程\",{\"1\":{\"1959\":1}}],[\"一个日志门面\",{\"1\":{\"1914\":1}}],[\"一个功能强大的日志记录框架\",{\"1\":{\"1914\":1}}],[\"一个线程处理一个流\",{\"1\":{\"1892\":1}}],[\"一个延迟获取元素的阻塞队列\",{\"1\":{\"1767\":1}}],[\"一个基于python的图像编辑器\",{\"0\":{\"2130\":1}}],[\"一个基于优先级的阻塞队列\",{\"1\":{\"1767\":1}}],[\"一个基于java的图像处理和分析工具\",{\"1\":{\"798\":1}}],[\"一个可选边界的阻塞队列\",{\"1\":{\"1767\":1}}],[\"一个类只能继承一个抽象类\",{\"1\":{\"1715\":1}}],[\"一个类只能继承一个直接父类\",{\"1\":{\"1709\":1}}],[\"一个类可以继承另一个类的属性和方法\",{\"1\":{\"1709\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"1558\":1,\"1584\":1,\"1709\":1,\"1715\":1}}],[\"一个类可以有很多方法\",{\"1\":{\"1273\":1}}],[\"一个参数\",{\"1\":{\"1685\":1}}],[\"一个包\",{\"1\":{\"1625\":1}}],[\"一个包含图中所有顶点的子图\",{\"1\":{\"962\":1}}],[\"一个接口可以继承多个接口\",{\"1\":{\"1582\":1}}],[\"一个字段的值不能被修改\",{\"1\":{\"1502\":1}}],[\"一个方法不能被重写\",{\"1\":{\"1502\":1}}],[\"一个源文件可以有多个非\",{\"1\":{\"1477\":1}}],[\"一个源文件中只能有一个\",{\"1\":{\"1477\":1}}],[\"一个引用变量可以用来引用任何与之兼容的类型\",{\"1\":{\"1291\":1}}],[\"一个\",{\"1\":{\"1273\":1,\"1901\":1}}],[\"一个简单的反应扩散方程的形式如下\",{\"1\":{\"926\":1}}],[\"一个实例\",{\"0\":{\"854\":1}}],[\"一个解被称为pareto最优解\",{\"1\":{\"840\":1}}],[\"一个高级建模语言\",{\"1\":{\"838\":1}}],[\"一个非线性规划问题通常可以表示为\",{\"1\":{\"832\":1}}],[\"一个深度学习框架\",{\"1\":{\"797\":1}}],[\"一个在线图像编辑平台\",{\"1\":{\"796\":1}}],[\"一个强大的开源计算机视觉库\",{\"1\":{\"794\":1}}],[\"一个经典的非合作博弈\",{\"1\":{\"748\":1}}],[\"一个玩家的收益完全等于其他玩家的损失\",{\"1\":{\"746\":1}}],[\"一个投资者有多个投资选项\",{\"1\":{\"717\":1}}],[\"一个公司有多个仓库和多个客户\",{\"1\":{\"717\":1}}],[\"一个有界的阻塞队列\",{\"1\":{\"1767\":1}}],[\"一个有向图\",{\"1\":{\"396\":1}}],[\"一个有\",{\"1\":{\"391\":1}}],[\"一家工厂生产两种产品\",{\"1\":{\"717\":1,\"720\":1}}],[\"一种基于优先级堆的队列\",{\"1\":{\"1760\":1}}],[\"一种文本模式\",{\"1\":{\"1410\":1}}],[\"一种在线图形设计工具\",{\"1\":{\"796\":1}}],[\"一种策略组合\",{\"1\":{\"748\":1}}],[\"一种常见的隐式曲面\",{\"1\":{\"676\":1}}],[\"一种快速且强大的非线性降维方法\",{\"1\":{\"614\":1}}],[\"一种非线性降维技术\",{\"1\":{\"614\":1}}],[\"一种非线性降维方法\",{\"1\":{\"541\":1}}],[\"一种线性降维方法\",{\"1\":{\"541\":1}}],[\"一组可能的解\",{\"1\":{\"432\":1}}],[\"一直游到海水变蓝\",{\"0\":{\"66\":1}}],[\"一级标题\",{\"1\":{\"17\":1}}],[\"d+\",{\"1\":{\"1416\":1,\"1949\":1,\"1956\":1}}],[\"dd\",{\"1\":{\"1407\":1,\"1921\":1,\"1925\":1,\"2047\":1}}],[\"ddof=1\",{\"1\":{\"480\":2}}],[\"durationperiodexample\",{\"1\":{\"1406\":1}}],[\"duration\",{\"1\":{\"1406\":8,\"2041\":1}}],[\"duration和period等\",{\"1\":{\"1403\":1}}],[\"dump\",{\"1\":{\"258\":1}}],[\"dlrow\",{\"1\":{\"1373\":1,\"1376\":1}}],[\"dnf\",{\"1\":{\"1102\":1}}],[\"dy\",{\"1\":{\"895\":1}}],[\"dynamic\",{\"0\":{\"709\":1},\"1\":{\"410\":1,\"415\":1}}],[\"dsolve\",{\"1\":{\"923\":2}}],[\"dsdt\",{\"1\":{\"852\":2,\"853\":1}}],[\"ds\",{\"1\":{\"851\":1}}],[\"dst\",{\"1\":{\"826\":3}}],[\"dct\",{\"1\":{\"786\":1}}],[\"driving\",{\"1\":{\"1474\":1,\"1497\":1,\"1499\":1,\"1500\":1}}],[\"driver\",{\"1\":{\"1975\":1,\"1978\":1}}],[\"drivermanager\",{\"1\":{\"1974\":1,\"1979\":2}}],[\"drive\",{\"1\":{\"1474\":2,\"1497\":1,\"1498\":1,\"1499\":1,\"1500\":1}}],[\"drivable\",{\"1\":{\"1474\":3,\"1498\":1,\"1500\":1}}],[\"drdt\",{\"1\":{\"852\":2,\"853\":1}}],[\"dr\",{\"1\":{\"851\":1}}],[\"drawing\",{\"1\":{\"1533\":4,\"1557\":4,\"1577\":2,\"1579\":2,\"1583\":2}}],[\"drawable\",{\"1\":{\"1533\":7,\"1557\":7,\"1575\":1,\"1577\":3,\"1579\":3,\"1581\":4}}],[\"draw\",{\"1\":{\"688\":2,\"689\":1,\"1533\":6,\"1557\":6,\"1575\":1,\"1577\":3,\"1579\":3,\"1581\":1,\"1583\":3}}],[\"dropna\",{\"1\":{\"458\":1}}],[\"dt​\",{\"1\":{\"870\":1}}],[\"dt+1​=dt​+s−w+rdt​\",{\"1\":{\"870\":1}}],[\"dtdt​=−k\",{\"1\":{\"854\":1}}],[\"dt\",{\"1\":{\"634\":1,\"851\":3,\"889\":3,\"903\":3,\"911\":4,\"927\":2,\"928\":1}}],[\"dxc⋅dt​\",{\"1\":{\"912\":1}}],[\"dx\",{\"1\":{\"634\":1,\"889\":2,\"895\":1,\"903\":2,\"911\":2,\"927\":4,\"928\":1}}],[\"dqn\",{\"1\":{\"596\":1}}],[\"dpng\",{\"1\":{\"1211\":1}}],[\"dp\",{\"0\":{\"709\":1},\"1\":{\"408\":5,\"415\":1}}],[\"dg\",{\"1\":{\"393\":2,\"955\":2}}],[\"dbms\",{\"1\":{\"2213\":1}}],[\"dbns\",{\"1\":{\"598\":1}}],[\"dbscan是一种基于密度的聚类算法\",{\"1\":{\"551\":1}}],[\"dbscan聚类\",{\"0\":{\"551\":1,\"557\":1}}],[\"dbscan等\",{\"1\":{\"548\":1}}],[\"dbscan\",{\"0\":{\"513\":1},\"1\":{\"540\":1,\"551\":5,\"553\":1,\"557\":2,\"559\":1,\"586\":1,\"594\":1}}],[\"db\",{\"1\":{\"551\":2},\"2\":{\"330\":1}}],[\"dos\",{\"1\":{\"2190\":1}}],[\"dosomething\",{\"1\":{\"1843\":1}}],[\"domain\",{\"1\":{\"1950\":1}}],[\"downcasting\",{\"1\":{\"1535\":1,\"1536\":1}}],[\"download\",{\"1\":{\"1100\":1}}],[\"do\",{\"1\":{\"1327\":2,\"1332\":1}}],[\"doublebuffer\",{\"1\":{\"1884\":1}}],[\"doubleobj\",{\"1\":{\"1705\":3}}],[\"double强制转换为float\",{\"1\":{\"1295\":1}}],[\"doublevalue\",{\"1\":{\"1382\":1,\"1384\":4,\"1704\":1,\"1705\":1,\"1838\":1}}],[\"doubleval\",{\"1\":{\"1294\":1,\"1295\":2,\"1298\":1}}],[\"double\",{\"0\":{\"2012\":1},\"1\":{\"1127\":1,\"1287\":1,\"1292\":1,\"1294\":2,\"1295\":1,\"1298\":2,\"1299\":1,\"1343\":3,\"1380\":1,\"1383\":1,\"1384\":5,\"1387\":1,\"1393\":1,\"1422\":1,\"1425\":1,\"1427\":1,\"1523\":3,\"1528\":3,\"1696\":3,\"1704\":2,\"1705\":5,\"1709\":3,\"2001\":3,\"2154\":1}}],[\"doc\",{\"1\":{\"1107\":2,\"1108\":1,\"1561\":3,\"2002\":2}}],[\"documentation\",{\"1\":{\"1999\":1}}],[\"documented\",{\"1\":{\"1845\":1}}],[\"document\",{\"1\":{\"1100\":2,\"1106\":2,\"1107\":3,\"1561\":6}}],[\"documentclass\",{\"1\":{\"1100\":1,\"1106\":2,\"1107\":1}}],[\"docker\",{\"0\":{\"316\":1},\"2\":{\"317\":1,\"318\":1}}],[\"dof\",{\"1\":{\"481\":1}}],[\"dotall\",{\"1\":{\"1953\":1}}],[\"dotproduct\",{\"1\":{\"1155\":1}}],[\"dots\",{\"1\":{\"492\":1,\"494\":1,\"495\":1,\"634\":1}}],[\"dot\",{\"1\":{\"447\":2,\"448\":1,\"449\":3,\"457\":2,\"641\":3,\"649\":1,\"1155\":1,\"1221\":2}}],[\"does\",{\"1\":{\"1439\":1}}],[\"doe\",{\"1\":{\"248\":2,\"1661\":1,\"1663\":1,\"1858\":1,\"1956\":2,\"1981\":1}}],[\"dog\",{\"1\":{\"242\":9,\"243\":2,\"1504\":3,\"1511\":7,\"1520\":3,\"1530\":3,\"1536\":7,\"1538\":7,\"1539\":3,\"1541\":6,\"1542\":6,\"1554\":7,\"1597\":2,\"1709\":5,\"1714\":4,\"2048\":1}}],[\"donald\",{\"0\":{\"63\":1},\"1\":{\"63\":2},\"2\":{\"65\":1}}],[\"dfs\",{\"1\":{\"392\":1,\"397\":1,\"1775\":1}}],[\"df\",{\"1\":{\"239\":4,\"458\":8,\"478\":2,\"481\":3,\"488\":2,\"659\":2,\"661\":2,\"1225\":1}}],[\"dan\",{\"1\":{\"1655\":1}}],[\"day\",{\"1\":{\"459\":1,\"1322\":3,\"1494\":1,\"1604\":1,\"1606\":2,\"1608\":7,\"1610\":10,\"1612\":7}}],[\"days\",{\"1\":{\"234\":1,\"649\":3,\"661\":1,\"1406\":1}}],[\"dag\",{\"1\":{\"392\":1}}],[\"database\",{\"1\":{\"1973\":1}}],[\"datagrampacket\",{\"1\":{\"1931\":1,\"1937\":1,\"1938\":6,\"1939\":5}}],[\"datagramsocket\",{\"1\":{\"1931\":1,\"1937\":1,\"1938\":4,\"1939\":4,\"2040\":1}}],[\"datagramchannel\",{\"1\":{\"1882\":1}}],[\"data=tips\",{\"1\":{\"459\":1}}],[\"datasets\",{\"1\":{\"497\":1,\"517\":1,\"524\":1,\"535\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":2,\"590\":2,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"610\":1,\"622\":1}}],[\"dataset\",{\"1\":{\"459\":1,\"588\":1,\"590\":1,\"659\":6}}],[\"dataframe\",{\"1\":{\"239\":1,\"458\":4,\"478\":1,\"481\":1,\"659\":1}}],[\"data\",{\"1\":{\"239\":3,\"258\":4,\"259\":3,\"458\":2,\"460\":1,\"478\":2,\"481\":2,\"488\":2,\"497\":4,\"524\":4,\"535\":1,\"565\":4,\"569\":4,\"571\":4,\"577\":4,\"578\":4,\"579\":4,\"580\":4,\"581\":4,\"588\":1,\"589\":1,\"590\":1,\"601\":4,\"602\":4,\"603\":4,\"604\":4,\"605\":4,\"606\":4,\"607\":4,\"608\":2,\"609\":8,\"610\":1,\"623\":1,\"624\":2,\"643\":2,\"659\":6,\"754\":1,\"827\":1,\"948\":17,\"1192\":5,\"1195\":1,\"1196\":3,\"1204\":2,\"1229\":5,\"1230\":2,\"1265\":1,\"1723\":4,\"1870\":3,\"1903\":1,\"2152\":1}}],[\"date表示特定时刻\",{\"1\":{\"1408\":1}}],[\"datestr\",{\"1\":{\"1407\":2}}],[\"dateexample\",{\"1\":{\"1401\":1}}],[\"date类用于表示一个具体的时刻\",{\"1\":{\"1401\":1}}],[\"date和java\",{\"1\":{\"1399\":1,\"1994\":1}}],[\"date\",{\"1\":{\"234\":5,\"336\":1,\"1126\":1,\"1401\":10,\"1402\":3,\"1404\":3,\"1405\":2,\"1407\":2,\"1408\":1,\"1726\":1,\"1994\":4,\"2038\":1,\"2041\":1,\"2047\":3}}],[\"datetimeexample\",{\"1\":{\"2047\":1}}],[\"datetimeformatterexample\",{\"1\":{\"1407\":1}}],[\"datetimeformatter\",{\"1\":{\"1407\":3,\"1408\":1,\"2041\":1,\"2047\":3}}],[\"datetimeformatter类用于格式化和解析localdate\",{\"1\":{\"1407\":1}}],[\"datetime\",{\"1\":{\"234\":6,\"1404\":2,\"1994\":3,\"2047\":5}}],[\"division\",{\"1\":{\"2000\":3}}],[\"divisive\",{\"1\":{\"512\":1}}],[\"divides\",{\"1\":{\"2000\":1}}],[\"divide\",{\"1\":{\"1152\":1,\"1856\":1,\"2000\":1}}],[\"diag\",{\"1\":{\"1142\":1,\"1144\":1}}],[\"diagonal\",{\"1\":{\"1142\":1,\"1144\":1}}],[\"diary\",{\"1\":{\"1126\":1}}],[\"didt\",{\"1\":{\"852\":2,\"853\":1}}],[\"di\",{\"1\":{\"851\":1}}],[\"dilate\",{\"1\":{\"825\":1}}],[\"dilated\",{\"1\":{\"812\":2,\"825\":3}}],[\"dij​\",{\"1\":{\"737\":1}}],[\"dijkstra\",{\"0\":{\"404\":1},\"1\":{\"394\":1,\"404\":1,\"406\":1,\"958\":2}}],[\"dijkstra算法\",{\"0\":{\"958\":1},\"1\":{\"392\":1,\"957\":1}}],[\"diffusion\",{\"1\":{\"927\":3,\"928\":1}}],[\"diff\",{\"1\":{\"642\":1,\"918\":2,\"923\":1,\"1152\":2,\"1225\":1}}],[\"differential\",{\"1\":{\"420\":1,\"879\":1,\"891\":1,\"897\":1,\"905\":1}}],[\"difference\",{\"1\":{\"161\":8,\"862\":1,\"893\":1,\"902\":1,\"910\":1}}],[\"dimension\",{\"1\":{\"624\":1}}],[\"dimensionality\",{\"0\":{\"541\":1},\"1\":{\"538\":1,\"614\":1}}],[\"digital\",{\"1\":{\"1655\":1}}],[\"digits\",{\"1\":{\"588\":5,\"590\":5,\"608\":10}}],[\"digraph\",{\"1\":{\"393\":1,\"955\":1}}],[\"directed\",{\"1\":{\"389\":1,\"953\":1}}],[\"directory\",{\"1\":{\"232\":2,\"256\":2,\"2002\":2}}],[\"dir\",{\"1\":{\"255\":3,\"1126\":1}}],[\"disabled\",{\"1\":{\"1855\":3}}],[\"disk\",{\"1\":{\"812\":1}}],[\"discriminant\",{\"0\":{\"520\":1,\"521\":1,\"522\":1},\"1\":{\"486\":1,\"518\":1,\"524\":1,\"567\":3,\"569\":1,\"571\":1,\"594\":1}}],[\"discard\",{\"1\":{\"160\":2}}],[\"disp\",{\"1\":{\"394\":8,\"398\":2,\"399\":2,\"738\":3,\"816\":1,\"955\":3,\"958\":4,\"959\":4,\"960\":2,\"964\":4,\"965\":4,\"1159\":1,\"1160\":2,\"1161\":3,\"1162\":3,\"1163\":3,\"1165\":2,\"1166\":1,\"1167\":1,\"1168\":1,\"1169\":1,\"1170\":2,\"1172\":1,\"1173\":2,\"1174\":1,\"1175\":1,\"1181\":1,\"1194\":2,\"1196\":2}}],[\"displaybooks\",{\"1\":{\"1661\":2}}],[\"displayinfo\",{\"1\":{\"1661\":6}}],[\"displaysecret\",{\"1\":{\"1651\":2}}],[\"displayspeed\",{\"1\":{\"1502\":1}}],[\"display\",{\"1\":{\"216\":5,\"1302\":1,\"1308\":3,\"1506\":1,\"1509\":1,\"1588\":2,\"1591\":2,\"1594\":2,\"1619\":1,\"1621\":1,\"1622\":1,\"1624\":2}}],[\"distributed\",{\"1\":{\"541\":1,\"594\":1}}],[\"distribution\",{\"1\":{\"460\":1,\"649\":11}}],[\"distance\",{\"1\":{\"410\":15}}],[\"distances\",{\"1\":{\"393\":1,\"410\":8,\"955\":2}}],[\"dist\",{\"1\":{\"393\":1,\"394\":2,\"955\":3,\"958\":10,\"959\":11,\"960\":13,\"965\":5}}],[\"dict2\",{\"1\":{\"174\":3}}],[\"dict1\",{\"1\":{\"174\":4}}],[\"dict\",{\"1\":{\"168\":3,\"172\":3,\"174\":1,\"191\":4,\"223\":2}}],[\"dictionary\",{\"0\":{\"167\":1},\"1\":{\"136\":1,\"167\":1}}],[\"d\",{\"1\":{\"153\":2,\"378\":3,\"699\":2,\"726\":2,\"732\":3,\"738\":2,\"740\":2,\"871\":1,\"872\":1,\"873\":1,\"926\":1,\"927\":3,\"928\":1,\"1133\":1,\"1134\":1,\"1144\":1,\"1216\":1,\"1222\":1,\"1233\":2,\"1412\":2,\"1416\":1,\"1628\":2,\"1657\":1,\"1675\":1,\"1677\":1,\"1705\":2,\"1732\":1,\"1921\":1,\"1925\":1,\"1947\":2,\"1952\":1,\"2002\":2}}],[\"debug\",{\"1\":{\"1921\":1,\"1922\":2,\"1925\":1,\"1926\":2,\"1927\":1}}],[\"debian\",{\"1\":{\"1102\":1}}],[\"deque<integer>\",{\"1\":{\"1777\":1}}],[\"deque\",{\"1\":{\"1727\":1,\"1739\":1,\"1750\":2,\"1765\":1,\"1766\":7,\"1776\":2,\"1777\":1}}],[\"dependencies>\",{\"1\":{\"1851\":1}}],[\"dependency>\",{\"1\":{\"1851\":2,\"1858\":1,\"1920\":2,\"1924\":2}}],[\"department=\",{\"1\":{\"1677\":5}}],[\"department\",{\"1\":{\"1677\":8}}],[\"deprecated\",{\"1\":{\"1672\":1,\"1843\":2,\"2001\":1}}],[\"deserializedperson\",{\"1\":{\"1876\":2}}],[\"deserializedobj\",{\"1\":{\"1863\":3}}],[\"deserialization\",{\"1\":{\"1860\":1}}],[\"dest\",{\"1\":{\"1439\":1}}],[\"desc\",{\"1\":{\"478\":2}}],[\"describable\",{\"1\":{\"1612\":2}}],[\"describe\",{\"1\":{\"211\":2,\"458\":1,\"478\":1}}],[\"description\",{\"1\":{\"336\":1,\"1612\":5}}],[\"demoglobal\",{\"1\":{\"1174\":2}}],[\"demands\",{\"1\":{\"700\":3}}],[\"determinant\",{\"1\":{\"921\":1,\"1143\":1,\"1144\":1}}],[\"detectmultiscale\",{\"1\":{\"827\":1}}],[\"detectharrisfeatures\",{\"1\":{\"813\":1}}],[\"detected\",{\"1\":{\"805\":1,\"827\":1}}],[\"detectobjectsfromimage\",{\"1\":{\"805\":1}}],[\"detector\",{\"1\":{\"805\":5}}],[\"detections\",{\"1\":{\"805\":1}}],[\"detection\",{\"1\":{\"805\":1}}],[\"detectron2\",{\"1\":{\"797\":1}}],[\"det\",{\"1\":{\"921\":3,\"1143\":1,\"1144\":1,\"1222\":2}}],[\"dea评估不需要预设权重\",{\"1\":{\"771\":1}}],[\"dea\",{\"1\":{\"754\":1}}],[\"deep\",{\"1\":{\"596\":1,\"598\":1}}],[\"denominator\",{\"1\":{\"2000\":1}}],[\"dense\",{\"1\":{\"608\":4,\"610\":2,\"658\":1,\"660\":2}}],[\"density\",{\"1\":{\"540\":1,\"594\":1}}],[\"dend\",{\"1\":{\"550\":1}}],[\"dendrogram\",{\"1\":{\"550\":2,\"556\":2,\"565\":2}}],[\"decisiontreeclassifier\",{\"1\":{\"579\":2,\"603\":2}}],[\"decisiontreeregressor\",{\"1\":{\"503\":2}}],[\"decision\",{\"0\":{\"503\":1,\"579\":1,\"603\":1},\"1\":{\"503\":2,\"530\":1,\"531\":1,\"579\":1,\"593\":2,\"597\":1,\"603\":1,\"752\":1}}],[\"decomposition\",{\"1\":{\"487\":1,\"590\":1,\"619\":1,\"622\":1}}],[\"decorator\",{\"1\":{\"216\":2,\"226\":3}}],[\"derivative\",{\"1\":{\"445\":1,\"447\":1,\"449\":2,\"918\":3}}],[\"de\",{\"1\":{\"420\":1}}],[\"deg^+\",{\"1\":{\"389\":1}}],[\"deg^\",{\"1\":{\"389\":1}}],[\"deg\",{\"1\":{\"389\":1}}],[\"degrees\",{\"1\":{\"1393\":4}}],[\"degree=2\",{\"1\":{\"501\":1}}],[\"degree\",{\"1\":{\"389\":1,\"942\":1,\"948\":2,\"953\":1}}],[\"delayqueue\",{\"1\":{\"1767\":1}}],[\"deleted\",{\"1\":{\"1439\":1}}],[\"delete\",{\"1\":{\"1126\":1,\"1439\":3}}],[\"delphi\",{\"1\":{\"758\":1}}],[\"delta\",{\"1\":{\"234\":2,\"423\":4,\"428\":2}}],[\"del\",{\"1\":{\"133\":1,\"146\":1,\"171\":1}}],[\"definite\",{\"1\":{\"1226\":1}}],[\"defaultmethod\",{\"1\":{\"1482\":1,\"1993\":2}}],[\"defaultfield\",{\"1\":{\"1482\":1}}],[\"default\",{\"1\":{\"827\":1,\"1277\":1,\"1307\":1,\"1322\":2,\"1506\":1,\"1561\":3,\"1579\":1,\"1606\":1,\"1623\":1,\"1844\":2,\"1993\":2,\"1995\":1}}],[\"def\",{\"1\":{\"28\":1,\"133\":1,\"157\":1,\"202\":1,\"210\":1,\"211\":4,\"213\":1,\"214\":2,\"215\":2,\"216\":3,\"217\":1,\"224\":3,\"225\":1,\"226\":3,\"242\":9,\"243\":5,\"245\":1,\"246\":2,\"247\":2,\"248\":5,\"409\":1,\"410\":2,\"428\":2,\"434\":7,\"445\":2,\"449\":2,\"460\":1,\"624\":1,\"641\":1,\"642\":1,\"649\":1,\"659\":1,\"680\":3,\"688\":2,\"852\":1,\"856\":1,\"895\":1,\"943\":1}}],[\"develop\",{\"2\":{\"7\":1}}],[\"川建国同志\",{\"0\":{\"62\":1}}],[\"图灵机与计算模型\",{\"1\":{\"2210\":1}}],[\"图遍历\",{\"1\":{\"2161\":1}}],[\"图相较于链表\",{\"1\":{\"2152\":1}}],[\"图是由节点和边组成的复杂数据结构\",{\"1\":{\"1732\":1}}],[\"图书库存类\",{\"1\":{\"1661\":1}}],[\"图书分为两类\",{\"1\":{\"1660\":1}}],[\"图书管理系统\",{\"1\":{\"1660\":1}}],[\"图形用户界面\",{\"0\":{\"1242\":1},\"1\":{\"2018\":1}}],[\"图形与绘图\",{\"1\":{\"1213\":1}}],[\"图形处理系统使得matlab能方便地图形化显示向量和矩阵\",{\"1\":{\"1121\":1}}],[\"图形目录\",{\"1\":{\"1110\":1}}],[\"图形卷积网络\",{\"1\":{\"595\":1}}],[\"图中包含负权环\",{\"1\":{\"959\":1}}],[\"图中的点\",{\"1\":{\"953\":1}}],[\"图中一个特殊的顶点\",{\"1\":{\"396\":2}}],[\"图的基本概念\",{\"0\":{\"953\":1}}],[\"图的属性和操作\",{\"1\":{\"393\":1,\"955\":1}}],[\"图的类型\",{\"0\":{\"391\":1}}],[\"图的表示方法\",{\"0\":{\"390\":1,\"954\":1}}],[\"图\",{\"0\":{\"2071\":1,\"2173\":1},\"1\":{\"389\":1,\"953\":1,\"1117\":1,\"2153\":1}}],[\"图由顶点\",{\"1\":{\"388\":1,\"952\":1}}],[\"图论在许多实际应用中非常重要\",{\"1\":{\"955\":1}}],[\"图论在计算机科学\",{\"1\":{\"952\":1}}],[\"图论为解决实际问题提供了强大的工具和方法\",{\"1\":{\"394\":1}}],[\"图论中的重要算法\",{\"0\":{\"392\":1}}],[\"图论是数学的一个分支\",{\"1\":{\"388\":1,\"952\":1}}],[\"图论\",{\"0\":{\"388\":1,\"952\":1},\"2\":{\"412\":1,\"967\":1}}],[\"图论相关算法\",{\"0\":{\"387\":1}}],[\"图论模型\",{\"1\":{\"382\":1}}],[\"图像等信息\",{\"1\":{\"2207\":1}}],[\"图像插值示例\",{\"0\":{\"947\":1}}],[\"图像恢复等操作\",{\"1\":{\"946\":1}}],[\"图像特征检测\",{\"0\":{\"826\":1}}],[\"图像特征提取\",{\"0\":{\"590\":1}}],[\"图像形态学操作\",{\"0\":{\"825\":1}}],[\"图像二值化\",{\"0\":{\"824\":1}}],[\"图像直方图均衡化\",{\"0\":{\"823\":1}}],[\"图像缩放是图像处理中的基本几何变换操作之一\",{\"1\":{\"821\":1}}],[\"图像缩放\",{\"0\":{\"821\":1},\"1\":{\"815\":1}}],[\"图像旋转是另一种常见的几何变换操作\",{\"1\":{\"822\":1}}],[\"图像旋转\",{\"0\":{\"822\":1},\"1\":{\"815\":1}}],[\"图像生成等任务\",{\"1\":{\"797\":1}}],[\"图像编辑和矢量图形设计软件\",{\"1\":{\"795\":1}}],[\"图像是由许多像素组成的\",{\"1\":{\"785\":1}}],[\"图像处理等\",{\"1\":{\"2156\":1}}],[\"图像处理等多个领域都有广泛应用\",{\"1\":{\"614\":1}}],[\"图像处理和动画显示等函数\",{\"1\":{\"1121\":1}}],[\"图像处理与图像通信\",{\"1\":{\"1040\":1}}],[\"图像处理中的插值与拟合广泛应用于图像放大\",{\"1\":{\"946\":1}}],[\"图像处理中的插值与拟合\",{\"0\":{\"946\":1}}],[\"图像处理的实例\",{\"0\":{\"817\":1}}],[\"图像处理的工具\",{\"0\":{\"793\":1}}],[\"图像处理库及其功能介绍\",{\"1\":{\"799\":1}}],[\"图像处理有许多工具可供使用\",{\"1\":{\"793\":1}}],[\"图像处理理论是计算机视觉和数字图像处理的重要基础\",{\"1\":{\"784\":1}}],[\"图像处理\",{\"0\":{\"783\":1,\"784\":1},\"2\":{\"2137\":1}}],[\"图像压缩\",{\"1\":{\"542\":1,\"677\":1}}],[\"图像分类\",{\"0\":{\"588\":1},\"1\":{\"530\":1}}],[\"图像分割\",{\"1\":{\"516\":1,\"800\":1}}],[\"图像识别等任务的实现\",{\"1\":{\"805\":1}}],[\"图像识别\",{\"1\":{\"523\":1,\"534\":1}}],[\"图像识别和处理\",{\"1\":{\"442\":1}}],[\"图像\",{\"2\":{\"61\":1}}],[\"图片收藏\",{\"0\":{\"60\":1}}],[\"图片地址\",{\"1\":{\"24\":1}}],[\"图片\",{\"0\":{\"24\":1},\"2\":{\"58\":1,\"64\":1,\"67\":1,\"70\":1,\"78\":1}}],[\"ieee\",{\"1\":{\"2154\":2}}],[\"illegalstateexception\",{\"1\":{\"1818\":1}}],[\"illegalargumentexception\",{\"1\":{\"1447\":2,\"1906\":2,\"2001\":2}}],[\"ilg\",{\"1\":{\"1110\":1}}],[\"iloc\",{\"1\":{\"458\":1}}],[\"i0\",{\"1\":{\"852\":2,\"853\":1}}],[\"ivp求解微分方程\",{\"1\":{\"857\":1}}],[\"ivp求解sir模型\",{\"1\":{\"852\":1}}],[\"ivp函数\",{\"1\":{\"853\":1}}],[\"ivp\",{\"1\":{\"852\":2,\"856\":2}}],[\"i=j\",{\"1\":{\"737\":1}}],[\"i表示第i种切割模式的使用次数\",{\"1\":{\"697\":1}}],[\"i++\",{\"1\":{\"1324\":1,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1331\":1,\"1356\":1,\"1360\":1,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1}}],[\"i+time\",{\"1\":{\"659\":1}}],[\"i+1\",{\"1\":{\"409\":1,\"434\":8,\"700\":1,\"889\":1,\"903\":1,\"964\":1}}],[\"ij表示第i种切割模式中第j种需求的小块数量\",{\"1\":{\"697\":1}}],[\"ij\",{\"1\":{\"646\":1,\"699\":1}}],[\"iago\",{\"1\":{\"634\":1}}],[\"i=1∑n​xij​=1∀j\",{\"1\":{\"737\":1}}],[\"i=1\",{\"1\":{\"634\":1,\"832\":1,\"836\":1,\"842\":1}}],[\"id=101\",{\"1\":{\"1677\":4}}],[\"id=\",{\"1\":{\"1677\":1}}],[\"id\",{\"1\":{\"1677\":8,\"1982\":4,\"1985\":2}}],[\"idx\",{\"1\":{\"555\":2,\"557\":2,\"558\":2,\"1110\":1}}],[\"idea\",{\"0\":{\"2052\":1},\"2\":{\"2059\":1}}],[\"idea或eclipse\",{\"1\":{\"1854\":1}}],[\"idea使用指南\",{\"1\":{\"1272\":1}}],[\"ideal\",{\"1\":{\"754\":1}}],[\"identitymatrix\",{\"1\":{\"1156\":1}}],[\"ide\",{\"0\":{\"1272\":1},\"1\":{\"246\":1},\"2\":{\"327\":1,\"2059\":1}}],[\"ica\",{\"1\":{\"541\":1,\"594\":1}}],[\"icon\",{\"1\":{\"336\":1}}],[\"iris\",{\"1\":{\"524\":3,\"535\":5,\"569\":2,\"571\":2,\"577\":2,\"578\":2,\"579\":2,\"580\":2,\"581\":2,\"601\":2,\"602\":2,\"603\":2,\"604\":2,\"605\":2,\"607\":2,\"609\":4}}],[\"ip协议\",{\"0\":{\"2232\":1},\"2\":{\"2237\":1}}],[\"ipv6\",{\"1\":{\"1932\":1}}],[\"ipv4\",{\"1\":{\"1932\":1}}],[\"ip\",{\"0\":{\"707\":1,\"1932\":1,\"1933\":1},\"1\":{\"415\":1,\"694\":1,\"723\":1,\"1929\":1,\"1930\":2,\"1931\":1,\"1932\":2,\"1933\":5,\"2212\":1}}],[\"io流\",{\"0\":{\"1867\":1},\"1\":{\"1457\":1}}],[\"ioexception\",{\"1\":{\"1433\":3,\"1434\":3,\"1436\":3,\"1437\":3,\"1439\":2,\"1440\":3,\"1863\":2,\"1865\":2,\"1870\":2,\"1871\":2,\"1873\":2,\"1874\":2,\"1876\":2,\"1890\":2,\"1891\":2,\"1895\":1,\"1896\":1,\"1908\":4,\"1935\":1,\"1936\":2}}],[\"io\",{\"0\":{\"1868\":1,\"1875\":1,\"1878\":1,\"1892\":1,\"2197\":1},\"1\":{\"249\":1,\"802\":3,\"948\":1,\"1433\":3,\"1434\":5,\"1436\":3,\"1437\":5,\"1439\":2,\"1440\":1,\"1630\":1,\"1680\":1,\"1682\":1,\"1862\":1,\"1863\":1,\"1865\":1,\"1867\":3,\"1868\":1,\"1870\":2,\"1871\":2,\"1873\":3,\"1874\":3,\"1875\":1,\"1876\":1,\"1878\":4,\"1879\":3,\"1880\":7,\"1882\":1,\"1883\":1,\"1886\":3,\"1887\":1,\"1888\":5,\"1890\":1,\"1891\":1,\"1892\":5,\"1893\":2,\"1908\":1,\"1935\":1,\"1936\":1,\"1942\":2,\"2036\":1,\"2039\":1}}],[\"i\",{\"0\":{\"1440\":1},\"1\":{\"202\":1,\"259\":1,\"261\":1,\"378\":1,\"390\":2,\"408\":15,\"409\":27,\"410\":3,\"428\":1,\"434\":9,\"589\":2,\"634\":1,\"641\":7,\"642\":3,\"646\":1,\"659\":3,\"680\":4,\"688\":2,\"698\":2,\"699\":4,\"700\":7,\"737\":3,\"738\":7,\"836\":2,\"851\":3,\"852\":5,\"889\":8,\"903\":8,\"911\":3,\"927\":8,\"954\":1,\"959\":1,\"960\":5,\"964\":4,\"965\":1,\"1131\":1,\"1165\":4,\"1167\":4,\"1168\":4,\"1169\":4,\"1170\":4,\"1178\":2,\"1222\":1,\"1324\":4,\"1326\":4,\"1327\":4,\"1329\":4,\"1330\":4,\"1331\":5,\"1356\":3,\"1360\":4,\"1420\":1,\"1430\":2,\"1630\":1,\"1704\":1,\"1881\":1,\"1943\":2,\"1961\":3,\"1962\":3,\"1963\":3,\"1964\":1,\"1966\":3,\"2035\":1,\"2039\":3}}],[\"ispresent\",{\"1\":{\"1995\":1}}],[\"ispositive\",{\"1\":{\"1691\":1,\"1857\":1}}],[\"isalive\",{\"1\":{\"1965\":1}}],[\"iswritable\",{\"1\":{\"1887\":1}}],[\"isreadable\",{\"1\":{\"1887\":1}}],[\"isempty\",{\"1\":{\"1673\":1,\"1745\":1,\"1777\":1,\"1783\":1,\"1798\":1}}],[\"isequal\",{\"1\":{\"1370\":2}}],[\"isborrowed\",{\"1\":{\"1661\":7}}],[\"ismember\",{\"1\":{\"1150\":2,\"1152\":1}}],[\"isoriginal\",{\"1\":{\"336\":1}}],[\"issuperset\",{\"1\":{\"166\":2}}],[\"issubset\",{\"1\":{\"166\":2}}],[\"is\",{\"1\":{\"133\":1,\"166\":4,\"199\":4,\"211\":2,\"226\":8,\"242\":2,\"261\":2,\"589\":2,\"1152\":7,\"1159\":1,\"1160\":2,\"1161\":3,\"1163\":3,\"1170\":2,\"1181\":1,\"1302\":1,\"1321\":3,\"1370\":2,\"1416\":1,\"1418\":2,\"1422\":1,\"1446\":1,\"1448\":1,\"1468\":2,\"1472\":3,\"1473\":1,\"1474\":1,\"1536\":2,\"1538\":1,\"1561\":2,\"1581\":2,\"1594\":2,\"1608\":1,\"1610\":2,\"1612\":1,\"1661\":2,\"1663\":1,\"1709\":2,\"1774\":2,\"1777\":2,\"1855\":1,\"1865\":1,\"1922\":6,\"1926\":4,\"1949\":1,\"1954\":2,\"1993\":2,\"2000\":1,\"2001\":1}}],[\"inetaddressexample\",{\"1\":{\"1933\":1}}],[\"inetaddress\",{\"1\":{\"1931\":1,\"1932\":1,\"1933\":8,\"1938\":3}}],[\"inetsocketaddress\",{\"1\":{\"1890\":2,\"1891\":2}}],[\"inherited\",{\"1\":{\"1845\":1}}],[\"inheritance\",{\"0\":{\"1470\":1},\"1\":{\"242\":1,\"1709\":1}}],[\"increment\",{\"1\":{\"1308\":1,\"1548\":6,\"1968\":2,\"1969\":1}}],[\"inoteexpress\",{\"1\":{\"1078\":1}}],[\"inmst\",{\"1\":{\"965\":3}}],[\"invoke\",{\"1\":{\"1645\":1,\"1651\":1,\"1655\":1,\"1830\":1}}],[\"invalidclassexception\",{\"1\":{\"1862\":1}}],[\"invalid\",{\"1\":{\"1322\":1,\"1428\":1}}],[\"invert\",{\"1\":{\"688\":1}}],[\"inverse\",{\"1\":{\"661\":2,\"921\":1}}],[\"inv\",{\"1\":{\"641\":3,\"921\":3,\"1136\":1,\"1144\":1,\"1222\":2}}],[\"indices\",{\"1\":{\"624\":2}}],[\"individuals\",{\"1\":{\"432\":1}}],[\"indefinite\",{\"1\":{\"919\":1}}],[\"independent\",{\"1\":{\"541\":1,\"594\":1}}],[\"indexof\",{\"1\":{\"1370\":1,\"1745\":1,\"2037\":1}}],[\"index\",{\"1\":{\"155\":2,\"434\":2,\"515\":1,\"661\":2,\"1165\":1,\"1364\":1,\"1370\":4,\"1745\":4,\"1748\":3,\"1751\":3}}],[\"ind\",{\"1\":{\"434\":2,\"479\":1,\"1110\":1}}],[\"info\",{\"1\":{\"1581\":2,\"1917\":1,\"1918\":2,\"1922\":2,\"1926\":2,\"1927\":2}}],[\"information\",{\"1\":{\"515\":1,\"745\":1,\"1427\":1}}],[\"infected\",{\"1\":{\"851\":1,\"852\":1}}],[\"inf\",{\"1\":{\"398\":1,\"399\":1,\"410\":1,\"434\":1,\"460\":1,\"895\":1,\"958\":2,\"959\":1,\"960\":7,\"965\":2}}],[\"inputline\",{\"1\":{\"1942\":3}}],[\"inputexceptionhandlingexample\",{\"1\":{\"1428\":1}}],[\"inputmismatchexception\",{\"1\":{\"1428\":2}}],[\"input2\",{\"1\":{\"1172\":1}}],[\"input1\",{\"1\":{\"1172\":1}}],[\"inputstreamreader\",{\"1\":{\"1935\":1,\"1936\":1,\"1942\":2}}],[\"inputstream\",{\"0\":{\"1870\":1},\"1\":{\"1868\":1,\"1869\":1,\"1870\":1,\"1892\":1,\"1935\":1,\"2039\":1}}],[\"inputstream和outputstream\",{\"1\":{\"1441\":1}}],[\"inputs\",{\"1\":{\"446\":1,\"447\":1,\"449\":2}}],[\"input\",{\"1\":{\"262\":3,\"439\":1,\"447\":3,\"448\":4,\"449\":7,\"608\":1,\"610\":1,\"660\":1,\"805\":1,\"947\":2,\"948\":2,\"1191\":2,\"1415\":1,\"1428\":1,\"1868\":1,\"1880\":1,\"1943\":1}}],[\"insensitive\",{\"1\":{\"1953\":1,\"1954\":2}}],[\"insertquery\",{\"1\":{\"1981\":2}}],[\"inserting\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"insert\",{\"1\":{\"145\":1,\"642\":1,\"1373\":1,\"1376\":1,\"1981\":1}}],[\"inside\",{\"1\":{\"1545\":1}}],[\"instanceof用于确保animal确实是dog类型的实例\",{\"1\":{\"1538\":1}}],[\"instanceof\",{\"1\":{\"1317\":1,\"1538\":1,\"1541\":2,\"1542\":2,\"1840\":1}}],[\"instanceof运算符用于测试对象是否为特定类的实例\",{\"1\":{\"1317\":1}}],[\"instanceof运算符\",{\"0\":{\"1317\":1}}],[\"instance\",{\"0\":{\"1302\":1},\"1\":{\"1538\":1,\"1991\":1,\"2009\":2,\"2010\":4,\"2011\":4,\"2012\":5,\"2013\":2,\"2014\":1}}],[\"install\",{\"1\":{\"230\":1,\"800\":1,\"801\":1,\"802\":1,\"803\":1,\"804\":1,\"805\":1,\"914\":1,\"1102\":3}}],[\"instruments开发的图像处理工具\",{\"1\":{\"798\":1}}],[\"initialization\",{\"0\":{\"2009\":1,\"2010\":1},\"1\":{\"1546\":4}}],[\"initialize\",{\"1\":{\"434\":2,\"435\":1}}],[\"initial\",{\"1\":{\"428\":4,\"649\":5}}],[\"init\",{\"1\":{\"224\":1,\"242\":3,\"243\":1,\"248\":2,\"680\":1}}],[\"innerclass是outerclass的成员内部类\",{\"1\":{\"1588\":1}}],[\"innerclass\",{\"1\":{\"1588\":3,\"1589\":2}}],[\"inner\",{\"1\":{\"214\":2,\"1586\":1,\"1588\":2,\"1589\":1,\"1591\":2,\"1592\":1,\"1594\":2}}],[\"into\",{\"1\":{\"1981\":1}}],[\"intobj\",{\"1\":{\"1385\":2,\"1705\":4}}],[\"intbuffer\",{\"1\":{\"1884\":1}}],[\"ints\",{\"1\":{\"1857\":1}}],[\"int转换为字符串\",{\"1\":{\"1298\":2}}],[\"int强制转换为short\",{\"1\":{\"1295\":1}}],[\"int自动转换为long\",{\"1\":{\"1294\":1}}],[\"intvalue\",{\"1\":{\"1382\":1,\"1384\":5,\"1385\":1,\"1700\":1,\"1703\":1,\"1704\":1,\"1705\":1}}],[\"intval\",{\"1\":{\"1294\":2,\"1295\":2,\"1297\":2,\"1298\":1}}],[\"int64\",{\"1\":{\"1127\":1}}],[\"int32\",{\"1\":{\"1127\":1}}],[\"int8\",{\"1\":{\"1127\":1}}],[\"int16\",{\"1\":{\"948\":2,\"1127\":1}}],[\"intcon\",{\"1\":{\"726\":2,\"728\":1,\"732\":2,\"734\":1,\"738\":2}}],[\"intlinprog\",{\"1\":{\"726\":3,\"728\":2,\"732\":3,\"734\":2,\"738\":2,\"740\":1}}],[\"integral\",{\"1\":{\"460\":2,\"919\":3,\"1227\":2}}],[\"integrate\",{\"1\":{\"460\":2,\"852\":2,\"856\":1,\"919\":2}}],[\"integration\",{\"1\":{\"247\":1}}],[\"integer>\",{\"1\":{\"1691\":1,\"1728\":2,\"1740\":3,\"1801\":2,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1839\":1}}],[\"integer\",{\"0\":{\"707\":1,\"711\":1,\"1286\":1},\"1\":{\"415\":1,\"700\":1,\"723\":1,\"729\":1,\"1298\":1,\"1383\":1,\"1384\":6,\"1385\":3,\"1428\":1,\"1667\":1,\"1696\":1,\"1699\":3,\"1700\":2,\"1702\":2,\"1703\":2,\"1704\":3,\"1705\":4,\"1818\":1,\"1839\":1,\"1963\":1}}],[\"interrupt\",{\"1\":{\"1965\":1}}],[\"interruptedexception\",{\"1\":{\"1548\":1,\"1673\":3,\"1768\":1,\"1963\":1,\"1966\":2,\"1970\":2}}],[\"interface\",{\"0\":{\"1474\":1},\"1\":{\"1474\":1,\"1498\":1,\"1533\":1,\"1556\":1,\"1557\":1,\"1561\":1,\"1572\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1581\":3,\"1583\":2,\"1597\":1,\"1612\":1,\"1654\":1,\"1661\":1,\"1686\":1,\"1709\":3,\"1843\":1,\"1844\":1,\"1990\":1,\"1993\":1}}],[\"intersect\",{\"1\":{\"1150\":2,\"1152\":2}}],[\"intersection\",{\"1\":{\"161\":4}}],[\"international\",{\"1\":{\"1040\":1}}],[\"internet\",{\"1\":{\"202\":1,\"1259\":1}}],[\"inter\",{\"1\":{\"947\":3}}],[\"interp\",{\"1\":{\"948\":2}}],[\"interp1d\",{\"1\":{\"935\":1,\"948\":1}}],[\"interpolate\",{\"1\":{\"935\":2,\"936\":3,\"937\":1,\"944\":3,\"948\":1}}],[\"interpolation=cv2\",{\"1\":{\"947\":3}}],[\"interpolation\",{\"1\":{\"933\":5,\"935\":1,\"936\":1,\"937\":1,\"947\":3,\"948\":2}}],[\"interior\",{\"1\":{\"718\":1}}],[\"interesting\",{\"1\":{\"589\":1}}],[\"intercept\",{\"1\":{\"484\":2,\"941\":2}}],[\"int\",{\"1\":{\"137\":1,\"139\":1,\"185\":10,\"186\":2,\"187\":2,\"262\":1,\"688\":2,\"927\":2,\"1226\":3,\"1227\":1,\"1281\":1,\"1282\":1,\"1286\":1,\"1292\":1,\"1294\":2,\"1295\":2,\"1297\":2,\"1298\":2,\"1299\":3,\"1301\":1,\"1302\":1,\"1303\":3,\"1304\":2,\"1307\":4,\"1308\":4,\"1309\":1,\"1316\":1,\"1321\":1,\"1322\":1,\"1324\":1,\"1325\":2,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1331\":2,\"1335\":3,\"1336\":1,\"1338\":1,\"1339\":2,\"1341\":2,\"1343\":7,\"1344\":4,\"1345\":2,\"1346\":1,\"1351\":4,\"1352\":1,\"1353\":2,\"1354\":2,\"1356\":2,\"1357\":2,\"1359\":3,\"1360\":3,\"1362\":3,\"1363\":1,\"1364\":2,\"1365\":4,\"1370\":2,\"1384\":3,\"1385\":3,\"1402\":5,\"1422\":1,\"1425\":1,\"1427\":1,\"1428\":1,\"1433\":1,\"1436\":1,\"1437\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1470\":1,\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1486\":1,\"1490\":1,\"1491\":1,\"1497\":1,\"1499\":1,\"1502\":1,\"1503\":4,\"1506\":1,\"1509\":1,\"1523\":7,\"1528\":1,\"1545\":1,\"1548\":2,\"1568\":4,\"1602\":1,\"1613\":1,\"1654\":3,\"1661\":4,\"1667\":1,\"1668\":1,\"1669\":3,\"1671\":1,\"1673\":1,\"1676\":2,\"1677\":3,\"1680\":7,\"1682\":3,\"1685\":2,\"1686\":5,\"1693\":1,\"1696\":2,\"1699\":2,\"1700\":2,\"1702\":1,\"1703\":1,\"1704\":3,\"1705\":4,\"1709\":6,\"1711\":2,\"1713\":2,\"1722\":3,\"1723\":2,\"1730\":1,\"1745\":4,\"1748\":1,\"1751\":1,\"1774\":1,\"1801\":1,\"1818\":6,\"1820\":2,\"1831\":1,\"1853\":1,\"1857\":1,\"1862\":1,\"1863\":3,\"1864\":1,\"1865\":2,\"1870\":1,\"1876\":2,\"1883\":1,\"1898\":1,\"1901\":2,\"1903\":1,\"1906\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1951\":3,\"1961\":1,\"1962\":1,\"1963\":2,\"1966\":1,\"1968\":4,\"1969\":2,\"1981\":1,\"1982\":2,\"2000\":6}}],[\"in\",{\"1\":{\"133\":1,\"148\":1,\"155\":1,\"162\":1,\"163\":1,\"172\":2,\"173\":1,\"176\":2,\"198\":4,\"204\":2,\"206\":1,\"207\":1,\"208\":2,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"242\":1,\"243\":1,\"252\":1,\"257\":1,\"259\":1,\"389\":2,\"409\":13,\"410\":2,\"428\":3,\"434\":4,\"447\":1,\"449\":1,\"641\":1,\"642\":1,\"649\":1,\"659\":1,\"680\":2,\"688\":2,\"700\":3,\"827\":1,\"889\":3,\"895\":1,\"903\":3,\"911\":2,\"927\":2,\"1040\":2,\"1259\":1,\"1266\":1,\"1401\":1,\"1402\":1,\"1422\":2,\"1427\":2,\"1428\":1,\"1619\":1,\"1654\":1,\"1661\":1,\"1663\":1,\"1756\":1,\"1762\":1,\"1766\":1,\"1768\":1,\"1770\":1,\"1774\":1,\"1863\":2,\"1865\":3,\"1927\":1,\"1935\":2,\"1936\":2,\"1942\":3}}],[\"if条件都为假时执行\",{\"1\":{\"1321\":1}}],[\"if\",{\"0\":{\"201\":1},\"1\":{\"133\":1,\"176\":1,\"201\":2,\"206\":1,\"207\":1,\"208\":1,\"213\":1,\"224\":1,\"245\":1,\"247\":1,\"248\":1,\"398\":3,\"399\":3,\"408\":1,\"409\":10,\"410\":1,\"428\":3,\"434\":4,\"447\":1,\"449\":1,\"738\":1,\"856\":1,\"895\":1,\"958\":2,\"959\":3,\"960\":1,\"964\":6,\"965\":1,\"1159\":3,\"1160\":3,\"1161\":3,\"1163\":3,\"1167\":1,\"1168\":1,\"1170\":1,\"1317\":1,\"1321\":5,\"1329\":1,\"1330\":1,\"1331\":1,\"1332\":1,\"1345\":1,\"1418\":1,\"1439\":3,\"1447\":1,\"1538\":1,\"1541\":2,\"1542\":2,\"1568\":1,\"1661\":2,\"1668\":2,\"1676\":2,\"1677\":2,\"1814\":1,\"1818\":1,\"1840\":1,\"1846\":1,\"1887\":2,\"1890\":1,\"1906\":1,\"1950\":1,\"1956\":1,\"1983\":3,\"1995\":1,\"2000\":2,\"2001\":2,\"2010\":1,\"2011\":1,\"2012\":2}}],[\"img\",{\"1\":{\"947\":11}}],[\"imgaussfilt\",{\"1\":{\"809\":1}}],[\"imresize\",{\"1\":{\"815\":1}}],[\"imread\",{\"1\":{\"800\":1,\"802\":1,\"803\":1,\"804\":1,\"807\":1,\"818\":1,\"819\":1,\"820\":1,\"823\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"947\":2}}],[\"imrotate\",{\"1\":{\"815\":1}}],[\"imnoise\",{\"1\":{\"814\":1}}],[\"imerode\",{\"1\":{\"812\":1}}],[\"imdilate\",{\"1\":{\"812\":1}}],[\"imcomplement\",{\"1\":{\"811\":1}}],[\"imbinarize\",{\"1\":{\"811\":1}}],[\"imfinfo\",{\"1\":{\"807\":1}}],[\"imshow\",{\"1\":{\"804\":1,\"807\":1,\"808\":1,\"809\":2,\"810\":1,\"811\":2,\"812\":2,\"813\":1,\"814\":1,\"815\":2,\"947\":3}}],[\"imsave\",{\"1\":{\"802\":1}}],[\"imwrite\",{\"1\":{\"800\":1,\"803\":1,\"818\":1,\"819\":1,\"820\":1,\"823\":1,\"824\":1,\"825\":2,\"826\":1,\"827\":1}}],[\"imaging\",{\"1\":{\"794\":1,\"801\":1}}],[\"image=\",{\"1\":{\"805\":1}}],[\"imageai\",{\"1\":{\"805\":3}}],[\"imagefilter\",{\"1\":{\"801\":2}}],[\"imagej\",{\"1\":{\"798\":1}}],[\"images\",{\"1\":{\"336\":2}}],[\"image\",{\"1\":{\"24\":1,\"57\":1,\"69\":1,\"794\":1,\"800\":6,\"801\":8,\"802\":5,\"803\":6,\"804\":3,\"805\":2,\"806\":1,\"807\":4,\"808\":3,\"809\":6,\"810\":1,\"811\":5,\"812\":6,\"813\":2,\"814\":5,\"815\":6,\"816\":1,\"818\":6,\"819\":6,\"820\":5,\"821\":8,\"822\":8,\"823\":8,\"824\":8,\"825\":10,\"826\":9,\"827\":7,\"947\":2}}],[\"implicit\",{\"0\":{\"1294\":1}}],[\"implements\",{\"1\":{\"1259\":1,\"1308\":1,\"1474\":2,\"1500\":1,\"1533\":2,\"1557\":2,\"1561\":1,\"1576\":1,\"1577\":2,\"1579\":1,\"1583\":1,\"1612\":1,\"1654\":1,\"1661\":1,\"1671\":1,\"1677\":1,\"1680\":1,\"1682\":1,\"1709\":2,\"1818\":1,\"1862\":1,\"1863\":1,\"1864\":1,\"1865\":1,\"1876\":1,\"1962\":1,\"1963\":1,\"1993\":1}}],[\"implement\",{\"1\":{\"243\":1,\"1573\":1}}],[\"import\",{\"1\":{\"133\":2,\"217\":1,\"229\":4,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"246\":1,\"247\":1,\"248\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"384\":1,\"409\":1,\"410\":1,\"428\":2,\"434\":1,\"444\":1,\"449\":1,\"457\":1,\"458\":1,\"459\":2,\"460\":1,\"478\":1,\"479\":1,\"480\":1,\"481\":2,\"482\":1,\"483\":1,\"484\":2,\"485\":1,\"486\":1,\"487\":1,\"488\":2,\"489\":1,\"497\":4,\"498\":1,\"499\":1,\"500\":1,\"501\":3,\"502\":1,\"503\":1,\"517\":3,\"524\":4,\"535\":5,\"543\":4,\"549\":4,\"550\":4,\"551\":5,\"552\":4,\"569\":6,\"571\":5,\"577\":5,\"578\":5,\"579\":5,\"580\":5,\"581\":5,\"588\":4,\"589\":4,\"590\":4,\"601\":4,\"602\":4,\"603\":4,\"604\":4,\"605\":4,\"606\":4,\"607\":4,\"608\":10,\"609\":8,\"610\":4,\"619\":3,\"622\":6,\"640\":2,\"649\":1,\"658\":6,\"680\":3,\"688\":2,\"700\":1,\"722\":1,\"800\":1,\"801\":1,\"802\":1,\"803\":2,\"804\":2,\"805\":1,\"818\":1,\"819\":1,\"820\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"825\":2,\"826\":2,\"827\":1,\"852\":3,\"856\":3,\"889\":2,\"895\":2,\"903\":2,\"911\":2,\"916\":1,\"917\":1,\"918\":1,\"919\":1,\"920\":1,\"921\":1,\"923\":1,\"924\":1,\"925\":1,\"927\":2,\"935\":3,\"936\":3,\"937\":3,\"941\":3,\"942\":2,\"943\":3,\"944\":3,\"947\":3,\"948\":4,\"1363\":1,\"1401\":1,\"1402\":1,\"1404\":3,\"1405\":2,\"1406\":3,\"1407\":2,\"1416\":2,\"1418\":2,\"1422\":1,\"1427\":1,\"1428\":2,\"1433\":3,\"1434\":5,\"1436\":3,\"1437\":5,\"1439\":2,\"1440\":4,\"1477\":3,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1651\":2,\"1655\":2,\"1677\":1,\"1680\":1,\"1682\":1,\"1748\":2,\"1751\":2,\"1754\":2,\"1762\":2,\"1764\":2,\"1766\":2,\"1768\":2,\"1774\":1,\"1777\":2,\"1786\":2,\"1788\":2,\"1790\":2,\"1792\":2,\"1801\":2,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1814\":3,\"1818\":1,\"1820\":1,\"1823\":3,\"1831\":3,\"1844\":4,\"1846\":1,\"1853\":2,\"1855\":1,\"1857\":2,\"1858\":2,\"1863\":1,\"1865\":1,\"1870\":2,\"1871\":2,\"1873\":3,\"1874\":3,\"1876\":1,\"1883\":3,\"1890\":5,\"1891\":4,\"1908\":1,\"1918\":2,\"1922\":2,\"1926\":2,\"1933\":2,\"1935\":2,\"1936\":3,\"1938\":3,\"1939\":2,\"1941\":1,\"1942\":4,\"1949\":2,\"1954\":2,\"1963\":5,\"1969\":2,\"1996\":3,\"2022\":5,\"2027\":3,\"2028\":3,\"2033\":5,\"2047\":3,\"2048\":2}}],[\"it​\",{\"1\":{\"873\":1}}],[\"it+1​=it​+pt​−d\",{\"1\":{\"873\":1}}],[\"iterable\",{\"1\":{\"1812\":1,\"1815\":1}}],[\"iterate\",{\"1\":{\"1820\":2}}],[\"iterations=1\",{\"1\":{\"825\":2}}],[\"iterations\",{\"1\":{\"447\":1,\"449\":1}}],[\"iteration\",{\"1\":{\"428\":1,\"1165\":1,\"1823\":2,\"2159\":1}}],[\"iterator<selectionkey>\",{\"1\":{\"1887\":1}}],[\"iterator<string>\",{\"1\":{\"1814\":1}}],[\"iterator<integer>\",{\"1\":{\"1818\":1}}],[\"iteratorexample\",{\"1\":{\"1814\":1}}],[\"iterator\",{\"0\":{\"1811\":1,\"1812\":1},\"1\":{\"224\":3,\"1783\":1,\"1811\":1,\"1812\":3,\"1813\":1,\"1814\":8,\"1815\":1,\"1816\":1,\"1817\":1,\"1818\":1,\"1821\":1,\"1823\":5,\"1824\":3,\"1887\":5}}],[\"iter=500\",{\"1\":{\"608\":1}}],[\"itertools\",{\"1\":{\"410\":2}}],[\"iter\",{\"1\":{\"224\":2,\"428\":4,\"895\":4}}],[\"items\",{\"1\":{\"172\":3}}],[\"item\",{\"1\":{\"171\":1,\"480\":2,\"1773\":1,\"1786\":3,\"1788\":3,\"1790\":3,\"1815\":2}}],[\"it\",{\"0\":{\"57\":1}}],[\"福建农林大学机电工程学院研究生申请学位获得学术成果规定\",{\"1\":{\"1039\":1}}],[\"福建农林大学\",{\"0\":{\"1009\":1},\"2\":{\"49\":1,\"54\":1,\"2259\":1}}],[\"这门课的内容广泛且基础\",{\"1\":{\"2206\":1}}],[\"这会引发\",{\"1\":{\"1898\":1,\"1903\":1}}],[\"这被称为对象图\",{\"1\":{\"1866\":1}}],[\"这可能导致安全问题\",{\"1\":{\"1833\":1}}],[\"这可能会引发安全问题\",{\"1\":{\"1650\":1}}],[\"这使得基本数据类型与其对应的包装类之间的转换更加简洁\",{\"1\":{\"1698\":1}}],[\"这使得框架或工具可以轻松地实例化该类\",{\"1\":{\"1680\":1}}],[\"这使得接口可以组合不同的行为规范\",{\"1\":{\"1582\":1}}],[\"这行代码会报错\",{\"1\":{\"1661\":1}}],[\"这在将\",{\"1\":{\"1680\":1}}],[\"这在实现\",{\"1\":{\"1649\":1}}],[\"这在许多情况下非常有用\",{\"1\":{\"1633\":1}}],[\"这确保了对象的内部状态不被外部直接访问\",{\"1\":{\"1471\":1}}],[\"这就意味着标识符\",{\"1\":{\"1275\":1}}],[\"这也有利于软件的升级\",{\"1\":{\"1259\":1}}],[\"这将输出\",{\"1\":{\"1165\":1}}],[\"这表明矩阵在\",{\"1\":{\"1128\":1}}],[\"这6种基本的数据类型都是按照数组形式存储和操作的\",{\"1\":{\"1127\":1}}],[\"这对于那些不需要或不能被序列化的字段非常有用\",{\"1\":{\"1864\":1}}],[\"这对于许多计算机视觉任务是关键的一步\",{\"1\":{\"820\":1}}],[\"这对于建筑设计\",{\"1\":{\"691\":1}}],[\"这意味着循环体至少会执行一次\",{\"1\":{\"1327\":1}}],[\"这意味着从城市1开始\",{\"1\":{\"739\":1}}],[\"这意味着公司应该生产产品a和产品b\",{\"1\":{\"733\":1}}],[\"这意味着每天生产20单位的产品a和10单位的产品b\",{\"1\":{\"727\":1}}],[\"这意味着随着城市数量的增加\",{\"1\":{\"410\":1}}],[\"这两种产品的生产过程需要使用两种资源\",{\"1\":{\"720\":1}}],[\"这样类可以处理不同类型的数据\",{\"1\":{\"1835\":1}}],[\"这样的测试框架使用反射来调用测试方法\",{\"1\":{\"1832\":1}}],[\"这样\",{\"1\":{\"1578\":1}}],[\"这样可以控制对类的属性的访问和修改\",{\"1\":{\"1564\":1}}],[\"这样可以更直观地看到降维过程\",{\"1\":{\"623\":1}}],[\"这样方法可以接受任意数量的参数\",{\"1\":{\"1339\":1}}],[\"这样做的目的是使每列至少有一个零元素\",{\"1\":{\"409\":1}}],[\"这样做的目的是使每行至少有一个零元素\",{\"1\":{\"409\":1}}],[\"这通常是因为模型过于简单\",{\"1\":{\"533\":1}}],[\"这通常是因为模型过于复杂\",{\"1\":{\"533\":1}}],[\"这种方式支持返回结果和抛出异常\",{\"1\":{\"1960\":1}}],[\"这种方法鼓励我们忽略传统智慧或现有的假设\",{\"1\":{\"998\":1}}],[\"这种方法通常能够得到全局最优解\",{\"1\":{\"694\":1}}],[\"这种方法在生成管道\",{\"1\":{\"678\":1}}],[\"这种方法在探索和理解数据\",{\"1\":{\"537\":1}}],[\"这种方法可以帮助你在研究中编写更可靠\",{\"1\":{\"248\":1}}],[\"这种性能差异更加明显\",{\"1\":{\"1833\":1}}],[\"这种转换可能会导致数据精度丢失\",{\"1\":{\"1295\":1}}],[\"这种注释可以被工具提取并生成\",{\"1\":{\"1283\":1}}],[\"这种可移植性来源于体系结构中立性\",{\"1\":{\"1259\":1}}],[\"这种途径适合于异构的网络环境和软件的分发\",{\"1\":{\"1259\":1}}],[\"这种函数称为嵌套函数\",{\"1\":{\"1175\":1}}],[\"这种表面在某些情况下被称为扫掠面\",{\"1\":{\"679\":1}}],[\"这种正则化项对模型的复杂度进行惩罚\",{\"1\":{\"498\":1}}],[\"这个字段不会被序列化\",{\"1\":{\"1864\":1}}],[\"这个字节流可以保存到文件\",{\"1\":{\"1860\":1}}],[\"这个接口是一个函数式接口\",{\"1\":{\"1686\":1}}],[\"这个代码将输出\",{\"1\":{\"1169\":1}}],[\"这个循环将输出\",{\"1\":{\"1167\":1,\"1168\":1,\"1170\":1}}],[\"这个循环将一直运行\",{\"1\":{\"1166\":1}}],[\"这个函数在已知数据点处精确等于已知值\",{\"1\":{\"932\":1}}],[\"这个例子中\",{\"1\":{\"1689\":1}}],[\"这个例子将输出从\",{\"1\":{\"1165\":1}}],[\"这个例子展示了如何使用python数值求解一维热传导方程\",{\"1\":{\"890\":1}}],[\"这个例子仅用于演示基本原理\",{\"1\":{\"450\":1}}],[\"这个方程称为离散形式的logistic增长模型\",{\"1\":{\"869\":1}}],[\"这个过程包括数据的收集\",{\"1\":{\"762\":1}}],[\"这个线性规划问题可以使用单纯形法或其他优化算法来求解\",{\"1\":{\"722\":1}}],[\"这个模型涉及将大尺寸的钢板切割成各种尺寸的小块\",{\"1\":{\"692\":1}}],[\"这个模型模拟了在一个平面或三维空间上铺设瓷砖的过程\",{\"1\":{\"685\":1}}],[\"这个简单的例子演示了如何使用gm\",{\"1\":{\"644\":1}}],[\"这个广泛使用的机器学习库\",{\"1\":{\"600\":1}}],[\"这个示例涵盖了以下知识点\",{\"1\":{\"1659\":1}}],[\"这个示例展示了一个简单的图书管理系统\",{\"1\":{\"1653\":1}}],[\"这个示例展示了如何在python中使用有限差分法求解二维拉普拉斯方程\",{\"1\":{\"896\":1}}],[\"这个示例展示了如何使用python数值求解一维波动方程\",{\"1\":{\"912\":1}}],[\"这个示例展示了如何使用python数值求解一维热传导方程\",{\"1\":{\"904\":1}}],[\"这个示例展示了如何使用k\",{\"1\":{\"543\":1}}],[\"这个示例展示了如何使用逻辑回归进行分类\",{\"1\":{\"535\":1}}],[\"这个示例为基本的管道包扎模型实现\",{\"1\":{\"682\":1}}],[\"这个示例使用了经典的鸢尾花\",{\"1\":{\"524\":1}}],[\"这个示例使用k\",{\"1\":{\"517\":1}}],[\"这个神经网络是一个前馈神经网络\",{\"1\":{\"442\":1}}],[\"这个算法将用于解决一个简单的函数优化问题\",{\"1\":{\"426\":1}}],[\"这个问题在网络流\",{\"1\":{\"395\":1}}],[\"这段代码首先通过行和列减法将成本矩阵转换为至少包含一个零元素的形式\",{\"1\":{\"409\":1}}],[\"这里返回一个dog对象\",{\"1\":{\"1541\":1}}],[\"这里会抛出\",{\"1\":{\"1539\":1}}],[\"这里是另一个子类\",{\"1\":{\"1539\":1}}],[\"这里是内容\",{\"1\":{\"46\":1,\"47\":1,\"51\":1,\"52\":1,\"2256\":1,\"2257\":1}}],[\"这里我们将演示如何使用scipy库对音频信号进行插值和多项式拟合\",{\"1\":{\"948\":1}}],[\"这里我们将展示一个如何在图像缩放过程中应用插值的例子\",{\"1\":{\"946\":1}}],[\"这里我们生成一个三维的样本数据集\",{\"1\":{\"623\":1}}],[\"这里展示如何用python来实现一个简单的钢板切割问题的求解\",{\"1\":{\"700\":1}}],[\"这里只取前两类\",{\"1\":{\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1}}],[\"这里的费用通常是指路径上的边权重的总和\",{\"1\":{\"400\":1}}],[\"这类问题通常很复杂\",{\"1\":{\"711\":1}}],[\"这类错误通常需要通过调试和测试来发现\",{\"1\":{\"245\":1}}],[\"这类似于其他语言中的switch语句\",{\"1\":{\"202\":1}}],[\"这不是一个好习惯\",{\"1\":{\"182\":1}}],[\"这些模型帮助理解什么是计算和计算的局限性\",{\"1\":{\"2210\":1}}],[\"这些模型在经济学\",{\"1\":{\"868\":1}}],[\"这些模型在不同的应用场景中各有优势\",{\"1\":{\"775\":1}}],[\"这些类库提供了基本的编程功能\",{\"1\":{\"2036\":1}}],[\"这些类库和\",{\"1\":{\"2035\":1}}],[\"这些类为基本数据类型提供了包装器\",{\"1\":{\"1387\":1}}],[\"这些线程共享进程的资源\",{\"1\":{\"1959\":1}}],[\"这些操作在编译时是未知的\",{\"1\":{\"1825\":1}}],[\"这些操作展示了\",{\"1\":{\"148\":1}}],[\"这些包装类属于\",{\"1\":{\"1695\":1}}],[\"这些修饰符可以分为四类\",{\"1\":{\"1478\":1}}],[\"这些i\",{\"1\":{\"1441\":1}}],[\"这些工具和方法可以帮助你处理用户的输入输出需求\",{\"1\":{\"1429\":1}}],[\"这些子类为不同的数值类型提供了包装器\",{\"1\":{\"1380\":1}}],[\"这些数值类包括integer\",{\"1\":{\"1380\":1}}],[\"这些数据可以来自实际测量\",{\"1\":{\"763\":1}}],[\"这些变量必须是final或者实际上是final的\",{\"1\":{\"1693\":1}}],[\"这些变量在声明时被指定为一个特定的类型\",{\"1\":{\"1291\":1}}],[\"这些变量只能取0或1\",{\"1\":{\"734\":1}}],[\"这些标签有助于生成清晰的api文档\",{\"1\":{\"1283\":1}}],[\"这些字节码可以在任何安装了相应jvm的设备上运行\",{\"1\":{\"1264\":1}}],[\"这些注释对于文档化代码和帮助他人理解你的代码非常有用\",{\"1\":{\"1187\":1}}],[\"这些命令按顺序执行\",{\"1\":{\"1181\":1}}],[\"这些分支语句允许你根据不同条件灵活控制\",{\"1\":{\"1163\":1}}],[\"这些材料是自然界没有的\",{\"1\":{\"1053\":1}}],[\"这些方程在化学\",{\"1\":{\"926\":1}}],[\"这些方法包括对象比较\",{\"1\":{\"1664\":1}}],[\"这些方法不能被实现类重写或覆盖\",{\"1\":{\"1580\":1}}],[\"这些方法通常称为\",{\"1\":{\"1567\":1}}],[\"这些方法通常用于分类任务中\",{\"1\":{\"567\":1}}],[\"这些方法有具体实现\",{\"1\":{\"1560\":1,\"1578\":1}}],[\"这些方法在\",{\"1\":{\"1678\":1}}],[\"这些方法在所有\",{\"1\":{\"1664\":1,\"1665\":1}}],[\"这些方法在number类的子类中被实现\",{\"1\":{\"1382\":1}}],[\"这些方法在图像处理\",{\"1\":{\"474\":1}}],[\"这些方法可以在其子类中重写\",{\"1\":{\"1381\":1}}],[\"这些方法具有相同的名称但不同的参数列表\",{\"1\":{\"1343\":1}}],[\"这些方法广泛应用于各个领域\",{\"1\":{\"631\":1}}],[\"这些方法广泛应用于社会科学\",{\"1\":{\"464\":1}}],[\"这些是matlab中数组和向量的基本概念和操作方法\",{\"1\":{\"1156\":1}}],[\"这些是必须满足的限制条件\",{\"1\":{\"840\":1}}],[\"这些是可以控制或调整的变量\",{\"1\":{\"840\":1}}],[\"这些是需要优化的目标\",{\"1\":{\"840\":1}}],[\"这些是决策变量需要满足的线性不等式或等式\",{\"1\":{\"715\":1}}],[\"这些指标在综合评价方法中起到关键作用\",{\"1\":{\"756\":1}}],[\"这些指标可以是定量的\",{\"1\":{\"753\":1}}],[\"这些问题通常包括目标函数的最大化或最小化\",{\"1\":{\"705\":1}}],[\"这些点将用于在三维空间中生成管道表面\",{\"1\":{\"681\":1}}],[\"这些点通常由激光扫描\",{\"1\":{\"674\":1}}],[\"这些主成分能够解释数据中尽可能多的方差\",{\"1\":{\"615\":1}}],[\"这些特征是描述数据的关键属性\",{\"1\":{\"585\":1}}],[\"这些组内的个体具有相似的特征\",{\"1\":{\"561\":1}}],[\"这些技术结合无监督学习的思想\",{\"1\":{\"547\":1}}],[\"这些回归模型可以通过不同的方法来处理数据\",{\"1\":{\"504\":1}}],[\"这些算法可以根据图的性质\",{\"1\":{\"960\":1}}],[\"这些算法可以有效地处理复杂的多目标优化问题\",{\"1\":{\"841\":1}}],[\"这些算法用于快速得到一个较优解\",{\"1\":{\"694\":1}}],[\"这些算法各自适用于不同的应用场景\",{\"1\":{\"599\":1}}],[\"这些算法广泛应用于函数优化\",{\"1\":{\"420\":1}}],[\"这些算法结合了多种优化技术的优点\",{\"1\":{\"418\":1}}],[\"这些算法在给定条件下总是能找到问题的最优解\",{\"1\":{\"415\":1}}],[\"这些算法在许多领域都有广泛应用\",{\"1\":{\"414\":1}}],[\"这些决策过程是从已知示例中泛化得出的\",{\"1\":{\"368\":1}}],[\"这些属性和方法将被用于创建对象\",{\"1\":{\"242\":1}}],[\"这些运算符用于比较对象的内存位置\",{\"1\":{\"199\":1}}],[\"这些运算符用于比较两个值\",{\"1\":{\"194\":1}}],[\"这些运算符用于测试序列中的成员资格\",{\"1\":{\"198\":1}}],[\"这些运算符用于将值赋给变量\",{\"1\":{\"197\":1}}],[\"这些运算符用于按位操作整数\",{\"1\":{\"196\":1}}],[\"这些运算符用于执行基本的数学运算\",{\"1\":{\"1311\":1}}],[\"这些运算符用于执行基本的算术运算\",{\"1\":{\"193\":1}}],[\"这些运算符用于执行逻辑运算\",{\"1\":{\"195\":1}}],[\"这些运算符可以用来组合多个布尔表达式\",{\"1\":{\"139\":1}}],[\"这是java语言\",{\"1\":{\"1263\":1}}],[\"这是多行注释\",{\"1\":{\"1187\":1}}],[\"这是单行注释\",{\"1\":{\"1187\":1}}],[\"这是显式差分法求解反应扩散方程的一个简单示例\",{\"1\":{\"928\":1}}],[\"这是计算机视觉中的一个经典任务\",{\"1\":{\"827\":1}}],[\"这是需要优化的线性函数\",{\"1\":{\"715\":1}}],[\"这是注脚内容\",{\"1\":{\"31\":1}}],[\"这是\",{\"1\":{\"27\":1}}],[\"这是一个\",{\"1\":{\"1918\":7}}],[\"这是一个自定义异常\",{\"1\":{\"1909\":1}}],[\"这是一个文档注释示例\",{\"1\":{\"1283\":1}}],[\"这是一个多行注释\",{\"1\":{\"1282\":1}}],[\"这是一个单行注释\",{\"1\":{\"1281\":1}}],[\"这是一个简单的脚本文件示例\",{\"1\":{\"1181\":1}}],[\"这是一个注脚示例\",{\"1\":{\"31\":1}}],[\"这是一个嵌套引用\",{\"1\":{\"25\":1}}],[\"这是一个引用\",{\"1\":{\"25\":1}}],[\"这是一个段落\",{\"1\":{\"18\":1}}],[\"这是另一个段落\",{\"1\":{\"18\":1}}],[\"以节省计算机内存\",{\"1\":{\"2152\":1}}],[\"以字符\",{\"1\":{\"1868\":1}}],[\"以字节\",{\"1\":{\"1868\":1}}],[\"以隔离被测试的单元\",{\"1\":{\"1858\":1}}],[\"以方便使用lambda表达式\",{\"1\":{\"1691\":1}}],[\"以允许外部代码访问和修改这些属性\",{\"1\":{\"1680\":1}}],[\"以保证封装性\",{\"1\":{\"1680\":1}}],[\"以保证数值稳定\",{\"1\":{\"904\":1,\"912\":1}}],[\"以提供特定的行为\",{\"1\":{\"1611\":1}}],[\"以提高代码的复用性和灵活性\",{\"1\":{\"1570\":1}}],[\"以提高求解效率或准确性\",{\"1\":{\"418\":1}}],[\"以隐藏数据\",{\"1\":{\"1571\":1}}],[\"以隐藏其内部实现\",{\"1\":{\"1566\":1}}],[\"以防止外部直接访问\",{\"1\":{\"1564\":1}}],[\"以减少代码重复\",{\"1\":{\"1559\":1}}],[\"以避免运行时错误\",{\"1\":{\"1543\":1}}],[\"以避免classcastexception异常\",{\"1\":{\"1538\":1,\"1543\":1}}],[\"以避免陷入局部最优\",{\"1\":{\"421\":1}}],[\"以年\",{\"1\":{\"1406\":1}}],[\"以秒和纳秒为单位\",{\"1\":{\"1406\":1}}],[\"以处理更复杂的逻辑\",{\"1\":{\"1331\":1}}],[\"以取消其中的数字\",{\"1\":{\"1258\":1}}],[\"以\",{\"1\":{\"1219\":1,\"1282\":1,\"1283\":1}}],[\"以实现更复杂的控制流\",{\"1\":{\"1170\":1}}],[\"以解决这些应用领域内特定类型的问题\",{\"1\":{\"1116\":1}}],[\"以解决各种实际问题\",{\"1\":{\"536\":1}}],[\"以可以进行一些文档的准备操作\",{\"1\":{\"1107\":1}}],[\"以论文形式表现\",{\"1\":{\"1038\":1}}],[\"以上毕业\",{\"1\":{\"1032\":1}}],[\"以上是最短路径问题的三种主要算法及其matlab实现\",{\"1\":{\"960\":1}}],[\"以上是markdown的基本语法和使用示例\",{\"1\":{\"35\":1}}],[\"以校内导师指导为主\",{\"1\":{\"1028\":1}}],[\"以确保各个程序和用户之间能够高效\",{\"1\":{\"2188\":1}}],[\"以确保曲线的光滑性\",{\"1\":{\"939\":1}}],[\"以确保权重的合理性\",{\"1\":{\"764\":1}}],[\"以评估评价结果的稳健性\",{\"1\":{\"764\":1}}],[\"以使得它们在同一尺度下可比\",{\"1\":{\"759\":1}}],[\"以使得不同指标可比\",{\"1\":{\"753\":1}}],[\"以使总利润最大化\",{\"1\":{\"733\":1}}],[\"以平衡成本\",{\"1\":{\"710\":1}}],[\"以最大化利润\",{\"1\":{\"730\":1}}],[\"以最大化利润或最小化成本\",{\"1\":{\"716\":1}}],[\"以最大化带宽利用率或最小化延迟\",{\"1\":{\"716\":1}}],[\"以最大化投资回报或最小化风险\",{\"1\":{\"716\":1}}],[\"以最大化总收益并满足预算限制\",{\"1\":{\"707\":1}}],[\"以最小化库存成本或最大化服务水平\",{\"1\":{\"716\":1}}],[\"以最小化原材料消耗或最大化产出效率\",{\"1\":{\"716\":1}}],[\"以最小化能源成本或最大化能源产出\",{\"1\":{\"716\":1}}],[\"以最小化运营成本或最大化系统效率\",{\"1\":{\"716\":1}}],[\"以最小化运输时间或费用\",{\"1\":{\"716\":1}}],[\"以最小化运输成本\",{\"1\":{\"716\":1}}],[\"以最小化劳动力成本或最大化效率\",{\"1\":{\"716\":1}}],[\"以最小化总成本或最大化响应速度\",{\"1\":{\"716\":1}}],[\"以最小化总成本\",{\"1\":{\"712\":1}}],[\"以最小化阻力\",{\"1\":{\"708\":1}}],[\"以最小化误差\",{\"1\":{\"440\":1}}],[\"以满足不同场景下的需求\",{\"1\":{\"1755\":1}}],[\"以满足特定的访问控制和特性需求\",{\"1\":{\"1309\":1}}],[\"以满足0\",{\"1\":{\"734\":1,\"740\":1}}],[\"以满足需求\",{\"1\":{\"692\":1}}],[\"以满足各种应用需求\",{\"1\":{\"677\":1}}],[\"以多种视角\",{\"1\":{\"673\":1}}],[\"以研究不同病人群体的治疗反应\",{\"1\":{\"561\":1}}],[\"以便算法高效运行\",{\"1\":{\"2152\":1}}],[\"以便后续分析\",{\"1\":{\"1910\":1}}],[\"以便更好地调试和排查问题\",{\"1\":{\"1910\":1}}],[\"以便更好地组织和复用代码\",{\"1\":{\"227\":1}}],[\"以便存储或传输\",{\"1\":{\"1876\":1}}],[\"以便它的状态可以被序列化和反序列化\",{\"1\":{\"1680\":1}}],[\"以便调试\",{\"1\":{\"1452\":1}}],[\"以便将不同的数值类型转换为其他数值类型\",{\"1\":{\"1381\":1}}],[\"以便其他开发者能够更好地理解和使用你的代码\",{\"1\":{\"1283\":1}}],[\"以便方便开发web应用\",{\"1\":{\"1261\":1}}],[\"以便进行特征匹配和图像配准\",{\"1\":{\"790\":1}}],[\"以便能够科学合理地对不同方案进行比较和评价\",{\"1\":{\"762\":1}}],[\"以便在给定的区域内生成符合设计要求的瓷砖图案\",{\"1\":{\"685\":1}}],[\"以便在每个簇中\",{\"1\":{\"561\":1}}],[\"以便于可视化\",{\"1\":{\"614\":1}}],[\"以便分析不同指标对经济现象的共同影响\",{\"1\":{\"562\":1}}],[\"以便制定有针对性的营销策略\",{\"1\":{\"542\":1}}],[\"以便对新数据点进行分类\",{\"1\":{\"518\":1}}],[\"以进行回归预测\",{\"1\":{\"503\":1}}],[\"以及计算科学问题的基本方法\",{\"1\":{\"2206\":1}}],[\"以及计算生物学等众多应用领域\",{\"1\":{\"1116\":1}}],[\"以及双层循环的情况\",{\"1\":{\"2162\":1}}],[\"以及自定义异常\",{\"1\":{\"1911\":1}}],[\"以及后缀表达式的求值\",{\"1\":{\"1775\":1}}],[\"以及通过集合框架提供的更复杂的数据结构\",{\"1\":{\"1720\":1}}],[\"以及使用\",{\"1\":{\"1677\":1}}],[\"以及使用反射来动态访问和操作这些对象\",{\"1\":{\"1653\":1}}],[\"以及使用system\",{\"1\":{\"1420\":1}}],[\"以及新的java\",{\"1\":{\"1399\":1}}],[\"以及在matlab与其他应用程序间建立客户\",{\"1\":{\"1122\":1}}],[\"以及相关的管理\",{\"1\":{\"1025\":1}}],[\"以及如何在程序中实现并发和并行计算\",{\"1\":{\"2211\":1}}],[\"以及如何在音频信号处理中进行插值与拟合\",{\"1\":{\"946\":1}}],[\"以及如何用二进制表示数字\",{\"1\":{\"2207\":1}}],[\"以及如何编写客户端和服务器端程序\",{\"1\":{\"1929\":1}}],[\"以及如何有效地进行文件操作是非常重要的\",{\"1\":{\"249\":1}}],[\"以及可以调整的决策变量\",{\"1\":{\"841\":1}}],[\"以及每对城市之间的距离矩阵\",{\"1\":{\"736\":1}}],[\"以及它们在\",{\"1\":{\"496\":1}}],[\"以找到对因变量最有显著影响的自变量组合\",{\"1\":{\"493\":1}}],[\"以t检验为例\",{\"1\":{\"479\":1}}],[\"以应对复杂的任务和更大的数据集\",{\"1\":{\"450\":1}}],[\"以增加种群的多样性\",{\"1\":{\"432\":1}}],[\"以一定概率接受新解\",{\"1\":{\"428\":1}}],[\"以概率\",{\"1\":{\"423\":1}}],[\"以0\",{\"1\":{\"408\":1}}],[\"以双下划线开头\",{\"1\":{\"242\":1}}],[\"以下示例使用正则表达式验证一个输入的字符串是否是一个有效的电子邮件地址\",{\"1\":{\"1950\":1}}],[\"以下示例展示了如何使用反射获取类的所有字段\",{\"1\":{\"1831\":1}}],[\"以下代码会报错\",{\"1\":{\"1545\":1}}],[\"以下代码展示了如何使用python中的scipy\",{\"1\":{\"852\":1}}],[\"以下是对抽象概念的详细解释和示例\",{\"1\":{\"1551\":1}}],[\"以下是对\",{\"1\":{\"1478\":1}}],[\"以下是对差分方程的一些基本介绍\",{\"1\":{\"862\":1}}],[\"以下是java\",{\"1\":{\"1430\":1,\"1988\":1}}],[\"以下是jvm的基础知识\",{\"1\":{\"1263\":1}}],[\"以下是详细的介绍和示例代码\",{\"1\":{\"1420\":1}}],[\"以下是详细介绍\",{\"1\":{\"1306\":1}}],[\"以下是使用\",{\"1\":{\"1922\":1}}],[\"以下是使用number类及其子类的简单示例\",{\"1\":{\"1384\":1}}],[\"以下是使用python中的scikit\",{\"1\":{\"524\":1}}],[\"以下是每种运算符的详细列表及其使用说明\",{\"1\":{\"1145\":1}}],[\"以下是每种产品的具体数据\",{\"1\":{\"730\":1}}],[\"以下是有关\",{\"1\":{\"1128\":1}}],[\"以下是完整的python代码\",{\"1\":{\"889\":1,\"902\":1,\"910\":1}}],[\"以下是非线性规划模型的基本概述\",{\"1\":{\"831\":1}}],[\"以下是几个常见的图像处理实例\",{\"1\":{\"817\":1}}],[\"以下是几种常用的综合评价模型及其适用场景\",{\"1\":{\"765\":1}}],[\"以下是几种常用聚类算法的matlab实现示例\",{\"1\":{\"554\":1}}],[\"以下是几种常用聚类算法的实现示例\",{\"1\":{\"548\":1}}],[\"以下是几种常见的规划问题类型及其应用领域\",{\"1\":{\"705\":1}}],[\"以下是几种常见的几何模型\",{\"1\":{\"670\":1}}],[\"以下是灰色预测模型的主要特点和具体模型\",{\"1\":{\"632\":1}}],[\"以下是如何在matlab中实现s型聚类和r型聚类的简单示例\",{\"1\":{\"565\":1}}],[\"以下是聚类分析的主要概念\",{\"1\":{\"508\":1}}],[\"以下是\",{\"1\":{\"456\":1,\"806\":1,\"1158\":1,\"1164\":1,\"1214\":1,\"1496\":1,\"1525\":1,\"1707\":1,\"1875\":1,\"1947\":1}}],[\"以下是解决旅行商问题的几种方法\",{\"1\":{\"410\":1}}],[\"以下是解决指派问题的一种常用方法\",{\"1\":{\"409\":1}}],[\"以下是matlab实现\",{\"1\":{\"399\":1}}],[\"以下是markdown的基础用法及示例\",{\"1\":{\"16\":1}}],[\"以下是图论的一些基本概念和知识\",{\"1\":{\"388\":1}}],[\"以下是数学建模的基本步骤和常用方法\",{\"1\":{\"380\":1}}],[\"以下是一些典型的主题和内容概述\",{\"1\":{\"2206\":1}}],[\"以下是一些使用\",{\"1\":{\"915\":1}}],[\"以下是一些差分方程模型在不同领域中的应用及其基本概念\",{\"1\":{\"868\":1}}],[\"以下是一些关键理论概念的简介\",{\"1\":{\"784\":1}}],[\"以下是一些主要的机器学习算法类别和各类别中的常见算法\",{\"1\":{\"592\":1}}],[\"以下是一些示例代码\",{\"1\":{\"477\":1}}],[\"以下是一些常见模式识别任务在python中的实现示例\",{\"1\":{\"587\":1}}],[\"以下是一些常见的数据输入和输出方法\",{\"1\":{\"1189\":1}}],[\"以下是一些常见的拟合方法的示例\",{\"1\":{\"940\":1}}],[\"以下是一些常见的插值方法的示例\",{\"1\":{\"934\":1}}],[\"以下是一些常见的机器学习算法的\",{\"1\":{\"600\":1}}],[\"以下是一些常见的回归模型和分析方法\",{\"1\":{\"496\":1}}],[\"以下是一些常见的回归模型\",{\"1\":{\"490\":1}}],[\"以下是一些常见的统计分析方法\",{\"1\":{\"464\":1}}],[\"以下是一些常见的内置模块\",{\"1\":{\"231\":1}}],[\"以下是一些常见的控制结构和循环结构\",{\"1\":{\"200\":1}}],[\"以下是一些常用方法\",{\"1\":{\"1704\":1}}],[\"以下是一些常用函数\",{\"1\":{\"955\":1}}],[\"以下是一些常用函数和示例\",{\"1\":{\"393\":1}}],[\"以下是一些常用的javadoc标签\",{\"1\":{\"2001\":1}}],[\"以下是一些常用的绘图方法和示例\",{\"1\":{\"1199\":1}}],[\"以下是一些常用的\",{\"1\":{\"799\":1}}],[\"以下是一些常用的图像处理工具\",{\"1\":{\"793\":1}}],[\"以下是一些常用的分类算法\",{\"1\":{\"576\":1}}],[\"以下是一些常用的数据类型转换方法\",{\"1\":{\"184\":1}}],[\"以下是一个自定义异常的示例\",{\"1\":{\"1909\":1}}],[\"以下是一个使用\",{\"1\":{\"1889\":1,\"1977\":1}}],[\"以下是一个使用反射的示例\",{\"1\":{\"1651\":1}}],[\"以下是一个使用遗传算法优化简单目标函数的python示例\",{\"1\":{\"434\":1}}],[\"以下是一个示例\",{\"1\":{\"657\":1}}],[\"以下是一个完整的示例代码\",{\"1\":{\"621\":1}}],[\"以下是一个简单的\",{\"1\":{\"1949\":1}}],[\"以下是一个简单的配置示例\",{\"1\":{\"1925\":1}}],[\"以下是一个简单的使用\",{\"1\":{\"1918\":1}}],[\"以下是一个简单的示例\",{\"1\":{\"1898\":1}}],[\"以下是一个简单的示例代码\",{\"1\":{\"619\":1,\"738\":1}}],[\"以下是一个简单的例子\",{\"1\":{\"886\":1}}],[\"以下是一个简单的k\",{\"1\":{\"543\":1}}],[\"以下是一个简单的逻辑回归分类示例\",{\"1\":{\"535\":1}}],[\"以下是一个简单的python面向对象编程示例\",{\"1\":{\"243\":1}}],[\"以下是一个0\",{\"1\":{\"408\":1}}],[\"以下是一个综合示例\",{\"1\":{\"259\":1,\"1196\":1,\"1677\":1}}],[\"以下是python代码\",{\"1\":{\"854\":1}}],[\"以下是python代码示例\",{\"1\":{\"722\":1}}],[\"以下是python中常见的i\",{\"1\":{\"259\":1}}],[\"以下是python中的常见运算符及其用法\",{\"1\":{\"192\":1}}],[\"以下是python函数编程的一些关键概念和技术\",{\"1\":{\"209\":1}}],[\"以下是关于\",{\"1\":{\"140\":1,\"149\":1,\"158\":1,\"167\":1,\"1180\":1}}],[\"以下值在转换为布尔值时为\",{\"1\":{\"139\":1}}],[\"子接口包括\",{\"1\":{\"1735\":1}}],[\"子类继承抽象类时\",{\"1\":{\"1558\":1}}],[\"子类继承父类的属性和方法\",{\"1\":{\"1499\":1}}],[\"子类重新定义父类的方法\",{\"1\":{\"1524\":1,\"1709\":1}}],[\"子类重写的方法的访问权限不能比父类的方法更严格\",{\"1\":{\"1519\":1}}],[\"子类重写的方法必须与父类的方法具有相同的名称\",{\"1\":{\"1519\":1}}],[\"子类重写父类方法的访问权限不能比父类方法更严格\",{\"1\":{\"1515\":1}}],[\"子类的方法也必须是\",{\"1\":{\"1519\":1}}],[\"子类对象可以访问父类的公共和保护成员\",{\"1\":{\"1516\":1}}],[\"子类必须定义自己的构造函数\",{\"1\":{\"1515\":1}}],[\"子类可以继承父类的所有非私有属性和方法\",{\"1\":{\"1709\":1}}],[\"子类可以使用\",{\"1\":{\"1664\":1}}],[\"子类可以修改从父类继承来的方法的行为\",{\"1\":{\"1518\":1}}],[\"子类可以访问父类的\",{\"1\":{\"1515\":1}}],[\"子类可以重写父类的方法以提供特定的实现\",{\"1\":{\"1513\":1}}],[\"子类可以重用父类的代码并扩展其功能\",{\"1\":{\"1470\":1}}],[\"子类方法\",{\"1\":{\"1509\":1}}],[\"子类属性\",{\"1\":{\"1509\":1}}],[\"子类\",{\"1\":{\"1507\":1,\"1508\":1}}],[\"子图\",{\"1\":{\"1209\":2}}],[\"子矩阵并求逆\",{\"1\":{\"1144\":1}}],[\"子循环\",{\"1\":{\"737\":1}}],[\"子代\",{\"1\":{\"432\":1}}],[\"子句在循环正常结束时执行\",{\"1\":{\"208\":1}}],[\"子句\",{\"0\":{\"208\":1}}],[\"子集\",{\"1\":{\"166\":1}}],[\"子定义\",{\"1\":{\"35\":1}}],[\"子项2\",{\"1\":{\"22\":1}}],[\"子项1\",{\"1\":{\"22\":1}}],[\"子项目2\",{\"1\":{\"21\":1}}],[\"子项目1\",{\"1\":{\"21\":1}}],[\"mvvm\",{\"2\":{\"2143\":1}}],[\"mm\",{\"1\":{\"1407\":2,\"1921\":2,\"1925\":2,\"2047\":2}}],[\"m文件\",{\"0\":{\"1180\":1}}],[\"m文件编辑调试器\",{\"1\":{\"1118\":1}}],[\"mx≥0​\",{\"1\":{\"842\":1}}],[\"mhj​\",{\"1\":{\"832\":1}}],[\"mcdm\",{\"1\":{\"752\":1}}],[\"mc^2\",{\"1\":{\"34\":1}}],[\"mtz\",{\"1\":{\"737\":1,\"738\":1,\"740\":1}}],[\"mplot3d\",{\"1\":{\"622\":1,\"680\":1}}],[\"mpl\",{\"1\":{\"622\":1,\"680\":1}}],[\"mnist手写数字数据集\",{\"1\":{\"610\":1}}],[\"mnist\",{\"1\":{\"610\":2}}],[\"mlogloss\",{\"1\":{\"609\":1}}],[\"mlpclassifier\",{\"1\":{\"608\":2}}],[\"mlp\",{\"1\":{\"593\":1,\"608\":1}}],[\"mouselistener\",{\"1\":{\"2030\":1}}],[\"mockuser\",{\"1\":{\"1858\":2}}],[\"mock\",{\"1\":{\"1858\":1}}],[\"mockito\",{\"1\":{\"1858\":4}}],[\"mockito<\",{\"1\":{\"1858\":1}}],[\"mockito是java中最流行的mocking框架之一\",{\"1\":{\"1858\":1}}],[\"mocking\",{\"0\":{\"1858\":1}}],[\"more\",{\"1\":{\"1818\":1,\"1949\":1}}],[\"moves\",{\"1\":{\"1709\":1}}],[\"move\",{\"1\":{\"1709\":2}}],[\"month\",{\"1\":{\"1402\":2,\"1994\":1}}],[\"monday\",{\"1\":{\"1322\":1,\"1494\":1,\"1604\":1,\"1606\":2,\"1608\":1,\"1612\":1}}],[\"monitor\",{\"1\":{\"1268\":1}}],[\"modification\",{\"1\":{\"1651\":2}}],[\"modifiers\",{\"0\":{\"1307\":1,\"1308\":1},\"1\":{\"1306\":1,\"1478\":1}}],[\"modifyvalue\",{\"1\":{\"1338\":1}}],[\"mod\",{\"1\":{\"738\":1,\"1170\":1}}],[\"models\",{\"1\":{\"599\":1,\"608\":1,\"610\":2,\"658\":1}}],[\"model\",{\"0\":{\"552\":1,\"558\":1},\"1\":{\"484\":6,\"488\":5,\"497\":5,\"498\":4,\"499\":4,\"500\":4,\"501\":4,\"502\":3,\"503\":3,\"524\":1,\"535\":5,\"558\":2,\"569\":1,\"571\":1,\"577\":5,\"578\":4,\"579\":4,\"580\":4,\"581\":4,\"588\":4,\"589\":4,\"594\":1,\"601\":5,\"602\":4,\"603\":4,\"604\":4,\"605\":4,\"606\":5,\"607\":4,\"608\":9,\"609\":8,\"610\":4,\"632\":1,\"660\":7,\"661\":1,\"678\":1,\"839\":1,\"852\":3,\"853\":1,\"1711\":5}}],[\"mop\",{\"0\":{\"710\":1}}],[\"moons\",{\"1\":{\"551\":2}}],[\"msg\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"mse\",{\"1\":{\"440\":1,\"497\":2,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"606\":2}}],[\"mstedges\",{\"1\":{\"394\":2,\"964\":7,\"965\":7}}],[\"mst\",{\"1\":{\"393\":1,\"955\":1,\"961\":1,\"962\":1}}],[\"midweek\",{\"1\":{\"1606\":1}}],[\"millis\",{\"1\":{\"1965\":2}}],[\"milliseconds\",{\"1\":{\"1401\":1}}],[\"miller\",{\"1\":{\"737\":1}}],[\"mission\",{\"1\":{\"1267\":1}}],[\"micro\",{\"1\":{\"1258\":1,\"1261\":1}}],[\"microsystems\",{\"1\":{\"1258\":1}}],[\"miktex\",{\"1\":{\"1100\":2}}],[\"mixture\",{\"0\":{\"552\":1,\"558\":1},\"1\":{\"552\":1,\"558\":2,\"594\":1}}],[\"mixed\",{\"0\":{\"711\":1},\"1\":{\"141\":1,\"142\":1,\"150\":1,\"151\":1,\"159\":1}}],[\"minutes\",{\"1\":{\"856\":1}}],[\"minsize=\",{\"1\":{\"827\":1}}],[\"minspantree\",{\"1\":{\"393\":1,\"955\":1}}],[\"minneighbors=5\",{\"1\":{\"827\":1}}],[\"minlp\",{\"0\":{\"711\":1}}],[\"minmaxscaler\",{\"1\":{\"658\":1,\"659\":1}}],[\"minpts\",{\"1\":{\"557\":2}}],[\"minimizemaximizesubject\",{\"1\":{\"842\":1}}],[\"minimizesubject\",{\"1\":{\"832\":1,\"837\":1}}],[\"minimizez=i=1∑n​j=1∑n​dij​xij​\",{\"1\":{\"737\":1}}],[\"minimize\",{\"1\":{\"460\":1,\"698\":1,\"715\":1}}],[\"minimum\",{\"1\":{\"400\":1,\"961\":1,\"962\":1}}],[\"min\",{\"1\":{\"398\":1,\"399\":1,\"409\":5,\"551\":1,\"763\":1,\"958\":1,\"965\":1,\"1392\":3,\"2037\":1}}],[\"messagedigest\",{\"1\":{\"2045\":1}}],[\"message\",{\"1\":{\"1448\":2,\"1528\":4,\"1909\":2,\"1922\":6,\"1926\":4,\"1938\":3,\"1970\":11}}],[\"mesh\",{\"1\":{\"1207\":2}}],[\"meshgrid\",{\"1\":{\"895\":1,\"1207\":1}}],[\"meshes\",{\"1\":{\"672\":1}}],[\"me的虚拟机也是\",{\"1\":{\"1261\":1}}],[\"me上使用\",{\"1\":{\"1261\":1}}],[\"me就和java\",{\"1\":{\"1261\":1}}],[\"me\",{\"1\":{\"1258\":1,\"1261\":1}}],[\"median\",{\"1\":{\"1229\":2}}],[\"member\",{\"1\":{\"1152\":1}}],[\"memory\",{\"0\":{\"656\":1},\"1\":{\"598\":1,\"1269\":1}}],[\"mendeley\",{\"0\":{\"1077\":1},\"1\":{\"1077\":1}}],[\"meters\",{\"1\":{\"1422\":2,\"1425\":1,\"1427\":2}}],[\"meta\",{\"1\":{\"1053\":1}}],[\"metamaterial\",{\"1\":{\"1053\":1}}],[\"metaballs\",{\"1\":{\"676\":1}}],[\"metric=\",{\"1\":{\"609\":1}}],[\"metrics=\",{\"1\":{\"608\":1,\"610\":1}}],[\"metrics\",{\"1\":{\"497\":1,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":2}}],[\"methodname\",{\"1\":{\"1514\":1,\"1991\":2}}],[\"methods\",{\"1\":{\"596\":1,\"1183\":1,\"1831\":1,\"2000\":1}}],[\"method=\",{\"1\":{\"550\":1,\"722\":1}}],[\"method\",{\"0\":{\"1475\":1,\"1690\":1,\"2011\":1},\"1\":{\"243\":1,\"718\":2,\"893\":1,\"902\":1,\"910\":1,\"939\":1,\"1265\":2,\"1333\":1,\"1561\":2,\"1644\":3,\"1645\":1,\"1651\":5,\"1655\":2,\"1826\":1,\"1830\":4,\"1831\":4,\"1843\":1,\"1844\":1,\"1845\":1,\"1846\":4,\"1993\":2}}],[\"meier生存分析\",{\"1\":{\"489\":1}}],[\"meier估计进行生存分析\",{\"1\":{\"489\":1}}],[\"means对生成的样本数据进行聚类\",{\"1\":{\"517\":1}}],[\"means\",{\"0\":{\"511\":1,\"517\":1},\"1\":{\"517\":1,\"540\":1,\"543\":1,\"549\":1,\"553\":1,\"555\":1,\"559\":1,\"586\":1,\"594\":1}}],[\"means聚类既可以用于s型聚类\",{\"1\":{\"563\":1}}],[\"means聚类是matlab中的一个常用算法\",{\"1\":{\"555\":1}}],[\"means聚类是最常用的聚类算法之一\",{\"1\":{\"549\":1}}],[\"means聚类算法对数据进行分组\",{\"1\":{\"543\":1}}],[\"means聚类示例\",{\"1\":{\"543\":1}}],[\"means聚类\",{\"0\":{\"549\":1,\"555\":1},\"1\":{\"485\":1,\"548\":1,\"554\":1}}],[\"means进行聚类\",{\"1\":{\"485\":1,\"555\":1}}],[\"mean\",{\"1\":{\"447\":1,\"449\":1,\"497\":3,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"606\":3,\"624\":3,\"660\":1,\"1229\":2}}],[\"meow\",{\"1\":{\"242\":2,\"243\":1,\"1513\":2,\"1530\":2,\"1541\":1,\"1542\":1}}],[\"merged\",{\"1\":{\"174\":1}}],[\"mkdir\",{\"1\":{\"232\":1,\"256\":1}}],[\"myinterface\",{\"1\":{\"1993\":3}}],[\"myiterator\",{\"1\":{\"224\":2}}],[\"myrunnable\",{\"1\":{\"1962\":3}}],[\"mythread\",{\"1\":{\"1961\":5,\"1966\":5}}],[\"myexternalizableclass\",{\"1\":{\"1865\":3}}],[\"myannotation\",{\"1\":{\"1844\":2,\"1846\":2}}],[\"myapp\",{\"1\":{\"1619\":2,\"1621\":1,\"1622\":1,\"1624\":2,\"1625\":2,\"1626\":1,\"1628\":1}}],[\"myarray\",{\"1\":{\"1351\":3,\"1352\":1,\"1353\":3,\"1354\":2,\"1356\":3,\"1357\":2}}],[\"mycallable\",{\"1\":{\"1963\":3}}],[\"mycar\",{\"1\":{\"1469\":4,\"1472\":2}}],[\"mycustomexception\",{\"1\":{\"1909\":4}}],[\"myclass是public和final的\",{\"1\":{\"1309\":1}}],[\"myclass\",{\"1\":{\"1183\":4,\"1283\":1,\"1307\":4,\"1308\":9,\"1309\":1,\"1317\":1,\"1335\":1,\"1336\":5,\"1343\":1,\"1480\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"1488\":1,\"1619\":2,\"1621\":5,\"1622\":4,\"1626\":1,\"1628\":1,\"1636\":1,\"1637\":1,\"1638\":2,\"1639\":1,\"1827\":4,\"1828\":3,\"1829\":2,\"1830\":2,\"1831\":4,\"1844\":1,\"1846\":1,\"1862\":1,\"1863\":6,\"1864\":1,\"1993\":5}}],[\"mybatisplus\",{\"1\":{\"1460\":1}}],[\"mybatis\",{\"0\":{\"2105\":1},\"1\":{\"1460\":1},\"2\":{\"2107\":1}}],[\"myvar\",{\"1\":{\"1305\":2}}],[\"mymethod\",{\"1\":{\"1301\":1,\"1346\":1,\"1644\":1,\"1844\":1,\"1846\":1,\"1990\":2}}],[\"myfield\",{\"1\":{\"1641\":1}}],[\"myfirstjavaclass\",{\"1\":{\"1275\":1}}],[\"myfunctionalinterface\",{\"1\":{\"1843\":1,\"1990\":2}}],[\"myfunction\",{\"1\":{\"1182\":5,\"1185\":1}}],[\"myscript\",{\"1\":{\"1181\":2}}],[\"mysql\",{\"1\":{\"1460\":1,\"1974\":1,\"1977\":1,\"1978\":4,\"1979\":1},\"2\":{\"330\":1}}],[\"my\",{\"1\":{\"226\":2,\"242\":4,\"261\":1}}],[\"mu\",{\"1\":{\"558\":2}}],[\"multiline\",{\"1\":{\"1953\":1}}],[\"multinomialnb\",{\"1\":{\"589\":2}}],[\"multi\",{\"0\":{\"710\":1},\"1\":{\"530\":1,\"752\":1,\"839\":1}}],[\"multiplication\",{\"1\":{\"2000\":1}}],[\"multiplier\",{\"1\":{\"215\":4}}],[\"multiplyexact\",{\"1\":{\"1392\":1}}],[\"multiplyby\",{\"1\":{\"1183\":2}}],[\"multiply\",{\"1\":{\"1152\":1,\"1344\":2,\"1693\":1}}],[\"multiplecatchexample\",{\"1\":{\"1901\":1}}],[\"multiple\",{\"0\":{\"492\":1}}],[\"mutual\",{\"1\":{\"515\":1}}],[\"mutation\",{\"1\":{\"432\":1,\"434\":10,\"435\":1}}],[\"must\",{\"1\":{\"243\":1,\"1447\":1}}],[\"music\",{\"0\":{\"73\":1}}],[\"m\",{\"1\":{\"202\":1,\"229\":2,\"618\":1,\"619\":1,\"642\":4,\"643\":2,\"715\":1,\"1141\":1,\"1144\":1,\"1172\":3,\"1180\":3,\"1181\":3,\"1182\":2,\"1183\":2,\"1185\":1,\"1186\":2,\"1187\":1,\"1188\":2,\"1413\":1,\"1947\":2}}],[\"mantissa\",{\"1\":{\"2154\":3}}],[\"manager\",{\"1\":{\"1996\":2}}],[\"mango\",{\"1\":{\"1748\":1,\"1751\":1}}],[\"manifold\",{\"1\":{\"594\":1}}],[\"maven\",{\"0\":{\"2060\":1},\"1\":{\"1460\":1,\"1920\":1},\"2\":{\"2062\":1}}],[\"macos\",{\"1\":{\"2190\":1}}],[\"mactex\",{\"1\":{\"1101\":2}}],[\"mac\",{\"0\":{\"1101\":1},\"1\":{\"2190\":1}}],[\"machines\",{\"1\":{\"593\":1}}],[\"machine\",{\"0\":{\"609\":1},\"1\":{\"367\":1,\"530\":1,\"589\":1,\"593\":1,\"1263\":1}}],[\"making\",{\"1\":{\"752\":1}}],[\"makesound\",{\"1\":{\"1554\":5,\"1597\":3}}],[\"makes\",{\"1\":{\"1513\":1,\"1520\":1,\"1530\":1,\"1709\":1}}],[\"make\",{\"1\":{\"215\":2,\"501\":1,\"517\":2,\"543\":2,\"549\":2,\"550\":2,\"551\":2,\"552\":2,\"622\":1,\"623\":1,\"626\":1}}],[\"male\",{\"1\":{\"481\":3}}],[\"mark\",{\"1\":{\"1885\":1}}],[\"markersize\",{\"1\":{\"555\":1,\"557\":1,\"558\":1}}],[\"marked\",{\"1\":{\"409\":9}}],[\"markdown模板\",{\"0\":{\"340\":1}}],[\"markdown文章模板\",{\"0\":{\"334\":1},\"1\":{\"336\":1}}],[\"markdown扩展语法\",{\"0\":{\"38\":1}}],[\"markdown\",{\"1\":{\"16\":1},\"2\":{\"37\":1,\"40\":1}}],[\"markdown写作手册\",{\"0\":{\"16\":1}}],[\"maximizesubject\",{\"1\":{\"836\":1}}],[\"maximize\",{\"1\":{\"715\":1}}],[\"maximum\",{\"1\":{\"395\":1}}],[\"maxpooling2d\",{\"1\":{\"610\":2}}],[\"maxclust\",{\"1\":{\"556\":1,\"565\":2}}],[\"max\",{\"1\":{\"398\":7,\"399\":7,\"408\":1,\"428\":4,\"434\":2,\"608\":1,\"763\":1,\"826\":1,\"895\":4,\"1292\":1,\"1308\":1,\"1309\":2,\"1392\":3,\"1502\":1,\"2037\":1}}],[\"mainfunction\",{\"1\":{\"1175\":2}}],[\"main\",{\"1\":{\"247\":2,\"248\":2,\"1274\":1,\"1275\":1,\"1292\":2,\"1336\":2,\"1370\":1,\"1373\":1,\"1376\":1,\"1384\":1,\"1392\":1,\"1393\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1418\":1,\"1422\":1,\"1425\":1,\"1427\":1,\"1428\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":1,\"1440\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":1,\"1503\":2,\"1511\":2,\"1512\":2,\"1513\":2,\"1514\":2,\"1516\":2,\"1520\":2,\"1523\":2,\"1528\":2,\"1530\":2,\"1533\":2,\"1536\":2,\"1541\":2,\"1546\":1,\"1547\":1,\"1548\":1,\"1554\":2,\"1557\":2,\"1561\":2,\"1568\":2,\"1579\":2,\"1581\":2,\"1583\":2,\"1588\":2,\"1591\":2,\"1594\":2,\"1597\":2,\"1606\":2,\"1608\":2,\"1610\":2,\"1612\":2,\"1621\":2,\"1622\":2,\"1624\":3,\"1626\":2,\"1628\":2,\"1629\":2,\"1651\":1,\"1655\":3,\"1658\":1,\"1661\":1,\"1667\":2,\"1670\":2,\"1671\":2,\"1677\":1,\"1682\":2,\"1705\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1818\":1,\"1820\":1,\"1823\":1,\"1831\":1,\"1846\":1,\"1863\":1,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":1,\"1883\":1,\"1890\":1,\"1891\":1,\"1898\":1,\"1901\":1,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":1,\"1918\":1,\"1922\":1,\"1926\":1,\"1933\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1949\":1,\"1950\":1,\"1952\":1,\"1954\":1,\"1956\":1,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1,\"1970\":1,\"1993\":2,\"1996\":2,\"2022\":1,\"2027\":1,\"2028\":1,\"2033\":1,\"2047\":1,\"2048\":1}}],[\"map`\",{\"1\":{\"1810\":1}}],[\"map<k\",{\"1\":{\"1735\":1,\"1837\":1}}],[\"map<string\",{\"1\":{\"1728\":2,\"1732\":1,\"1740\":3,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"map\",{\"0\":{\"1795\":1},\"1\":{\"212\":1,\"214\":1,\"1728\":2,\"1795\":3,\"1796\":2,\"1797\":2,\"1799\":1,\"1800\":1,\"1801\":12,\"1803\":8,\"1805\":8,\"1806\":1,\"1807\":8,\"1809\":8,\"1810\":2,\"1820\":2,\"2038\":1}}],[\"mat\",{\"1\":{\"1192\":3,\"1195\":3}}],[\"matlab高级\",{\"0\":{\"1235\":1}}],[\"matlab数学文档\",{\"1\":{\"1234\":1}}],[\"matlab数学\",{\"0\":{\"1214\":1}}],[\"matlab数学函数库包括大量的计算算法\",{\"1\":{\"1119\":1}}],[\"matlab数学函数库\",{\"0\":{\"1119\":1}}],[\"matlab绘图\",{\"0\":{\"1199\":1}}],[\"matlab编程\",{\"0\":{\"1157\":1}}],[\"matlab基础\",{\"0\":{\"1123\":1}}],[\"matlab应用程序接口可以使matlab方便地调用c和fortran程序\",{\"1\":{\"1122\":1}}],[\"matlab应用程序接口\",{\"0\":{\"1122\":1}}],[\"matlab包括强力的二维及三维图形函数\",{\"1\":{\"1121\":1}}],[\"matlab包括matlab命令行窗口\",{\"1\":{\"1118\":1}}],[\"matlab图形处理系统\",{\"0\":{\"1121\":1}}],[\"matlab语言是一个高级的基于矩阵\",{\"1\":{\"1120\":1}}],[\"matlab语言\",{\"0\":{\"1120\":1}}],[\"matlab工作区和在线帮助文档等\",{\"1\":{\"1118\":1}}],[\"matlab是一个集成化的工作区\",{\"1\":{\"1118\":1}}],[\"matlab是矩阵实验室\",{\"1\":{\"1116\":1}}],[\"matlab开发环境是一套方便用户使用matlab函数和文件的工具集\",{\"1\":{\"1118\":1}}],[\"matlab开发环境\",{\"0\":{\"1118\":1}}],[\"matlab系统组成\",{\"0\":{\"1117\":1}}],[\"matlab的应用范围非常广\",{\"1\":{\"1116\":1}}],[\"matlab的图像处理\",{\"0\":{\"806\":1}}],[\"matlab简介\",{\"0\":{\"1116\":1}}],[\"matlab程序设计与应用\",{\"1\":{\"1040\":1}}],[\"matlab中还有两种用于高级交叉编程的数据类型\",{\"1\":{\"1127\":1}}],[\"matlab中的数据类型主要包括数值类型\",{\"1\":{\"1127\":1}}],[\"matlab中的图论工具\",{\"0\":{\"955\":1}}],[\"matlab中图论的应用\",{\"0\":{\"393\":1}}],[\"matlab提供了许多函数来创建和操作图\",{\"1\":{\"955\":1}}],[\"matlab提供了dbscan函数用于密度聚类分析\",{\"1\":{\"557\":1}}],[\"matlab提供了丰富的函数库用于图论的研究和应用\",{\"1\":{\"393\":1}}],[\"matlab建模\",{\"0\":{\"453\":1}}],[\"matlab实现聚类算法\",{\"0\":{\"554\":1}}],[\"matlab实现\",{\"1\":{\"398\":1,\"958\":1,\"959\":1,\"960\":1,\"964\":1,\"965\":1}}],[\"matlab\",{\"0\":{\"565\":1,\"726\":1,\"732\":1,\"738\":1,\"1114\":1,\"1115\":1,\"1152\":1},\"1\":{\"378\":2,\"383\":1,\"726\":1,\"727\":1,\"732\":1,\"733\":1,\"738\":1,\"739\":1,\"794\":1,\"806\":3,\"838\":1,\"1115\":1,\"1117\":6,\"1128\":4,\"1131\":1,\"1145\":1,\"1151\":1,\"1158\":2,\"1163\":1,\"1164\":2,\"1170\":1,\"1171\":2,\"1172\":2,\"1175\":1,\"1178\":1,\"1179\":2,\"1180\":2,\"1181\":2,\"1182\":2,\"1183\":1,\"1185\":2,\"1186\":2,\"1188\":4,\"1189\":1,\"1199\":2,\"1212\":2,\"1214\":2,\"1217\":1,\"1218\":1},\"2\":{\"1245\":1}}],[\"matplotlib等库提供了强大的工具来实现模式识别任务\",{\"1\":{\"591\":1}}],[\"matplotlib\",{\"0\":{\"459\":1,\"2120\":1},\"1\":{\"240\":1,\"370\":1,\"428\":1,\"456\":1,\"459\":4,\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"590\":1,\"622\":2,\"640\":1,\"658\":1,\"680\":1,\"688\":1,\"804\":3,\"852\":1,\"856\":1,\"889\":1,\"895\":1,\"903\":1,\"911\":1,\"927\":1,\"928\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"947\":1,\"948\":1},\"2\":{\"2122\":1}}],[\"matrix\",{\"1\":{\"238\":2,\"390\":1,\"409\":14,\"599\":1,\"624\":2,\"626\":1,\"921\":7,\"954\":1,\"1116\":1,\"1128\":1,\"1139\":1,\"1144\":1,\"1359\":3,\"1360\":4}}],[\"matches\",{\"1\":{\"1416\":1,\"1418\":1,\"1950\":1,\"1951\":1}}],[\"matcher类用于执行匹配操作\",{\"1\":{\"1416\":1,\"1419\":1}}],[\"matcher\",{\"1\":{\"1410\":1,\"1415\":1,\"1416\":7,\"1418\":5,\"1946\":3,\"1949\":7,\"1951\":1,\"1954\":6,\"1956\":7,\"1957\":1,\"2043\":1,\"2048\":6}}],[\"matcher和patternsyntaxexception\",{\"1\":{\"1409\":1}}],[\"match语句被引入\",{\"1\":{\"202\":1}}],[\"match\",{\"0\":{\"202\":1},\"1\":{\"202\":1,\"1416\":1}}],[\"mathoperation\",{\"1\":{\"1686\":2,\"1693\":1}}],[\"mathoperations\",{\"1\":{\"1523\":4}}],[\"mathexample\",{\"1\":{\"1392\":1}}],[\"math类的方法不需要创建对象\",{\"1\":{\"1398\":1}}],[\"math类的所有方法都是静态的\",{\"1\":{\"1388\":1}}],[\"math类提供了一系列静态方法用于基本的数学运算\",{\"1\":{\"1398\":1}}],[\"math类提供了丰富的数学函数\",{\"1\":{\"1397\":1}}],[\"math类是java标准库中的一个工具类\",{\"1\":{\"1388\":1}}],[\"math类\",{\"0\":{\"1388\":1}}],[\"mathutils\",{\"1\":{\"1344\":2,\"1503\":2,\"1709\":1}}],[\"mathworks公司创立于1984年\",{\"1\":{\"1116\":1}}],[\"math\",{\"1\":{\"177\":5,\"229\":4,\"1392\":11,\"1393\":12,\"1394\":10,\"1395\":2,\"1396\":4,\"1523\":4,\"1630\":1,\"2001\":2,\"2037\":2}}],[\"=i=0∑n​yi​0≤j≤nj=i​∏​xi​−xj​x−xj​​\",{\"1\":{\"933\":1}}],[\"=i=1∑n​ri​xi​i=1∑n​σi​xi​≤σ0​i=1∑n​xi​=1xi​≥0\",{\"1\":{\"836\":1}}],[\"=sin\",{\"1\":{\"888\":1,\"894\":1,\"912\":1}}],[\"=g\",{\"1\":{\"884\":1,\"908\":1}}],[\"=n=1∑∞​bn​sin\",{\"1\":{\"884\":1}}],[\"=x\",{\"1\":{\"884\":2}}],[\"=xmax​−xmin​x−xmin​​\",{\"1\":{\"759\":1,\"763\":1}}],[\"=u\",{\"1\":{\"884\":1,\"901\":1}}],[\"=f\",{\"1\":{\"884\":1,\"900\":1,\"908\":1}}],[\"=0\",{\"1\":{\"832\":1,\"864\":1,\"880\":1,\"884\":1,\"888\":2,\"894\":3,\"901\":1,\"909\":2,\"912\":1}}],[\"=∑i=1n​xi2​​x​\",{\"1\":{\"763\":1}}],[\"==\",{\"1\":{\"194\":1,\"201\":1,\"206\":1,\"207\":1,\"208\":1,\"213\":1,\"247\":1,\"248\":1,\"398\":1,\"399\":1,\"409\":2,\"447\":1,\"449\":1,\"960\":1,\"964\":1,\"1147\":2,\"1152\":1,\"1167\":1,\"1168\":1,\"1170\":1,\"1313\":2,\"1329\":1,\"1330\":1,\"1331\":1,\"1345\":1,\"1668\":4,\"1671\":1,\"1673\":1,\"1676\":4,\"1677\":5,\"1992\":1,\"2000\":1,\"2010\":1,\"2011\":1,\"2012\":2}}],[\"=\",{\"1\":{\"34\":1,\"141\":4,\"142\":3,\"143\":1,\"144\":2,\"146\":1,\"147\":2,\"148\":3,\"150\":6,\"151\":3,\"152\":2,\"153\":12,\"154\":2,\"155\":4,\"157\":3,\"159\":5,\"160\":1,\"161\":10,\"162\":3,\"163\":1,\"165\":2,\"166\":6,\"168\":3,\"169\":3,\"170\":2,\"171\":2,\"172\":6,\"173\":1,\"174\":3,\"176\":3,\"177\":3,\"180\":3,\"182\":3,\"185\":6,\"186\":4,\"187\":4,\"188\":4,\"189\":4,\"190\":4,\"191\":2,\"193\":7,\"194\":7,\"195\":3,\"196\":6,\"197\":20,\"198\":2,\"199\":5,\"201\":1,\"203\":1,\"204\":1,\"212\":3,\"214\":3,\"215\":1,\"217\":2,\"219\":2,\"221\":1,\"222\":1,\"223\":1,\"224\":3,\"226\":1,\"234\":3,\"235\":1,\"237\":1,\"238\":2,\"239\":3,\"240\":2,\"242\":9,\"243\":2,\"245\":1,\"246\":2,\"248\":5,\"251\":2,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"257\":2,\"258\":2,\"259\":3,\"261\":2,\"262\":2,\"384\":7,\"389\":3,\"390\":4,\"393\":7,\"394\":5,\"398\":33,\"399\":33,\"408\":4,\"409\":23,\"410\":10,\"423\":2,\"424\":1,\"427\":1,\"428\":20,\"429\":1,\"434\":32,\"435\":1,\"446\":3,\"447\":5,\"448\":2,\"449\":10,\"457\":8,\"458\":4,\"459\":4,\"460\":5,\"478\":3,\"479\":3,\"480\":4,\"481\":4,\"482\":3,\"483\":4,\"484\":4,\"485\":2,\"486\":4,\"487\":3,\"488\":5,\"489\":3,\"491\":1,\"492\":1,\"494\":1,\"495\":1,\"497\":8,\"498\":4,\"499\":4,\"500\":4,\"501\":7,\"502\":4,\"503\":4,\"517\":4,\"524\":7,\"535\":10,\"543\":4,\"549\":4,\"550\":4,\"551\":4,\"552\":3,\"555\":3,\"556\":5,\"557\":4,\"558\":4,\"565\":6,\"569\":8,\"571\":7,\"577\":10,\"578\":10,\"579\":10,\"580\":10,\"581\":10,\"588\":7,\"589\":9,\"590\":6,\"601\":10,\"602\":10,\"603\":10,\"604\":10,\"605\":10,\"606\":7,\"607\":7,\"608\":15,\"609\":14,\"610\":7,\"619\":6,\"623\":3,\"624\":11,\"625\":1,\"634\":3,\"641\":13,\"642\":6,\"643\":4,\"649\":11,\"659\":9,\"660\":1,\"661\":3,\"676\":1,\"680\":23,\"688\":10,\"700\":4,\"722\":6,\"726\":7,\"732\":7,\"738\":28,\"800\":2,\"801\":2,\"802\":2,\"803\":2,\"804\":1,\"805\":2,\"807\":1,\"808\":1,\"809\":2,\"810\":1,\"811\":3,\"812\":3,\"813\":1,\"814\":2,\"815\":2,\"816\":1,\"818\":2,\"819\":2,\"820\":3,\"821\":2,\"822\":2,\"823\":3,\"824\":3,\"825\":4,\"826\":5,\"827\":4,\"851\":3,\"852\":11,\"856\":14,\"866\":3,\"889\":15,\"895\":23,\"903\":18,\"911\":19,\"916\":1,\"917\":3,\"918\":2,\"919\":2,\"920\":2,\"921\":6,\"923\":5,\"924\":3,\"925\":3,\"927\":18,\"935\":5,\"936\":5,\"937\":5,\"941\":4,\"942\":6,\"943\":5,\"944\":4,\"947\":6,\"948\":12,\"954\":2,\"955\":10,\"958\":15,\"959\":16,\"960\":10,\"964\":27,\"965\":20,\"1130\":1,\"1131\":4,\"1133\":4,\"1134\":4,\"1135\":2,\"1136\":2,\"1138\":3,\"1139\":2,\"1141\":2,\"1142\":4,\"1143\":3,\"1144\":14,\"1151\":2,\"1152\":37,\"1154\":11,\"1155\":11,\"1156\":7,\"1159\":1,\"1160\":1,\"1161\":1,\"1162\":1,\"1163\":2,\"1165\":3,\"1166\":3,\"1167\":1,\"1168\":1,\"1169\":4,\"1170\":2,\"1172\":4,\"1173\":4,\"1174\":1,\"1175\":5,\"1176\":3,\"1177\":2,\"1178\":6,\"1179\":3,\"1181\":3,\"1182\":5,\"1183\":7,\"1185\":5,\"1191\":2,\"1192\":3,\"1195\":1,\"1196\":4,\"1201\":2,\"1202\":2,\"1203\":2,\"1204\":1,\"1206\":4,\"1207\":2,\"1209\":3,\"1210\":3,\"1216\":5,\"1217\":2,\"1218\":6,\"1219\":3,\"1221\":8,\"1222\":10,\"1224\":1,\"1225\":1,\"1226\":2,\"1227\":1,\"1229\":5,\"1230\":5,\"1232\":5,\"1233\":1,\"1281\":1,\"1282\":1,\"1291\":1,\"1292\":5,\"1294\":4,\"1295\":6,\"1297\":3,\"1298\":6,\"1299\":4,\"1301\":1,\"1303\":2,\"1304\":2,\"1308\":2,\"1309\":1,\"1312\":15,\"1313\":2,\"1316\":1,\"1318\":1,\"1321\":1,\"1322\":1,\"1324\":2,\"1325\":1,\"1326\":2,\"1327\":2,\"1329\":1,\"1330\":1,\"1331\":4,\"1336\":2,\"1338\":1,\"1344\":1,\"1346\":1,\"1351\":2,\"1352\":1,\"1353\":3,\"1354\":2,\"1356\":2,\"1357\":1,\"1359\":3,\"1360\":3,\"1362\":2,\"1363\":1,\"1364\":2,\"1365\":4,\"1370\":7,\"1373\":1,\"1376\":1,\"1384\":4,\"1385\":2,\"1393\":1,\"1401\":3,\"1402\":1,\"1404\":4,\"1405\":2,\"1406\":6,\"1407\":5,\"1416\":5,\"1418\":4,\"1422\":4,\"1425\":2,\"1427\":4,\"1428\":3,\"1433\":4,\"1434\":4,\"1436\":4,\"1437\":4,\"1439\":1,\"1440\":2,\"1445\":1,\"1446\":1,\"1469\":3,\"1471\":2,\"1472\":1,\"1486\":1,\"1502\":1,\"1503\":1,\"1504\":1,\"1505\":2,\"1511\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1516\":1,\"1520\":1,\"1523\":1,\"1528\":1,\"1530\":2,\"1533\":2,\"1536\":2,\"1538\":2,\"1539\":2,\"1541\":3,\"1542\":3,\"1545\":2,\"1546\":2,\"1547\":2,\"1548\":4,\"1554\":1,\"1557\":2,\"1561\":1,\"1568\":5,\"1579\":1,\"1583\":1,\"1588\":3,\"1589\":1,\"1591\":2,\"1592\":1,\"1594\":2,\"1597\":1,\"1606\":1,\"1608\":1,\"1610\":1,\"1612\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1636\":1,\"1637\":1,\"1638\":2,\"1639\":2,\"1641\":1,\"1642\":1,\"1644\":1,\"1645\":1,\"1647\":1,\"1648\":1,\"1651\":5,\"1654\":5,\"1655\":5,\"1661\":10,\"1667\":1,\"1668\":2,\"1670\":2,\"1671\":2,\"1673\":2,\"1676\":2,\"1677\":8,\"1680\":4,\"1682\":3,\"1686\":1,\"1688\":1,\"1689\":1,\"1690\":2,\"1691\":2,\"1692\":1,\"1693\":2,\"1699\":2,\"1700\":2,\"1702\":2,\"1703\":2,\"1705\":7,\"1709\":2,\"1711\":4,\"1713\":2,\"1722\":3,\"1723\":3,\"1725\":2,\"1726\":2,\"1727\":2,\"1728\":2,\"1730\":2,\"1731\":1,\"1732\":1,\"1737\":3,\"1738\":3,\"1739\":2,\"1740\":3,\"1748\":4,\"1751\":4,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":2,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":2,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":3,\"1818\":8,\"1823\":4,\"1827\":4,\"1828\":4,\"1829\":4,\"1830\":3,\"1831\":2,\"1836\":1,\"1843\":1,\"1844\":1,\"1846\":3,\"1853\":2,\"1855\":2,\"1856\":1,\"1857\":1,\"1858\":4,\"1862\":1,\"1863\":7,\"1864\":1,\"1865\":4,\"1870\":3,\"1871\":2,\"1873\":3,\"1874\":2,\"1876\":6,\"1883\":6,\"1887\":5,\"1890\":4,\"1891\":2,\"1898\":1,\"1901\":2,\"1903\":1,\"1918\":1,\"1922\":1,\"1926\":1,\"1933\":3,\"1935\":6,\"1936\":6,\"1938\":10,\"1939\":8,\"1941\":1,\"1942\":6,\"1949\":4,\"1950\":2,\"1952\":3,\"1954\":4,\"1956\":4,\"1961\":3,\"1962\":3,\"1963\":5,\"1966\":3,\"1968\":2,\"1969\":2,\"1970\":2,\"1979\":5,\"1980\":2,\"1981\":4,\"1982\":4,\"1983\":3,\"1984\":3,\"1985\":6,\"1989\":1,\"1990\":1,\"1991\":1,\"1992\":2,\"1993\":1,\"1994\":4,\"1995\":2,\"1996\":2,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":1,\"2013\":1,\"2022\":2,\"2027\":1,\"2028\":1,\"2031\":1,\"2033\":3,\"2047\":4,\"2048\":4}}],[\"two\",{\"1\":{\"1728\":1,\"1740\":1,\"2000\":1}}],[\"tcpserver\",{\"1\":{\"1936\":1}}],[\"tcpclient\",{\"1\":{\"1935\":1}}],[\"tcp\",{\"0\":{\"1934\":1,\"1935\":1,\"1936\":1,\"2232\":1},\"1\":{\"1882\":2,\"1929\":1,\"1930\":1,\"1931\":1,\"1934\":3,\"1944\":1,\"2040\":3},\"2\":{\"2237\":1}}],[\"tcharacter\",{\"1\":{\"1292\":1}}],[\"tck\",{\"1\":{\"936\":2,\"944\":2}}],[\"type=\",{\"1\":{\"1654\":1}}],[\"types\",{\"0\":{\"1286\":1,\"1287\":1}}],[\"type\",{\"0\":{\"1288\":1,\"1289\":1},\"1\":{\"1126\":1,\"1608\":5,\"1654\":10,\"1836\":1,\"1845\":1}}],[\"t=\",{\"1\":{\"889\":1,\"903\":1,\"911\":1}}],[\"t2\",{\"1\":{\"856\":4,\"1548\":3}}],[\"t1\",{\"1\":{\"856\":6,\"1548\":3}}],[\"t−tenv​\",{\"1\":{\"854\":1}}],[\"tuesday\",{\"1\":{\"1322\":1,\"1494\":1,\"1604\":1,\"1608\":1,\"1612\":1}}],[\"tug\",{\"1\":{\"1100\":1,\"1101\":1}}],[\"tucker\",{\"1\":{\"737\":1}}],[\"tuple\",{\"0\":{\"149\":1},\"1\":{\"136\":1,\"149\":1,\"150\":3,\"152\":2,\"188\":2,\"189\":7}}],[\"tf\",{\"1\":{\"608\":1,\"610\":1}}],[\"tsa\",{\"1\":{\"488\":1}}],[\"tsp旅行商问题\",{\"0\":{\"735\":1}}],[\"tsp\",{\"0\":{\"736\":1},\"1\":{\"410\":1,\"426\":1,\"437\":1,\"735\":1,\"738\":1}}],[\"ttest\",{\"1\":{\"460\":1,\"479\":1}}],[\"t检验\",{\"1\":{\"460\":1,\"479\":1}}],[\"taro\",{\"0\":{\"2144\":1},\"2\":{\"2146\":1}}],[\"target=\",{\"1\":{\"1921\":1}}],[\"targettype\",{\"1\":{\"1295\":2}}],[\"target\",{\"1\":{\"497\":1,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"590\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"1844\":2,\"1845\":1}}],[\"take\",{\"1\":{\"1767\":1,\"1768\":1}}],[\"task2\",{\"1\":{\"1727\":1,\"1739\":1}}],[\"task1\",{\"1\":{\"1727\":1,\"1739\":1}}],[\"tab\",{\"1\":{\"1292\":2}}],[\"table\",{\"1\":{\"481\":3}}],[\"tan\",{\"1\":{\"1218\":2,\"1393\":3}}],[\"tanh等\",{\"1\":{\"440\":1}}],[\"tag\",{\"1\":{\"336\":1}}],[\"txt\",{\"1\":{\"251\":2,\"252\":2,\"253\":2,\"254\":1,\"255\":1,\"256\":3,\"259\":1,\"1192\":1,\"1195\":1,\"1196\":2,\"1433\":2,\"1434\":2,\"1439\":1,\"1440\":1,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1883\":1}}],[\"t\",{\"1\":{\"251\":1,\"396\":1,\"398\":1,\"423\":4,\"424\":2,\"447\":1,\"449\":1,\"460\":1,\"479\":3,\"541\":2,\"556\":2,\"565\":2,\"594\":2,\"614\":1,\"624\":1,\"634\":2,\"852\":8,\"853\":3,\"854\":4,\"856\":24,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":2,\"884\":6,\"887\":1,\"888\":2,\"889\":3,\"890\":1,\"898\":1,\"901\":2,\"903\":3,\"904\":1,\"906\":1,\"909\":2,\"911\":3,\"912\":1,\"923\":7,\"924\":4,\"926\":2,\"927\":4,\"928\":1,\"948\":12,\"1206\":4,\"1292\":1,\"1836\":9,\"1838\":2,\"1840\":1,\"1843\":1,\"1921\":1}}],[\"tdd\",{\"1\":{\"247\":1}}],[\"tiling\",{\"1\":{\"686\":2}}],[\"tile函数逐行铺设瓷砖\",{\"1\":{\"689\":1}}],[\"tile函数\",{\"1\":{\"689\":1}}],[\"tiles\",{\"1\":{\"688\":4}}],[\"tile\",{\"1\":{\"686\":1,\"688\":16,\"689\":1,\"690\":1}}],[\"tips\",{\"1\":{\"459\":3}}],[\"timezone\",{\"1\":{\"2038\":1}}],[\"time包下\",{\"1\":{\"1994\":1}}],[\"time包提供了更好的日期时间处理能力\",{\"1\":{\"1408\":1}}],[\"time包\",{\"1\":{\"1403\":1}}],[\"time包中的类来处理日期时间问题\",{\"1\":{\"1408\":1}}],[\"time包中的类代替\",{\"1\":{\"1401\":1}}],[\"time包中的类\",{\"1\":{\"1399\":1}}],[\"timeinmillis\",{\"1\":{\"1401\":2}}],[\"time\",{\"0\":{\"1994\":1},\"1\":{\"489\":2,\"643\":1,\"659\":6,\"660\":1,\"661\":2,\"852\":1,\"856\":1,\"1259\":1,\"1266\":1,\"1401\":3,\"1402\":1,\"1404\":5,\"1405\":5,\"1406\":3,\"1407\":4,\"1408\":1,\"1994\":4,\"2036\":1,\"2041\":1,\"2047\":3}}],[\"timeline\",{\"1\":{\"336\":1}}],[\"times\",{\"1\":{\"215\":2,\"390\":1,\"564\":3}}],[\"title=\",{\"1\":{\"1654\":1}}],[\"title\",{\"1\":{\"240\":1,\"336\":1,\"428\":1,\"459\":1,\"460\":1,\"550\":1,\"555\":1,\"556\":2,\"557\":1,\"558\":1,\"569\":1,\"590\":1,\"623\":1,\"624\":1,\"625\":1,\"643\":1,\"661\":1,\"852\":1,\"856\":1,\"889\":1,\"895\":1,\"903\":1,\"911\":1,\"927\":1,\"947\":3,\"948\":2,\"955\":1,\"1201\":1,\"1202\":1,\"1203\":1,\"1204\":1,\"1206\":1,\"1207\":2,\"1209\":2,\"1210\":1,\"1654\":10,\"1661\":11,\"1663\":2}}],[\"thursday\",{\"1\":{\"1494\":1,\"1604\":1,\"1608\":1,\"1612\":1}}],[\"thumbsup\",{\"1\":{\"32\":1}}],[\"throwable\",{\"1\":{\"1672\":2,\"1895\":2,\"1896\":1}}],[\"throwexample\",{\"1\":{\"1447\":1,\"1906\":1}}],[\"throw用于显式地抛出一个异常\",{\"1\":{\"1447\":1}}],[\"throw\",{\"1\":{\"1443\":1,\"1447\":1,\"1448\":1,\"1453\":1,\"1818\":1,\"1897\":1,\"1905\":1,\"1906\":1,\"1908\":1,\"1909\":1,\"1911\":1,\"2000\":1,\"2001\":1}}],[\"throw关键字和自定义异常类\",{\"1\":{\"1442\":1}}],[\"throws或\",{\"1\":{\"2001\":1}}],[\"throwsexample\",{\"1\":{\"1908\":1}}],[\"throws\",{\"1\":{\"1283\":1,\"1448\":1,\"1651\":1,\"1655\":1,\"1671\":3,\"1672\":2,\"1673\":3,\"1677\":2,\"1768\":1,\"1831\":1,\"1846\":1,\"1865\":2,\"1883\":1,\"1897\":1,\"1905\":1,\"1908\":1,\"1911\":1,\"1963\":1,\"1996\":1,\"2000\":2,\"2001\":1}}],[\"threadpoolexecutor\",{\"1\":{\"2044\":1}}],[\"threadcommunicationexample\",{\"1\":{\"1970\":1}}],[\"threadcontrolexample\",{\"1\":{\"1966\":1}}],[\"thread2\",{\"1\":{\"1961\":2,\"1962\":2,\"1966\":2}}],[\"thread1\",{\"1\":{\"1961\":2,\"1962\":2,\"1966\":4}}],[\"threadexample\",{\"1\":{\"1961\":1}}],[\"thread\",{\"1\":{\"1259\":4,\"1548\":4,\"1688\":1,\"1925\":1,\"1958\":1,\"1959\":1,\"1960\":1,\"1961\":3,\"1962\":5,\"1963\":1,\"1966\":3,\"1970\":3,\"2037\":1}}],[\"thresh\",{\"1\":{\"824\":1}}],[\"threshold\",{\"1\":{\"824\":1}}],[\"thresholding\",{\"0\":{\"824\":1}}],[\"three\",{\"1\":{\"215\":2}}],[\"thz的电磁波\",{\"1\":{\"1052\":1}}],[\"thinking\",{\"1\":{\"998\":1}}],[\"this\",{\"1\":{\"216\":2,\"1303\":2,\"1446\":1,\"1448\":1,\"1471\":2,\"1504\":1,\"1505\":3,\"1511\":1,\"1548\":1,\"1554\":2,\"1561\":2,\"1568\":4,\"1581\":2,\"1594\":2,\"1608\":1,\"1612\":1,\"1654\":5,\"1661\":5,\"1663\":1,\"1668\":2,\"1673\":2,\"1676\":1,\"1677\":4,\"1680\":4,\"1682\":2,\"1709\":2,\"1711\":4,\"1713\":6,\"1723\":1,\"1818\":4,\"1831\":1,\"1836\":1,\"1863\":2,\"1865\":2,\"1876\":2,\"1922\":6,\"1926\":4,\"1949\":1,\"1968\":1,\"1970\":1,\"1993\":2}}],[\"thenreturn\",{\"1\":{\"1858\":1}}],[\"theta\",{\"1\":{\"680\":6}}],[\"the\",{\"0\":{\"2255\":1},\"1\":{\"202\":1,\"226\":4,\"261\":1,\"895\":1,\"1040\":1,\"1181\":1,\"1416\":1,\"1439\":2,\"1470\":1,\"1583\":2,\"1606\":2,\"1661\":2,\"1663\":3,\"1853\":1,\"2000\":7,\"2001\":5,\"2048\":2}}],[\"teardown\",{\"1\":{\"1855\":1}}],[\"teapot\",{\"1\":{\"202\":1}}],[\"texshop\",{\"1\":{\"1101\":1}}],[\"texstudio\",{\"1\":{\"1100\":2,\"1101\":2,\"1102\":2}}],[\"texstudio或overleaf\",{\"1\":{\"1100\":1,\"1101\":1,\"1102\":1,\"1103\":1}}],[\"texworks\",{\"1\":{\"1100\":1,\"1102\":1}}],[\"texlive\",{\"1\":{\"1100\":1,\"1102\":2}}],[\"tex\",{\"1\":{\"1100\":1,\"1103\":1,\"1106\":1}}],[\"texts\",{\"1\":{\"589\":2}}],[\"text\",{\"1\":{\"24\":1,\"176\":2,\"219\":2,\"589\":2,\"698\":1,\"699\":4,\"1416\":3,\"1949\":3,\"1952\":2,\"1954\":2,\"1956\":2,\"2048\":2}}],[\"ternary\",{\"0\":{\"1316\":1}}],[\"terahertz\",{\"1\":{\"1052\":1}}],[\"terminated\",{\"1\":{\"1964\":2}}],[\"termination\",{\"1\":{\"432\":1}}],[\"term\",{\"0\":{\"656\":1},\"1\":{\"598\":1}}],[\"technology\",{\"1\":{\"1040\":1}}],[\"technique\",{\"1\":{\"754\":1}}],[\"tenv​\",{\"1\":{\"854\":1}}],[\"tensorflow\",{\"1\":{\"608\":5,\"610\":5,\"658\":2,\"797\":1}}],[\"tempvalue\",{\"1\":{\"1308\":1}}],[\"temperature\",{\"1\":{\"856\":2}}],[\"temp\",{\"1\":{\"428\":7,\"738\":3}}],[\"template\",{\"2\":{\"341\":1}}],[\"testdb\",{\"1\":{\"1979\":1}}],[\"testdivide\",{\"1\":{\"1856\":1}}],[\"testgetuserbyid\",{\"1\":{\"1858\":1}}],[\"testispositive\",{\"1\":{\"1857\":1}}],[\"testing\",{\"1\":{\"247\":3,\"1849\":1}}],[\"testadd\",{\"1\":{\"1853\":1,\"1855\":1}}],[\"test注解\",{\"1\":{\"1847\":1}}],[\"testsubtract\",{\"1\":{\"1855\":1}}],[\"tests\",{\"1\":{\"1185\":2}}],[\"testmultiplybythree\",{\"1\":{\"1185\":1}}],[\"testmyfunction\",{\"1\":{\"1185\":3}}],[\"testmathfunctions\",{\"1\":{\"247\":1}}],[\"testperson\",{\"1\":{\"248\":1}}],[\"test\",{\"1\":{\"247\":1,\"248\":1,\"448\":3,\"449\":3,\"497\":8,\"498\":3,\"499\":3,\"500\":3,\"501\":7,\"502\":3,\"503\":3,\"524\":7,\"528\":1,\"535\":9,\"569\":7,\"571\":7,\"577\":7,\"578\":7,\"579\":7,\"580\":7,\"581\":7,\"588\":7,\"589\":7,\"601\":7,\"602\":7,\"603\":7,\"604\":7,\"605\":7,\"606\":7,\"607\":7,\"608\":14,\"609\":14,\"610\":12,\"1185\":1,\"1448\":2,\"1853\":3,\"1855\":2,\"1856\":1,\"1858\":2}}],[\"testcase\",{\"1\":{\"247\":1,\"248\":1,\"1185\":2}}],[\"touppercase\",{\"1\":{\"2037\":1}}],[\"together\",{\"1\":{\"2000\":1}}],[\"tohexstring\",{\"1\":{\"1667\":1}}],[\"tohours\",{\"1\":{\"1406\":1}}],[\"toyota\",{\"1\":{\"1469\":1}}],[\"tomcat\",{\"0\":{\"2102\":1},\"1\":{\"1460\":1},\"2\":{\"2104\":1}}],[\"tolist\",{\"1\":{\"1992\":1}}],[\"tolocaldate\",{\"1\":{\"1406\":2}}],[\"tolerance\",{\"1\":{\"895\":4}}],[\"today\",{\"1\":{\"1404\":3,\"1406\":3,\"1606\":2}}],[\"todegrees\",{\"1\":{\"1393\":1}}],[\"toradians\",{\"1\":{\"1393\":2}}],[\"tointexact\",{\"1\":{\"1392\":1}}],[\"tostring\",{\"1\":{\"1373\":4,\"1376\":4,\"1654\":5,\"1667\":4,\"1675\":1,\"1677\":4,\"1678\":1,\"1682\":2,\"1843\":1,\"1876\":1,\"1942\":1,\"2037\":1}}],[\"toc\",{\"1\":{\"1110\":1}}],[\"to​i=1∑n​\",{\"1\":{\"837\":1}}],[\"to​r\",{\"1\":{\"836\":1}}],[\"to​f1​\",{\"1\":{\"842\":1}}],[\"to​f\",{\"1\":{\"832\":1}}],[\"top\",{\"1\":{\"1730\":1,\"1774\":1,\"1777\":1}}],[\"topsis法\",{\"1\":{\"754\":1,\"763\":1}}],[\"topological\",{\"1\":{\"392\":1}}],[\"toolkit\",{\"1\":{\"2018\":1}}],[\"toolkits\",{\"1\":{\"622\":1,\"680\":1}}],[\"tool\",{\"1\":{\"1269\":1,\"1847\":1}}],[\"toolbox\",{\"1\":{\"806\":1}}],[\"tools\",{\"2\":{\"327\":1}}],[\"total\",{\"1\":{\"410\":4,\"459\":1,\"480\":2,\"1178\":2}}],[\"totalweight\",{\"1\":{\"394\":2,\"964\":7,\"965\":7}}],[\"to\",{\"1\":{\"159\":2,\"408\":2,\"610\":3,\"754\":1,\"895\":1,\"1439\":1,\"1661\":1,\"1663\":2,\"1941\":1,\"2000\":1,\"2001\":1}}],[\"trie树等\",{\"1\":{\"1733\":1}}],[\"trigonometryexample\",{\"1\":{\"1393\":1}}],[\"trisurf绘制三维表面\",{\"1\":{\"681\":1}}],[\"trisurf\",{\"1\":{\"680\":1}}],[\"trivial\",{\"1\":{\"391\":1}}],[\"transientfield\",{\"1\":{\"1491\":1}}],[\"transient\",{\"1\":{\"1308\":2,\"1491\":1,\"1864\":2}}],[\"transactions\",{\"1\":{\"1040\":1}}],[\"transpose\",{\"1\":{\"641\":1,\"1152\":1,\"1222\":1}}],[\"transformer\",{\"1\":{\"598\":1}}],[\"transform\",{\"1\":{\"487\":1,\"501\":1,\"535\":2,\"551\":1,\"569\":1,\"589\":1,\"590\":1,\"608\":1,\"619\":2,\"659\":1,\"661\":2,\"924\":3,\"925\":3}}],[\"train\",{\"1\":{\"497\":6,\"498\":2,\"499\":2,\"500\":2,\"501\":5,\"502\":2,\"503\":2,\"524\":6,\"535\":8,\"569\":6,\"571\":6,\"577\":6,\"578\":6,\"579\":6,\"580\":6,\"581\":6,\"588\":6,\"589\":6,\"601\":6,\"602\":6,\"603\":6,\"604\":6,\"605\":6,\"606\":6,\"607\":6,\"608\":14,\"609\":12,\"610\":9,\"661\":4}}],[\"training\",{\"1\":{\"448\":1,\"449\":1,\"528\":1,\"595\":1}}],[\"traveling\",{\"1\":{\"410\":3,\"735\":1}}],[\"trace\",{\"1\":{\"246\":1,\"1922\":2}}],[\"treemapexample\",{\"1\":{\"1805\":1}}],[\"treemap<k\",{\"1\":{\"1740\":1}}],[\"treemap<>\",{\"1\":{\"1728\":1,\"1740\":1,\"1805\":1}}],[\"treemap\",{\"1\":{\"1728\":5,\"1735\":1,\"1738\":1,\"1740\":3,\"1797\":1,\"1799\":1,\"1804\":2,\"1805\":2,\"1810\":1,\"2038\":1}}],[\"treesetexample\",{\"1\":{\"1790\":1}}],[\"treeset<e>\",{\"1\":{\"1738\":1}}],[\"treeset<>\",{\"1\":{\"1726\":1,\"1738\":1,\"1790\":1}}],[\"treeset\",{\"1\":{\"1726\":5,\"1735\":1,\"1738\":3,\"1782\":1,\"1784\":1,\"1789\":2,\"1790\":3,\"1794\":1,\"2038\":1}}],[\"trees\",{\"1\":{\"597\":1}}],[\"tree\",{\"0\":{\"503\":1,\"579\":1,\"603\":1},\"1\":{\"391\":1,\"503\":13,\"530\":1,\"531\":1,\"579\":2,\"593\":2,\"603\":2,\"961\":1,\"962\":2}}],[\"try块中包含可能引发异常的代码\",{\"1\":{\"1445\":1}}],[\"try\",{\"1\":{\"133\":1,\"1428\":1,\"1433\":2,\"1434\":2,\"1436\":2,\"1437\":2,\"1439\":1,\"1440\":2,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":1,\"1453\":1,\"1548\":1,\"1672\":2,\"1863\":2,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":2,\"1890\":1,\"1891\":1,\"1897\":1,\"1898\":2,\"1900\":1,\"1901\":2,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":1,\"1911\":1,\"1933\":1,\"1935\":1,\"1936\":2,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1963\":1,\"1966\":2,\"1969\":1,\"1970\":2,\"1978\":1,\"1979\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1983\":1,\"1985\":1}}],[\"truncatedint\",{\"1\":{\"1299\":1}}],[\"true或false\",{\"1\":{\"194\":1,\"1292\":1,\"1313\":1}}],[\"true\",{\"1\":{\"133\":1,\"139\":7,\"155\":1,\"162\":1,\"166\":2,\"172\":1,\"185\":1,\"195\":3,\"245\":1,\"336\":3,\"398\":4,\"399\":4,\"409\":8,\"625\":1,\"927\":1,\"958\":1,\"965\":1,\"1289\":1,\"1292\":1,\"1428\":1,\"1641\":2,\"1644\":2,\"1647\":1,\"1651\":2,\"1655\":1,\"1661\":1,\"1668\":1,\"1676\":4,\"1677\":5,\"1745\":2,\"1759\":2,\"1773\":1,\"1783\":2,\"1813\":1,\"1822\":2,\"1829\":1,\"1830\":1,\"1887\":1,\"1890\":1,\"1935\":1,\"1936\":2,\"1939\":1,\"2022\":1,\"2027\":1,\"2028\":1}}],[\"trump\",{\"0\":{\"63\":1},\"1\":{\"63\":2},\"2\":{\"65\":1}}],[\"s2\",{\"1\":{\"1989\":2}}],[\"s1\",{\"1\":{\"1989\":2}}],[\"src\",{\"1\":{\"1626\":1,\"1628\":2,\"1654\":5,\"1655\":1,\"1657\":1}}],[\"ssd\",{\"1\":{\"2207\":1}}],[\"ssm\",{\"1\":{\"1460\":1},\"2\":{\"2107\":1,\"2110\":1,\"2116\":1}}],[\"ss\",{\"1\":{\"1407\":1,\"1921\":1,\"1925\":1,\"2047\":1}}],[\"smith\",{\"1\":{\"1661\":1,\"1663\":1}}],[\"smile\",{\"1\":{\"32\":1}}],[\"smallbyte\",{\"1\":{\"1299\":1}}],[\"sleep\",{\"1\":{\"1965\":1,\"1966\":1,\"1970\":1}}],[\"slf4jlogbackexample\",{\"1\":{\"1926\":2}}],[\"slf4j<\",{\"1\":{\"1924\":1}}],[\"slf4j\",{\"0\":{\"1923\":1,\"1926\":1},\"1\":{\"1914\":1,\"1923\":1,\"1924\":1,\"1926\":2}}],[\"slope\",{\"1\":{\"941\":2}}],[\"slicing\",{\"1\":{\"219\":1}}],[\"s≤1\",{\"1\":{\"912\":1}}],[\"s≤0\",{\"1\":{\"904\":1}}],[\"s0\",{\"1\":{\"852\":2,\"853\":1}}],[\"skimage\",{\"1\":{\"802\":1}}],[\"sklearn\",{\"1\":{\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"497\":4,\"498\":1,\"499\":1,\"500\":1,\"501\":3,\"502\":1,\"503\":1,\"517\":2,\"524\":4,\"535\":5,\"543\":2,\"549\":2,\"550\":2,\"551\":3,\"552\":2,\"569\":4,\"571\":4,\"577\":4,\"578\":4,\"579\":4,\"580\":4,\"581\":4,\"588\":4,\"589\":4,\"590\":2,\"601\":4,\"602\":4,\"603\":4,\"604\":4,\"605\":4,\"606\":4,\"607\":4,\"608\":7,\"609\":7,\"619\":2,\"622\":2,\"658\":1}}],[\"sklearn等库来实现上述各种统计分析方法\",{\"1\":{\"477\":1}}],[\"sj​=i=1∑n​wi​⋅xij\",{\"1\":{\"763\":1}}],[\"swing\",{\"0\":{\"2020\":1,\"2021\":1,\"2022\":1,\"2024\":1,\"2025\":1},\"1\":{\"2018\":2,\"2019\":3,\"2020\":3,\"2022\":5,\"2024\":1,\"2026\":1,\"2027\":2,\"2028\":2,\"2032\":1,\"2034\":1}}],[\"switch语句用于基于一个变量的值来执行多个代码分支\",{\"1\":{\"1322\":1}}],[\"switch\",{\"1\":{\"1162\":3,\"1163\":1,\"1320\":1,\"1322\":1,\"1332\":1,\"1606\":1}}],[\"swept\",{\"1\":{\"678\":1,\"679\":2,\"680\":2,\"681\":1}}],[\"sweeping\",{\"1\":{\"678\":1}}],[\"swarm\",{\"1\":{\"420\":2}}],[\"s型聚类主要用于分类或分组不同的样本\",{\"1\":{\"563\":1}}],[\"s型聚类关注的是样本之间的关系\",{\"1\":{\"563\":1}}],[\"s型聚类可以将消费者分成不同的组\",{\"1\":{\"561\":1}}],[\"s型聚类常用于将消费者\",{\"1\":{\"561\":1}}],[\"s型聚类\",{\"0\":{\"561\":1},\"1\":{\"561\":1,\"564\":1,\"565\":1,\"566\":1}}],[\"s型聚类和r型聚类的关系\",{\"0\":{\"563\":1}}],[\"s型聚类和r型聚类是聚类分析中的两个不同类型\",{\"1\":{\"560\":1}}],[\"s型聚类和r型聚类\",{\"0\":{\"560\":1}}],[\"sne\",{\"1\":{\"541\":1,\"594\":1,\"614\":1}}],[\"sns\",{\"1\":{\"459\":4}}],[\"s=\",{\"1\":{\"912\":1}}],[\"s=αdx2dt​\",{\"1\":{\"904\":1}}],[\"s=200\",{\"1\":{\"517\":1,\"543\":1,\"549\":1}}],[\"s=50\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"552\":1,\"569\":1}}],[\"svc\",{\"1\":{\"578\":2,\"588\":2,\"602\":2}}],[\"svm\",{\"0\":{\"578\":1,\"602\":1},\"1\":{\"502\":1,\"530\":1,\"578\":2,\"586\":1,\"588\":2,\"593\":1,\"602\":2,\"631\":1,\"2214\":1}}],[\"svr\",{\"0\":{\"502\":1},\"1\":{\"502\":14,\"531\":1,\"593\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"2044\":1}}],[\"scheme\",{\"1\":{\"1102\":1}}],[\"scene\",{\"1\":{\"2033\":8}}],[\"scope>\",{\"1\":{\"1851\":2,\"1858\":1}}],[\"score标准化\",{\"1\":{\"763\":1}}],[\"score\",{\"1\":{\"478\":1,\"497\":3,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"524\":2,\"535\":2,\"569\":2,\"571\":2,\"577\":2,\"578\":2,\"579\":2,\"580\":2,\"581\":2,\"582\":1,\"588\":2,\"589\":2,\"601\":2,\"602\":2,\"603\":2,\"604\":2,\"605\":2,\"607\":2,\"608\":2,\"609\":4}}],[\"scss\",{\"1\":{\"1460\":1}}],[\"scriptexception\",{\"1\":{\"1996\":2}}],[\"scriptenginemanager\",{\"1\":{\"1996\":3}}],[\"scriptengine\",{\"1\":{\"1996\":2}}],[\"script\",{\"1\":{\"1186\":1,\"1996\":3}}],[\"sc\",{\"1\":{\"624\":3}}],[\"scannerexample\",{\"1\":{\"1422\":1}}],[\"scanner\",{\"1\":{\"1422\":8,\"1427\":8,\"1428\":7,\"1429\":1}}],[\"scanner类是java提供的一种用于从各种输入源\",{\"1\":{\"1421\":1}}],[\"scale\",{\"1\":{\"947\":7}}],[\"scalefactor=1\",{\"1\":{\"827\":1}}],[\"scaled\",{\"1\":{\"619\":2,\"659\":2}}],[\"scaler\",{\"1\":{\"535\":3,\"619\":2,\"659\":2,\"661\":2}}],[\"scatter\",{\"1\":{\"459\":2,\"517\":2,\"543\":2,\"549\":2,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"590\":3,\"623\":1,\"624\":1,\"625\":1,\"1202\":2}}],[\"scipy\",{\"0\":{\"460\":1},\"1\":{\"370\":1,\"383\":1,\"384\":1,\"456\":1,\"460\":3,\"477\":1,\"479\":1,\"481\":1,\"482\":1,\"483\":1,\"550\":1,\"722\":2,\"802\":2,\"852\":1,\"856\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"943\":1,\"944\":1,\"948\":3}}],[\"scikit\",{\"0\":{\"627\":1},\"1\":{\"370\":1,\"591\":1,\"600\":1,\"608\":2,\"609\":2,\"619\":1,\"794\":1,\"802\":2}}],[\"science\",{\"1\":{\"177\":3,\"1654\":1}}],[\"safevarargs\",{\"1\":{\"1843\":2}}],[\"safemethod是public和synchronized的\",{\"1\":{\"1309\":1}}],[\"safemethod\",{\"1\":{\"1309\":1}}],[\"sapiens\",{\"1\":{\"1655\":1}}],[\"saturday\",{\"1\":{\"1494\":1,\"1604\":1,\"1606\":1,\"1608\":1,\"1612\":1}}],[\"salary\",{\"1\":{\"1276\":1}}],[\"salesman\",{\"1\":{\"410\":3,\"735\":1}}],[\"sample\",{\"1\":{\"948\":5,\"1949\":1}}],[\"samples=100\",{\"1\":{\"623\":1}}],[\"samples=5\",{\"1\":{\"551\":1}}],[\"samples=300\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1}}],[\"samples\",{\"1\":{\"446\":2,\"659\":1}}],[\"saveas\",{\"1\":{\"1211\":2}}],[\"save\",{\"1\":{\"801\":1,\"821\":1,\"822\":1,\"1126\":1,\"1195\":2}}],[\"sa\",{\"1\":{\"420\":1,\"421\":1}}],[\"sayhello\",{\"1\":{\"1335\":1,\"1336\":1,\"1830\":1,\"1831\":1}}],[\"says\",{\"1\":{\"242\":5,\"243\":2}}],[\"say\",{\"1\":{\"226\":2}}],[\"springboot\",{\"0\":{\"2111\":1},\"2\":{\"2113\":1}}],[\"springmvc\",{\"0\":{\"2114\":1},\"1\":{\"1460\":1},\"2\":{\"2116\":1}}],[\"spring\",{\"0\":{\"2108\":1,\"2295\":1},\"1\":{\"1460\":1,\"1649\":1,\"1679\":1,\"1681\":4,\"1832\":1},\"2\":{\"2110\":1}}],[\"splev\",{\"1\":{\"936\":1,\"944\":1}}],[\"splrep\",{\"1\":{\"936\":1,\"944\":1}}],[\"spline\",{\"1\":{\"672\":1,\"933\":1,\"936\":1,\"939\":2,\"944\":1}}],[\"split=0\",{\"1\":{\"608\":1,\"610\":1}}],[\"split\",{\"1\":{\"176\":1,\"259\":1,\"497\":2,\"501\":1,\"524\":2,\"535\":2,\"569\":2,\"571\":2,\"577\":2,\"578\":2,\"579\":2,\"580\":2,\"581\":2,\"588\":2,\"589\":2,\"601\":2,\"602\":2,\"603\":2,\"604\":2,\"605\":2,\"606\":2,\"607\":2,\"608\":4,\"609\":4,\"2037\":1}}],[\"space\",{\"1\":{\"2164\":1}}],[\"spanning\",{\"1\":{\"961\":1,\"962\":2}}],[\"span\",{\"1\":{\"852\":2,\"853\":1,\"856\":2}}],[\"sparse=false\",{\"1\":{\"608\":1}}],[\"spatial\",{\"1\":{\"540\":1,\"594\":1}}],[\"speed\",{\"1\":{\"1502\":2}}],[\"specific\",{\"1\":{\"1401\":1,\"1404\":1}}],[\"specificdate\",{\"1\":{\"1401\":2,\"1404\":2,\"1994\":1}}],[\"spectral\",{\"1\":{\"594\":1}}],[\"speaks\",{\"1\":{\"1504\":1}}],[\"speak\",{\"1\":{\"242\":5,\"243\":4,\"1504\":3}}],[\"spfa\",{\"0\":{\"405\":1},\"1\":{\"405\":1,\"406\":1}}],[\"spss建模与统计分析\",{\"0\":{\"666\":1}}],[\"spss\",{\"0\":{\"1253\":1},\"1\":{\"378\":1},\"2\":{\"1255\":1}}],[\"shutdown\",{\"1\":{\"1963\":1}}],[\"sha\",{\"1\":{\"2045\":1}}],[\"sharedvariable\",{\"1\":{\"1308\":1}}],[\"shape2\",{\"1\":{\"1533\":2,\"1557\":2}}],[\"shape1\",{\"1\":{\"1533\":2,\"1557\":2}}],[\"shape=\",{\"1\":{\"608\":1,\"610\":1,\"660\":1}}],[\"shape\",{\"1\":{\"434\":3,\"608\":2,\"610\":2,\"659\":2,\"947\":1,\"1583\":2}}],[\"shift\",{\"1\":{\"1152\":2}}],[\"shc\",{\"1\":{\"550\":3}}],[\"should\",{\"1\":{\"1853\":1}}],[\"shortbuffer\",{\"1\":{\"1884\":1}}],[\"short等\",{\"1\":{\"1380\":1}}],[\"shortvalue\",{\"1\":{\"1382\":1}}],[\"shortval\",{\"1\":{\"1295\":1}}],[\"shortened\",{\"1\":{\"948\":6}}],[\"shortest\",{\"0\":{\"405\":1},\"1\":{\"410\":11}}],[\"short\",{\"0\":{\"656\":1},\"1\":{\"598\":1,\"1152\":2,\"1286\":1,\"1294\":1,\"1295\":2,\"1383\":1,\"1696\":3}}],[\"shorttitle\",{\"1\":{\"336\":1}}],[\"showmessagedialog\",{\"1\":{\"2022\":1}}],[\"show\",{\"1\":{\"240\":1,\"428\":1,\"459\":4,\"460\":1,\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"590\":1,\"623\":1,\"624\":1,\"625\":1,\"643\":1,\"661\":1,\"680\":1,\"688\":1,\"804\":1,\"852\":1,\"856\":1,\"889\":1,\"895\":1,\"903\":1,\"911\":1,\"927\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"947\":1,\"948\":1,\"1307\":4,\"1308\":1,\"2033\":1}}],[\"shell\",{\"2\":{\"125\":1}}],[\"shell脚本编程\",{\"0\":{\"123\":1}}],[\"synchronized带来一定的性能开销\",{\"1\":{\"2011\":1}}],[\"synchronizedlist\",{\"1\":{\"1741\":1,\"1742\":1}}],[\"synchronizedmethod\",{\"1\":{\"1489\":1}}],[\"synchronized\",{\"0\":{\"2011\":1},\"1\":{\"1259\":1,\"1277\":1,\"1308\":2,\"1309\":1,\"1372\":1,\"1489\":1,\"1495\":1,\"1548\":3,\"1673\":3,\"1968\":6,\"1969\":1,\"1970\":2,\"2011\":2,\"2012\":1}}],[\"syntax\",{\"1\":{\"245\":1}}],[\"syms\",{\"1\":{\"1224\":1}}],[\"sym\",{\"1\":{\"1152\":1}}],[\"symbols\",{\"1\":{\"916\":2,\"923\":1,\"924\":1,\"925\":1}}],[\"sympy\",{\"0\":{\"914\":1},\"1\":{\"913\":2,\"914\":2,\"915\":1,\"916\":1,\"917\":1,\"918\":1,\"919\":1,\"920\":1,\"921\":1,\"923\":1,\"924\":1,\"925\":2}}],[\"sympy符号计算库\",{\"0\":{\"913\":1}}],[\"symmetric\",{\"1\":{\"161\":4}}],[\"system\",{\"1\":{\"1274\":1,\"1292\":4,\"1301\":1,\"1302\":1,\"1321\":3,\"1322\":4,\"1324\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1331\":1,\"1335\":1,\"1336\":1,\"1339\":1,\"1356\":1,\"1357\":1,\"1360\":2,\"1362\":1,\"1370\":5,\"1373\":4,\"1376\":4,\"1384\":6,\"1392\":4,\"1393\":3,\"1394\":5,\"1395\":1,\"1396\":2,\"1401\":3,\"1402\":3,\"1404\":4,\"1405\":2,\"1406\":2,\"1407\":2,\"1416\":2,\"1418\":2,\"1422\":7,\"1424\":1,\"1425\":3,\"1427\":8,\"1428\":4,\"1429\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":6,\"1440\":1,\"1445\":1,\"1446\":3,\"1447\":1,\"1448\":1,\"1468\":2,\"1470\":1,\"1472\":2,\"1473\":1,\"1474\":1,\"1476\":2,\"1497\":1,\"1499\":1,\"1500\":2,\"1501\":1,\"1502\":1,\"1503\":1,\"1504\":2,\"1506\":3,\"1509\":4,\"1511\":2,\"1512\":2,\"1513\":2,\"1514\":2,\"1516\":2,\"1520\":2,\"1523\":3,\"1528\":3,\"1530\":3,\"1533\":2,\"1536\":2,\"1538\":1,\"1545\":2,\"1546\":2,\"1547\":2,\"1548\":1,\"1554\":2,\"1557\":2,\"1561\":2,\"1568\":4,\"1577\":2,\"1579\":2,\"1581\":1,\"1583\":2,\"1588\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1606\":4,\"1608\":1,\"1610\":2,\"1612\":1,\"1619\":1,\"1624\":1,\"1651\":3,\"1654\":1,\"1655\":4,\"1661\":12,\"1667\":1,\"1670\":1,\"1671\":1,\"1677\":6,\"1682\":2,\"1688\":1,\"1690\":2,\"1692\":1,\"1705\":6,\"1709\":7,\"1714\":4,\"1748\":7,\"1751\":7,\"1754\":2,\"1762\":4,\"1764\":3,\"1766\":3,\"1768\":3,\"1774\":6,\"1777\":5,\"1786\":4,\"1788\":2,\"1790\":4,\"1792\":3,\"1801\":4,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1814\":2,\"1815\":1,\"1818\":1,\"1820\":1,\"1823\":4,\"1831\":7,\"1836\":1,\"1838\":1,\"1839\":1,\"1846\":1,\"1863\":2,\"1870\":1,\"1873\":1,\"1876\":1,\"1883\":1,\"1890\":2,\"1891\":1,\"1898\":2,\"1901\":3,\"1903\":2,\"1906\":1,\"1908\":1,\"1909\":1,\"1921\":1,\"1933\":5,\"1935\":1,\"1936\":3,\"1938\":2,\"1939\":3,\"1941\":6,\"1942\":1,\"1949\":1,\"1950\":2,\"1952\":1,\"1954\":1,\"1956\":3,\"1961\":1,\"1962\":1,\"1963\":3,\"1966\":1,\"1970\":1,\"1979\":1,\"1981\":1,\"1982\":1,\"1984\":1,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":2,\"1994\":3,\"1995\":2,\"2031\":1,\"2033\":1,\"2037\":4,\"2047\":3,\"2048\":1,\"2188\":1}}],[\"sys\",{\"1\":{\"233\":3}}],[\"sqlexception\",{\"1\":{\"1895\":1,\"1896\":1,\"1979\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1983\":1,\"1985\":1}}],[\"sqlexception等\",{\"1\":{\"1450\":1}}],[\"sql\",{\"0\":{\"1980\":1,\"1981\":1},\"1\":{\"1974\":3,\"1976\":2,\"1980\":1,\"1981\":1,\"1984\":2,\"1987\":1},\"2\":{\"330\":1}}],[\"sqrt\",{\"1\":{\"229\":4,\"1207\":1,\"1394\":2,\"2001\":3,\"2037\":1}}],[\"square\",{\"1\":{\"217\":2,\"1341\":1,\"1394\":1,\"2001\":4}}],[\"squared\",{\"1\":{\"212\":2,\"214\":2,\"497\":3,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"606\":3,\"660\":1}}],[\"squares\",{\"1\":{\"148\":2,\"163\":1,\"173\":1,\"221\":2,\"222\":2,\"223\":2,\"939\":1}}],[\"s\",{\"1\":{\"202\":1,\"396\":1,\"398\":1,\"467\":1,\"480\":3,\"851\":1,\"852\":3,\"870\":1,\"903\":2,\"911\":4,\"924\":3,\"1173\":2,\"1404\":1,\"1412\":2,\"1675\":1,\"1677\":2,\"1690\":2,\"1691\":2,\"1704\":2,\"1947\":2}}],[\"south\",{\"1\":{\"2028\":1}}],[\"sound\",{\"1\":{\"1513\":4,\"1520\":5,\"1530\":7,\"1709\":3}}],[\"source\",{\"1\":{\"394\":2,\"396\":1,\"398\":10,\"399\":10,\"958\":5,\"959\":5,\"1845\":1}}],[\"socketchannel\",{\"1\":{\"1882\":1,\"1887\":6,\"1890\":7,\"1891\":7}}],[\"socket\",{\"1\":{\"1259\":1,\"1931\":1,\"1934\":1,\"1935\":7,\"1936\":4,\"1938\":3,\"1939\":3,\"2040\":1}}],[\"society\",{\"1\":{\"1040\":2}}],[\"sobel\",{\"1\":{\"802\":1,\"810\":1}}],[\"sobel和prewitt\",{\"1\":{\"788\":1}}],[\"solve\",{\"1\":{\"700\":1,\"852\":3,\"856\":2,\"895\":2,\"920\":2}}],[\"solid\",{\"1\":{\"671\":1,\"679\":1}}],[\"solutions\",{\"1\":{\"920\":3}}],[\"solution\",{\"1\":{\"384\":1,\"434\":10,\"754\":1,\"852\":7,\"856\":3,\"895\":1,\"923\":3}}],[\"softmax\",{\"1\":{\"608\":1,\"610\":1}}],[\"somemethod\",{\"1\":{\"1545\":1,\"1843\":1,\"2014\":1}}],[\"some\",{\"1\":{\"459\":1}}],[\"something\",{\"1\":{\"202\":1,\"226\":4}}],[\"sortrows\",{\"1\":{\"964\":1}}],[\"sorted\",{\"1\":{\"624\":5,\"1692\":1,\"1790\":1,\"1805\":1}}],[\"sorting\",{\"1\":{\"392\":1}}],[\"sort\",{\"1\":{\"147\":1,\"1363\":2,\"1689\":1,\"1741\":1,\"1989\":2}}],[\"such\",{\"1\":{\"2000\":1}}],[\"sunday\",{\"1\":{\"1494\":1,\"1604\":1,\"1606\":1,\"1608\":1,\"1612\":1}}],[\"sun\",{\"1\":{\"1258\":3}}],[\"sunny\",{\"1\":{\"649\":3}}],[\"sudo\",{\"1\":{\"1102\":3}}],[\"susceptible\",{\"1\":{\"851\":1,\"852\":1}}],[\"surf\",{\"1\":{\"1207\":2}}],[\"surface\",{\"1\":{\"678\":1,\"679\":1,\"680\":17,\"681\":1}}],[\"surfaces\",{\"1\":{\"672\":3}}],[\"survival\",{\"1\":{\"489\":1}}],[\"supplier\",{\"1\":{\"1990\":1}}],[\"supplier<t>\",{\"1\":{\"1691\":1}}],[\"suppressed\",{\"1\":{\"1843\":1}}],[\"suppresswarnings\",{\"1\":{\"1843\":2}}],[\"support\",{\"0\":{\"502\":1},\"1\":{\"530\":1,\"531\":1,\"593\":2,\"1082\":1}}],[\"super\",{\"1\":{\"1448\":1,\"1504\":3,\"1512\":2,\"1514\":3,\"1654\":4,\"1661\":4,\"1671\":1,\"1672\":1,\"1677\":1,\"1714\":5,\"1839\":1,\"1909\":1}}],[\"supervised\",{\"1\":{\"368\":1}}],[\"superset\",{\"1\":{\"166\":2}}],[\"sum\",{\"1\":{\"211\":3,\"434\":1,\"457\":1,\"458\":1,\"480\":2,\"634\":1,\"698\":1,\"699\":1,\"921\":3,\"1142\":4,\"1144\":4,\"1172\":2,\"1173\":3,\"1175\":2,\"1179\":3,\"1181\":1,\"1503\":3,\"1963\":4,\"2000\":1}}],[\"submit\",{\"1\":{\"1963\":2}}],[\"submillimeter\",{\"1\":{\"1052\":1}}],[\"substring\",{\"1\":{\"1370\":3,\"2037\":1}}],[\"substr\",{\"1\":{\"1370\":2}}],[\"subset\",{\"1\":{\"166\":2}}],[\"subtraction\",{\"1\":{\"2000\":1}}],[\"subtractexact\",{\"1\":{\"1392\":1}}],[\"subtract\",{\"1\":{\"1152\":1,\"1855\":1}}],[\"subplots\",{\"1\":{\"624\":1,\"688\":1}}],[\"subplot\",{\"1\":{\"623\":1,\"680\":1,\"947\":3,\"948\":2,\"1209\":3}}],[\"subject\",{\"0\":{\"561\":1}}],[\"subclass\",{\"1\":{\"243\":1,\"1308\":1}}],[\"sub\",{\"1\":{\"144\":1,\"152\":1,\"1139\":1,\"1144\":1,\"1221\":1}}],[\"session\",{\"0\":{\"2084\":1},\"2\":{\"2086\":1}}],[\"see\",{\"1\":{\"2001\":2}}],[\"seed\",{\"1\":{\"446\":1,\"449\":1,\"659\":1}}],[\"semaphore\",{\"1\":{\"1971\":1,\"2044\":1}}],[\"semicolon\",{\"1\":{\"1152\":1}}],[\"send\",{\"1\":{\"1938\":1,\"1939\":1}}],[\"sendpacket\",{\"1\":{\"1938\":2,\"1939\":2}}],[\"sendbuffer\",{\"1\":{\"1938\":3,\"1939\":3}}],[\"severe\",{\"1\":{\"1917\":1,\"1918\":2}}],[\"search\",{\"1\":{\"1773\":1,\"1774\":1}}],[\"seaborn\",{\"0\":{\"459\":1},\"1\":{\"456\":1,\"459\":4}}],[\"se的标准库无法在java\",{\"1\":{\"1261\":1}}],[\"se的基础上加上了大量的api和库\",{\"1\":{\"1261\":1}}],[\"se不同\",{\"1\":{\"1261\":1}}],[\"se完全相同\",{\"1\":{\"1261\":1}}],[\"se就是标准版\",{\"1\":{\"1261\":1}}],[\"ser\",{\"1\":{\"1863\":2,\"1876\":2}}],[\"serverinetaddress\",{\"1\":{\"1938\":2}}],[\"serveraddress\",{\"1\":{\"1935\":2,\"1938\":2}}],[\"server\",{\"1\":{\"1890\":1,\"1935\":1,\"1938\":1,\"1974\":1}}],[\"serversocketchannel\",{\"1\":{\"1882\":1,\"1890\":7}}],[\"serversocket\",{\"1\":{\"1259\":1,\"1931\":1,\"1934\":1,\"1936\":6,\"2040\":1}}],[\"servlet\",{\"0\":{\"2099\":1},\"1\":{\"1460\":1},\"2\":{\"2101\":1}}],[\"serialversionuid\",{\"1\":{\"1862\":4,\"1863\":1,\"1864\":1,\"1866\":1}}],[\"serializationexample\",{\"1\":{\"1863\":1,\"1876\":1}}],[\"serialization\",{\"1\":{\"1860\":1}}],[\"serializable\",{\"1\":{\"1308\":1,\"1680\":4,\"1682\":2,\"1862\":3,\"1863\":1,\"1864\":1,\"1876\":3,\"2039\":1}}],[\"series\",{\"1\":{\"458\":5,\"488\":1}}],[\"separated\",{\"1\":{\"1152\":2}}],[\"se\",{\"1\":{\"812\":3,\"1258\":2,\"1261\":1}}],[\"security\",{\"1\":{\"2045\":1}}],[\"securitymanager\",{\"1\":{\"1259\":1}}],[\"secret\",{\"1\":{\"1651\":6}}],[\"section\",{\"1\":{\"680\":13}}],[\"second\",{\"1\":{\"153\":2,\"1738\":1,\"1740\":1,\"2000\":1}}],[\"sequences=false\",{\"1\":{\"660\":1}}],[\"sequences=true\",{\"1\":{\"660\":1}}],[\"sequential\",{\"1\":{\"608\":2,\"610\":1,\"658\":1,\"660\":1}}],[\"select\",{\"1\":{\"1887\":2,\"1981\":1,\"1982\":1,\"1984\":1}}],[\"selector\",{\"0\":{\"1886\":1,\"1887\":1},\"1\":{\"1878\":1,\"1881\":1,\"1886\":3,\"1887\":10,\"1893\":1}}],[\"selectstrongest\",{\"1\":{\"813\":1}}],[\"selectedkeys\",{\"1\":{\"1887\":3}}],[\"selected\",{\"1\":{\"434\":4}}],[\"selectionkey\",{\"1\":{\"1887\":2}}],[\"selection\",{\"1\":{\"432\":1,\"434\":2,\"435\":1,\"497\":1,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2}}],[\"self\",{\"1\":{\"224\":10,\"242\":19,\"243\":9,\"247\":4,\"248\":16,\"595\":1}}],[\"setscene\",{\"1\":{\"2033\":1}}],[\"setsize\",{\"1\":{\"2022\":1,\"2027\":1,\"2028\":1}}],[\"setonaction\",{\"1\":{\"2033\":1}}],[\"setvisible\",{\"1\":{\"2022\":1,\"2027\":1,\"2028\":1}}],[\"setbounds\",{\"1\":{\"2022\":1,\"2023\":1}}],[\"setbrand\",{\"1\":{\"1471\":1}}],[\"setlayout\",{\"1\":{\"2022\":1,\"2027\":1,\"2028\":1}}],[\"setlevel\",{\"1\":{\"1918\":1}}],[\"setdefaultcloseoperation\",{\"1\":{\"2022\":1,\"2027\":1,\"2028\":1}}],[\"setdiff\",{\"1\":{\"1150\":2,\"1152\":1}}],[\"setint\",{\"1\":{\"1984\":1}}],[\"setrequestmethod\",{\"1\":{\"1942\":1}}],[\"setup\",{\"1\":{\"1855\":1}}],[\"set<selectionkey>\",{\"1\":{\"1887\":1}}],[\"set<string>\",{\"1\":{\"1726\":2,\"1738\":3,\"1786\":1,\"1788\":1,\"1790\":1}}],[\"set<fruit>\",{\"1\":{\"1792\":1}}],[\"set<e>\",{\"1\":{\"1735\":1}}],[\"setautocommit\",{\"1\":{\"1985\":2}}],[\"setaccessible\",{\"1\":{\"1641\":2,\"1644\":2,\"1647\":1,\"1651\":2,\"1655\":1,\"1829\":1,\"1830\":1}}],[\"setage\",{\"1\":{\"1568\":2,\"1680\":2,\"1682\":2,\"1709\":1}}],[\"setname\",{\"1\":{\"1505\":1,\"1568\":2,\"1680\":2,\"1682\":2,\"1709\":1}}],[\"setcolor\",{\"1\":{\"1471\":1}}],[\"settitle\",{\"1\":{\"2033\":1}}],[\"settime\",{\"1\":{\"1401\":1}}],[\"setters\",{\"1\":{\"1862\":1,\"1864\":1,\"1865\":1}}],[\"setter\",{\"1\":{\"1471\":1,\"1564\":1,\"1567\":1,\"1568\":2,\"1569\":1,\"1571\":2,\"1680\":5,\"1681\":1,\"1682\":2,\"1709\":2}}],[\"setxor\",{\"1\":{\"1150\":2,\"1152\":1}}],[\"setmodelpath\",{\"1\":{\"805\":1}}],[\"setmodeltypeasretinanet\",{\"1\":{\"805\":1}}],[\"set2\",{\"1\":{\"161\":9,\"166\":5}}],[\"set1\",{\"1\":{\"161\":9,\"166\":5}}],[\"set\",{\"0\":{\"158\":1,\"1780\":1},\"1\":{\"136\":1,\"158\":1,\"159\":7,\"161\":8,\"162\":2,\"165\":1,\"190\":7,\"222\":2,\"246\":1,\"528\":2,\"623\":1,\"624\":4,\"680\":3,\"688\":3,\"1152\":3,\"1402\":2,\"1642\":1,\"1651\":1,\"1655\":1,\"1726\":2,\"1735\":1,\"1738\":3,\"1745\":1,\"1748\":1,\"1751\":1,\"1780\":3,\"1781\":1,\"1782\":3,\"1783\":1,\"1784\":1,\"1785\":1,\"1786\":11,\"1788\":8,\"1790\":10,\"1792\":7,\"1793\":2,\"1794\":2,\"1798\":2,\"1812\":1,\"1822\":1,\"1824\":1,\"1829\":1,\"1836\":1,\"1985\":2,\"2038\":1}}],[\"silently\",{\"1\":{\"1472\":2}}],[\"silhouette\",{\"1\":{\"515\":1}}],[\"site\",{\"1\":{\"1291\":3}}],[\"site导航\",{\"0\":{\"4\":1}}],[\"sign\",{\"1\":{\"2154\":3}}],[\"signature\",{\"1\":{\"2045\":1}}],[\"signal\",{\"1\":{\"948\":5}}],[\"sigmoid\",{\"1\":{\"440\":1,\"445\":2,\"447\":2,\"448\":1,\"449\":5}}],[\"si\",{\"1\":{\"851\":2}}],[\"sir\",{\"1\":{\"852\":3,\"853\":1}}],[\"sir模型是一种经典的传染病模型\",{\"1\":{\"851\":1}}],[\"sir传染病模型\",{\"0\":{\"851\":1}}],[\"simulink仿真应用\",{\"0\":{\"1240\":1}}],[\"simulink仿真基础\",{\"0\":{\"1239\":1}}],[\"simulink产品家族及polyspace产品家族\",{\"1\":{\"1116\":1}}],[\"simulated\",{\"1\":{\"410\":1,\"420\":1,\"421\":1,\"428\":3,\"429\":1}}],[\"similarity\",{\"1\":{\"509\":1,\"754\":1}}],[\"simpleswingapp\",{\"1\":{\"2022\":1}}],[\"simplex\",{\"1\":{\"718\":1,\"722\":1}}],[\"simple\",{\"0\":{\"491\":1},\"1\":{\"225\":2,\"240\":1,\"389\":1,\"1914\":1,\"1923\":1}}],[\"since\",{\"1\":{\"1401\":1,\"2001\":2}}],[\"sin\",{\"1\":{\"459\":1,\"460\":1,\"680\":2,\"889\":1,\"890\":1,\"895\":2,\"903\":1,\"904\":1,\"911\":1,\"1201\":1,\"1206\":1,\"1207\":1,\"1209\":2,\"1210\":2,\"1218\":2,\"1393\":3,\"2037\":1}}],[\"sink\",{\"1\":{\"396\":1,\"398\":9,\"399\":9}}],[\"singletonholder\",{\"1\":{\"2013\":2}}],[\"singleton\",{\"0\":{\"2013\":1,\"2014\":1},\"1\":{\"2006\":1,\"2009\":5,\"2010\":5,\"2011\":5,\"2012\":6,\"2013\":5,\"2014\":1}}],[\"single\",{\"1\":{\"150\":1,\"1127\":1,\"1292\":2,\"2154\":1}}],[\"size2d\",{\"1\":{\"1154\":1}}],[\"size1d\",{\"1\":{\"1154\":1}}],[\"sizes=\",{\"1\":{\"608\":1}}],[\"size=64\",{\"1\":{\"610\":1}}],[\"size=32\",{\"1\":{\"608\":1,\"660\":1}}],[\"size=0\",{\"1\":{\"497\":1,\"501\":1,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2}}],[\"size=len\",{\"1\":{\"434\":1}}],[\"size\",{\"1\":{\"252\":1,\"398\":1,\"399\":1,\"434\":6,\"958\":1,\"959\":1,\"960\":1,\"964\":2,\"965\":1,\"1141\":1,\"1144\":1,\"1154\":2,\"1673\":1,\"1745\":1,\"1748\":4,\"1751\":4,\"1783\":1,\"1798\":1}}],[\"student\",{\"1\":{\"1709\":1,\"1713\":3}}],[\"study\",{\"2\":{\"44\":1,\"48\":1,\"53\":1,\"56\":1,\"81\":1,\"83\":1,\"303\":1,\"980\":1,\"996\":1,\"1010\":1,\"1012\":1,\"2254\":1,\"2258\":1}}],[\"sty\",{\"1\":{\"1110\":1}}],[\"stdout\",{\"1\":{\"1925\":2}}],[\"std\",{\"1\":{\"941\":1,\"1229\":2}}],[\"std=0\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"552\":1}}],[\"stock\",{\"1\":{\"661\":1,\"692\":1}}],[\"stochastic\",{\"0\":{\"712\":1},\"1\":{\"541\":1,\"594\":1}}],[\"stopped\",{\"1\":{\"1500\":1,\"1501\":1}}],[\"stopping\",{\"1\":{\"1468\":1}}],[\"stopiteration\",{\"1\":{\"224\":1}}],[\"stop\",{\"1\":{\"219\":1,\"1468\":1,\"1475\":1,\"1498\":1,\"1500\":1,\"1501\":1}}],[\"sticky\",{\"1\":{\"336\":1}}],[\"steel\",{\"1\":{\"699\":2,\"700\":4}}],[\"stem32\",{\"2\":{\"315\":1}}],[\"steps\",{\"1\":{\"659\":1}}],[\"steps=3\",{\"1\":{\"488\":1}}],[\"step=1\",{\"1\":{\"659\":1}}],[\"stepwise\",{\"0\":{\"493\":1}}],[\"step\",{\"1\":{\"219\":1,\"409\":4,\"659\":5,\"660\":1,\"661\":2}}],[\"stepped\",{\"1\":{\"144\":1,\"152\":1}}],[\"stage\",{\"1\":{\"2033\":3}}],[\"stackpane\",{\"1\":{\"2033\":3}}],[\"stackexample\",{\"1\":{\"1774\":1}}],[\"stack<>\",{\"1\":{\"1730\":1,\"1774\":1}}],[\"stack<integer>\",{\"1\":{\"1730\":1,\"1774\":1}}],[\"stack\",{\"0\":{\"1770\":1},\"1\":{\"1265\":2,\"1730\":4,\"1737\":1,\"1770\":2,\"1771\":1,\"1772\":2,\"1774\":15,\"1776\":2,\"1777\":12,\"1778\":1,\"1779\":2,\"2217\":1}}],[\"stacking\",{\"1\":{\"597\":1}}],[\"standard\",{\"1\":{\"1258\":1,\"1261\":1}}],[\"standardscaler\",{\"1\":{\"535\":2,\"551\":2,\"619\":2}}],[\"staticinnerclass是outerclass的静态内部类\",{\"1\":{\"1591\":1}}],[\"staticinnerclass\",{\"1\":{\"1591\":3,\"1592\":2}}],[\"staticmethod\",{\"1\":{\"1488\":1,\"1993\":2}}],[\"static和final的\",{\"1\":{\"1309\":1}}],[\"static变量在类的所有实例之间共享\",{\"1\":{\"1308\":1}}],[\"static\",{\"1\":{\"1274\":1,\"1275\":1,\"1277\":1,\"1292\":1,\"1303\":2,\"1305\":1,\"1308\":3,\"1309\":1,\"1336\":1,\"1344\":1,\"1347\":1,\"1370\":1,\"1373\":1,\"1376\":1,\"1384\":1,\"1392\":1,\"1393\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1418\":1,\"1422\":1,\"1425\":1,\"1427\":1,\"1428\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":1,\"1440\":1,\"1445\":1,\"1446\":1,\"1447\":2,\"1448\":2,\"1488\":1,\"1495\":1,\"1502\":1,\"1503\":3,\"1511\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1516\":1,\"1520\":1,\"1523\":1,\"1528\":1,\"1530\":1,\"1533\":1,\"1536\":1,\"1541\":2,\"1546\":1,\"1547\":4,\"1548\":1,\"1554\":1,\"1557\":1,\"1558\":1,\"1561\":1,\"1568\":1,\"1574\":1,\"1579\":1,\"1581\":2,\"1583\":1,\"1588\":1,\"1591\":7,\"1594\":1,\"1597\":1,\"1606\":1,\"1608\":1,\"1610\":1,\"1612\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1651\":1,\"1655\":1,\"1661\":1,\"1667\":1,\"1670\":1,\"1671\":1,\"1677\":1,\"1682\":1,\"1705\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1818\":1,\"1820\":1,\"1823\":1,\"1831\":1,\"1846\":1,\"1853\":1,\"1862\":1,\"1863\":2,\"1864\":1,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":1,\"1883\":1,\"1890\":1,\"1891\":1,\"1898\":1,\"1901\":1,\"1903\":1,\"1906\":2,\"1908\":2,\"1909\":1,\"1918\":2,\"1922\":2,\"1926\":2,\"1933\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1949\":1,\"1950\":1,\"1952\":1,\"1954\":1,\"1956\":1,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1,\"1970\":1,\"1993\":3,\"1996\":1,\"2009\":2,\"2010\":2,\"2011\":2,\"2012\":2,\"2013\":3,\"2022\":1,\"2027\":1,\"2028\":1,\"2033\":1,\"2047\":1,\"2048\":1}}],[\"statistic\",{\"1\":{\"460\":1,\"479\":1,\"483\":1}}],[\"statistical\",{\"1\":{\"367\":1}}],[\"statement\",{\"1\":{\"1974\":1,\"1980\":5,\"1981\":3,\"1982\":1,\"1983\":3,\"1984\":1,\"1985\":2}}],[\"statements\",{\"1\":{\"1685\":1,\"1989\":1}}],[\"states\",{\"1\":{\"649\":3}}],[\"state=42\",{\"1\":{\"497\":1,\"501\":1,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"623\":1}}],[\"state=0\",{\"1\":{\"485\":1,\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"552\":1}}],[\"stat\",{\"1\":{\"479\":2,\"483\":2}}],[\"statsmodels\",{\"1\":{\"477\":1,\"488\":1}}],[\"stats\",{\"1\":{\"460\":3,\"478\":2,\"479\":2,\"481\":1,\"482\":1,\"483\":1,\"816\":2,\"941\":2}}],[\"status=\",{\"1\":{\"1921\":1}}],[\"status\",{\"1\":{\"202\":2,\"237\":1}}],[\"starred\",{\"1\":{\"409\":3}}],[\"star\",{\"1\":{\"336\":1}}],[\"startswith\",{\"1\":{\"1692\":1}}],[\"starting\",{\"1\":{\"1468\":1,\"1472\":3,\"1473\":1,\"1516\":3}}],[\"startvalue\",{\"1\":{\"1165\":1}}],[\"start\",{\"0\":{\"2255\":1},\"1\":{\"219\":1,\"1406\":3,\"1468\":1,\"1469\":1,\"1472\":3,\"1473\":2,\"1475\":1,\"1501\":1,\"1516\":3,\"1548\":2,\"1606\":1,\"1688\":1,\"1951\":1,\"1961\":2,\"1962\":2,\"1965\":2,\"1966\":2,\"1970\":2,\"2033\":1}}],[\"streamgeneratorexample\",{\"1\":{\"1820\":1}}],[\"stream\",{\"0\":{\"1992\":1},\"1\":{\"1692\":1,\"1816\":1,\"1819\":2,\"1820\":4,\"1824\":1,\"1868\":6,\"1877\":2,\"1882\":1,\"1892\":1,\"1992\":2}}],[\"streams\",{\"0\":{\"1869\":1,\"1872\":1},\"1\":{\"1692\":1,\"1694\":1}}],[\"strel\",{\"1\":{\"812\":1}}],[\"str3\",{\"1\":{\"1370\":5}}],[\"str2\",{\"1\":{\"1370\":3}}],[\"str1\",{\"1\":{\"1370\":3}}],[\"strval\",{\"1\":{\"1298\":1}}],[\"struct\",{\"1\":{\"1151\":1,\"1152\":1}}],[\"structure\",{\"1\":{\"1127\":1,\"1152\":1,\"2152\":1}}],[\"strategies\",{\"1\":{\"745\":1}}],[\"strongly\",{\"1\":{\"389\":1}}],[\"strictfp\",{\"1\":{\"1308\":3}}],[\"strip\",{\"1\":{\"252\":1,\"259\":1}}],[\"stringlength\",{\"1\":{\"1691\":1}}],[\"string性能最差\",{\"1\":{\"1377\":1}}],[\"string是不可变的\",{\"1\":{\"1377\":1}}],[\"stringexample\",{\"1\":{\"1370\":1}}],[\"string对象是不可变的\",{\"1\":{\"1369\":1}}],[\"stringbuilder的性能最好\",{\"1\":{\"1377\":1}}],[\"stringbuilder的用法与stringbuffer几乎相同\",{\"1\":{\"1376\":1}}],[\"stringbuilderexample\",{\"1\":{\"1376\":1}}],[\"stringbuilder比stringbuffer更快\",{\"1\":{\"1375\":1}}],[\"stringbuilder不是线程安全的\",{\"1\":{\"1375\":1}}],[\"stringbuilder也是可变的\",{\"1\":{\"1375\":1}}],[\"stringbuilder\",{\"1\":{\"1367\":1,\"1376\":2,\"1378\":1,\"1675\":1,\"1942\":2,\"2037\":2}}],[\"stringbuffer和stringbuilder是可变的\",{\"1\":{\"1377\":1}}],[\"stringbufferexample\",{\"1\":{\"1373\":1}}],[\"stringbuffer是线程安全的\",{\"1\":{\"1372\":1,\"1377\":1}}],[\"stringbuffer是可变的\",{\"1\":{\"1372\":1}}],[\"stringbuffer\",{\"1\":{\"1367\":1,\"1373\":2,\"1378\":1,\"2037\":2}}],[\"strings\",{\"1\":{\"141\":1,\"150\":1,\"154\":1}}],[\"string\",{\"0\":{\"138\":1},\"1\":{\"136\":1,\"159\":1,\"185\":2,\"186\":2,\"187\":4,\"188\":2,\"189\":2,\"190\":2,\"1274\":1,\"1275\":1,\"1292\":2,\"1298\":4,\"1302\":1,\"1303\":2,\"1318\":1,\"1336\":1,\"1342\":1,\"1367\":1,\"1370\":5,\"1373\":1,\"1376\":1,\"1378\":1,\"1384\":1,\"1392\":1,\"1393\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":3,\"1415\":1,\"1416\":5,\"1418\":3,\"1422\":2,\"1425\":1,\"1427\":2,\"1428\":1,\"1433\":1,\"1434\":2,\"1436\":1,\"1437\":1,\"1439\":1,\"1440\":2,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":2,\"1468\":2,\"1471\":6,\"1476\":3,\"1497\":1,\"1503\":1,\"1504\":3,\"1505\":3,\"1506\":2,\"1509\":1,\"1511\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1516\":1,\"1520\":1,\"1523\":1,\"1528\":2,\"1530\":1,\"1533\":1,\"1536\":1,\"1541\":1,\"1546\":1,\"1547\":1,\"1548\":1,\"1554\":1,\"1557\":1,\"1561\":1,\"1568\":5,\"1579\":1,\"1581\":1,\"1583\":1,\"1588\":2,\"1591\":2,\"1594\":1,\"1597\":1,\"1606\":1,\"1608\":4,\"1609\":1,\"1610\":1,\"1612\":5,\"1621\":1,\"1622\":1,\"1624\":1,\"1630\":1,\"1644\":1,\"1647\":1,\"1651\":2,\"1654\":16,\"1655\":1,\"1661\":10,\"1667\":5,\"1668\":1,\"1669\":1,\"1670\":3,\"1671\":2,\"1675\":2,\"1676\":1,\"1677\":7,\"1680\":7,\"1682\":5,\"1689\":2,\"1704\":2,\"1705\":2,\"1709\":3,\"1711\":2,\"1713\":2,\"1748\":2,\"1751\":2,\"1754\":2,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1774\":1,\"1777\":1,\"1786\":2,\"1788\":2,\"1790\":2,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":2,\"1815\":1,\"1818\":1,\"1820\":1,\"1823\":3,\"1828\":1,\"1829\":2,\"1830\":1,\"1831\":4,\"1843\":1,\"1844\":1,\"1846\":1,\"1862\":1,\"1863\":4,\"1864\":1,\"1865\":3,\"1870\":1,\"1871\":2,\"1873\":2,\"1874\":2,\"1876\":4,\"1883\":1,\"1890\":1,\"1891\":2,\"1898\":1,\"1901\":1,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":2,\"1918\":1,\"1922\":1,\"1926\":1,\"1933\":1,\"1935\":3,\"1936\":2,\"1938\":5,\"1939\":4,\"1941\":1,\"1942\":2,\"1949\":3,\"1950\":3,\"1951\":5,\"1952\":4,\"1954\":3,\"1956\":3,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1,\"1970\":4,\"1979\":3,\"1981\":2,\"1982\":1,\"1984\":1,\"1985\":2,\"1989\":1,\"1993\":1,\"1995\":1,\"1996\":1,\"2022\":1,\"2027\":1,\"2028\":1,\"2033\":1,\"2037\":2,\"2047\":2,\"2048\":3}}],[\"str\",{\"1\":{\"187\":3,\"1670\":2,\"1705\":2}}],[\"^a\",{\"1\":{\"1412\":1}}],[\"^0\",{\"1\":{\"1412\":1}}],[\"^2\",{\"1\":{\"1207\":2,\"1227\":1}}],[\"^=\",{\"1\":{\"197\":1}}],[\"^\",{\"1\":{\"161\":1,\"196\":1,\"197\":1,\"634\":1,\"1109\":1,\"1146\":3,\"1149\":2,\"1152\":1,\"1315\":3,\"1412\":1,\"1418\":1,\"1947\":2,\"1950\":1}}],[\"^1\",{\"1\":{\"31\":2}}],[\"^注脚\",{\"1\":{\"31\":1}}],[\"并为用户和应用程序提供基本的操作接口\",{\"1\":{\"2188\":1}}],[\"并选择最适合的算法和优化策略\",{\"1\":{\"2162\":1}}],[\"并选择第一个子图\",{\"1\":{\"1209\":1}}],[\"并设置其大小\",{\"1\":{\"2023\":1}}],[\"并设置一个较高的\",{\"1\":{\"422\":1}}],[\"并行数组\",{\"1\":{\"1997\":1}}],[\"并行gc\",{\"1\":{\"1267\":1}}],[\"并发与并行\",{\"1\":{\"2211\":1}}],[\"并发性\",{\"1\":{\"2191\":1}}],[\"并发\",{\"2\":{\"2065\":1}}],[\"并发工具类\",{\"0\":{\"1971\":1}}],[\"并发集合\",{\"1\":{\"1742\":1,\"2044\":1}}],[\"并获取\",{\"1\":{\"1941\":1}}],[\"并连接到指定主机和端口\",{\"1\":{\"1935\":1}}],[\"并遵循日志的最佳实践\",{\"1\":{\"1928\":1}}],[\"并处理异常\",{\"1\":{\"1897\":1}}],[\"并指定感兴趣的操作\",{\"1\":{\"1887\":2}}],[\"并优化程序的性能\",{\"1\":{\"1733\":1}}],[\"并对结果进行排序\",{\"1\":{\"1692\":1}}],[\"并重写\",{\"1\":{\"1671\":1,\"1961\":1}}],[\"并实现borrowable接口\",{\"1\":{\"1661\":1}}],[\"并实现一个方法来获取其全名\",{\"1\":{\"248\":1}}],[\"并展示如何使用反射来操作这些对象\",{\"1\":{\"1655\":1}}],[\"并展示了计算结果的图形\",{\"1\":{\"896\":1}}],[\"并隐藏内部实现细节\",{\"1\":{\"1563\":1}}],[\"并隐藏对象的内部实现细节的方式\",{\"1\":{\"242\":1}}],[\"并可以根据需要对其进行扩展和重写\",{\"1\":{\"1709\":1}}],[\"并可以增加数据访问的安全性和准确性\",{\"1\":{\"1564\":1}}],[\"并可以调用被继承和重写的方法\",{\"1\":{\"1516\":1}}],[\"并可以对其进行扩展或修改\",{\"1\":{\"1507\":1}}],[\"并可以重写父类的方法\",{\"1\":{\"1499\":1}}],[\"并可能返回一个值\",{\"1\":{\"1475\":1}}],[\"并可视化最终结果\",{\"1\":{\"625\":1}}],[\"并可视化聚类结果\",{\"1\":{\"543\":1}}],[\"并可视化了聚类结果\",{\"1\":{\"517\":1}}],[\"并必须实现接口中的所有方法\",{\"1\":{\"1474\":1}}],[\"并使程序更具交互性和用户友好性\",{\"1\":{\"1429\":1}}],[\"并使用dendrogram函数生成树状图\",{\"1\":{\"556\":1}}],[\"并使用dijkstra算法计算最短路径\",{\"1\":{\"394\":1}}],[\"并使用kruskal算法计算最小生成树\",{\"1\":{\"394\":1}}],[\"并使用调试技巧找到并修复潜在的错误\",{\"1\":{\"248\":1}}],[\"并换行\",{\"1\":{\"1426\":1}}],[\"并立即开始下一次迭代\",{\"1\":{\"1330\":1}}],[\"并支持类与接口之间的实现机制\",{\"1\":{\"1259\":1}}],[\"并输出结果\",{\"1\":{\"1181\":1}}],[\"并输出最优路径和最小总距离\",{\"1\":{\"740\":1}}],[\"并输出最优解和最大化的总利润\",{\"1\":{\"728\":1,\"734\":1}}],[\"并用逗号分隔\",{\"1\":{\"1173\":1}}],[\"并编译\",{\"1\":{\"1101\":1,\"1102\":1}}],[\"并撰写文献综述\",{\"1\":{\"1038\":1}}],[\"并理解其在图论中的重要性和应用\",{\"1\":{\"965\":1}}],[\"并更新其邻接顶点的距离\",{\"1\":{\"958\":1}}],[\"并更新残余网络\",{\"1\":{\"398\":1}}],[\"并绘制原始信号与重建信号的对比图\",{\"1\":{\"948\":1}}],[\"并绘制结果\",{\"1\":{\"852\":1}}],[\"并准备一个名为\",{\"1\":{\"947\":1,\"948\":1}}],[\"并标出关键时间点\",{\"1\":{\"857\":1}}],[\"并判断张某是否有可能在案发现场\",{\"1\":{\"854\":1}}],[\"并采用合适的方法求解\",{\"1\":{\"842\":1}}],[\"并进行一些简单的处理操作\",{\"1\":{\"804\":1}}],[\"并进行预测和推断\",{\"1\":{\"496\":1}}],[\"并确定各层次中的评价指标\",{\"1\":{\"758\":1}}],[\"并最终回到起点城市\",{\"1\":{\"735\":1}}],[\"并希望在预算限制内最大化总利润\",{\"1\":{\"730\":1}}],[\"并且有自己的绘图机制来渲染组件\",{\"1\":{\"2019\":1}}],[\"并且异常信息会被打印到控制台\",{\"1\":{\"1900\":1}}],[\"并且是同步的\",{\"1\":{\"1776\":1}}],[\"并且没有返回类型\",{\"1\":{\"1711\":1}}],[\"并且对每种基本数据类型都有一个对应的包装类\",{\"1\":{\"1695\":1}}],[\"并且与其他函数式编程语言接轨\",{\"1\":{\"1694\":1}}],[\"并且减少了样板代码\",{\"1\":{\"1694\":1}}],[\"并且可以控制对这些状态的访问和修改\",{\"1\":{\"1563\":1}}],[\"并且可以使用接口提供的默认方法\",{\"1\":{\"1561\":1}}],[\"并且只执行一次\",{\"1\":{\"1549\":1}}],[\"并且只在函数调用时执行\",{\"1\":{\"1182\":1}}],[\"并且存在一定的风险\",{\"1\":{\"1536\":1}}],[\"并且子类方法的签名必须与父类方法完全一致\",{\"1\":{\"1524\":1}}],[\"并且在计算机科学中\",{\"1\":{\"2156\":1}}],[\"并且在\",{\"1\":{\"1181\":1}}],[\"并且在区间连接处保证函数及其一阶和二阶导数的连续性\",{\"1\":{\"933\":1}}],[\"并且易于调试和维护\",{\"1\":{\"1171\":1}}],[\"并且易于扩展\",{\"1\":{\"913\":1}}],[\"并且能够与各种框架和工具无缝集成\",{\"1\":{\"1683\":1}}],[\"并且能够在这些点之间平滑地过渡\",{\"1\":{\"932\":1}}],[\"并且能够转换为多种格式\",{\"1\":{\"16\":1}}],[\"并且通过图形展示了温度随时间变化的情况\",{\"1\":{\"890\":1}}],[\"并且判断张某是否有可能在案发现场\",{\"1\":{\"858\":1}}],[\"并且具有颜色和亮度等属性\",{\"1\":{\"785\":1}}],[\"并且返回起点城市的最短路径\",{\"1\":{\"736\":1}}],[\"并且某些决策变量必须是整数\",{\"1\":{\"711\":1}}],[\"并受到一系列约束条件的限制\",{\"1\":{\"705\":1}}],[\"并尽量减少剩余材料的浪费\",{\"1\":{\"692\":1}}],[\"并反转y轴以便更直观地展示铺设效果\",{\"1\":{\"689\":1}}],[\"并调用draw\",{\"1\":{\"689\":1}}],[\"并显示铺设的图形\",{\"1\":{\"690\":1}}],[\"并显示其3d视图\",{\"1\":{\"682\":1}}],[\"并显示目标函数值随迭代次数的变化曲线\",{\"1\":{\"430\":1}}],[\"并预测未来的值\",{\"1\":{\"662\":1}}],[\"并预测因变量的未来值\",{\"1\":{\"471\":1}}],[\"并建立一阶微分方程来描述系统的发展趋势\",{\"1\":{\"634\":1}}],[\"并看到数据从3d逐步被投影到2d空间中的变化\",{\"1\":{\"626\":1}}],[\"并动态模拟降维过程\",{\"1\":{\"621\":1}}],[\"并在窗口中添加了一个按钮\",{\"1\":{\"2022\":1}}],[\"并在第一次使用时创建实例\",{\"1\":{\"2010\":1}}],[\"并在需要时使用\",{\"1\":{\"1985\":1}}],[\"并在需要对象的场合\",{\"1\":{\"1706\":1}}],[\"并在代码更改后确保现有功能不被破坏\",{\"1\":{\"1848\":1}}],[\"并在包内创建几个类和接口\",{\"1\":{\"1654\":1}}],[\"并在程序中进行转换\",{\"1\":{\"1614\":1}}],[\"并在类卸载时销毁\",{\"1\":{\"1303\":1}}],[\"并在\",{\"1\":{\"1258\":1}}],[\"并在路径的每个点上生成一个截面副本\",{\"1\":{\"679\":1}}],[\"并在最后使用了全连接层进行预测\",{\"1\":{\"662\":1}}],[\"并在你的分类任务中应用它们\",{\"1\":{\"573\":1}}],[\"并在文档底部定义注脚内容\",{\"1\":{\"31\":1}}],[\"并能够识别噪声点\",{\"1\":{\"551\":1}}],[\"并通过接口类型的引用来操作这些实现\",{\"1\":{\"1572\":1}}],[\"并通过\",{\"1\":{\"1471\":1,\"1681\":2,\"2023\":1}}],[\"并通过图形展示位移随时间变化的情况\",{\"1\":{\"912\":1}}],[\"并通过图形展示温度随时间变化的情况\",{\"1\":{\"904\":1}}],[\"并通过生成一个虚拟的数据集来展示如何使用该模型进行预测\",{\"1\":{\"639\":1}}],[\"并通过可视化来展示聚类结果\",{\"1\":{\"543\":1}}],[\"并通过卡方检验等方法来判断这些分类变量之间是否存在关联\",{\"1\":{\"468\":1}}],[\"并识别噪声点\",{\"1\":{\"540\":1}}],[\"并将日志发送到\",{\"1\":{\"1916\":1}}],[\"并将其对外隐藏的过程\",{\"1\":{\"1709\":1}}],[\"并将其转换为jvm可以理解的类对象\",{\"1\":{\"1265\":1}}],[\"并将其转换为适合lstm模型输入的格式\",{\"1\":{\"662\":1}}],[\"并将其分类为预定义的类别\",{\"1\":{\"584\":1}}],[\"并将数据从\",{\"1\":{\"618\":1}}],[\"并将结果与实际标签进行比较\",{\"1\":{\"528\":1}}],[\"并将源点入队\",{\"1\":{\"405\":1}}],[\"并计算模型的准确率\",{\"1\":{\"535\":1}}],[\"并计算了分类准确率\",{\"1\":{\"524\":1}}],[\"并计算每条路径的长度\",{\"1\":{\"410\":1}}],[\"并根据每个对象的实际类型进行相应的向下转型\",{\"1\":{\"1542\":1}}],[\"并根据值执行相应的代码块\",{\"1\":{\"1162\":1}}],[\"并根据奖励信号来调整策略以最大化累计奖励\",{\"1\":{\"596\":1}}],[\"并根据投影结果进行分类\",{\"1\":{\"520\":1}}],[\"并根据能量变化和当前温度来决定是否接受该新解\",{\"1\":{\"429\":1}}],[\"并帮助你理解特征与目标之间的关系\",{\"1\":{\"504\":1}}],[\"并剪枝掉不可能得到最优解的分支\",{\"1\":{\"410\":1}}],[\"并提高代码的可维护性\",{\"1\":{\"1632\":1}}],[\"并提供全局访问点来访问该实例\",{\"1\":{\"2006\":1}}],[\"并提供替代方案的说明\",{\"1\":{\"2001\":1}}],[\"并提供详细的错误信息\",{\"1\":{\"1854\":1}}],[\"并提供接口中定义的抽象方法的具体实现\",{\"1\":{\"1576\":1}}],[\"并提供多线程之间的同步机制\",{\"1\":{\"1259\":1}}],[\"并提供安全管理机制\",{\"1\":{\"1259\":1}}],[\"并提供了几个常用的函数式接口\",{\"1\":{\"1990\":1}}],[\"并提供了许多操作列表元素的方法\",{\"1\":{\"1743\":1}}],[\"并提供了具体的借阅和归还方法\",{\"1\":{\"1662\":1}}],[\"并提供了\",{\"1\":{\"1577\":1}}],[\"并提供了对文件和目录的基本操作\",{\"1\":{\"1439\":1}}],[\"并提供了自动分配和回收内存空间\",{\"1\":{\"1259\":1}}],[\"并提供了m文件的集成编译和调试环境\",{\"1\":{\"1118\":1}}],[\"并提供高效的成员检测和基本的集合操作\",{\"1\":{\"158\":1}}],[\"并提出建议\",{\"1\":{\"381\":1}}],[\"并返回一个新的函数\",{\"1\":{\"216\":1}}],[\"并返回布尔值\",{\"1\":{\"194\":1}}],[\"并集\",{\"1\":{\"161\":1,\"1150\":1,\"1781\":1}}],[\"x是局部变量\",{\"1\":{\"1346\":1}}],[\"xmx\",{\"1\":{\"1267\":1}}],[\"xms\",{\"1\":{\"1267\":1}}],[\"xml文件中添加以下依赖\",{\"1\":{\"1851\":1}}],[\"xml\",{\"1\":{\"827\":1,\"1920\":1,\"1921\":4,\"1924\":1,\"1925\":2}}],[\"xor\",{\"1\":{\"1152\":1,\"1315\":1}}],[\"x方向步长\",{\"1\":{\"895\":1}}],[\"x方向网格点数\",{\"1\":{\"895\":1}}],[\"x方向长度\",{\"1\":{\"895\":1}}],[\"xxxvalue\",{\"1\":{\"1701\":1,\"1704\":1}}],[\"xx\",{\"1\":{\"884\":1,\"1267\":1}}],[\"xt​\",{\"1\":{\"871\":1}}],[\"xt+1​=xt​+axt​−bxt​yt​yt+1​=yt​−cyt​+dxt​yt​​\",{\"1\":{\"871\":1}}],[\"xi​\",{\"1\":{\"837\":2}}],[\"xij​∈\",{\"1\":{\"737\":1}}],[\"xij​=0\",{\"1\":{\"737\":1}}],[\"xij​=1\",{\"1\":{\"737\":1}}],[\"xij​\",{\"1\":{\"737\":1}}],[\"x+w\",{\"1\":{\"827\":1}}],[\"x3​∈\",{\"1\":{\"731\":1}}],[\"x3​\",{\"1\":{\"731\":1}}],[\"xn​≥0\",{\"1\":{\"715\":1}}],[\"xn​\",{\"1\":{\"715\":2,\"880\":2}}],[\"x0​\",{\"1\":{\"933\":1}}],[\"x0\",{\"1\":{\"641\":5,\"642\":6,\"643\":7,\"722\":2}}],[\"x0=0\",{\"1\":{\"460\":1}}],[\"xlswrite\",{\"1\":{\"1195\":2}}],[\"xlsx\",{\"1\":{\"1192\":1,\"1195\":1}}],[\"xlsread\",{\"1\":{\"1192\":2}}],[\"xlim\",{\"1\":{\"624\":1,\"688\":1}}],[\"xlabel\",{\"1\":{\"240\":1,\"428\":1,\"569\":1,\"590\":1,\"625\":1,\"643\":1,\"661\":1,\"680\":1,\"852\":1,\"856\":1,\"889\":1,\"895\":1,\"903\":1,\"911\":1,\"927\":1,\"1201\":1,\"1202\":1,\"1203\":1,\"1206\":1,\"1210\":1}}],[\"xgbclassifier\",{\"1\":{\"609\":1}}],[\"xgb\",{\"1\":{\"609\":2}}],[\"xgboost\",{\"1\":{\"593\":1,\"597\":1,\"609\":4}}],[\"x^n\",{\"1\":{\"494\":1}}],[\"x^2\",{\"1\":{\"427\":1,\"429\":1,\"434\":1,\"435\":1,\"494\":1,\"1176\":1,\"1224\":1}}],[\"x=\",{\"1\":{\"459\":1,\"856\":2}}],[\"x2\",{\"1\":{\"384\":1}}],[\"x2​∈z\",{\"1\":{\"725\":1}}],[\"x2​≥0\",{\"1\":{\"715\":1,\"721\":1,\"725\":1}}],[\"x2​\",{\"1\":{\"384\":1,\"715\":2,\"721\":1,\"725\":1,\"731\":2,\"842\":1,\"880\":2}}],[\"x1\",{\"1\":{\"384\":1,\"641\":3,\"642\":1,\"722\":2}}],[\"x1​−x0​x−x0​​\",{\"1\":{\"933\":1}}],[\"x1​∈z\",{\"1\":{\"725\":1}}],[\"x1​≥0\",{\"1\":{\"715\":1,\"721\":1,\"725\":1}}],[\"x1​\",{\"1\":{\"384\":1,\"715\":2,\"721\":1,\"725\":1,\"731\":2,\"880\":2,\"933\":1}}],[\"x\",{\"1\":{\"30\":2,\"148\":2,\"163\":2,\"173\":3,\"180\":4,\"197\":25,\"199\":4,\"201\":6,\"212\":4,\"214\":4,\"221\":2,\"222\":2,\"223\":3,\"240\":3,\"384\":11,\"423\":7,\"427\":3,\"428\":25,\"429\":2,\"434\":5,\"435\":2,\"445\":5,\"449\":5,\"459\":3,\"460\":9,\"482\":2,\"484\":3,\"485\":2,\"486\":3,\"487\":2,\"491\":2,\"492\":3,\"494\":1,\"495\":2,\"497\":6,\"498\":2,\"499\":2,\"500\":2,\"501\":7,\"502\":2,\"503\":2,\"517\":5,\"524\":6,\"535\":10,\"543\":5,\"549\":5,\"550\":5,\"551\":6,\"552\":5,\"555\":4,\"556\":4,\"557\":6,\"558\":5,\"569\":10,\"571\":6,\"577\":8,\"578\":8,\"579\":8,\"580\":8,\"581\":8,\"588\":6,\"589\":6,\"590\":5,\"601\":8,\"602\":8,\"603\":8,\"604\":8,\"605\":8,\"606\":6,\"607\":6,\"608\":13,\"609\":12,\"610\":10,\"616\":1,\"619\":6,\"623\":4,\"624\":9,\"625\":4,\"634\":9,\"642\":7,\"643\":4,\"659\":8,\"660\":1,\"661\":1,\"676\":1,\"680\":16,\"688\":6,\"698\":1,\"699\":1,\"700\":9,\"722\":2,\"726\":3,\"728\":2,\"732\":4,\"738\":4,\"763\":2,\"827\":2,\"832\":7,\"836\":2,\"842\":6,\"884\":10,\"887\":1,\"888\":1,\"889\":5,\"890\":1,\"894\":2,\"895\":7,\"898\":1,\"900\":2,\"903\":5,\"904\":1,\"906\":1,\"908\":4,\"911\":5,\"912\":2,\"916\":2,\"917\":2,\"918\":4,\"919\":3,\"920\":2,\"923\":5,\"925\":2,\"926\":2,\"927\":3,\"933\":2,\"935\":6,\"936\":6,\"937\":6,\"941\":5,\"942\":6,\"943\":8,\"944\":3,\"964\":8,\"1159\":3,\"1160\":4,\"1161\":6,\"1163\":5,\"1166\":7,\"1174\":4,\"1175\":2,\"1176\":2,\"1181\":6,\"1191\":3,\"1194\":3,\"1195\":3,\"1201\":6,\"1202\":3,\"1203\":2,\"1206\":3,\"1207\":4,\"1209\":7,\"1210\":8,\"1224\":2,\"1225\":2,\"1226\":2,\"1227\":3,\"1230\":3,\"1232\":1,\"1281\":1,\"1338\":2,\"1341\":3,\"1346\":1,\"1365\":1,\"1392\":1,\"1393\":3,\"1394\":4,\"1545\":6,\"1676\":9,\"1685\":2,\"1691\":2,\"1725\":1,\"1737\":1,\"2001\":6,\"2163\":1}}],[\"||\",{\"1\":{\"1152\":1,\"1314\":2,\"1668\":1,\"1676\":1,\"1677\":1}}],[\"|v|为顶点数\",{\"1\":{\"959\":1}}],[\"|=\",{\"1\":{\"197\":1}}],[\"|\",{\"1\":{\"29\":17,\"161\":1,\"196\":1,\"197\":1,\"1152\":1,\"1314\":2,\"1315\":3,\"1412\":1,\"1863\":1,\"1876\":1,\"1963\":1}}],[\"表明注解应当被包含在\",{\"1\":{\"1845\":1}}],[\"表明该成员属于类\",{\"1\":{\"1308\":1}}],[\"表达式求值\",{\"1\":{\"1775\":1}}],[\"表达式求值等问题\",{\"1\":{\"1771\":1}}],[\"表达式求值等场景\",{\"1\":{\"1730\":1}}],[\"表达式\",{\"0\":{\"1989\":1},\"1\":{\"1690\":1}}],[\"表达式排序\",{\"1\":{\"1689\":1}}],[\"表达式或\",{\"1\":{\"1681\":1}}],[\"表达式2\",{\"1\":{\"1316\":1}}],[\"表达式1\",{\"1\":{\"1316\":1}}],[\"表达式操作\",{\"0\":{\"917\":1}}],[\"表情符号\",{\"0\":{\"32\":1}}],[\"表格等\",{\"1\":{\"2019\":1}}],[\"表格目录\",{\"1\":{\"1110\":1}}],[\"表格环境中的跳列符\",{\"1\":{\"1109\":1}}],[\"表格\",{\"0\":{\"29\":1},\"1\":{\"2025\":1}}],[\"表示尾数的值\",{\"1\":{\"2154\":3}}],[\"表示指数的值\",{\"1\":{\"2154\":3}}],[\"表示数的符号\",{\"1\":{\"2154\":3}}],[\"表示0正数\",{\"1\":{\"2154\":1}}],[\"表示正则表达式的语法错误\",{\"1\":{\"2043\":1}}],[\"表示时间的差异\",{\"1\":{\"2041\":1}}],[\"表示时间段\",{\"1\":{\"1406\":1}}],[\"表示日期的差异\",{\"1\":{\"2041\":1}}],[\"表示日期段\",{\"1\":{\"1406\":1}}],[\"表示带有时区的日期时间\",{\"1\":{\"2041\":1}}],[\"表示特定的瞬间\",{\"1\":{\"2038\":1}}],[\"表示对输入字符串进行解释和匹配的引擎\",{\"1\":{\"1946\":1}}],[\"表示对应的特征向量方向上数据的方差越大\",{\"1\":{\"616\":1}}],[\"表示编译后的正则表达式\",{\"1\":{\"1946\":1,\"2043\":1}}],[\"表示严重错误\",{\"1\":{\"1917\":1}}],[\"表示程序级别的异常情况\",{\"1\":{\"1895\":1}}],[\"表示程序运行时发生的错误或不正常的情况\",{\"1\":{\"1443\":1}}],[\"表示系统级别的严重问题\",{\"1\":{\"1895\":1}}],[\"表示缓冲区的可操作数据的大小\",{\"1\":{\"1885\":1}}],[\"表示所有测试都通过\",{\"1\":{\"1854\":1}}],[\"表示当前方法覆盖了父类或接口中的方法\",{\"1\":{\"1843\":1}}],[\"表示某个类型是\",{\"1\":{\"1839\":2}}],[\"表示类的构造方法\",{\"1\":{\"1826\":1}}],[\"表示类的方法\",{\"1\":{\"1826\":1}}],[\"表示类的字段\",{\"1\":{\"1826\":1}}],[\"表示类不能实例化\",{\"1\":{\"1495\":1}}],[\"表示类不能被继承\",{\"1\":{\"1486\":1,\"1495\":1}}],[\"表示类不能被实例化\",{\"1\":{\"1485\":1}}],[\"表示不包含重复元素的集合\",{\"1\":{\"1781\":1}}],[\"表示后进先出\",{\"1\":{\"1737\":1}}],[\"表示包级可见\",{\"1\":{\"1506\":1}}],[\"表示公共\",{\"1\":{\"1506\":1}}],[\"表示受保护\",{\"1\":{\"1506\":1}}],[\"表示私有\",{\"1\":{\"1506\":1}}],[\"表示字段或方法属于类而不是对象\",{\"1\":{\"1503\":1}}],[\"表示字段是一个枚举类型的常量\",{\"1\":{\"1494\":1}}],[\"表示方法可能不会捕获这些异常\",{\"1\":{\"1905\":1}}],[\"表示方法是用其他语言\",{\"1\":{\"1492\":1}}],[\"表示方法或字段属于类而不是对象\",{\"1\":{\"1488\":1}}],[\"表示在序列化对象时\",{\"1\":{\"1491\":1}}],[\"表示在前i件物品中选择\",{\"1\":{\"408\":1}}],[\"表示没有时区的时间\",{\"1\":{\"1404\":1}}],[\"表示没有时区的日期时间\",{\"1\":{\"1404\":1}}],[\"表示没有时区的日期\",{\"1\":{\"1404\":1}}],[\"表示可变参数\",{\"1\":{\"1339\":1}}],[\"表示它是一个线程安全的方法\",{\"1\":{\"1309\":1}}],[\"表示它是一个静态常量\",{\"1\":{\"1309\":1}}],[\"表示它可以被所有类访问\",{\"1\":{\"1309\":1}}],[\"表示该接口是一个函数式接口\",{\"1\":{\"1843\":1}}],[\"表示该变量不需要被序列化\",{\"1\":{\"1308\":1}}],[\"表示该变量在多个线程间可见\",{\"1\":{\"1308\":1}}],[\"表示该变量的值在初始化后不能被修改\",{\"1\":{\"1308\":1}}],[\"表示该方法没有实现\",{\"1\":{\"1308\":1}}],[\"表示该方法不能被子类重写\",{\"1\":{\"1308\":1}}],[\"表示该类是抽象类\",{\"1\":{\"1308\":1}}],[\"表示该类不能被继承\",{\"1\":{\"1308\":1}}],[\"表示该边可以传输的最大流量\",{\"1\":{\"396\":1}}],[\"表示光标向前移动一个字符\",{\"1\":{\"1292\":1}}],[\"表示光标移动到下一页\",{\"1\":{\"1292\":1}}],[\"表示光标移动到下一个水平制表位\",{\"1\":{\"1292\":1}}],[\"表示光标移到本行的开头\",{\"1\":{\"1292\":1}}],[\"表示光标移到下一行的开头\",{\"1\":{\"1292\":1}}],[\"表示一个日期时间\",{\"1\":{\"2041\":1}}],[\"表示一个不带日期的时间\",{\"1\":{\"2041\":1}}],[\"表示一个没有时间的日期\",{\"1\":{\"2041\":1}}],[\"表示一个到\",{\"1\":{\"2040\":1}}],[\"表示一个统一资源定位符\",{\"1\":{\"2040\":1}}],[\"表示一个类或接口的运行时类型\",{\"1\":{\"1826\":1}}],[\"表示一个类不能被继承\",{\"1\":{\"1502\":1}}],[\"表示一个类实现一个或多个接口\",{\"1\":{\"1500\":1}}],[\"表示一个类继承另一个类\",{\"1\":{\"1499\":1}}],[\"表示一个\",{\"1\":{\"1288\":1,\"1682\":1}}],[\"表示一阶微分方程\",{\"1\":{\"635\":1}}],[\"表示一阶微分方程和单变量输入\",{\"1\":{\"634\":1}}],[\"表示顶点i到顶点j是否有边\",{\"1\":{\"954\":1}}],[\"表示反应项\",{\"1\":{\"928\":1}}],[\"表示扩散项\",{\"1\":{\"928\":1}}],[\"表示化学反应或生物反应的速率\",{\"1\":{\"926\":1}}],[\"表示捕食者和被捕食者种群的动态变化\",{\"1\":{\"871\":1}}],[\"表示第\",{\"1\":{\"869\":1,\"870\":1,\"872\":1,\"873\":1}}],[\"表示非齐次部分\",{\"1\":{\"864\":1}}],[\"表示序列在第\",{\"1\":{\"863\":1}}],[\"表示城市\",{\"1\":{\"737\":2}}],[\"表示无限制\",{\"1\":{\"728\":1}}],[\"表示无序列表项\",{\"1\":{\"21\":1}}],[\"表示开始时的天气状态分布\",{\"1\":{\"650\":1}}],[\"表示从一种天气状态到另一种天气状态的概率\",{\"1\":{\"650\":1}}],[\"表示从状态\",{\"1\":{\"646\":1}}],[\"表示n个变量\",{\"1\":{\"635\":1}}],[\"表示工人i完成任务j的成本\",{\"1\":{\"409\":1}}],[\"表示边的容量\",{\"1\":{\"398\":1,\"399\":1}}],[\"表示通过该边的实际流量\",{\"1\":{\"396\":1}}],[\"表示每个顶点的邻接顶点\",{\"1\":{\"390\":1}}],[\"表示存在一条从顶点\",{\"1\":{\"390\":1}}],[\"表示为有序对\",{\"1\":{\"389\":1,\"953\":1}}],[\"表示为无序对\",{\"1\":{\"389\":1}}],[\"表示布尔值\",{\"1\":{\"139\":1}}],[\"表示\",{\"1\":{\"137\":1,\"1053\":1,\"1931\":1}}],[\"表示已完成的任务\",{\"1\":{\"30\":1}}],[\"表示未完成的任务\",{\"1\":{\"30\":1}}],[\"表示水平线\",{\"1\":{\"28\":1}}],[\"表示代码块\",{\"1\":{\"28\":1}}],[\"表示行内代码\",{\"1\":{\"27\":1}}],[\"表示引用\",{\"1\":{\"25\":1}}],[\"9+\",{\"1\":{\"1950\":1}}],[\"9x\",{\"1\":{\"923\":1}}],[\"91\",{\"1\":{\"478\":1,\"479\":1,\"482\":1,\"483\":1,\"488\":1}}],[\"93\",{\"1\":{\"478\":1,\"479\":1,\"482\":1,\"483\":1,\"484\":1,\"488\":1}}],[\"92\",{\"1\":{\"478\":2,\"479\":2,\"482\":2,\"483\":2,\"484\":1,\"488\":2}}],[\"99\",{\"1\":{\"424\":1,\"852\":1,\"1295\":1,\"1528\":4}}],[\"95\",{\"1\":{\"177\":1,\"428\":1}}],[\"90\",{\"1\":{\"177\":2,\"483\":1,\"856\":2}}],[\"9\",{\"0\":{\"473\":1,\"486\":1,\"609\":1,\"774\":1,\"815\":1,\"826\":1,\"1348\":1,\"1476\":1,\"1505\":1,\"1651\":1,\"1997\":1,\"2215\":1},\"1\":{\"28\":1,\"148\":2,\"163\":1,\"173\":1,\"182\":1,\"207\":1,\"212\":1,\"214\":1,\"215\":1,\"219\":3,\"221\":1,\"222\":1,\"223\":2,\"240\":1,\"378\":1,\"398\":1,\"399\":1,\"458\":1,\"485\":2,\"486\":2,\"487\":2,\"643\":1,\"780\":1,\"923\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"965\":2,\"1040\":1,\"1138\":1,\"1139\":1,\"1142\":1,\"1144\":2,\"1154\":2,\"1155\":1,\"1165\":2,\"1185\":1,\"1359\":1,\"1360\":1,\"1412\":4,\"1418\":2,\"1457\":1,\"1672\":1,\"1947\":1,\"1950\":1}}],[\"9️⃣\",{\"1\":{\"12\":2}}],[\"示例文本数据和标签\",{\"1\":{\"589\":1}}],[\"示例时间序列数据\",{\"1\":{\"488\":1}}],[\"示例问卷数据\",{\"1\":{\"480\":1}}],[\"示例数据\",{\"1\":{\"478\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"489\":1}}],[\"示例距离矩阵\",{\"1\":{\"410\":1}}],[\"示例成本矩阵\",{\"1\":{\"409\":1}}],[\"示例代码\",{\"0\":{\"569\":1,\"571\":1,\"1144\":1,\"1152\":1,\"1384\":1,\"1528\":1,\"1530\":1,\"1533\":1,\"1561\":1,\"1705\":1,\"2046\":1},\"1\":{\"394\":1,\"800\":1,\"801\":1,\"802\":1,\"803\":1,\"804\":1,\"805\":1,\"807\":1,\"808\":1,\"809\":1,\"810\":1,\"811\":1,\"812\":1,\"813\":1,\"814\":1,\"815\":1,\"816\":1,\"955\":1,\"1401\":1,\"1402\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1439\":1,\"1440\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":1}}],[\"示例\",{\"0\":{\"157\":1,\"164\":1,\"175\":1,\"243\":1,\"248\":1,\"259\":1,\"384\":1,\"618\":1,\"649\":1,\"680\":1,\"836\":1,\"837\":1,\"851\":1,\"866\":1,\"875\":1,\"884\":1,\"927\":1,\"1418\":1,\"1682\":1,\"1748\":1,\"1751\":1,\"1754\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":1,\"1777\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1792\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":1,\"1818\":1,\"1820\":1,\"1823\":1,\"1831\":1,\"1883\":1,\"1918\":1,\"1933\":1,\"1954\":1,\"1956\":1,\"1966\":1,\"2033\":1,\"2047\":1,\"2048\":1},\"1\":{\"27\":1,\"561\":1,\"562\":1,\"927\":1,\"1146\":1,\"1147\":1,\"1148\":1,\"1149\":1,\"1150\":1,\"1151\":1,\"1181\":1,\"1182\":1,\"1183\":1,\"1185\":1,\"1187\":1,\"1294\":1,\"1295\":1,\"1297\":1,\"1298\":1,\"1299\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1315\":1,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1,\"1474\":1,\"1475\":1,\"1476\":1,\"1497\":1,\"1498\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1502\":1,\"1503\":1,\"1504\":1,\"1505\":1,\"1506\":1,\"1536\":1,\"1538\":1,\"1539\":1,\"1541\":1,\"1542\":1,\"1545\":1,\"1546\":1,\"1547\":1,\"1548\":1,\"1667\":1,\"1668\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1675\":1,\"1676\":1,\"1682\":1,\"1685\":1,\"1686\":1,\"1690\":1,\"1691\":1,\"1692\":1,\"1693\":1,\"1853\":1,\"1855\":1,\"1856\":1,\"1857\":1,\"1858\":1,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":1,\"1994\":1,\"1995\":1,\"1996\":1,\"2000\":1,\"2001\":1,\"2009\":1,\"2010\":1,\"2011\":1,\"2012\":1,\"2013\":1,\"2014\":1,\"2027\":1,\"2028\":1,\"2033\":1}}],[\"`calculator`\",{\"1\":{\"2000\":1}}],[\"`\",{\"1\":{\"28\":6,\"1148\":4,\"1149\":2,\"1947\":2}}],[\"```markdown\",{\"1\":{\"28\":1}}],[\"```python\",{\"1\":{\"28\":1}}],[\"```语言\",{\"1\":{\"28\":1}}],[\"```\",{\"1\":{\"28\":2}}],[\"`行内代码`\",{\"1\":{\"27\":1}}],[\"`代码`\",{\"1\":{\"27\":1}}],[\"8允许在接口中定义默认方法和静态方法\",{\"1\":{\"1993\":1}}],[\"8最重要的特性之一\",{\"1\":{\"1989\":1}}],[\"8中一些主要的新特性\",{\"1\":{\"1988\":1}}],[\"8中\",{\"1\":{\"1692\":1}}],[\"8中引入的方法引用是一种更简洁的lambda表达式写法\",{\"1\":{\"1690\":1}}],[\"8引入了一个新的javascript引擎\",{\"1\":{\"1996\":1}}],[\"8引入了\",{\"1\":{\"1990\":1}}],[\"8引入了java\",{\"1\":{\"1403\":1}}],[\"8引入的一项功能\",{\"1\":{\"1684\":1}}],[\"8引入的新日期时间api\",{\"1\":{\"1408\":1}}],[\"8位无符号整数\",{\"1\":{\"1127\":1}}],[\"8位有符号整数\",{\"1\":{\"1127\":1}}],[\"8080\",{\"1\":{\"1890\":1,\"1891\":1}}],[\"80\",{\"1\":{\"739\":1,\"2154\":1}}],[\"84\",{\"1\":{\"483\":1}}],[\"89\",{\"1\":{\"478\":1,\"479\":1,\"482\":1,\"483\":2,\"488\":1}}],[\"81\",{\"1\":{\"182\":1,\"221\":1,\"222\":1,\"223\":1}}],[\"88\",{\"1\":{\"177\":1,\"478\":1,\"479\":1,\"482\":1,\"483\":1,\"484\":1,\"488\":1}}],[\"82\",{\"1\":{\"177\":1,\"483\":1}}],[\"85\",{\"1\":{\"177\":1,\"478\":2,\"479\":2,\"482\":2,\"483\":2,\"484\":1,\"488\":2}}],[\"8\",{\"0\":{\"26\":1,\"472\":1,\"485\":1,\"608\":1,\"773\":1,\"792\":1,\"814\":1,\"825\":1,\"1179\":1,\"1188\":1,\"1318\":1,\"1347\":1,\"1366\":1,\"1475\":1,\"1504\":1,\"1631\":1,\"1650\":1,\"1996\":1,\"2214\":1},\"1\":{\"130\":1,\"214\":1,\"217\":1,\"219\":4,\"223\":1,\"378\":29,\"394\":4,\"424\":1,\"434\":1,\"458\":2,\"485\":1,\"486\":1,\"487\":1,\"569\":1,\"590\":1,\"649\":1,\"650\":1,\"780\":1,\"855\":1,\"964\":2,\"965\":2,\"1032\":1,\"1040\":1,\"1138\":1,\"1139\":1,\"1142\":1,\"1144\":2,\"1154\":3,\"1172\":1,\"1216\":1,\"1222\":1,\"1286\":1,\"1359\":1,\"1360\":1,\"1363\":2,\"1364\":1,\"1394\":1,\"1404\":1,\"1523\":2,\"1555\":1,\"1558\":1,\"1560\":1,\"1573\":1,\"1578\":1,\"1584\":1,\"1595\":1,\"1691\":1,\"1715\":1,\"1819\":1,\"1868\":1,\"1921\":1,\"1925\":1,\"1988\":1,\"1994\":1,\"1997\":1,\"1998\":1,\"2041\":1,\"2154\":1}}],[\"8️⃣\",{\"1\":{\"12\":2}}],[\">rainy\",{\"1\":{\"649\":2}}],[\">sunny\",{\"1\":{\"649\":2}}],[\">=\",{\"1\":{\"166\":1,\"194\":1,\"408\":1,\"409\":1,\"700\":1,\"1147\":2,\"1152\":1,\"1313\":2}}],[\">>=\",{\"1\":{\"197\":1}}],[\">>>\",{\"1\":{\"133\":2,\"1315\":3}}],[\">>\",{\"1\":{\"25\":1,\"196\":1,\"197\":1,\"1149\":2,\"1315\":3}}],[\">\",{\"1\":{\"25\":2,\"194\":1,\"201\":1,\"398\":1,\"399\":1,\"409\":1,\"423\":1,\"434\":1,\"826\":1,\"958\":1,\"960\":1,\"964\":2,\"965\":1,\"1147\":2,\"1152\":8,\"1159\":1,\"1160\":1,\"1161\":1,\"1163\":2,\"1294\":5,\"1313\":2,\"1316\":1,\"1321\":1,\"1548\":2,\"1568\":1,\"1636\":1,\"1637\":1,\"1638\":1,\"1639\":1,\"1647\":1,\"1651\":1,\"1655\":1,\"1670\":2,\"1685\":4,\"1686\":1,\"1688\":1,\"1689\":1,\"1690\":1,\"1691\":3,\"1692\":1,\"1693\":1,\"1820\":2,\"1827\":2,\"1831\":1,\"1839\":1,\"1856\":1,\"1921\":6,\"1925\":4,\"1964\":6,\"1970\":2,\"1984\":1,\"1989\":3,\"1990\":1,\"1992\":1,\"2033\":1}}],[\"7引入了java\",{\"1\":{\"1440\":1}}],[\"754\",{\"1\":{\"2154\":2}}],[\"754标准\",{\"1\":{\"1308\":1}}],[\"75+ones\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"558\":1}}],[\"75\",{\"1\":{\"517\":1,\"543\":1,\"549\":1,\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"1425\":1}}],[\"767\",{\"1\":{\"1286\":1}}],[\"768\",{\"1\":{\"1286\":1}}],[\"76\",{\"1\":{\"483\":1}}],[\"79\",{\"1\":{\"478\":1,\"479\":1,\"482\":1,\"483\":1,\"484\":1,\"488\":1}}],[\"70\",{\"1\":{\"182\":1,\"733\":1,\"1051\":1}}],[\"78\",{\"1\":{\"177\":1,\"182\":2,\"478\":1,\"479\":1,\"482\":1,\"483\":1,\"488\":1}}],[\"7\",{\"0\":{\"25\":1,\"191\":1,\"199\":1,\"471\":1,\"484\":1,\"503\":1,\"536\":1,\"599\":1,\"607\":1,\"677\":1,\"712\":1,\"772\":1,\"791\":1,\"813\":1,\"824\":1,\"1178\":1,\"1187\":1,\"1317\":1,\"1346\":1,\"1365\":1,\"1474\":1,\"1503\":1,\"1585\":1,\"1614\":1,\"1630\":1,\"1649\":1,\"1673\":1,\"1693\":1,\"1858\":1,\"1995\":1,\"2213\":1},\"1\":{\"182\":1,\"207\":1,\"219\":4,\"223\":1,\"378\":4,\"394\":4,\"398\":1,\"399\":1,\"458\":1,\"550\":2,\"643\":1,\"680\":1,\"780\":1,\"855\":1,\"856\":1,\"948\":2,\"964\":2,\"965\":2,\"1040\":1,\"1138\":1,\"1139\":1,\"1142\":1,\"1144\":2,\"1154\":3,\"1165\":1,\"1222\":1,\"1359\":1,\"1360\":1,\"1394\":1,\"1523\":1,\"1924\":1}}],[\"7️⃣\",{\"1\":{\"12\":2}}],[\"jtree\",{\"1\":{\"2025\":1}}],[\"jtable\",{\"1\":{\"2025\":1}}],[\"jtextarea\",{\"1\":{\"2021\":1,\"2025\":1}}],[\"jtextfield\",{\"1\":{\"2021\":1,\"2025\":1}}],[\"jlist\",{\"1\":{\"2025\":1}}],[\"jlabel\",{\"1\":{\"2021\":1,\"2025\":1}}],[\"jcombobox\",{\"1\":{\"2025\":1}}],[\"jcheckbox\",{\"1\":{\"2025\":1}}],[\"jradiobutton\",{\"1\":{\"2025\":1}}],[\"jmenuitem\",{\"1\":{\"2021\":1}}],[\"jmenu\",{\"1\":{\"2021\":1}}],[\"jmenubar\",{\"1\":{\"2021\":1}}],[\"jmc\",{\"1\":{\"1267\":1}}],[\"jbutton\",{\"1\":{\"2021\":1,\"2022\":3,\"2023\":1,\"2025\":1,\"2027\":4,\"2028\":6,\"2031\":2}}],[\"jframe\",{\"1\":{\"2021\":1,\"2022\":6,\"2023\":1,\"2026\":1,\"2027\":4,\"2028\":4}}],[\"jfc\",{\"1\":{\"2020\":1}}],[\"jni\",{\"1\":{\"1986\":1}}],[\"jprogressbar\",{\"1\":{\"2025\":1}}],[\"jpanel\",{\"1\":{\"2021\":1,\"2026\":1}}],[\"jpa\",{\"1\":{\"1681\":1}}],[\"jpg\",{\"1\":{\"24\":1,\"336\":2,\"800\":2,\"801\":2,\"802\":2,\"803\":2,\"804\":1,\"805\":2,\"807\":2,\"818\":2,\"819\":2,\"820\":2,\"821\":2,\"822\":2,\"823\":2,\"824\":2,\"825\":3,\"826\":2,\"827\":2,\"947\":2}}],[\"jsf\",{\"1\":{\"1679\":1}}],[\"jsp\",{\"0\":{\"2090\":1},\"1\":{\"1460\":1,\"1679\":1,\"1681\":2},\"2\":{\"2092\":1}}],[\"jsonfile\",{\"1\":{\"258\":4}}],[\"json\",{\"1\":{\"237\":1,\"258\":5,\"1921\":1}}],[\"jdbc\",{\"0\":{\"1973\":1,\"1974\":1,\"1975\":1,\"1976\":1,\"1977\":1,\"1986\":1},\"1\":{\"1460\":1,\"1973\":2,\"1974\":3,\"1975\":4,\"1976\":1,\"1977\":1,\"1978\":3,\"1979\":1,\"1985\":1,\"1986\":3,\"1987\":3}}],[\"jdk8\",{\"1\":{\"1457\":1}}],[\"jquery\",{\"1\":{\"1460\":1}}],[\"j++\",{\"1\":{\"1331\":1,\"1360\":1}}],[\"jvm不仅仅是java程序的运行时环境\",{\"1\":{\"1269\":1}}],[\"jvm提供了内置锁\",{\"1\":{\"1268\":1}}],[\"jvm通过多线程机制提高程序执行效率\",{\"1\":{\"1268\":1}}],[\"jvm原生支持多线程\",{\"1\":{\"1268\":1}}],[\"jvm与多线程\",{\"0\":{\"1268\":1}}],[\"jvm参数调优\",{\"1\":{\"1267\":1}}],[\"jvm自动管理内存\",{\"1\":{\"1267\":1}}],[\"jvm解释或即时编译\",{\"1\":{\"1266\":1}}],[\"jvm的调优与管理\",{\"0\":{\"1267\":1}}],[\"jvm的工作过程\",{\"0\":{\"1266\":1}}],[\"jvm的主要组件\",{\"0\":{\"1265\":1}}],[\"jvm的基本概念\",{\"0\":{\"1264\":1}}],[\"jvm是一个抽象计算机\",{\"1\":{\"1264\":1}}],[\"jvm是平台无关的\",{\"1\":{\"1263\":1}}],[\"jvm\",{\"0\":{\"1263\":1,\"2081\":1},\"1\":{\"1263\":1,\"1458\":1,\"1866\":1,\"1900\":2,\"1903\":1}}],[\"jumps\",{\"1\":{\"2048\":1}}],[\"julexample\",{\"1\":{\"1918\":2}}],[\"jul\",{\"1\":{\"1914\":2,\"1915\":2}}],[\"jupiter\",{\"1\":{\"1851\":2,\"1853\":2,\"1855\":1,\"1857\":2,\"1858\":1}}],[\"jupiter<\",{\"1\":{\"1851\":2}}],[\"jupyter\",{\"1\":{\"370\":1}}],[\"junit提供了许多常用的断言方法\",{\"1\":{\"1856\":1}}],[\"junit是java平台最流行的单元测试框架之一\",{\"1\":{\"1851\":1}}],[\"junit\",{\"0\":{\"1851\":1},\"1\":{\"1649\":1,\"1832\":1,\"1851\":3,\"1853\":2,\"1855\":1,\"1857\":2,\"1858\":1}}],[\"just\",{\"1\":{\"1259\":1,\"1266\":1}}],[\"jit\",{\"1\":{\"1259\":1,\"1266\":1}}],[\"jianghu\",{\"0\":{\"0\":1}}],[\"j2me\",{\"1\":{\"1258\":2}}],[\"j2ee\",{\"1\":{\"1258\":2}}],[\"j2se\",{\"1\":{\"1258\":2}}],[\"jane\",{\"1\":{\"1568\":2,\"1661\":1,\"1663\":1,\"1689\":1,\"1692\":1}}],[\"january\",{\"1\":{\"1401\":1}}],[\"james\",{\"1\":{\"1258\":1}}],[\"java进阶\",{\"0\":{\"2293\":1}}],[\"java实现\",{\"2\":{\"2182\":1}}],[\"java框架\",{\"2\":{\"2106\":1,\"2109\":1,\"2112\":1,\"2115\":1}}],[\"java开发工具\",{\"0\":{\"2292\":1},\"2\":{\"2103\":1}}],[\"java开发环境\",{\"0\":{\"1270\":1}}],[\"java虚拟机\",{\"2\":{\"2083\":1}}],[\"javafxexample\",{\"1\":{\"2033\":1}}],[\"javafx\",{\"0\":{\"2032\":1,\"2033\":1},\"1\":{\"1997\":2,\"2032\":2,\"2033\":6,\"2034\":1}}],[\"javax\",{\"1\":{\"1996\":3,\"2020\":1,\"2022\":3,\"2027\":2,\"2028\":2}}],[\"java8新特性\",{\"0\":{\"1988\":1}}],[\"java单元测试是确保代码质量的重要手段\",{\"1\":{\"1859\":1}}],[\"java单元测试是用于验证代码中的单个方法或类是否按照预期工作的一种技术\",{\"1\":{\"1848\":1}}],[\"java有几个流行的单元测试框架\",{\"1\":{\"1850\":1}}],[\"java注解是一种灵活且强大的工具\",{\"1\":{\"1847\":1}}],[\"java集合类\",{\"0\":{\"1734\":1}}],[\"java集合框架中的数据结构\",{\"0\":{\"1724\":1}}],[\"java代码示例\",{\"0\":{\"1661\":1}}],[\"javac\",{\"1\":{\"1628\":1,\"1657\":1}}],[\"java内部类有四种主要类型\",{\"1\":{\"1586\":1}}],[\"java会抛出classcastexception异常\",{\"1\":{\"1539\":1}}],[\"java会在需要时自动执行\",{\"1\":{\"1294\":1}}],[\"java对象和类\",{\"0\":{\"1467\":1}}],[\"java面向对象实践\",{\"0\":{\"1653\":1}}],[\"java面向对象\",{\"0\":{\"1466\":1},\"2\":{\"1718\":1}}],[\"javascript\",{\"0\":{\"1996\":1,\"2272\":1},\"1\":{\"1460\":1},\"2\":{\"2274\":1}}],[\"javase\",{\"1\":{\"1258\":1}}],[\"javaweb\",{\"0\":{\"1460\":1},\"2\":{\"2085\":1,\"2088\":1,\"2094\":1,\"2261\":1,\"2264\":1,\"2267\":1,\"2270\":1,\"2273\":1,\"2276\":1,\"2279\":1,\"2282\":1}}],[\"java设计模式\",{\"0\":{\"2076\":1},\"1\":{\"1458\":1},\"2\":{\"2080\":1}}],[\"java数据结构是存储和管理数据的方式\",{\"1\":{\"1720\":1}}],[\"java数据结构\",{\"0\":{\"1720\":1}}],[\"java数据结构与算法\",{\"0\":{\"2066\":1},\"1\":{\"1458\":1},\"2\":{\"2075\":1}}],[\"java数组是一种强大且基础的数据结构\",{\"1\":{\"1366\":1}}],[\"java数组是存储相同类型数据的容器\",{\"1\":{\"1349\":1}}],[\"java数组具有固定的大小和类型\",{\"1\":{\"1349\":1}}],[\"java并发编程\",{\"0\":{\"2063\":1},\"1\":{\"1458\":1}}],[\"java高级内容\",{\"0\":{\"1719\":1},\"2\":{\"2051\":1}}],[\"java高级\",{\"0\":{\"1458\":1}}],[\"java学习内容\",{\"0\":{\"1456\":1},\"2\":{\"1465\":1}}],[\"java基础\",{\"0\":{\"1457\":1,\"2291\":1},\"2\":{\"1455\":1}}],[\"java基础语法\",{\"0\":{\"1256\":1},\"1\":{\"1457\":1}}],[\"java自动将包装类型转换为其对应的基本数据类型\",{\"1\":{\"1385\":1}}],[\"java自动将基本数据类型转换为其对应的包装类型\",{\"1\":{\"1385\":1}}],[\"java提供了一个工具称为javadoc\",{\"1\":{\"1999\":1}}],[\"java提供了一些内置注解\",{\"1\":{\"1843\":1}}],[\"java提供了一系列类和接口来进行文件和数据流的操作\",{\"1\":{\"1430\":1}}],[\"java提供了几个内置的函数式接口\",{\"1\":{\"1686\":1}}],[\"java提供了三个主要的类来处理字符串\",{\"1\":{\"1367\":1}}],[\"java提供了多种类来处理日期和时间\",{\"1\":{\"1399\":1}}],[\"java提供了多种方式来复制数组\",{\"1\":{\"1362\":1}}],[\"java提供了多种监控工具\",{\"1\":{\"1267\":1}}],[\"java支持多维数组\",{\"1\":{\"1358\":1}}],[\"java方法是构建程序功能的基本单位\",{\"1\":{\"1348\":1}}],[\"java还提供了一些控制循环执行的语句\",{\"1\":{\"1328\":1}}],[\"java中没有直接的图类\",{\"1\":{\"1732\":1}}],[\"java中通过priorityqueue类实现堆结构\",{\"1\":{\"1731\":1}}],[\"java中可以使用stack类或deque接口来实现栈\",{\"1\":{\"1730\":1}}],[\"java中常见的\",{\"1\":{\"1726\":1}}],[\"java中常量通常使用final关键字来定义\",{\"1\":{\"1292\":1}}],[\"java中提供的这三种类让开发者可以根据具体的需求选择最适合的字符串处理方式\",{\"1\":{\"1379\":1}}],[\"java中的数据结构是编程中非常重要的基础\",{\"1\":{\"1733\":1}}],[\"java中的数组操作\",{\"0\":{\"1361\":1}}],[\"java中的lambda表达式是java\",{\"1\":{\"1684\":1}}],[\"java中的代码块可以分为以下几种类型\",{\"1\":{\"1544\":1}}],[\"java中的输入输出\",{\"1\":{\"1430\":1}}],[\"java中的正则表达式功能由java\",{\"1\":{\"1419\":1}}],[\"java中的string对象使用字符串常量池来减少内存消耗和提高性能\",{\"1\":{\"1369\":1}}],[\"java中的参数传递是值传递\",{\"1\":{\"1338\":1}}],[\"java中的运算符可以分为以下几大类\",{\"1\":{\"1310\":1}}],[\"java中主要的循环语句有for\",{\"1\":{\"1323\":1}}],[\"java中主要的分支语句有if\",{\"1\":{\"1320\":1}}],[\"java运算符用于执行各种操作\",{\"1\":{\"1310\":1}}],[\"java编译运行\",{\"0\":{\"1284\":1}}],[\"javadoc特定的标签来描述代码的功能\",{\"1\":{\"2000\":1}}],[\"javadoc\",{\"1\":{\"1283\":1,\"1845\":1,\"2002\":1}}],[\"java可以使用修饰符来修饰类中方法和属性\",{\"1\":{\"1277\":1}}],[\"java源代码编译成字节码后\",{\"1\":{\"1264\":1}}],[\"java的文档注释是一种强大的工具\",{\"1\":{\"2004\":1}}],[\"java的集合框架广泛使用泛型\",{\"1\":{\"1837\":1}}],[\"java的内部类提供了一种将逻辑上相关的类组织在一起的方式\",{\"1\":{\"1601\":1}}],[\"java的异常是throwable类的子类\",{\"1\":{\"1443\":1}}],[\"java的异常处理机制基于try\",{\"1\":{\"1442\":1}}],[\"java的正则表达式功能由java\",{\"1\":{\"1409\":1}}],[\"java的体系架构\",{\"0\":{\"1262\":1}}],[\"java的版本和体系\",{\"0\":{\"1260\":1}}],[\"java通常被用在网络环境中\",{\"1\":{\"1259\":1}}],[\"java语言是安全的\",{\"1\":{\"1259\":1}}],[\"java语言是分布式的\",{\"1\":{\"1259\":1}}],[\"java语言是一个纯的面向对象程序设计语言\",{\"1\":{\"1259\":1}}],[\"javaone\",{\"1\":{\"1258\":1}}],[\"javame\",{\"1\":{\"1258\":1}}],[\"java平台微型版\",{\"1\":{\"1258\":1}}],[\"java平台企业版\",{\"1\":{\"1258\":1}}],[\"java平台标准版\",{\"1\":{\"1258\":1}}],[\"javaee\",{\"1\":{\"1258\":1}}],[\"java2\",{\"1\":{\"1258\":1}}],[\"java分为三个体系\",{\"1\":{\"1258\":1}}],[\"java简介\",{\"0\":{\"1258\":1}}],[\"java\",{\"0\":{\"108\":1,\"1257\":1,\"1664\":1,\"1679\":1,\"1680\":1,\"1681\":1,\"1682\":1,\"1696\":1,\"1708\":1,\"1812\":1,\"1816\":1,\"1850\":1,\"1868\":1,\"1878\":1,\"1880\":1,\"1881\":1,\"1888\":1,\"1889\":1,\"1892\":1,\"1913\":1,\"1914\":1,\"1915\":1,\"1930\":1,\"1931\":1,\"1943\":1,\"1946\":1,\"1947\":1,\"1960\":1,\"1971\":1,\"1994\":1,\"2019\":1,\"2032\":1,\"2035\":1,\"2036\":1,\"2042\":1,\"2294\":1},\"1\":{\"1127\":1,\"1258\":10,\"1259\":47,\"1261\":8,\"1263\":1,\"1267\":1,\"1273\":1,\"1275\":4,\"1276\":2,\"1278\":1,\"1280\":1,\"1285\":1,\"1291\":1,\"1292\":1,\"1300\":3,\"1305\":1,\"1363\":1,\"1373\":2,\"1376\":2,\"1401\":2,\"1402\":2,\"1403\":1,\"1404\":3,\"1405\":2,\"1406\":3,\"1407\":2,\"1408\":4,\"1416\":2,\"1418\":2,\"1422\":1,\"1427\":1,\"1428\":2,\"1433\":3,\"1434\":5,\"1436\":3,\"1437\":5,\"1439\":2,\"1440\":6,\"1467\":3,\"1472\":1,\"1473\":1,\"1477\":1,\"1478\":2,\"1479\":1,\"1496\":2,\"1507\":1,\"1515\":1,\"1516\":1,\"1517\":1,\"1525\":2,\"1551\":2,\"1555\":1,\"1558\":1,\"1560\":1,\"1562\":1,\"1572\":2,\"1573\":1,\"1578\":1,\"1584\":1,\"1595\":1,\"1602\":1,\"1603\":1,\"1615\":1,\"1616\":1,\"1618\":2,\"1626\":2,\"1627\":1,\"1628\":2,\"1629\":1,\"1630\":5,\"1632\":2,\"1633\":2,\"1634\":1,\"1651\":2,\"1652\":1,\"1653\":1,\"1654\":5,\"1655\":3,\"1657\":1,\"1658\":1,\"1661\":1,\"1663\":4,\"1664\":5,\"1665\":2,\"1670\":1,\"1672\":1,\"1677\":1,\"1678\":3,\"1679\":5,\"1680\":4,\"1681\":5,\"1682\":2,\"1683\":3,\"1690\":1,\"1691\":1,\"1695\":3,\"1696\":1,\"1697\":1,\"1698\":1,\"1699\":1,\"1700\":1,\"1701\":1,\"1706\":2,\"1707\":3,\"1709\":4,\"1710\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1,\"1716\":3,\"1720\":1,\"1725\":1,\"1734\":2,\"1735\":1,\"1741\":1,\"1742\":4,\"1743\":2,\"1748\":2,\"1751\":2,\"1754\":2,\"1755\":1,\"1756\":3,\"1760\":1,\"1762\":2,\"1764\":2,\"1766\":2,\"1768\":2,\"1769\":1,\"1770\":3,\"1774\":1,\"1776\":2,\"1777\":2,\"1779\":1,\"1780\":4,\"1784\":1,\"1786\":2,\"1788\":2,\"1790\":2,\"1792\":2,\"1794\":2,\"1795\":3,\"1799\":1,\"1801\":2,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1810\":1,\"1811\":3,\"1812\":3,\"1814\":3,\"1815\":1,\"1816\":1,\"1818\":1,\"1819\":1,\"1820\":1,\"1821\":1,\"1823\":3,\"1824\":3,\"1825\":1,\"1826\":2,\"1831\":3,\"1832\":2,\"1834\":1,\"1841\":1,\"1844\":4,\"1846\":1,\"1860\":1,\"1862\":1,\"1863\":1,\"1865\":1,\"1866\":1,\"1867\":5,\"1868\":1,\"1869\":1,\"1870\":2,\"1871\":2,\"1872\":1,\"1873\":3,\"1874\":3,\"1875\":1,\"1876\":2,\"1878\":3,\"1879\":3,\"1880\":4,\"1881\":1,\"1882\":1,\"1883\":3,\"1886\":1,\"1888\":1,\"1889\":1,\"1890\":5,\"1891\":4,\"1892\":1,\"1893\":2,\"1894\":1,\"1895\":2,\"1896\":6,\"1897\":1,\"1898\":1,\"1900\":1,\"1908\":1,\"1909\":1,\"1911\":1,\"1912\":1,\"1914\":5,\"1915\":2,\"1916\":1,\"1918\":3,\"1919\":1,\"1923\":1,\"1928\":2,\"1929\":3,\"1931\":2,\"1933\":2,\"1934\":1,\"1935\":2,\"1936\":3,\"1937\":1,\"1938\":3,\"1939\":2,\"1940\":1,\"1941\":1,\"1942\":4,\"1943\":1,\"1944\":2,\"1945\":1,\"1946\":2,\"1947\":1,\"1949\":3,\"1953\":1,\"1954\":7,\"1957\":2,\"1958\":4,\"1960\":1,\"1962\":1,\"1963\":5,\"1964\":1,\"1965\":1,\"1969\":3,\"1970\":1,\"1971\":2,\"1972\":1,\"1973\":3,\"1974\":1,\"1978\":2,\"1986\":2,\"1987\":2,\"1988\":2,\"1990\":1,\"1993\":1,\"1994\":1,\"1996\":1,\"1997\":1,\"1998\":1,\"2002\":2,\"2018\":1,\"2019\":2,\"2020\":2,\"2022\":3,\"2027\":1,\"2028\":1,\"2029\":1,\"2032\":2,\"2034\":1,\"2035\":3,\"2036\":6,\"2037\":4,\"2038\":1,\"2039\":1,\"2040\":1,\"2041\":4,\"2043\":1,\"2044\":1,\"2045\":1,\"2047\":3,\"2048\":2,\"2049\":2,\"2209\":1},\"2\":{\"109\":1,\"110\":1,\"1454\":1,\"1464\":1,\"1717\":1,\"2050\":1,\"2058\":1,\"2061\":1,\"2064\":1,\"2074\":1,\"2079\":1,\"2082\":1,\"2091\":1,\"2097\":1,\"2100\":1}}],[\"j=1\",{\"1\":{\"832\":1}}],[\"j=1∑n​xij​=1∀i\",{\"1\":{\"737\":1}}],[\"jet\",{\"1\":{\"811\":1}}],[\"j是第j种需求的数量\",{\"1\":{\"699\":1}}],[\"j\",{\"1\":{\"378\":3,\"390\":2,\"408\":8,\"409\":26,\"646\":1,\"680\":3,\"688\":2,\"699\":1,\"737\":3,\"738\":2,\"954\":1,\"960\":5,\"964\":4,\"1051\":2,\"1169\":4,\"1331\":5,\"1360\":3,\"1692\":2}}],[\"joptionpane\",{\"1\":{\"2022\":2}}],[\"journal\",{\"1\":{\"1040\":2}}],[\"join\",{\"1\":{\"255\":1,\"1548\":2,\"1965\":2,\"1966\":1}}],[\"john\",{\"0\":{\"63\":1},\"1\":{\"63\":2,\"248\":2,\"1568\":2,\"1661\":1,\"1663\":1,\"1682\":1,\"1689\":1,\"1692\":1,\"1829\":1,\"1830\":1,\"1858\":2,\"1863\":1,\"1876\":1,\"1956\":2,\"1981\":1},\"2\":{\"65\":1}}],[\"ebookclass\",{\"1\":{\"1655\":3}}],[\"ebook\",{\"1\":{\"1654\":5,\"1655\":10,\"1659\":2}}],[\"east\",{\"1\":{\"2028\":1}}],[\"eager\",{\"0\":{\"2009\":1}}],[\"eating\",{\"1\":{\"1536\":1,\"1709\":1}}],[\"eats\",{\"1\":{\"1511\":1,\"1514\":4,\"1554\":2,\"1709\":1,\"1714\":2}}],[\"eat\",{\"1\":{\"1511\":2,\"1514\":4,\"1536\":2,\"1554\":2,\"1709\":3,\"1714\":4}}],[\"each循环遍历数组中的元素\",{\"1\":{\"1355\":1}}],[\"each\",{\"0\":{\"1325\":1},\"1\":{\"446\":2,\"1815\":2}}],[\"escape\",{\"1\":{\"1292\":1}}],[\"ess\",{\"1\":{\"747\":1}}],[\"ee的应用使用的虚拟机和java\",{\"1\":{\"1261\":1}}],[\"ee是企业版\",{\"1\":{\"1261\":1}}],[\"ee\",{\"1\":{\"1258\":1,\"1261\":1,\"1681\":1}}],[\"e^2\",{\"1\":{\"1219\":1,\"1394\":1}}],[\"eq\",{\"1\":{\"920\":4,\"923\":2}}],[\"equations\",{\"1\":{\"891\":1,\"897\":1,\"905\":1}}],[\"equation\",{\"1\":{\"862\":1,\"879\":1,\"889\":1,\"895\":1,\"897\":1,\"903\":1,\"905\":1,\"911\":1,\"927\":1}}],[\"equals\",{\"1\":{\"1370\":1,\"1668\":5,\"1669\":1,\"1676\":13,\"1677\":7,\"1678\":1,\"1814\":1,\"2037\":1}}],[\"equalizehist\",{\"1\":{\"823\":1}}],[\"equalized\",{\"1\":{\"823\":3}}],[\"equal\",{\"1\":{\"688\":1,\"1152\":4,\"1370\":2}}],[\"equilibrium\",{\"1\":{\"745\":1}}],[\"e−\",{\"1\":{\"884\":1}}],[\"er\",{\"1\":{\"2213\":1}}],[\"err\",{\"1\":{\"941\":1}}],[\"error\",{\"1\":{\"202\":2,\"245\":3,\"447\":4,\"449\":4,\"460\":1,\"497\":3,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"606\":3,\"660\":1,\"959\":1,\"1445\":1,\"1446\":1,\"1895\":2,\"1896\":1,\"1922\":2,\"1926\":2,\"1927\":1}}],[\"erode\",{\"1\":{\"825\":1}}],[\"eroded\",{\"1\":{\"812\":2,\"825\":3}}],[\"eye\",{\"1\":{\"738\":3,\"1131\":1,\"1156\":1,\"1222\":1}}],[\"eig\",{\"1\":{\"624\":1,\"1143\":1,\"1144\":1,\"1233\":1}}],[\"eigenvectors\",{\"1\":{\"624\":5,\"626\":1}}],[\"eigenvalues\",{\"1\":{\"624\":2,\"626\":1,\"1143\":1,\"1144\":1}}],[\"epub\",{\"1\":{\"1655\":1}}],[\"eps=0\",{\"1\":{\"551\":1}}],[\"epsilon=0\",{\"1\":{\"502\":1}}],[\"epsilon\",{\"1\":{\"491\":2,\"492\":1,\"494\":1,\"557\":2}}],[\"epochs=100\",{\"1\":{\"660\":1}}],[\"epochs=5\",{\"1\":{\"610\":1}}],[\"epochs=20\",{\"1\":{\"608\":1}}],[\"epoch\",{\"1\":{\"447\":3,\"449\":3}}],[\"eve\",{\"1\":{\"1689\":1,\"1692\":1}}],[\"evennumbers\",{\"1\":{\"1992\":2}}],[\"even\",{\"1\":{\"1170\":1}}],[\"event\",{\"1\":{\"489\":2,\"2022\":2}}],[\"eval=t\",{\"1\":{\"852\":1,\"856\":1}}],[\"eval\",{\"1\":{\"609\":1,\"852\":2,\"853\":1,\"856\":2,\"1996\":1}}],[\"evaluate\",{\"1\":{\"434\":2,\"435\":1,\"608\":1,\"610\":1}}],[\"evolution\",{\"1\":{\"420\":1}}],[\"edition\",{\"1\":{\"1258\":3,\"1261\":3}}],[\"edmondskarp\",{\"1\":{\"399\":2}}],[\"edmonds\",{\"0\":{\"399\":1},\"1\":{\"397\":1,\"399\":2}}],[\"edges\",{\"1\":{\"802\":3,\"810\":2,\"820\":3,\"964\":9}}],[\"edgecolor=\",{\"1\":{\"569\":1,\"680\":1,\"688\":1}}],[\"edgelist\",{\"1\":{\"390\":1}}],[\"edge\",{\"1\":{\"390\":1,\"810\":1,\"953\":1}}],[\"english\",{\"0\":{\"2285\":1}}],[\"engine\",{\"1\":{\"1996\":2}}],[\"engine<\",{\"1\":{\"1851\":1}}],[\"engineers\",{\"1\":{\"1040\":2}}],[\"engineering\",{\"1\":{\"1040\":3,\"1677\":6}}],[\"enumsetexample\",{\"1\":{\"1792\":1}}],[\"enumset\",{\"1\":{\"1784\":1,\"1791\":2,\"1792\":4,\"1794\":1}}],[\"enumeration\",{\"1\":{\"1602\":1}}],[\"enumerate\",{\"1\":{\"409\":1,\"700\":2}}],[\"enum\",{\"0\":{\"2014\":1},\"1\":{\"1494\":1,\"1603\":1,\"1604\":1,\"1608\":1,\"1612\":1,\"1654\":1,\"1792\":1,\"2014\":1}}],[\"environment\",{\"1\":{\"1106\":2}}],[\"env\",{\"1\":{\"856\":6}}],[\"envelopment\",{\"1\":{\"754\":1}}],[\"enhanced\",{\"1\":{\"809\":2}}],[\"encoding=\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"encoder>\",{\"1\":{\"1925\":1}}],[\"encoder=false\",{\"1\":{\"609\":1}}],[\"encoder\",{\"1\":{\"608\":2}}],[\"encyclopedia\",{\"1\":{\"1661\":1,\"1663\":2}}],[\"encapsulation\",{\"0\":{\"1471\":1},\"1\":{\"242\":1,\"1563\":1,\"1709\":1}}],[\"ensemble\",{\"1\":{\"580\":1,\"604\":1,\"609\":1}}],[\"en\",{\"1\":{\"500\":7}}],[\"entry\",{\"1\":{\"1801\":3,\"1803\":3,\"1805\":3,\"1807\":3,\"1809\":3}}],[\"entry<string\",{\"1\":{\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"entryset\",{\"1\":{\"1798\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"entropy\",{\"1\":{\"440\":1}}],[\"entered\",{\"1\":{\"1428\":1}}],[\"enterprise\",{\"1\":{\"1258\":1,\"1261\":1}}],[\"enter\",{\"1\":{\"262\":2,\"1422\":3,\"1427\":3,\"1428\":2}}],[\"endvalue\",{\"1\":{\"1165\":1}}],[\"endnote\",{\"0\":{\"1076\":1},\"1\":{\"1076\":1}}],[\"end\",{\"1\":{\"398\":11,\"399\":11,\"738\":4,\"958\":5,\"959\":9,\"960\":5,\"964\":12,\"965\":5,\"1100\":1,\"1106\":2,\"1107\":1,\"1159\":2,\"1160\":2,\"1161\":2,\"1162\":2,\"1163\":2,\"1165\":3,\"1166\":2,\"1167\":2,\"1168\":2,\"1169\":2,\"1170\":2,\"1172\":2,\"1173\":1,\"1174\":1,\"1175\":2,\"1178\":2,\"1179\":1,\"1182\":1,\"1183\":5,\"1185\":2,\"1406\":2,\"1606\":1,\"1951\":1}}],[\"emailvalidation\",{\"1\":{\"1950\":1}}],[\"emailvalidator\",{\"1\":{\"1418\":1}}],[\"emailregex\",{\"1\":{\"1418\":2}}],[\"email\",{\"1\":{\"1418\":6,\"1950\":2}}],[\"emp3\",{\"1\":{\"1677\":3}}],[\"emp2\",{\"1\":{\"1677\":3}}],[\"emp1\",{\"1\":{\"1677\":7}}],[\"employee\",{\"1\":{\"1291\":1,\"1477\":1,\"1677\":22}}],[\"emptystackexception\",{\"1\":{\"1773\":2}}],[\"empty\",{\"1\":{\"141\":1,\"150\":1,\"159\":1,\"168\":1,\"391\":1,\"434\":1,\"1773\":1,\"1774\":2,\"1777\":1}}],[\"embedding\",{\"1\":{\"541\":1,\"594\":1}}],[\"emoji\",{\"2\":{\"15\":1}}],[\"emoji资源列表\",{\"0\":{\"8\":1}}],[\"exchanger\",{\"1\":{\"2044\":1}}],[\"excel\",{\"1\":{\"383\":1,\"1192\":2,\"1195\":2}}],[\"exceptionexample\",{\"1\":{\"1898\":1}}],[\"exceptionhandlingexample\",{\"1\":{\"1445\":1}}],[\"exception\",{\"0\":{\"1450\":1,\"1451\":1},\"1\":{\"1443\":2,\"1447\":1,\"1448\":3,\"1651\":1,\"1655\":1,\"1831\":1,\"1846\":1,\"1856\":2,\"1883\":1,\"1895\":4,\"1896\":1,\"1901\":1,\"1909\":2,\"1910\":1,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1963\":1,\"2001\":1}}],[\"except\",{\"1\":{\"133\":1}}],[\"executeupdate\",{\"1\":{\"1981\":2,\"1985\":2}}],[\"executequery\",{\"1\":{\"1981\":2,\"1982\":1,\"1984\":1}}],[\"executed\",{\"1\":{\"216\":4,\"1446\":1}}],[\"executor\",{\"1\":{\"1963\":4,\"2044\":1}}],[\"executors\",{\"1\":{\"1963\":2}}],[\"executorservice\",{\"1\":{\"1963\":2,\"1971\":1,\"2044\":1}}],[\"executionexception\",{\"1\":{\"1963\":2}}],[\"executable\",{\"1\":{\"1856\":1}}],[\"extended\",{\"1\":{\"2154\":1}}],[\"extends\",{\"1\":{\"1308\":1,\"1448\":1,\"1470\":1,\"1472\":1,\"1473\":1,\"1499\":1,\"1504\":1,\"1509\":1,\"1511\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1516\":1,\"1520\":1,\"1530\":2,\"1536\":1,\"1554\":1,\"1654\":2,\"1661\":2,\"1709\":4,\"1714\":1,\"1838\":2,\"1839\":1,\"1909\":1,\"1961\":1,\"1966\":1,\"2033\":1}}],[\"externalizable\",{\"1\":{\"1865\":3}}],[\"extreme\",{\"1\":{\"593\":1}}],[\"extraction\",{\"1\":{\"589\":1}}],[\"explicit\",{\"0\":{\"1295\":1}}],[\"explained\",{\"1\":{\"619\":4}}],[\"expression\",{\"1\":{\"1685\":1,\"1989\":1}}],[\"expressions\",{\"1\":{\"1409\":1}}],[\"expr\",{\"1\":{\"917\":7,\"918\":2,\"919\":2}}],[\"expanded\",{\"1\":{\"917\":4}}],[\"expand\",{\"1\":{\"917\":2}}],[\"expectedtype\",{\"1\":{\"1856\":1}}],[\"expected\",{\"1\":{\"481\":1,\"1185\":2,\"1853\":1,\"1856\":1}}],[\"exp\",{\"1\":{\"423\":1,\"428\":1,\"445\":1,\"449\":1,\"460\":1,\"642\":1,\"925\":1,\"943\":1,\"1217\":1,\"1219\":2,\"1394\":2}}],[\"exponent=3\",{\"1\":{\"217\":1}}],[\"exponent=2\",{\"1\":{\"217\":1}}],[\"exponent\",{\"1\":{\"217\":2,\"1394\":1,\"2154\":3}}],[\"exist\",{\"1\":{\"1125\":1,\"1439\":1}}],[\"exists\",{\"1\":{\"155\":1,\"162\":1,\"172\":2,\"1439\":4}}],[\"exit\",{\"1\":{\"233\":1,\"2022\":1,\"2027\":1,\"2028\":1}}],[\"example2\",{\"1\":{\"1546\":1,\"1547\":1}}],[\"example1\",{\"1\":{\"1546\":1,\"1547\":1}}],[\"example\",{\"1\":{\"24\":1,\"251\":2,\"252\":2,\"253\":2,\"254\":1,\"255\":1,\"256\":1,\"257\":2,\"258\":2,\"1418\":2,\"1433\":2,\"1434\":2,\"1436\":2,\"1437\":2,\"1439\":1,\"1440\":1,\"1545\":1,\"1546\":7,\"1547\":6,\"1548\":7,\"1619\":2,\"1621\":1,\"1622\":1,\"1624\":3,\"1625\":2,\"1626\":2,\"1628\":2,\"1629\":1,\"1631\":1,\"1636\":1,\"1639\":1,\"1651\":2,\"1654\":11,\"1655\":2,\"1657\":1,\"1658\":1,\"1677\":3,\"1827\":1,\"1843\":1,\"1870\":1,\"1873\":1,\"1883\":1,\"1941\":1,\"1942\":1,\"1950\":1}}],[\"el\",{\"1\":{\"1681\":1}}],[\"elliptic\",{\"1\":{\"891\":1}}],[\"elem\",{\"1\":{\"1839\":2}}],[\"elementui\",{\"0\":{\"2275\":1},\"2\":{\"2277\":1}}],[\"elementtype\",{\"1\":{\"1844\":2,\"1845\":3}}],[\"elementcol\",{\"1\":{\"1155\":1}}],[\"elementrow\",{\"1\":{\"1155\":1}}],[\"element2d\",{\"1\":{\"1154\":1}}],[\"element1d\",{\"1\":{\"1154\":1}}],[\"elements\",{\"1\":{\"165\":1,\"1142\":1,\"1144\":1,\"1152\":1,\"1762\":1,\"1764\":1,\"1766\":1,\"1768\":2,\"1818\":1}}],[\"element\",{\"1\":{\"142\":1,\"146\":1,\"150\":1,\"151\":1,\"160\":1,\"1138\":1,\"1144\":1,\"1357\":2,\"1745\":2,\"1748\":2,\"1751\":2,\"1759\":1,\"1764\":1,\"1768\":1,\"1774\":3,\"1777\":2,\"1814\":3,\"1823\":4,\"1836\":1}}],[\"electric\",{\"1\":{\"1472\":2,\"1499\":1,\"1500\":2}}],[\"electriccar\",{\"1\":{\"1470\":2,\"1472\":2,\"1499\":1,\"1500\":1}}],[\"electronics\",{\"1\":{\"1040\":1}}],[\"elev=30\",{\"1\":{\"680\":1}}],[\"elasticnet\",{\"1\":{\"500\":2}}],[\"elastic\",{\"0\":{\"500\":1},\"1\":{\"500\":5,\"593\":1}}],[\"else语句用于在条件为true时执行某段代码\",{\"1\":{\"1321\":1}}],[\"elseif\",{\"1\":{\"1161\":3,\"1163\":1}}],[\"elsevier\",{\"1\":{\"1040\":4}}],[\"else子句不会执行\",{\"1\":{\"208\":1}}],[\"else\",{\"0\":{\"208\":1},\"1\":{\"133\":1,\"176\":1,\"201\":1,\"205\":1,\"208\":3,\"213\":1,\"224\":1,\"408\":1,\"409\":1,\"428\":1,\"434\":1,\"856\":1,\"964\":1,\"1160\":3,\"1161\":2,\"1163\":3,\"1170\":1,\"1320\":1,\"1321\":4,\"1332\":1,\"1418\":1,\"1439\":3,\"1538\":1,\"1541\":1,\"1542\":1,\"1661\":2,\"1887\":1,\"1950\":1}}],[\"elif\",{\"1\":{\"133\":1,\"201\":1}}],[\"e\",{\"1\":{\"34\":1,\"153\":2,\"159\":1,\"188\":1,\"189\":1,\"190\":1,\"378\":4,\"389\":4,\"406\":1,\"423\":4,\"495\":2,\"1144\":1,\"1216\":1,\"1217\":2,\"1222\":1,\"1390\":1,\"1396\":3,\"1428\":1,\"1433\":4,\"1434\":4,\"1436\":4,\"1437\":4,\"1439\":2,\"1440\":4,\"1445\":2,\"1446\":2,\"1447\":2,\"1448\":2,\"1548\":2,\"1745\":4,\"1759\":4,\"1773\":1,\"1783\":2,\"1813\":1,\"1822\":6,\"1836\":1,\"1863\":4,\"1870\":2,\"1871\":2,\"1873\":2,\"1874\":2,\"1876\":4,\"1890\":2,\"1891\":2,\"1898\":2,\"1901\":6,\"1903\":2,\"1906\":2,\"1908\":2,\"1909\":2,\"1933\":2,\"1935\":2,\"1936\":4,\"1938\":2,\"1939\":2,\"1941\":2,\"1942\":2,\"1963\":2,\"1966\":4,\"1970\":4,\"1978\":2,\"1979\":2,\"1980\":2,\"1981\":2,\"1982\":2,\"1983\":2,\"1985\":2,\"2022\":1,\"2031\":1,\"2033\":1}}],[\"66\",{\"1\":{\"1297\":1}}],[\"65535\",{\"1\":{\"1930\":1}}],[\"65\",{\"1\":{\"1288\":1,\"1297\":1}}],[\"6℃\",{\"1\":{\"855\":1}}],[\"605170185988092\",{\"1\":{\"1394\":1}}],[\"60\",{\"1\":{\"409\":1,\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"552\":1,\"856\":1,\"958\":2}}],[\"647\",{\"1\":{\"1286\":1}}],[\"648\",{\"1\":{\"1286\":1}}],[\"64位无符号整数\",{\"1\":{\"1127\":1}}],[\"64位有符号整数\",{\"1\":{\"1127\":1}}],[\"64\",{\"1\":{\"221\":1,\"222\":1,\"223\":1,\"608\":2,\"610\":3,\"1286\":1,\"1287\":1,\"2154\":2}}],[\"686\",{\"1\":{\"182\":1}}],[\"6\",{\"0\":{\"24\":1,\"190\":1,\"198\":1,\"470\":1,\"483\":1,\"502\":1,\"535\":1,\"547\":1,\"598\":1,\"606\":1,\"638\":1,\"652\":1,\"663\":1,\"676\":1,\"691\":1,\"701\":1,\"711\":1,\"771\":1,\"790\":1,\"805\":1,\"812\":1,\"823\":1,\"921\":1,\"1089\":1,\"1151\":1,\"1170\":1,\"1177\":1,\"1186\":1,\"1269\":1,\"1316\":1,\"1345\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1379\":1,\"1387\":1,\"1419\":1,\"1441\":1,\"1473\":1,\"1502\":1,\"1534\":1,\"1584\":1,\"1600\":1,\"1613\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1646\":1,\"1647\":1,\"1648\":1,\"1672\":1,\"1692\":1,\"1857\":1,\"1983\":1,\"1994\":1,\"2014\":1,\"2212\":1},\"1\":{\"141\":1,\"145\":3,\"146\":2,\"148\":1,\"150\":1,\"159\":1,\"160\":4,\"161\":3,\"162\":1,\"163\":1,\"173\":1,\"219\":4,\"223\":1,\"378\":1,\"394\":4,\"398\":1,\"399\":1,\"457\":1,\"458\":2,\"489\":2,\"569\":1,\"590\":1,\"649\":2,\"650\":1,\"661\":1,\"688\":1,\"780\":1,\"856\":1,\"895\":1,\"927\":1,\"928\":1,\"948\":1,\"964\":2,\"965\":2,\"1040\":1,\"1130\":1,\"1133\":2,\"1135\":1,\"1138\":1,\"1139\":1,\"1141\":1,\"1142\":1,\"1144\":2,\"1152\":1,\"1154\":3,\"1221\":1,\"1222\":1,\"1232\":1,\"1258\":2,\"1359\":1,\"1360\":1,\"1370\":1,\"1373\":2,\"1376\":2,\"1523\":1,\"1992\":2}}],[\"6️⃣\",{\"1\":{\"12\":2}}],[\"b或c\",{\"1\":{\"1412\":1}}],[\"bst\",{\"1\":{\"1110\":1}}],[\"bbl\",{\"1\":{\"1110\":1}}],[\"bn​\",{\"1\":{\"884\":1}}],[\"b=−1\",{\"1\":{\"866\":1}}],[\"bw\",{\"1\":{\"811\":2,\"812\":2,\"816\":1,\"1874\":3}}],[\"bgr2rgb\",{\"1\":{\"804\":1}}],[\"bgr2gray\",{\"1\":{\"800\":1,\"818\":1,\"820\":1,\"823\":1,\"824\":1,\"826\":1,\"827\":1}}],[\"bytebuffer\",{\"1\":{\"1883\":3,\"1884\":1,\"1890\":3,\"1891\":3}}],[\"bytebuffer等类\",{\"1\":{\"1440\":1}}],[\"byteoutputexample\",{\"1\":{\"1871\":1}}],[\"bytearrayoutputstream\",{\"1\":{\"1871\":1}}],[\"bytearrayinputstream\",{\"1\":{\"1870\":1}}],[\"byteinputexample\",{\"1\":{\"1870\":1}}],[\"bytesread\",{\"1\":{\"1883\":3}}],[\"bytes\",{\"1\":{\"1440\":2}}],[\"bytevalue\",{\"1\":{\"1382\":1,\"1384\":1}}],[\"byte\",{\"0\":{\"1869\":1},\"1\":{\"1286\":1,\"1294\":1,\"1299\":2,\"1380\":1,\"1383\":1,\"1384\":1,\"1440\":1,\"1696\":3,\"1868\":1,\"1938\":3,\"1939\":3}}],[\"by\",{\"1\":{\"754\":1,\"1338\":1,\"1856\":1,\"1899\":1,\"1902\":1,\"1904\":1,\"2000\":2}}],[\"blg\",{\"1\":{\"1110\":1}}],[\"blur\",{\"1\":{\"801\":1}}],[\"blurred\",{\"1\":{\"801\":3,\"819\":3}}],[\"black\",{\"1\":{\"688\":1}}],[\"blocked\",{\"1\":{\"1964\":2}}],[\"blocking\",{\"1\":{\"1878\":2,\"1880\":2}}],[\"blockingqueue<string>\",{\"1\":{\"1768\":1}}],[\"blockingqueueexample\",{\"1\":{\"1768\":1}}],[\"blockingqueue\",{\"1\":{\"1760\":1,\"1767\":1,\"1768\":10,\"1769\":1,\"1971\":1}}],[\"blocks\",{\"1\":{\"1544\":1}}],[\"block\",{\"1\":{\"1446\":1,\"1545\":1,\"1546\":4,\"1547\":2}}],[\"blobs\",{\"1\":{\"517\":2,\"543\":2,\"549\":2,\"550\":2,\"552\":2,\"622\":1,\"623\":1,\"626\":1}}],[\"blog\",{\"0\":{\"41\":1},\"2\":{\"14\":1,\"36\":1,\"39\":1,\"42\":1}}],[\"blond\",{\"1\":{\"9\":2}}],[\"b样条曲线\",{\"1\":{\"679\":1}}],[\"b样条曲面\",{\"1\":{\"672\":1}}],[\"bty\",{\"1\":{\"641\":2}}],[\"btb\",{\"1\":{\"641\":2}}],[\"bt\",{\"1\":{\"641\":3}}],[\"bug\",{\"1\":{\"1855\":1}}],[\"bugs\",{\"1\":{\"589\":1}}],[\"builder\",{\"1\":{\"1376\":9}}],[\"bufferedinputoutputstreamexample\",{\"1\":{\"1437\":1}}],[\"bufferedinputstream\",{\"1\":{\"1437\":4,\"1441\":1,\"1868\":1,\"1870\":1,\"1875\":1,\"2039\":1}}],[\"bufferedoutputstream\",{\"1\":{\"1437\":4,\"1441\":1,\"1871\":1,\"1875\":1,\"2039\":1}}],[\"buffered\",{\"1\":{\"1434\":1,\"1437\":1,\"1877\":1}}],[\"bufferedwriter\",{\"1\":{\"1434\":4,\"1441\":1,\"1874\":5,\"1875\":1,\"2039\":2}}],[\"bufferedreaderwriterexample\",{\"1\":{\"1434\":1}}],[\"bufferedreader\",{\"1\":{\"1434\":4,\"1441\":1,\"1868\":1,\"1873\":5,\"1875\":1,\"1935\":2,\"1936\":2,\"1942\":3,\"2039\":2}}],[\"buffer\",{\"0\":{\"1884\":1,\"1885\":1},\"1\":{\"1373\":9,\"1673\":5,\"1878\":1,\"1881\":1,\"1883\":7,\"1884\":1,\"1885\":1,\"1890\":4,\"1891\":5,\"1892\":1,\"1893\":1}}],[\"button\",{\"1\":{\"2022\":4,\"2031\":2,\"2033\":6}}],[\"but\",{\"1\":{\"1163\":1}}],[\"buddy\",{\"1\":{\"242\":6,\"243\":1}}],[\"bird\",{\"1\":{\"1709\":3}}],[\"bis\",{\"1\":{\"1437\":2}}],[\"bind\",{\"1\":{\"1890\":1}}],[\"bin\",{\"1\":{\"1436\":2,\"1437\":2,\"1628\":2,\"1629\":2,\"1657\":1,\"1658\":1}}],[\"binaryoperator<t>\",{\"1\":{\"1691\":1}}],[\"binarysearch\",{\"1\":{\"1364\":2,\"1741\":1}}],[\"binary\",{\"1\":{\"530\":1,\"729\":1,\"824\":4,\"825\":1,\"1436\":1,\"1437\":1}}],[\"bits\",{\"1\":{\"2154\":6}}],[\"bitshift\",{\"1\":{\"1152\":2}}],[\"bit\",{\"1\":{\"2154\":3}}],[\"bitxor\",{\"1\":{\"1152\":1}}],[\"bitcmp\",{\"1\":{\"1152\":1}}],[\"bitor\",{\"1\":{\"1152\":1}}],[\"bitand\",{\"1\":{\"1152\":1}}],[\"bitwise\",{\"0\":{\"1315\":1},\"1\":{\"1152\":4}}],[\"bibtex\",{\"1\":{\"1110\":4}}],[\"bib\",{\"1\":{\"1110\":1}}],[\"bio\",{\"1\":{\"1878\":1}}],[\"bioresource\",{\"1\":{\"1040\":1}}],[\"biosystems\",{\"1\":{\"1040\":1}}],[\"biological\",{\"1\":{\"1040\":3}}],[\"bicubic\",{\"1\":{\"947\":3}}],[\"bilinear\",{\"1\":{\"933\":1,\"947\":3}}],[\"bill\",{\"0\":{\"2013\":1},\"1\":{\"459\":1}}],[\"bip\",{\"1\":{\"729\":1}}],[\"bipartite\",{\"1\":{\"391\":1}}],[\"bi​\",{\"1\":{\"715\":1}}],[\"biases\",{\"1\":{\"440\":1}}],[\"br\",{\"1\":{\"1873\":2}}],[\"brown\",{\"1\":{\"1655\":1,\"2048\":1}}],[\"brand\",{\"1\":{\"1468\":1,\"1469\":1,\"1471\":5,\"1476\":6}}],[\"branch\",{\"1\":{\"410\":1}}],[\"brute\",{\"1\":{\"410\":3}}],[\"break语句用于立即退出当前循环\",{\"1\":{\"1329\":1}}],[\"break\",{\"0\":{\"206\":1},\"1\":{\"133\":1,\"205\":1,\"206\":2,\"208\":2,\"398\":1,\"399\":1,\"409\":3,\"895\":1,\"1167\":2,\"1322\":5,\"1329\":1,\"1332\":1,\"1428\":1,\"1606\":4}}],[\"bean\",{\"0\":{\"1679\":1,\"1680\":1,\"1681\":1,\"1682\":1},\"1\":{\"1679\":3,\"1680\":4,\"1681\":6,\"1682\":1,\"1683\":2}}],[\"been\",{\"1\":{\"1661\":2,\"1663\":2}}],[\"be\",{\"1\":{\"1447\":1,\"1661\":1,\"1663\":1,\"1853\":1}}],[\"between\",{\"1\":{\"1395\":1,\"1406\":2}}],[\"beta\",{\"1\":{\"491\":4,\"492\":4,\"494\":4,\"495\":3,\"851\":3,\"852\":5,\"853\":2,\"1738\":1}}],[\"begin\",{\"1\":{\"1100\":1,\"1106\":2,\"1107\":2}}],[\"beq\",{\"1\":{\"738\":2,\"740\":1}}],[\"bezier\",{\"1\":{\"672\":1}}],[\"belief\",{\"1\":{\"598\":1}}],[\"bellmanford\",{\"1\":{\"959\":2}}],[\"bellman\",{\"0\":{\"403\":1,\"959\":1},\"1\":{\"392\":1,\"403\":1,\"405\":1,\"406\":2,\"957\":1}}],[\"best\",{\"1\":{\"428\":11,\"434\":13,\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"805\":1}}],[\"beforeall\",{\"1\":{\"1855\":1}}],[\"beforeeach\",{\"1\":{\"1855\":2}}],[\"before\",{\"0\":{\"2255\":1},\"1\":{\"216\":2,\"226\":2,\"1651\":1}}],[\"bfs寻找增广路径\",{\"1\":{\"398\":1,\"399\":1}}],[\"bfs\",{\"1\":{\"392\":1,\"397\":2,\"398\":2,\"399\":3}}],[\"borderlayoutexample\",{\"1\":{\"2028\":1}}],[\"borderlayout\",{\"1\":{\"2026\":1,\"2028\":9}}],[\"borrowed\",{\"1\":{\"1661\":5,\"1663\":3}}],[\"borrowbook\",{\"1\":{\"1661\":6}}],[\"borrowable接口定义了可以借阅的行为\",{\"1\":{\"1662\":1}}],[\"borrowable\",{\"1\":{\"1661\":5}}],[\"boxlayout\",{\"1\":{\"2026\":1}}],[\"box<t>\",{\"1\":{\"1836\":1}}],[\"boxing\",{\"1\":{\"1698\":1}}],[\"bos\",{\"1\":{\"1437\":2}}],[\"boston\",{\"1\":{\"497\":2,\"606\":2}}],[\"body\",{\"1\":{\"856\":2}}],[\"bo\",{\"1\":{\"643\":1}}],[\"book类是图书的基类\",{\"1\":{\"1662\":1}}],[\"book2\",{\"1\":{\"1661\":3}}],[\"book1\",{\"1\":{\"1661\":4}}],[\"books\",{\"1\":{\"1661\":5,\"1663\":1}}],[\"booktype\",{\"1\":{\"1654\":7,\"1655\":2,\"1659\":1}}],[\"book\",{\"1\":{\"1654\":6,\"1659\":1,\"1661\":16,\"1663\":1}}],[\"boosted\",{\"1\":{\"597\":1}}],[\"boosting\",{\"0\":{\"609\":1},\"1\":{\"593\":2,\"597\":1,\"609\":1}}],[\"boolean\",{\"0\":{\"1289\":1},\"1\":{\"185\":2,\"1289\":1,\"1292\":1,\"1370\":1,\"1661\":1,\"1668\":3,\"1676\":1,\"1677\":1,\"1696\":3,\"1704\":4,\"1748\":1,\"1751\":1,\"1813\":1,\"1818\":1,\"1822\":2,\"1951\":2}}],[\"bool\",{\"0\":{\"139\":1},\"1\":{\"136\":1,\"137\":1,\"139\":2}}],[\"boundary\",{\"1\":{\"671\":1}}],[\"bound\",{\"1\":{\"410\":1}}],[\"bounds=\",{\"1\":{\"384\":1,\"722\":1}}],[\"bounds\",{\"1\":{\"384\":3,\"428\":5,\"434\":11,\"722\":4}}],[\"bob\",{\"1\":{\"168\":1,\"177\":1,\"211\":2,\"239\":1,\"257\":1,\"1989\":1,\"1991\":1}}],[\"basic\",{\"1\":{\"2000\":1}}],[\"base64\",{\"1\":{\"1997\":1}}],[\"based\",{\"1\":{\"540\":1,\"594\":1,\"599\":1}}],[\"base\",{\"1\":{\"217\":2,\"1394\":1}}],[\"balance\",{\"1\":{\"1985\":4}}],[\"batterycapacity\",{\"1\":{\"1470\":1,\"1499\":1}}],[\"batch\",{\"1\":{\"608\":1,\"610\":1,\"660\":1}}],[\"backward\",{\"1\":{\"1823\":1}}],[\"backslash\",{\"1\":{\"1292\":2}}],[\"backpropagation\",{\"1\":{\"440\":1}}],[\"bagging\",{\"1\":{\"597\":1}}],[\"bayes\",{\"0\":{\"607\":1},\"1\":{\"589\":2,\"593\":1,\"607\":2}}],[\"bayesian\",{\"0\":{\"522\":1}}],[\"bar\",{\"1\":{\"1203\":2}}],[\"barplot\",{\"1\":{\"459\":1}}],[\"barks\",{\"1\":{\"1504\":1,\"1709\":1}}],[\"barking\",{\"1\":{\"242\":2,\"1536\":1,\"1709\":1}}],[\"bark\",{\"1\":{\"242\":2,\"1511\":2,\"1536\":2,\"1538\":1,\"1541\":1,\"1542\":1,\"1709\":1}}],[\"banner\",{\"1\":{\"336\":1}}],[\"banana\",{\"1\":{\"141\":1,\"150\":1,\"154\":1,\"176\":3,\"235\":1,\"1162\":2,\"1726\":1,\"1728\":1,\"1738\":1,\"1748\":3,\"1751\":3,\"1754\":1,\"1762\":1,\"1766\":1,\"1768\":1,\"1786\":3,\"1788\":1,\"1790\":3,\"1792\":4,\"1801\":3,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1814\":3,\"1823\":1}}],[\"bad\",{\"1\":{\"202\":1}}],[\"baidu\",{\"1\":{\"23\":1}}],[\"b\",{\"1\":{\"137\":1,\"153\":2,\"174\":4,\"198\":1,\"211\":2,\"245\":3,\"246\":6,\"247\":2,\"251\":1,\"378\":5,\"384\":4,\"458\":1,\"481\":2,\"634\":3,\"641\":8,\"642\":4,\"643\":2,\"671\":1,\"672\":1,\"722\":2,\"726\":3,\"728\":1,\"730\":1,\"732\":3,\"734\":1,\"738\":8,\"856\":1,\"871\":1,\"921\":3,\"939\":1,\"943\":2,\"1040\":1,\"1133\":3,\"1134\":3,\"1135\":1,\"1136\":1,\"1144\":3,\"1146\":9,\"1147\":6,\"1148\":2,\"1149\":2,\"1150\":5,\"1151\":1,\"1152\":27,\"1172\":2,\"1173\":3,\"1175\":3,\"1179\":4,\"1182\":4,\"1210\":1,\"1216\":1,\"1222\":4,\"1232\":4,\"1292\":2,\"1297\":1,\"1311\":5,\"1312\":11,\"1313\":6,\"1314\":2,\"1315\":3,\"1316\":2,\"1335\":2,\"1343\":6,\"1344\":2,\"1392\":5,\"1436\":3,\"1437\":3,\"1503\":2,\"1523\":6,\"1685\":2,\"1686\":3,\"1689\":2,\"1693\":2,\"1704\":1,\"1709\":4,\"1725\":1,\"1732\":2,\"1737\":1,\"1947\":1,\"2000\":9,\"2048\":2}}],[\"bj\",{\"1\":{\"137\":1}}],[\"w+\",{\"1\":{\"1956\":2}}],[\"wk1电子表格文件\",{\"1\":{\"1126\":1}}],[\"wklread\",{\"1\":{\"1126\":1}}],[\"where\",{\"1\":{\"1984\":1,\"1985\":2}}],[\"when\",{\"1\":{\"1858\":1}}],[\"what\",{\"1\":{\"1126\":1}}],[\"whos\",{\"1\":{\"1125\":1}}],[\"who\",{\"1\":{\"1125\":1}}],[\"while循环\",{\"1\":{\"2159\":1}}],[\"while循环类似于while循环\",{\"1\":{\"1327\":1}}],[\"while循环在条件为true时重复执行某段代码\",{\"1\":{\"1326\":1}}],[\"while和do\",{\"1\":{\"1323\":1}}],[\"while\",{\"0\":{\"203\":1},\"1\":{\"133\":1,\"203\":2,\"398\":4,\"399\":4,\"409\":2,\"958\":1,\"1166\":4,\"1323\":1,\"1326\":1,\"1327\":1,\"1332\":2,\"1416\":1,\"1428\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1673\":2,\"1814\":1,\"1818\":1,\"1823\":2,\"1870\":1,\"1873\":1,\"1883\":2,\"1887\":2,\"1890\":1,\"1936\":1,\"1939\":1,\"1942\":1,\"1949\":1,\"1954\":1,\"1982\":1,\"1984\":1,\"2048\":1}}],[\"wait\",{\"1\":{\"1673\":4,\"1678\":1,\"1970\":3}}],[\"was\",{\"1\":{\"1661\":1}}],[\"wav\",{\"1\":{\"948\":8}}],[\"wavfile\",{\"1\":{\"948\":1}}],[\"waves\",{\"1\":{\"1052\":1}}],[\"wave\",{\"1\":{\"905\":1,\"911\":1}}],[\"watershed\",{\"1\":{\"811\":1}}],[\"warn\",{\"1\":{\"1921\":1,\"1922\":2,\"1926\":2,\"1927\":1}}],[\"warning\",{\"1\":{\"1843\":1,\"1917\":1,\"1918\":2}}],[\"ward\",{\"1\":{\"550\":1,\"556\":1,\"565\":2}}],[\"warshall算法\",{\"0\":{\"960\":1},\"1\":{\"392\":1,\"957\":1}}],[\"west\",{\"1\":{\"2028\":1}}],[\"weekday\",{\"1\":{\"1608\":5,\"1612\":5}}],[\"weekend\",{\"1\":{\"1606\":1,\"1608\":2,\"1612\":2}}],[\"week\",{\"1\":{\"1606\":2}}],[\"wednesday\",{\"1\":{\"1322\":1,\"1494\":1,\"1604\":1,\"1608\":1,\"1612\":1}}],[\"weight\",{\"1\":{\"964\":3}}],[\"weights\",{\"1\":{\"440\":1,\"446\":1,\"447\":2,\"448\":3,\"449\":6}}],[\"weather\",{\"1\":{\"649\":6,\"650\":1}}],[\"websockets\",{\"1\":{\"1943\":1}}],[\"web\",{\"0\":{\"304\":1,\"2294\":1,\"2298\":1},\"2\":{\"305\":1}}],[\"web开发\",{\"0\":{\"271\":1,\"2117\":1},\"2\":{\"306\":1,\"2119\":1,\"2140\":1}}],[\"w\",{\"1\":{\"251\":2,\"253\":1,\"257\":1,\"258\":1,\"259\":1,\"391\":2,\"408\":3,\"811\":1,\"827\":1,\"870\":1,\"1195\":1,\"1196\":1,\"1221\":1,\"1412\":2,\"1947\":2}}],[\"woof\",{\"1\":{\"242\":3,\"243\":1,\"1511\":2,\"1520\":2,\"1530\":2,\"1554\":2,\"1597\":2}}],[\"work\",{\"1\":{\"1606\":2}}],[\"workshop\",{\"1\":{\"1104\":1}}],[\"workspace\",{\"0\":{\"1080\":1}}],[\"worker+1\",{\"1\":{\"409\":1}}],[\"worker\",{\"1\":{\"409\":1}}],[\"word\",{\"1\":{\"176\":9}}],[\"world\",{\"0\":{\"1274\":1},\"1\":{\"28\":2,\"219\":2,\"245\":1,\"253\":1,\"261\":1,\"1274\":3,\"1292\":2,\"1318\":1,\"1335\":1,\"1342\":1,\"1370\":3,\"1373\":4,\"1376\":4,\"1425\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1440\":1,\"1871\":1,\"1874\":1}}],[\"writeint\",{\"1\":{\"1865\":1}}],[\"writeexternal\",{\"1\":{\"1865\":2}}],[\"writeobject\",{\"1\":{\"1863\":2,\"1865\":1,\"1876\":1}}],[\"writerows\",{\"1\":{\"259\":1}}],[\"writerow\",{\"1\":{\"257\":3,\"259\":1}}],[\"writer\",{\"0\":{\"1874\":1},\"1\":{\"257\":5,\"259\":4,\"1433\":2,\"1434\":2,\"1868\":2,\"1872\":1,\"1874\":1,\"2039\":1}}],[\"writelines\",{\"1\":{\"253\":1}}],[\"write\",{\"1\":{\"253\":1,\"948\":2,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1440\":1,\"1753\":1,\"1871\":1,\"1874\":1,\"1887\":1,\"1890\":1,\"1970\":2}}],[\"wrapperexample\",{\"1\":{\"1705\":1}}],[\"wrapper\",{\"1\":{\"216\":4,\"226\":2,\"1695\":1}}],[\"wrong\",{\"1\":{\"202\":1}}],[\"windowlistener\",{\"1\":{\"2030\":1}}],[\"window\",{\"1\":{\"2018\":1}}],[\"windows开发环境\",{\"0\":{\"1271\":1}}],[\"windows环境\",{\"0\":{\"281\":1}}],[\"windows\",{\"0\":{\"99\":1,\"1100\":1},\"1\":{\"2190\":1},\"2\":{\"104\":1}}],[\"windows系统装机\",{\"0\":{\"98\":1}}],[\"wiener2\",{\"1\":{\"814\":1}}],[\"width和tile\",{\"1\":{\"690\":1}}],[\"width\",{\"1\":{\"688\":13,\"690\":1,\"699\":2,\"700\":2,\"947\":4}}],[\"with\",{\"1\":{\"9\":4,\"133\":1,\"202\":1,\"252\":2,\"253\":2,\"257\":2,\"258\":2,\"259\":2,\"540\":1,\"594\":1,\"1405\":1,\"1672\":1,\"1949\":1}}],[\"www\",{\"1\":{\"23\":1,\"24\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1082\":1,\"1100\":3,\"1101\":3,\"1102\":1,\"1933\":2,\"1941\":1,\"1942\":1}}],[\"hh\",{\"1\":{\"1407\":1,\"1921\":1,\"1925\":1,\"2047\":1}}],[\"html\",{\"0\":{\"2269\":1},\"1\":{\"1100\":1,\"1460\":1},\"2\":{\"2271\":1}}],[\"http协议\",{\"0\":{\"2229\":1},\"2\":{\"2231\":1}}],[\"httpurlconnection\",{\"1\":{\"1942\":3}}],[\"http\",{\"1\":{\"202\":2,\"1940\":1,\"2040\":1}}],[\"https\",{\"1\":{\"23\":1,\"24\":1,\"237\":1,\"379\":1,\"1076\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1082\":1,\"1083\":1,\"1100\":4,\"1101\":3,\"1102\":1,\"1941\":1,\"1942\":1}}],[\"hyperref\",{\"1\":{\"1110\":1}}],[\"hyperbolic\",{\"1\":{\"905\":1}}],[\"hydrology\",{\"1\":{\"1040\":1}}],[\"hj​\",{\"1\":{\"832\":1}}],[\"h5\",{\"1\":{\"805\":1}}],[\"hours\",{\"1\":{\"1406\":1}}],[\"hot\",{\"1\":{\"608\":1}}],[\"hold\",{\"1\":{\"555\":2,\"557\":2,\"558\":2,\"813\":1,\"1210\":4}}],[\"hc\",{\"1\":{\"550\":2}}],[\"hibernate使用注解配置bean\",{\"1\":{\"1847\":1}}],[\"hibernate\",{\"1\":{\"1649\":1,\"1681\":1,\"1832\":1}}],[\"histeq\",{\"1\":{\"809\":1}}],[\"history\",{\"1\":{\"428\":6,\"1654\":1,\"1655\":1}}],[\"hierarchy\",{\"1\":{\"550\":1,\"754\":1}}],[\"hierarchical\",{\"0\":{\"512\":1,\"550\":1,\"556\":1},\"1\":{\"540\":1,\"556\":2,\"594\":1}}],[\"hidden\",{\"1\":{\"439\":1,\"608\":1,\"1651\":1}}],[\"hill\",{\"1\":{\"416\":1}}],[\"hungarian\",{\"1\":{\"409\":3}}],[\"hasremaining\",{\"1\":{\"1883\":1}}],[\"hasprevious\",{\"1\":{\"1822\":1,\"1823\":1}}],[\"hasnext\",{\"1\":{\"1813\":1,\"1814\":1,\"1818\":3,\"1822\":1,\"1823\":1,\"1887\":1}}],[\"hashtable<>\",{\"1\":{\"1807\":1}}],[\"hashtableexample\",{\"1\":{\"1807\":1}}],[\"hashtable\",{\"1\":{\"1742\":1,\"1799\":1,\"1806\":2,\"1807\":2,\"1810\":1}}],[\"hash\",{\"1\":{\"1669\":1,\"1676\":2,\"1677\":1}}],[\"hashsetexample\",{\"1\":{\"1786\":1}}],[\"hashset<e>\",{\"1\":{\"1738\":1}}],[\"hashset<>\",{\"1\":{\"1726\":1,\"1738\":1,\"1786\":1}}],[\"hashset\",{\"1\":{\"1668\":1,\"1669\":1,\"1676\":1,\"1726\":6,\"1735\":1,\"1738\":1,\"1782\":1,\"1784\":2,\"1785\":2,\"1786\":3,\"1787\":2,\"1793\":1,\"1794\":1,\"2038\":1}}],[\"hashcode\",{\"1\":{\"1667\":1,\"1669\":3,\"1676\":4,\"1677\":6,\"1678\":1,\"2037\":1}}],[\"hashmapexample\",{\"1\":{\"1801\":1}}],[\"hashmap<k\",{\"1\":{\"1740\":1}}],[\"hashmap<>\",{\"1\":{\"1728\":1,\"1732\":1,\"1740\":1,\"1801\":1}}],[\"hashmap\",{\"1\":{\"1386\":1,\"1668\":1,\"1669\":1,\"1676\":1,\"1697\":1,\"1728\":6,\"1735\":1,\"1740\":4,\"1742\":1,\"1797\":1,\"1799\":3,\"1800\":2,\"1801\":3,\"1802\":2,\"1806\":1,\"1808\":1,\"1810\":1,\"2038\":1}}],[\"has\",{\"1\":{\"1661\":2,\"1663\":2,\"1927\":1}}],[\"handler\",{\"1\":{\"1916\":1}}],[\"handle\",{\"1\":{\"1127\":1}}],[\"haarcascade\",{\"1\":{\"827\":1}}],[\"haarcascades\",{\"1\":{\"827\":1}}],[\"harari\",{\"1\":{\"1655\":1}}],[\"harris角点检测用于检测图像中的角点\",{\"1\":{\"826\":1}}],[\"harris角点检测\",{\"0\":{\"826\":1},\"1\":{\"826\":1}}],[\"harris\",{\"1\":{\"813\":1,\"826\":1}}],[\"hard问题\",{\"1\":{\"410\":1}}],[\"hat\",{\"1\":{\"634\":2}}],[\"hate\",{\"1\":{\"589\":1}}],[\"happening\",{\"1\":{\"226\":4}}],[\"hair\",{\"1\":{\"9\":2}}],[\"h\",{\"1\":{\"159\":1,\"188\":1,\"189\":1,\"190\":1,\"378\":2,\"827\":1,\"1502\":1}}],[\"height参数\",{\"1\":{\"690\":1}}],[\"height\",{\"1\":{\"680\":6,\"681\":1,\"688\":13,\"690\":1,\"947\":4,\"1422\":4,\"1425\":3,\"1427\":4}}],[\"heap\",{\"1\":{\"1265\":1,\"1731\":4}}],[\"heat\",{\"1\":{\"889\":1,\"897\":1,\"903\":1}}],[\"heatmap\",{\"1\":{\"459\":1}}],[\"head\",{\"1\":{\"458\":1,\"1723\":2,\"1762\":2,\"1766\":1}}],[\"heart\",{\"0\":{\"74\":1},\"1\":{\"32\":1}}],[\"help\",{\"1\":{\"1125\":1,\"1179\":2,\"1212\":1}}],[\"helix\",{\"1\":{\"680\":2,\"681\":1}}],[\"held\",{\"1\":{\"410\":1}}],[\"hello123world456\",{\"1\":{\"1952\":1}}],[\"helloworld\",{\"1\":{\"1274\":1}}],[\"hello\",{\"0\":{\"1274\":1},\"1\":{\"28\":2,\"159\":1,\"188\":1,\"189\":1,\"190\":1,\"204\":1,\"210\":2,\"211\":3,\"219\":1,\"226\":4,\"245\":1,\"253\":1,\"261\":1,\"262\":1,\"1100\":1,\"1274\":3,\"1275\":2,\"1292\":4,\"1318\":1,\"1335\":1,\"1342\":1,\"1365\":1,\"1370\":2,\"1373\":4,\"1376\":4,\"1422\":1,\"1425\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1437\":1,\"1440\":1,\"1509\":2,\"1528\":2,\"1619\":1,\"1624\":1,\"1670\":1,\"1688\":1,\"1828\":1,\"1871\":1,\"1874\":1,\"1890\":1,\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1,\"1990\":1,\"1995\":1,\"1996\":1}}],[\"5空间复杂度\",{\"0\":{\"2163\":1}}],[\"5level\",{\"1\":{\"1921\":1,\"1925\":1}}],[\"5中\",{\"1\":{\"1857\":1}}],[\"5是最新版本\",{\"1\":{\"1851\":1}}],[\"56\",{\"1\":{\"1407\":1}}],[\"535\",{\"1\":{\"1288\":1}}],[\"53975\",{\"1\":{\"182\":1}}],[\"52\",{\"1\":{\"1040\":1,\"2154\":1}}],[\"51\",{\"1\":{\"1040\":1}}],[\"51单片机\",{\"0\":{\"307\":1},\"2\":{\"311\":1,\"312\":1,\"315\":1}}],[\"5位副高级以上专业技术职称的专家组成\",{\"1\":{\"1038\":1}}],[\"5年\",{\"1\":{\"1026\":1}}],[\"5k\",{\"1\":{\"928\":1}}],[\"5000\",{\"1\":{\"903\":1}}],[\"50\",{\"1\":{\"660\":2,\"680\":1,\"732\":1,\"813\":1,\"856\":1,\"895\":2,\"903\":1,\"935\":1,\"936\":1,\"937\":1,\"942\":1,\"943\":1,\"944\":2,\"958\":2,\"1040\":1,\"1183\":1,\"1903\":1,\"2022\":1}}],[\"55\",{\"1\":{\"409\":1,\"1384\":2}}],[\"5x102=250\",{\"1\":{\"137\":1}}],[\"5e2=2\",{\"1\":{\"137\":1}}],[\"5\",{\"0\":{\"23\":1,\"189\":1,\"197\":1,\"426\":1,\"448\":1,\"469\":1,\"482\":1,\"495\":1,\"501\":1,\"517\":1,\"526\":1,\"534\":1,\"544\":1,\"553\":1,\"566\":1,\"581\":1,\"597\":1,\"605\":1,\"637\":1,\"644\":1,\"651\":1,\"662\":1,\"675\":1,\"690\":1,\"700\":1,\"710\":1,\"770\":1,\"789\":1,\"798\":1,\"804\":1,\"811\":1,\"822\":1,\"838\":1,\"873\":1,\"920\":1,\"1088\":1,\"1122\":1,\"1150\":1,\"1163\":1,\"1169\":1,\"1176\":1,\"1185\":1,\"1212\":1,\"1231\":1,\"1232\":1,\"1233\":1,\"1268\":1,\"1315\":1,\"1332\":1,\"1344\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1378\":1,\"1386\":1,\"1398\":1,\"1418\":1,\"1429\":1,\"1440\":1,\"1453\":1,\"1472\":1,\"1492\":1,\"1495\":1,\"1501\":1,\"1516\":1,\"1532\":1,\"1549\":1,\"1560\":1,\"1571\":1,\"1582\":1,\"1583\":1,\"1599\":1,\"1611\":1,\"1612\":1,\"1625\":1,\"1626\":1,\"1643\":1,\"1644\":1,\"1645\":1,\"1671\":1,\"1678\":1,\"1691\":1,\"1856\":1,\"1982\":1,\"1993\":1,\"2013\":1,\"2041\":1,\"2211\":1},\"1\":{\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":2,\"146\":3,\"147\":2,\"148\":3,\"150\":2,\"151\":1,\"152\":1,\"153\":2,\"154\":3,\"155\":1,\"159\":1,\"160\":3,\"161\":3,\"162\":2,\"163\":1,\"165\":2,\"166\":1,\"173\":2,\"174\":1,\"182\":5,\"193\":1,\"197\":1,\"203\":1,\"204\":1,\"206\":1,\"207\":1,\"208\":2,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"219\":6,\"223\":1,\"224\":2,\"247\":1,\"378\":1,\"394\":4,\"457\":1,\"458\":2,\"460\":2,\"480\":7,\"484\":1,\"487\":1,\"489\":1,\"500\":1,\"555\":1,\"556\":1,\"557\":3,\"558\":1,\"565\":2,\"641\":1,\"643\":2,\"680\":1,\"700\":1,\"722\":2,\"726\":2,\"780\":1,\"812\":1,\"814\":2,\"815\":1,\"825\":2,\"856\":2,\"889\":1,\"903\":1,\"904\":1,\"911\":1,\"927\":1,\"935\":2,\"936\":2,\"937\":2,\"941\":1,\"942\":2,\"943\":2,\"944\":3,\"948\":3,\"959\":1,\"960\":1,\"964\":2,\"965\":2,\"1040\":1,\"1130\":1,\"1133\":2,\"1135\":1,\"1138\":1,\"1139\":1,\"1141\":1,\"1142\":1,\"1144\":2,\"1152\":2,\"1154\":4,\"1155\":6,\"1156\":1,\"1160\":1,\"1163\":1,\"1165\":3,\"1166\":2,\"1167\":2,\"1168\":2,\"1172\":1,\"1173\":1,\"1175\":1,\"1177\":1,\"1178\":1,\"1182\":1,\"1183\":1,\"1203\":1,\"1207\":6,\"1216\":1,\"1218\":2,\"1221\":1,\"1222\":1,\"1229\":1,\"1232\":1,\"1258\":1,\"1324\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1336\":1,\"1344\":1,\"1351\":2,\"1352\":1,\"1353\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1359\":1,\"1360\":1,\"1363\":2,\"1364\":1,\"1365\":2,\"1392\":7,\"1406\":1,\"1503\":1,\"1523\":3,\"1699\":1,\"1700\":1,\"1705\":3,\"1722\":1,\"1764\":1,\"1853\":2,\"1855\":1,\"1857\":1,\"1897\":1,\"1901\":2,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1,\"1992\":1}}],[\"5️⃣\",{\"1\":{\"12\":2}}],[\"第\",{\"1\":{\"1139\":1,\"1144\":1}}],[\"第五版\",{\"1\":{\"1040\":1}}],[\"第二版\",{\"1\":{\"1040\":1}}],[\"第二项\",{\"1\":{\"22\":1}}],[\"第一个插入的元素最先被处理\",{\"1\":{\"1758\":1}}],[\"第一个java程序\",{\"1\":{\"1274\":1}}],[\"第一个字符必须是字母表中字母或下划线\",{\"1\":{\"131\":1}}],[\"第一周文献\",{\"0\":{\"1051\":1}}],[\"第一周文献阅读\",{\"0\":{\"1050\":1}}],[\"第一指导教师为校外导师的\",{\"1\":{\"1028\":1}}],[\"第一性原理的三个问题\",{\"0\":{\"1000\":1}}],[\"第一性原理是什么\",{\"0\":{\"998\":1}}],[\"第一性原理\",{\"0\":{\"997\":1},\"1\":{\"998\":1},\"2\":{\"1005\":1}}],[\"第一时间步的计算\",{\"1\":{\"911\":1,\"912\":1}}],[\"第一项\",{\"1\":{\"22\":1}}],[\"+$\",{\"1\":{\"1950\":1}}],[\"+运算符在字符串连接时\",{\"1\":{\"1318\":1}}],[\"++c\",{\"1\":{\"1373\":1,\"1376\":1}}],[\"++a\",{\"1\":{\"1311\":2}}],[\"++\",{\"1\":{\"1311\":1}}],[\"+=\",{\"1\":{\"176\":1,\"197\":1,\"203\":1,\"224\":1,\"409\":2,\"410\":2,\"447\":1,\"449\":1,\"700\":4,\"1312\":2,\"1963\":1}}],[\"+\",{\"1\":{\"21\":3,\"137\":1,\"148\":1,\"154\":1,\"180\":2,\"193\":1,\"197\":1,\"211\":1,\"212\":1,\"214\":1,\"245\":1,\"246\":2,\"247\":1,\"384\":2,\"398\":3,\"399\":3,\"406\":1,\"408\":1,\"409\":1,\"410\":1,\"428\":1,\"434\":2,\"445\":1,\"449\":1,\"457\":1,\"460\":1,\"491\":2,\"492\":5,\"494\":5,\"495\":3,\"634\":1,\"641\":1,\"642\":2,\"643\":3,\"659\":2,\"661\":2,\"680\":2,\"738\":1,\"827\":1,\"856\":1,\"889\":2,\"895\":3,\"903\":2,\"911\":5,\"917\":1,\"918\":3,\"919\":2,\"921\":1,\"923\":2,\"927\":4,\"941\":1,\"943\":1,\"958\":2,\"959\":2,\"960\":2,\"964\":2,\"965\":2,\"1133\":1,\"1144\":1,\"1146\":2,\"1152\":1,\"1155\":1,\"1166\":1,\"1172\":1,\"1173\":1,\"1175\":1,\"1176\":2,\"1178\":1,\"1179\":1,\"1181\":1,\"1207\":1,\"1216\":1,\"1221\":1,\"1222\":1,\"1224\":2,\"1227\":2,\"1297\":1,\"1298\":1,\"1302\":3,\"1311\":2,\"1312\":1,\"1318\":1,\"1324\":1,\"1326\":1,\"1327\":1,\"1331\":3,\"1335\":1,\"1336\":1,\"1343\":4,\"1360\":1,\"1370\":6,\"1384\":6,\"1392\":4,\"1393\":3,\"1394\":5,\"1395\":1,\"1396\":2,\"1401\":3,\"1402\":3,\"1404\":4,\"1405\":2,\"1406\":4,\"1407\":2,\"1413\":1,\"1416\":2,\"1418\":5,\"1422\":6,\"1425\":1,\"1427\":2,\"1428\":1,\"1439\":2,\"1445\":1,\"1446\":2,\"1447\":1,\"1448\":1,\"1476\":4,\"1503\":2,\"1506\":3,\"1509\":2,\"1523\":4,\"1528\":3,\"1545\":1,\"1548\":1,\"1568\":4,\"1588\":1,\"1591\":1,\"1608\":2,\"1610\":4,\"1612\":2,\"1651\":3,\"1654\":20,\"1655\":2,\"1661\":9,\"1667\":6,\"1682\":6,\"1685\":1,\"1686\":1,\"1705\":6,\"1709\":2,\"1748\":7,\"1751\":7,\"1754\":1,\"1762\":4,\"1764\":3,\"1766\":3,\"1768\":3,\"1774\":6,\"1777\":5,\"1786\":4,\"1788\":2,\"1790\":4,\"1792\":3,\"1801\":6,\"1803\":4,\"1805\":4,\"1807\":4,\"1809\":4,\"1814\":1,\"1818\":2,\"1820\":1,\"1831\":5,\"1846\":1,\"1863\":2,\"1876\":4,\"1890\":1,\"1891\":1,\"1898\":1,\"1901\":3,\"1903\":1,\"1906\":1,\"1908\":1,\"1909\":1,\"1933\":5,\"1935\":1,\"1936\":3,\"1938\":2,\"1939\":3,\"1941\":6,\"1942\":1,\"1947\":1,\"1949\":1,\"1950\":1,\"1954\":1,\"1956\":3,\"1961\":2,\"1962\":2,\"1963\":4,\"1966\":2,\"1970\":1,\"1981\":1,\"1982\":5,\"1984\":1,\"1985\":1,\"1994\":3,\"2000\":1,\"2047\":3,\"2048\":1}}],[\"4时间复杂度\",{\"0\":{\"2162\":1}}],[\"4和5都是常用版本\",{\"1\":{\"1851\":1}}],[\"4x4单位矩阵\",{\"1\":{\"1156\":1}}],[\"4x1​+2x2​≤100\",{\"1\":{\"721\":1,\"725\":1}}],[\"483\",{\"1\":{\"1286\":2}}],[\"48\",{\"1\":{\"1040\":1,\"1883\":2}}],[\"47\",{\"1\":{\"1040\":1}}],[\"46\",{\"1\":{\"1040\":1}}],[\"443\",{\"1\":{\"1655\":1,\"1941\":1}}],[\"44\",{\"1\":{\"1040\":1}}],[\"43\",{\"1\":{\"1040\":1}}],[\"41\",{\"1\":{\"1040\":1}}],[\"418\",{\"1\":{\"202\":1}}],[\"4℃\",{\"1\":{\"855\":1}}],[\"456\",{\"1\":{\"1298\":1,\"1299\":1,\"1949\":2}}],[\"45\",{\"1\":{\"409\":1,\"643\":1,\"815\":1,\"822\":1,\"1040\":1,\"1393\":4,\"1416\":1}}],[\"49\",{\"1\":{\"221\":1,\"222\":1,\"223\":1,\"1040\":1}}],[\"40\",{\"1\":{\"409\":1,\"732\":1,\"1040\":1,\"1204\":1,\"1801\":1}}],[\"404\",{\"1\":{\"202\":2,\"2284\":1}}],[\"400\",{\"1\":{\"202\":1,\"852\":1,\"2022\":1,\"2028\":1}}],[\"42\",{\"1\":{\"185\":1,\"186\":1,\"187\":2,\"261\":1,\"410\":2,\"1040\":1}}],[\"4\",{\"0\":{\"20\":1,\"188\":1,\"196\":1,\"407\":1,\"418\":1,\"425\":1,\"442\":1,\"447\":1,\"460\":1,\"468\":1,\"481\":1,\"494\":1,\"500\":1,\"514\":1,\"516\":1,\"525\":1,\"533\":1,\"543\":1,\"552\":1,\"558\":1,\"564\":1,\"573\":1,\"580\":1,\"596\":1,\"604\":1,\"625\":1,\"636\":1,\"643\":1,\"650\":1,\"657\":1,\"661\":1,\"674\":1,\"689\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"709\":1,\"769\":1,\"788\":1,\"797\":1,\"803\":1,\"810\":1,\"821\":1,\"835\":1,\"872\":1,\"919\":1,\"1087\":1,\"1121\":1,\"1136\":1,\"1140\":1,\"1141\":1,\"1142\":1,\"1143\":1,\"1149\":1,\"1162\":1,\"1168\":1,\"1175\":1,\"1184\":1,\"1204\":1,\"1211\":1,\"1219\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1230\":1,\"1267\":1,\"1289\":1,\"1299\":1,\"1314\":1,\"1327\":1,\"1331\":1,\"1343\":1,\"1355\":1,\"1356\":1,\"1357\":1,\"1377\":1,\"1385\":1,\"1395\":1,\"1397\":1,\"1408\":1,\"1417\":1,\"1428\":1,\"1438\":1,\"1439\":1,\"1448\":1,\"1452\":1,\"1471\":1,\"1483\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1500\":1,\"1514\":1,\"1515\":1,\"1531\":1,\"1548\":1,\"1559\":1,\"1570\":1,\"1580\":1,\"1581\":1,\"1596\":1,\"1597\":1,\"1598\":1,\"1609\":1,\"1610\":1,\"1623\":1,\"1624\":1,\"1640\":1,\"1641\":1,\"1642\":1,\"1670\":1,\"1677\":1,\"1690\":1,\"1728\":1,\"1740\":1,\"1855\":1,\"1981\":1,\"1992\":1,\"2003\":1,\"2012\":1,\"2016\":1,\"2040\":1,\"2210\":1},\"1\":{\"141\":2,\"142\":1,\"143\":1,\"144\":2,\"145\":2,\"146\":3,\"147\":3,\"148\":5,\"150\":3,\"151\":1,\"152\":2,\"153\":3,\"154\":3,\"155\":1,\"159\":2,\"160\":3,\"161\":4,\"162\":1,\"163\":1,\"165\":3,\"166\":1,\"173\":2,\"174\":3,\"196\":1,\"204\":1,\"211\":1,\"212\":2,\"214\":2,\"217\":1,\"219\":5,\"221\":1,\"222\":1,\"223\":2,\"224\":1,\"229\":3,\"238\":2,\"240\":2,\"378\":1,\"393\":3,\"394\":4,\"398\":3,\"399\":2,\"409\":1,\"446\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":3,\"480\":9,\"484\":1,\"485\":1,\"486\":1,\"487\":2,\"489\":2,\"558\":1,\"649\":2,\"650\":1,\"700\":2,\"722\":2,\"726\":2,\"738\":1,\"739\":1,\"780\":1,\"856\":1,\"920\":1,\"921\":1,\"927\":1,\"928\":1,\"935\":2,\"936\":2,\"937\":2,\"941\":2,\"942\":2,\"943\":2,\"944\":2,\"947\":1,\"955\":6,\"959\":1,\"960\":1,\"964\":2,\"1025\":1,\"1040\":1,\"1130\":1,\"1133\":2,\"1134\":1,\"1135\":1,\"1136\":1,\"1138\":1,\"1139\":1,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":2,\"1152\":6,\"1154\":3,\"1155\":6,\"1156\":3,\"1167\":1,\"1168\":1,\"1178\":1,\"1203\":1,\"1216\":1,\"1218\":3,\"1221\":3,\"1222\":1,\"1229\":1,\"1232\":1,\"1325\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1359\":1,\"1360\":1,\"1370\":1,\"1394\":2,\"1728\":1,\"1857\":1,\"1878\":1,\"1880\":1,\"1986\":2,\"1992\":2,\"2048\":1}}],[\"4️⃣\",{\"1\":{\"12\":2}}],[\"斜体\",{\"1\":{\"19\":2,\"33\":1}}],[\"或o\",{\"1\":{\"2165\":1}}],[\"或maven命令运行测试\",{\"1\":{\"1854\":1}}],[\"或其父类\",{\"1\":{\"1839\":1}}],[\"或其子类\",{\"1\":{\"1838\":1,\"1839\":1}}],[\"或其他方法来控制生成多少元素\",{\"1\":{\"1819\":1}}],[\"或访问顺序\",{\"1\":{\"1799\":1,\"1802\":1}}],[\"或根据提供的比较器排序\",{\"1\":{\"1784\":1}}],[\"或在类的构造器中调用另一个构造器\",{\"1\":{\"1713\":1}}],[\"或在字符串内容不频繁更改的情况下使用\",{\"1\":{\"1378\":1}}],[\"或构造器\",{\"1\":{\"1690\":1}}],[\"或多个参数\",{\"1\":{\"1685\":1}}],[\"或格式化字符串\",{\"1\":{\"1675\":1}}],[\"或显式的资源管理\",{\"1\":{\"1672\":1}}],[\"或下划线\",{\"1\":{\"1305\":1}}],[\"或数字的任何字符组合\",{\"1\":{\"1276\":1}}],[\"或数组\",{\"1\":{\"390\":1}}],[\"或使用\",{\"1\":{\"1187\":1,\"1981\":1}}],[\"或100μm\",{\"1\":{\"1052\":1}}],[\"或有大的社会效益或经济效益\",{\"1\":{\"1037\":1}}],[\"或入学前五年内曾在英语国家留学一学年\",{\"1\":{\"1032\":1}}],[\"或英语专业本科\",{\"1\":{\"1032\":1}}],[\"或通过出国外语水平考试\",{\"1\":{\"1032\":1}}],[\"或最小堆\",{\"1\":{\"958\":1}}],[\"或幂函数拟合\",{\"1\":{\"939\":1}}],[\"或非支配解\",{\"1\":{\"840\":1}}],[\"或频域方法\",{\"1\":{\"790\":1}}],[\"或定性的\",{\"1\":{\"753\":1}}],[\"或一般整数规划\",{\"1\":{\"707\":1}}],[\"或等价地最小化废料\",{\"1\":{\"698\":1}}],[\"或扫掠体\",{\"1\":{\"679\":1}}],[\"或是打算应用预测方法解决哪方面的问题\",{\"1\":{\"631\":1}}],[\"或对生产管理有实际应用价值和理论指导\",{\"1\":{\"1037\":1}}],[\"或对\",{\"1\":{\"564\":1}}],[\"或目标函数值\",{\"1\":{\"421\":1}}],[\"或广度优先搜索\",{\"1\":{\"397\":1}}],[\"或统计学习\",{\"1\":{\"367\":1}}],[\"或指定的默认值\",{\"1\":{\"169\":1}}],[\"或者被另一个线程锁定\",{\"1\":{\"1964\":1}}],[\"或者从缓冲区写入到通道中的\",{\"1\":{\"1884\":1}}],[\"或者你想使用特定的构造方法\",{\"1\":{\"1828\":1}}],[\"或者继承自某个类的子类实例\",{\"1\":{\"1596\":1}}],[\"或者分步骤创建\",{\"1\":{\"1359\":1}}],[\"或者同时声明和初始化\",{\"1\":{\"1351\":1}}],[\"或者直接调用\",{\"1\":{\"1336\":1}}],[\"或者下划线\",{\"1\":{\"1276\":1}}],[\"或者\",{\"1\":{\"1276\":2}}],[\"或者标记某一部分命令成为一个整体\",{\"1\":{\"1109\":1}}],[\"或者生物系统中的细胞分布\",{\"1\":{\"926\":1}}],[\"或者用于轨道\",{\"1\":{\"683\":1}}],[\"或者用在需要保证数据不变的场景中\",{\"1\":{\"156\":1}}],[\"或者使用\",{\"1\":{\"161\":4,\"166\":2,\"608\":1}}],[\"或者在某个条件满足时执行某段代码\",{\"1\":{\"139\":1}}],[\"或者complex\",{\"1\":{\"137\":1}}],[\"或\",{\"1\":{\"19\":4,\"21\":1,\"28\":1,\"138\":1,\"139\":1,\"195\":1,\"575\":2,\"609\":1,\"645\":1,\"1108\":1,\"1163\":1,\"1186\":1,\"1192\":1,\"1194\":1,\"1211\":1,\"1311\":2,\"1492\":1,\"1519\":1,\"1627\":1,\"1685\":1,\"1822\":1,\"1880\":1,\"1892\":1,\"1901\":1,\"1909\":1,\"1932\":1,\"1970\":1,\"1985\":1,\"1989\":1}}],[\"3选择迭代还是递归\",{\"0\":{\"2161\":1}}],[\"3算法中的迭代与递归\",{\"0\":{\"2158\":1}}],[\"3数字编码格式\",{\"0\":{\"2154\":1}}],[\"3^2\",{\"1\":{\"1216\":1}}],[\"3x4全零数组\",{\"1\":{\"1156\":1}}],[\"3x3正态分布的随机数数组\",{\"1\":{\"1156\":1}}],[\"3x3均匀分布的随机数数组\",{\"1\":{\"1156\":1}}],[\"3x3\",{\"1\":{\"1131\":4,\"1222\":1}}],[\"3x1​+5x2​≤120\",{\"1\":{\"721\":1,\"725\":1}}],[\"3到3\",{\"1\":{\"1052\":1}}],[\"39\",{\"1\":{\"1040\":1}}],[\"3890560989306495\",{\"1\":{\"1394\":1}}],[\"38\",{\"1\":{\"1040\":1}}],[\"3306\",{\"1\":{\"1979\":1}}],[\"33\",{\"1\":{\"1040\":1}}],[\"3门本学科的本科生主干课程\",{\"1\":{\"1031\":1}}],[\"37\",{\"1\":{\"643\":1,\"1040\":1}}],[\"3d打印\",{\"1\":{\"672\":1}}],[\"3d\",{\"1\":{\"623\":2,\"680\":1}}],[\"32位无符号整数\",{\"1\":{\"1127\":1}}],[\"32位有符号整数\",{\"1\":{\"1127\":1}}],[\"326\",{\"1\":{\"1051\":1}}],[\"32\",{\"1\":{\"610\":1,\"855\":1,\"856\":1,\"1040\":1,\"1286\":3,\"1287\":1,\"2154\":1}}],[\"34\",{\"1\":{\"410\":2,\"1040\":1,\"1407\":1}}],[\"35\",{\"1\":{\"239\":1,\"738\":2,\"1040\":1}}],[\"36<\",{\"1\":{\"1924\":1}}],[\"36\",{\"1\":{\"221\":1,\"222\":1,\"223\":1,\"1040\":1,\"1921\":1,\"1925\":1}}],[\"31\",{\"1\":{\"170\":3,\"171\":2,\"378\":1,\"855\":1,\"856\":1,\"1040\":1}}],[\"307\",{\"1\":{\"1051\":1}}],[\"30之前\",{\"1\":{\"856\":1}}],[\"30之前的时间点\",{\"1\":{\"856\":1}}],[\"300\",{\"1\":{\"821\":2,\"911\":1,\"2022\":1,\"2027\":1,\"2028\":1,\"2033\":1}}],[\"30x1​+20x2​+10x3​≤50\",{\"1\":{\"731\":1}}],[\"30\",{\"1\":{\"157\":2,\"168\":1,\"169\":1,\"211\":1,\"239\":1,\"242\":1,\"257\":1,\"258\":1,\"261\":1,\"378\":1,\"409\":2,\"410\":2,\"643\":1,\"732\":2,\"738\":2,\"827\":2,\"855\":1,\"856\":2,\"958\":2,\"1040\":1,\"1203\":1,\"1204\":1,\"1568\":2,\"1667\":1,\"1671\":1,\"1682\":1,\"1727\":1,\"1774\":1,\"1777\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1863\":1,\"1876\":1,\"1901\":1,\"1956\":2,\"1981\":1}}],[\"3\",{\"0\":{\"19\":1,\"47\":1,\"52\":1,\"187\":1,\"195\":1,\"406\":1,\"417\":1,\"424\":1,\"434\":1,\"441\":1,\"446\":1,\"459\":1,\"467\":1,\"480\":1,\"493\":1,\"499\":1,\"513\":1,\"515\":1,\"522\":1,\"524\":1,\"532\":1,\"542\":1,\"551\":1,\"557\":1,\"563\":1,\"572\":1,\"579\":1,\"590\":1,\"595\":1,\"603\":1,\"624\":1,\"635\":1,\"642\":1,\"648\":1,\"656\":1,\"660\":1,\"673\":1,\"688\":1,\"695\":1,\"699\":1,\"708\":1,\"768\":1,\"787\":1,\"796\":1,\"802\":1,\"809\":1,\"820\":1,\"834\":1,\"871\":1,\"918\":1,\"925\":1,\"1086\":1,\"1120\":1,\"1135\":1,\"1137\":1,\"1138\":1,\"1139\":1,\"1143\":1,\"1148\":1,\"1161\":1,\"1167\":1,\"1174\":1,\"1183\":1,\"1196\":1,\"1203\":1,\"1208\":1,\"1209\":1,\"1210\":1,\"1218\":1,\"1223\":1,\"1224\":1,\"1225\":1,\"1226\":2,\"1227\":1,\"1266\":1,\"1288\":1,\"1296\":1,\"1303\":1,\"1313\":1,\"1326\":1,\"1328\":1,\"1329\":1,\"1330\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1354\":1,\"1364\":1,\"1374\":1,\"1375\":1,\"1376\":1,\"1384\":1,\"1394\":1,\"1396\":1,\"1406\":1,\"1407\":1,\"1414\":1,\"1415\":1,\"1416\":1,\"1427\":1,\"1435\":1,\"1436\":1,\"1437\":1,\"1447\":1,\"1449\":1,\"1450\":1,\"1451\":1,\"1470\":1,\"1482\":1,\"1487\":1,\"1488\":1,\"1489\":1,\"1490\":2,\"1491\":1,\"1492\":1,\"1499\":1,\"1510\":1,\"1511\":1,\"1512\":1,\"1513\":2,\"1514\":1,\"1529\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1547\":1,\"1558\":1,\"1568\":1,\"1569\":1,\"1578\":1,\"1579\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1607\":1,\"1608\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1638\":1,\"1639\":1,\"1656\":1,\"1657\":1,\"1658\":1,\"1669\":1,\"1674\":1,\"1675\":1,\"1676\":1,\"1687\":1,\"1688\":1,\"1689\":1,\"1727\":1,\"1732\":1,\"1739\":1,\"1815\":1,\"1852\":1,\"1853\":1,\"1854\":1,\"1918\":1,\"1922\":1,\"1926\":1,\"1963\":1,\"1980\":1,\"1991\":1,\"2002\":1,\"2011\":1,\"2015\":1,\"2039\":1,\"2045\":1,\"2159\":1,\"2160\":1,\"2161\":1,\"2209\":1,\"2257\":1},\"1\":{\"130\":1,\"131\":1,\"141\":2,\"142\":1,\"143\":1,\"144\":2,\"145\":2,\"146\":3,\"147\":3,\"148\":3,\"150\":3,\"151\":1,\"152\":2,\"153\":2,\"154\":3,\"155\":2,\"159\":4,\"160\":2,\"161\":4,\"165\":2,\"166\":2,\"173\":1,\"174\":4,\"176\":1,\"182\":2,\"185\":1,\"186\":1,\"187\":2,\"188\":2,\"189\":2,\"190\":2,\"193\":7,\"194\":6,\"196\":5,\"197\":1,\"199\":2,\"202\":1,\"204\":1,\"207\":1,\"208\":1,\"211\":2,\"212\":2,\"214\":2,\"215\":1,\"219\":4,\"223\":1,\"224\":1,\"225\":2,\"238\":2,\"240\":1,\"242\":1,\"246\":2,\"247\":1,\"253\":1,\"378\":1,\"390\":3,\"393\":5,\"409\":1,\"446\":2,\"449\":1,\"457\":6,\"458\":4,\"459\":5,\"460\":1,\"484\":1,\"485\":2,\"486\":2,\"487\":3,\"489\":2,\"497\":1,\"501\":1,\"511\":1,\"524\":1,\"535\":1,\"551\":1,\"555\":3,\"556\":2,\"557\":3,\"558\":3,\"565\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"610\":6,\"619\":1,\"700\":2,\"722\":1,\"726\":1,\"732\":2,\"739\":1,\"780\":1,\"826\":1,\"852\":1,\"917\":1,\"918\":1,\"921\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"947\":4,\"954\":1,\"955\":8,\"959\":2,\"960\":1,\"964\":2,\"965\":2,\"1025\":1,\"1038\":1,\"1040\":1,\"1130\":1,\"1131\":7,\"1133\":2,\"1134\":1,\"1135\":1,\"1136\":1,\"1138\":4,\"1139\":3,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":6,\"1151\":1,\"1152\":4,\"1154\":9,\"1155\":4,\"1156\":8,\"1165\":1,\"1168\":3,\"1169\":2,\"1172\":1,\"1173\":1,\"1176\":1,\"1177\":1,\"1178\":1,\"1182\":1,\"1185\":2,\"1203\":1,\"1216\":2,\"1221\":3,\"1222\":3,\"1229\":1,\"1230\":2,\"1232\":1,\"1292\":2,\"1322\":2,\"1325\":1,\"1331\":2,\"1336\":1,\"1344\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1359\":3,\"1360\":1,\"1362\":1,\"1363\":2,\"1364\":2,\"1365\":1,\"1394\":1,\"1503\":1,\"1523\":3,\"1728\":1,\"1768\":1,\"1853\":1,\"1855\":2,\"1857\":1,\"1956\":1,\"1986\":1,\"1992\":1,\"2027\":1}}],[\"3️⃣\",{\"1\":{\"12\":2}}],[\"段落与文本\",{\"0\":{\"1111\":1}}],[\"段落之间需要空一行\",{\"1\":{\"18\":1}}],[\"段落\",{\"0\":{\"18\":1},\"1\":{\"1108\":1}}],[\"2递归\",{\"0\":{\"2160\":1}}],[\"2算法效率的评估\",{\"0\":{\"2157\":1}}],[\"2数据结构的分类\",{\"0\":{\"2153\":1}}],[\"2^3\",{\"1\":{\"1394\":1}}],[\"2^31\",{\"1\":{\"1286\":2}}],[\"2^63\",{\"1\":{\"1286\":2}}],[\"2^n$\",{\"1\":{\"866\":1}}],[\"2^n\",{\"1\":{\"410\":1,\"2162\":1}}],[\"2x2\",{\"1\":{\"1144\":1,\"1222\":1}}],[\"2x3全一数组\",{\"1\":{\"1156\":1}}],[\"2x3\",{\"1\":{\"1130\":1,\"1222\":1}}],[\"2nd\",{\"1\":{\"942\":1}}],[\"2次\",{\"1\":{\"942\":1}}],[\"2αt\",{\"1\":{\"884\":1}}],[\"2β∈rp​\",{\"1\":{\"837\":1}}],[\"2d\",{\"1\":{\"625\":1}}],[\"2f元\",{\"1\":{\"726\":1,\"732\":1}}],[\"2f\",{\"1\":{\"497\":2,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"610\":1,\"722\":3,\"889\":1,\"903\":1,\"911\":1,\"927\":1,\"1425\":1,\"1427\":1}}],[\"28\",{\"1\":{\"378\":1,\"610\":6,\"1040\":1,\"1994\":1}}],[\"26\",{\"1\":{\"378\":1,\"1040\":1}}],[\"24\",{\"1\":{\"378\":1,\"643\":1,\"1040\":1,\"1051\":1}}],[\"23\",{\"1\":{\"378\":1,\"1040\":1,\"2154\":1}}],[\"22\",{\"1\":{\"378\":1,\"1040\":1}}],[\"21\",{\"1\":{\"378\":1,\"855\":1,\"856\":1,\"1040\":1}}],[\"27\",{\"1\":{\"215\":1,\"378\":1,\"1040\":1}}],[\"256\",{\"1\":{\"2045\":1}}],[\"250\",{\"1\":{\"2033\":1}}],[\"25等\",{\"1\":{\"1292\":1}}],[\"255\",{\"1\":{\"610\":2,\"824\":1,\"826\":1,\"827\":1}}],[\"25\",{\"1\":{\"148\":2,\"163\":1,\"173\":1,\"191\":2,\"221\":1,\"222\":1,\"223\":1,\"239\":1,\"257\":1,\"378\":1,\"409\":2,\"410\":2,\"660\":1,\"738\":2,\"895\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"1040\":1,\"1203\":1,\"1301\":1,\"1425\":1,\"1568\":2,\"1984\":1}}],[\"2018\",{\"1\":{\"1661\":1,\"1663\":1}}],[\"2005\",{\"1\":{\"1258\":1}}],[\"2000\",{\"1\":{\"927\":1,\"1711\":1}}],[\"200\",{\"1\":{\"820\":1,\"1705\":1,\"1740\":1,\"2027\":1}}],[\"2020\",{\"1\":{\"1661\":1,\"1663\":1}}],[\"2025\",{\"1\":{\"1402\":2}}],[\"2021\",{\"1\":{\"1051\":2}}],[\"2022\",{\"1\":{\"234\":1}}],[\"2023\",{\"1\":{\"234\":2,\"1994\":1}}],[\"2024年版\",{\"1\":{\"1039\":1}}],[\"2024年7月20日\",{\"0\":{\"984\":1}}],[\"2024年7月13日\",{\"0\":{\"63\":1}}],[\"2024级农业工程与信息技术领域硕士专业学位研究生培养方案095136\",{\"1\":{\"1022\":1}}],[\"2024\",{\"1\":{\"69\":1,\"77\":1,\"336\":1,\"1404\":1,\"1407\":1}}],[\"20\",{\"1\":{\"77\":1,\"180\":1,\"378\":1,\"398\":1,\"399\":1,\"410\":2,\"434\":1,\"700\":1,\"727\":1,\"732\":2,\"738\":2,\"855\":2,\"856\":1,\"889\":1,\"895\":1,\"958\":2,\"1040\":1,\"1181\":1,\"1203\":1,\"1204\":1,\"1282\":1,\"1727\":1,\"1730\":2,\"1731\":1,\"1739\":1,\"1774\":1,\"1777\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1}}],[\"29\",{\"1\":{\"69\":1,\"378\":1,\"1040\":1}}],[\"2\",{\"0\":{\"18\":1,\"46\":1,\"51\":1,\"186\":1,\"194\":1,\"402\":1,\"416\":1,\"423\":1,\"433\":1,\"440\":1,\"445\":1,\"458\":1,\"466\":1,\"479\":1,\"492\":1,\"498\":1,\"510\":1,\"512\":1,\"521\":1,\"523\":1,\"529\":1,\"531\":1,\"539\":1,\"541\":1,\"550\":1,\"556\":1,\"562\":1,\"570\":1,\"578\":1,\"589\":1,\"594\":1,\"602\":1,\"623\":1,\"634\":1,\"641\":1,\"647\":1,\"655\":1,\"659\":1,\"672\":1,\"687\":1,\"694\":1,\"698\":1,\"707\":1,\"767\":1,\"786\":1,\"795\":1,\"801\":1,\"808\":1,\"819\":1,\"833\":1,\"837\":1,\"870\":1,\"917\":1,\"924\":1,\"1085\":1,\"1119\":1,\"1131\":1,\"1132\":1,\"1133\":1,\"1134\":2,\"1135\":1,\"1136\":1,\"1139\":1,\"1142\":1,\"1147\":1,\"1160\":1,\"1166\":1,\"1173\":1,\"1182\":1,\"1192\":1,\"1193\":1,\"1194\":1,\"1195\":2,\"1202\":1,\"1205\":1,\"1206\":1,\"1207\":2,\"1210\":1,\"1217\":1,\"1220\":1,\"1221\":1,\"1222\":2,\"1225\":1,\"1230\":1,\"1233\":1,\"1265\":1,\"1287\":1,\"1295\":1,\"1302\":1,\"1308\":1,\"1312\":1,\"1322\":1,\"1323\":1,\"1324\":1,\"1325\":2,\"1326\":1,\"1327\":1,\"1330\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":2,\"1342\":1,\"1352\":1,\"1353\":1,\"1357\":1,\"1360\":1,\"1363\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":2,\"1376\":1,\"1383\":1,\"1391\":1,\"1392\":1,\"1393\":2,\"1394\":1,\"1395\":1,\"1402\":1,\"1403\":1,\"1404\":1,\"1405\":2,\"1406\":1,\"1411\":1,\"1412\":1,\"1413\":2,\"1416\":1,\"1423\":1,\"1424\":1,\"1425\":1,\"1426\":2,\"1432\":1,\"1433\":1,\"1434\":2,\"1437\":1,\"1444\":1,\"1445\":1,\"1446\":2,\"1447\":1,\"1448\":1,\"1451\":1,\"1469\":1,\"1481\":1,\"1484\":1,\"1485\":1,\"1486\":2,\"1489\":1,\"1498\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1521\":1,\"1522\":1,\"1523\":2,\"1527\":1,\"1537\":1,\"1538\":1,\"1539\":2,\"1542\":1,\"1546\":1,\"1554\":1,\"1555\":1,\"1556\":1,\"1557\":2,\"1565\":1,\"1566\":1,\"1567\":2,\"1568\":1,\"1575\":1,\"1576\":1,\"1577\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1592\":2,\"1595\":1,\"1598\":1,\"1605\":1,\"1606\":1,\"1618\":1,\"1619\":1,\"1622\":1,\"1629\":1,\"1635\":1,\"1636\":1,\"1637\":2,\"1638\":1,\"1642\":1,\"1645\":1,\"1648\":1,\"1655\":1,\"1658\":1,\"1666\":1,\"1667\":1,\"1668\":2,\"1669\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1676\":1,\"1686\":1,\"1689\":1,\"1700\":1,\"1703\":1,\"1723\":1,\"1726\":1,\"1731\":1,\"1738\":1,\"1748\":1,\"1751\":1,\"1759\":1,\"1773\":1,\"1783\":1,\"1798\":1,\"1814\":1,\"1819\":1,\"1823\":1,\"1850\":1,\"1851\":1,\"1854\":1,\"1871\":1,\"1874\":1,\"1891\":1,\"1917\":1,\"1919\":1,\"1921\":1,\"1922\":1,\"1925\":1,\"1936\":1,\"1939\":1,\"1942\":1,\"1950\":1,\"1962\":1,\"1969\":1,\"1979\":1,\"1990\":1,\"2001\":1,\"2008\":1,\"2009\":1,\"2010\":2,\"2011\":1,\"2012\":1,\"2013\":1,\"2014\":1,\"2022\":1,\"2026\":1,\"2031\":1,\"2038\":1,\"2044\":1,\"2155\":1,\"2156\":1,\"2157\":1,\"2158\":1,\"2159\":1,\"2160\":1,\"2161\":1,\"2162\":1,\"2163\":1,\"2208\":1,\"2256\":1},\"1\":{\"22\":2,\"137\":1,\"141\":2,\"143\":1,\"144\":2,\"145\":2,\"146\":3,\"148\":2,\"150\":3,\"152\":2,\"153\":3,\"154\":4,\"155\":1,\"159\":5,\"160\":3,\"161\":4,\"162\":2,\"163\":1,\"165\":3,\"166\":2,\"173\":2,\"174\":1,\"176\":1,\"188\":2,\"189\":2,\"190\":3,\"193\":7,\"194\":6,\"196\":3,\"197\":24,\"199\":2,\"204\":1,\"207\":1,\"208\":1,\"211\":2,\"212\":3,\"214\":2,\"217\":1,\"219\":7,\"221\":1,\"222\":1,\"223\":2,\"224\":1,\"225\":2,\"238\":2,\"240\":1,\"246\":2,\"247\":1,\"253\":1,\"378\":2,\"384\":7,\"390\":4,\"393\":4,\"409\":1,\"428\":1,\"434\":2,\"446\":1,\"449\":1,\"457\":6,\"458\":6,\"459\":2,\"460\":3,\"484\":1,\"485\":2,\"486\":2,\"487\":2,\"489\":2,\"492\":2,\"494\":1,\"511\":1,\"555\":8,\"556\":8,\"557\":8,\"558\":8,\"565\":1,\"577\":2,\"578\":2,\"579\":2,\"580\":2,\"581\":2,\"590\":1,\"601\":2,\"602\":2,\"603\":2,\"604\":2,\"605\":2,\"608\":1,\"610\":5,\"619\":1,\"623\":1,\"624\":1,\"625\":1,\"634\":1,\"641\":1,\"649\":1,\"650\":1,\"680\":3,\"700\":1,\"722\":1,\"726\":3,\"728\":1,\"732\":2,\"738\":3,\"739\":1,\"780\":1,\"809\":1,\"826\":1,\"827\":1,\"832\":2,\"836\":1,\"842\":1,\"852\":1,\"889\":2,\"895\":4,\"903\":2,\"911\":7,\"912\":1,\"917\":1,\"918\":2,\"919\":1,\"920\":1,\"921\":3,\"924\":1,\"925\":1,\"927\":2,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":2,\"943\":1,\"944\":1,\"947\":2,\"948\":4,\"954\":2,\"955\":6,\"959\":2,\"960\":2,\"964\":1,\"965\":3,\"1025\":1,\"1028\":1,\"1038\":2,\"1040\":1,\"1130\":1,\"1133\":2,\"1134\":3,\"1135\":1,\"1136\":1,\"1138\":4,\"1139\":5,\"1141\":1,\"1142\":2,\"1143\":1,\"1144\":15,\"1151\":2,\"1152\":8,\"1154\":6,\"1155\":6,\"1156\":3,\"1165\":1,\"1168\":1,\"1170\":1,\"1176\":1,\"1178\":1,\"1196\":1,\"1203\":1,\"1209\":4,\"1216\":2,\"1219\":1,\"1221\":3,\"1222\":2,\"1224\":1,\"1227\":1,\"1229\":1,\"1232\":1,\"1258\":3,\"1286\":2,\"1315\":3,\"1322\":1,\"1325\":1,\"1330\":1,\"1352\":1,\"1353\":2,\"1354\":1,\"1356\":1,\"1357\":1,\"1359\":1,\"1360\":1,\"1362\":1,\"1363\":2,\"1364\":1,\"1365\":1,\"1394\":3,\"1416\":1,\"1418\":1,\"1446\":1,\"1523\":2,\"1693\":1,\"1723\":1,\"1728\":1,\"1737\":1,\"1740\":2,\"1748\":4,\"1751\":4,\"1853\":1,\"1855\":2,\"1857\":1,\"1914\":1,\"1919\":1,\"1920\":1,\"1921\":1,\"1922\":1,\"1924\":1,\"1956\":1,\"1963\":1,\"1985\":1,\"1986\":1,\"1992\":3,\"2027\":1}}],[\"2️⃣\",{\"1\":{\"12\":2,\"2153\":1}}],[\"号来表示标题\",{\"1\":{\"17\":1}}],[\"1迭代\",{\"0\":{\"2159\":1}}],[\"1算法是什么\",{\"0\":{\"2156\":1}}],[\"1表示负数\",{\"1\":{\"2154\":1}}],[\"1表示生产\",{\"1\":{\"731\":3}}],[\"1数据结构是什么\",{\"0\":{\"2152\":1}}],[\"1<\",{\"1\":{\"1920\":2}}],[\"1l\",{\"1\":{\"1862\":1,\"1863\":1,\"1864\":1}}],[\"1变0\",{\"1\":{\"1315\":1}}],[\"1取值\",{\"1\":{\"1107\":1,\"1108\":1}}],[\"1mm\",{\"1\":{\"1052\":1}}],[\"1次\",{\"1\":{\"959\":1}}],[\"1−ku​\",{\"1\":{\"927\":1}}],[\"1−kpt​​\",{\"1\":{\"869\":1}}],[\"1e\",{\"1\":{\"895\":1}}],[\"1d\",{\"1\":{\"889\":1,\"903\":1,\"911\":1}}],[\"1×121=133\",{\"1\":{\"875\":1}}],[\"1×110=121\",{\"1\":{\"875\":1}}],[\"1×100=110\",{\"1\":{\"875\":1}}],[\"1pt​\",{\"1\":{\"875\":1}}],[\"1$\",{\"1\":{\"866\":1}}],[\"1℃\",{\"1\":{\"855\":1}}],[\"1问题中\",{\"1\":{\"734\":1}}],[\"1约束\",{\"1\":{\"732\":1,\"738\":1}}],[\"1整数线性规划问题\",{\"1\":{\"732\":1}}],[\"1整数约束\",{\"1\":{\"731\":1,\"734\":1,\"740\":1}}],[\"1整数规划问题\",{\"1\":{\"732\":1,\"734\":1,\"740\":1}}],[\"1整数规划模型\",{\"0\":{\"729\":1,\"731\":1}}],[\"1整数规划\",{\"1\":{\"707\":2,\"729\":1}}],[\"1samp\",{\"1\":{\"460\":1}}],[\"1背包问题的简单动态规划算法伪代码\",{\"1\":{\"408\":1}}],[\"1背包问题为例\",{\"1\":{\"408\":1}}],[\"1背包问题类似\",{\"1\":{\"408\":1}}],[\"1背包问题\",{\"1\":{\"408\":1}}],[\"1990年代至今\",{\"1\":{\"2190\":1}}],[\"1990年代\",{\"1\":{\"2190\":1}}],[\"1995\",{\"1\":{\"1258\":2}}],[\"1980年代\",{\"1\":{\"2190\":2}}],[\"1960年代\",{\"1\":{\"2190\":2}}],[\"1950年代\",{\"1\":{\"2190\":2}}],[\"1940年代\",{\"1\":{\"2190\":1}}],[\"1970年代\",{\"1\":{\"2190\":2}}],[\"1970\",{\"1\":{\"1401\":1}}],[\"19\",{\"1\":{\"378\":1,\"643\":1,\"1040\":1,\"1404\":1,\"1407\":1}}],[\"18\",{\"1\":{\"378\":1,\"1040\":1,\"1447\":2,\"1906\":1}}],[\"17\",{\"1\":{\"378\":1,\"1040\":1,\"1457\":1,\"1920\":2}}],[\"16位无符号整数\",{\"1\":{\"1127\":1}}],[\"16位有符号整数\",{\"1\":{\"1127\":1}}],[\"160\",{\"1\":{\"852\":2}}],[\"16\",{\"0\":{\"35\":1},\"1\":{\"148\":2,\"163\":1,\"173\":1,\"212\":1,\"214\":1,\"217\":1,\"221\":1,\"222\":1,\"223\":1,\"229\":3,\"240\":1,\"378\":1,\"398\":1,\"399\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"1040\":1,\"1176\":1,\"1286\":1,\"1288\":1,\"1394\":2,\"1868\":1}}],[\"150\",{\"1\":{\"727\":1,\"2022\":1}}],[\"15\",{\"0\":{\"34\":1},\"1\":{\"145\":2,\"180\":1,\"378\":1,\"394\":4,\"409\":1,\"555\":1,\"557\":1,\"558\":1,\"643\":1,\"738\":2,\"819\":2,\"964\":2,\"1040\":1,\"1178\":1,\"1182\":1,\"1203\":1,\"1392\":1,\"1447\":1,\"1731\":1,\"1764\":1,\"1906\":1,\"2154\":1}}],[\"147\",{\"1\":{\"1286\":2}}],[\"140\",{\"1\":{\"856\":1}}],[\"14159\",{\"1\":{\"182\":1,\"1292\":1}}],[\"14\",{\"0\":{\"33\":1},\"1\":{\"141\":1,\"150\":1,\"159\":1,\"182\":1,\"185\":1,\"186\":2,\"187\":2,\"378\":1,\"398\":1,\"399\":1,\"1040\":1,\"1292\":1}}],[\"13\",{\"0\":{\"32\":1},\"1\":{\"378\":1,\"398\":1,\"399\":1,\"1040\":1}}],[\"123456\",{\"1\":{\"1952\":1}}],[\"12345\",{\"1\":{\"1935\":1,\"1936\":1,\"1938\":1,\"1939\":1}}],[\"123\",{\"1\":{\"1298\":1,\"1299\":1,\"1855\":1,\"1949\":2}}],[\"123abc\",{\"1\":{\"1276\":1}}],[\"128\",{\"1\":{\"1286\":1}}],[\"12个月\",{\"1\":{\"1032\":1}}],[\"127\",{\"1\":{\"824\":1,\"1286\":1}}],[\"120\",{\"1\":{\"213\":1,\"722\":1,\"726\":1,\"856\":2,\"1502\":1}}],[\"12\",{\"0\":{\"31\":1,\"476\":1,\"489\":1},\"1\":{\"219\":1,\"378\":1,\"398\":1,\"399\":1,\"458\":1,\"643\":1,\"947\":1,\"948\":1,\"1040\":1,\"1407\":1}}],[\"11<\",{\"1\":{\"1924\":1}}],[\"111\",{\"1\":{\"623\":1,\"680\":1}}],[\"11\",{\"0\":{\"30\":1,\"475\":1,\"488\":1},\"1\":{\"221\":1,\"222\":1,\"223\":1,\"336\":1,\"378\":1,\"458\":1,\"487\":1,\"780\":1,\"1040\":1,\"1370\":1,\"1457\":1,\"2154\":1}}],[\"1024\",{\"1\":{\"1890\":1,\"1891\":1,\"1938\":1,\"1939\":1}}],[\"101\",{\"1\":{\"1677\":2}}],[\"10年国内外相关文献\",{\"1\":{\"1038\":1}}],[\"100天的随机价格变化\",{\"1\":{\"659\":1}}],[\"100个样本\",{\"1\":{\"565\":2}}],[\"1000000000000l\",{\"1\":{\"1401\":1}}],[\"100000\",{\"1\":{\"1299\":1}}],[\"10000\",{\"1\":{\"447\":1,\"449\":1,\"895\":1}}],[\"1000\",{\"1\":{\"428\":2,\"447\":1,\"449\":1,\"856\":1,\"889\":1,\"1966\":1,\"1970\":1}}],[\"100\",{\"1\":{\"221\":1,\"222\":1,\"223\":1,\"434\":1,\"459\":1,\"460\":1,\"524\":1,\"535\":1,\"555\":5,\"556\":5,\"557\":5,\"558\":5,\"565\":2,\"608\":1,\"659\":2,\"680\":1,\"722\":1,\"726\":1,\"820\":1,\"911\":1,\"927\":1,\"958\":2,\"1202\":2,\"1219\":2,\"1230\":4,\"1292\":1,\"1294\":1,\"1295\":1,\"1308\":1,\"1309\":1,\"1384\":1,\"1394\":4,\"1502\":1,\"1528\":2,\"1705\":2,\"1740\":1,\"1985\":2,\"2022\":2}}],[\"10开始\",{\"1\":{\"202\":1}}],[\"10系统\",{\"0\":{\"99\":1}}],[\"10\",{\"0\":{\"29\":1,\"474\":1,\"487\":1,\"610\":1,\"775\":1,\"816\":1,\"827\":1,\"1506\":1,\"2216\":1},\"1\":{\"143\":2,\"144\":1,\"145\":2,\"146\":3,\"147\":2,\"148\":3,\"160\":1,\"180\":1,\"201\":1,\"206\":1,\"207\":1,\"211\":1,\"223\":1,\"235\":1,\"245\":1,\"378\":1,\"394\":4,\"398\":1,\"399\":1,\"410\":2,\"428\":2,\"434\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"485\":1,\"486\":1,\"487\":2,\"550\":2,\"610\":1,\"624\":4,\"649\":1,\"659\":1,\"661\":1,\"680\":1,\"688\":1,\"700\":1,\"727\":1,\"732\":1,\"738\":2,\"780\":1,\"889\":1,\"903\":1,\"911\":1,\"927\":2,\"958\":4,\"964\":2,\"1040\":1,\"1138\":1,\"1151\":1,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":1,\"1159\":1,\"1163\":1,\"1167\":1,\"1170\":2,\"1174\":2,\"1175\":1,\"1181\":1,\"1183\":1,\"1191\":2,\"1201\":1,\"1203\":1,\"1204\":1,\"1206\":1,\"1209\":1,\"1210\":1,\"1216\":1,\"1219\":3,\"1281\":1,\"1304\":2,\"1321\":1,\"1329\":1,\"1338\":1,\"1346\":1,\"1353\":1,\"1373\":1,\"1376\":1,\"1385\":1,\"1392\":10,\"1445\":1,\"1446\":1,\"1486\":1,\"1545\":1,\"1673\":1,\"1702\":1,\"1703\":1,\"1705\":1,\"1722\":1,\"1730\":1,\"1731\":1,\"1739\":1,\"1764\":1,\"1774\":3,\"1777\":1,\"1801\":1,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1818\":1,\"1820\":1,\"1851\":2,\"1856\":1,\"1898\":1}}],[\"1\",{\"0\":{\"17\":1,\"185\":1,\"193\":1,\"401\":1,\"415\":1,\"422\":1,\"432\":1,\"439\":1,\"444\":1,\"457\":1,\"465\":1,\"478\":1,\"491\":1,\"497\":1,\"509\":1,\"511\":1,\"519\":1,\"520\":1,\"528\":1,\"530\":1,\"538\":1,\"540\":1,\"549\":1,\"555\":1,\"561\":1,\"568\":1,\"577\":1,\"588\":1,\"593\":1,\"601\":1,\"622\":1,\"633\":1,\"640\":1,\"641\":2,\"646\":1,\"654\":1,\"658\":1,\"671\":1,\"686\":1,\"693\":1,\"697\":1,\"706\":1,\"766\":1,\"785\":1,\"794\":1,\"800\":1,\"807\":1,\"818\":1,\"832\":1,\"836\":1,\"869\":1,\"916\":1,\"923\":1,\"1038\":1,\"1084\":1,\"1118\":1,\"1129\":1,\"1130\":2,\"1131\":1,\"1133\":1,\"1138\":1,\"1141\":1,\"1146\":1,\"1159\":1,\"1165\":1,\"1172\":1,\"1181\":1,\"1190\":1,\"1191\":2,\"1192\":1,\"1194\":1,\"1200\":1,\"1201\":2,\"1202\":1,\"1203\":1,\"1204\":1,\"1206\":1,\"1209\":1,\"1215\":1,\"1216\":2,\"1217\":1,\"1218\":1,\"1219\":1,\"1221\":1,\"1224\":1,\"1229\":1,\"1232\":1,\"1264\":1,\"1286\":1,\"1294\":1,\"1301\":1,\"1307\":1,\"1311\":1,\"1320\":1,\"1321\":2,\"1322\":1,\"1324\":1,\"1329\":1,\"1334\":1,\"1335\":2,\"1336\":1,\"1338\":1,\"1341\":1,\"1350\":1,\"1351\":2,\"1352\":1,\"1356\":1,\"1359\":1,\"1362\":1,\"1368\":1,\"1369\":2,\"1370\":1,\"1372\":1,\"1375\":1,\"1381\":1,\"1382\":2,\"1389\":1,\"1390\":2,\"1392\":1,\"1400\":1,\"1401\":2,\"1402\":1,\"1404\":1,\"1410\":1,\"1412\":1,\"1415\":1,\"1421\":1,\"1422\":2,\"1423\":1,\"1425\":1,\"1431\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1443\":1,\"1445\":1,\"1450\":1,\"1468\":1,\"1479\":1,\"1480\":2,\"1481\":1,\"1482\":1,\"1483\":1,\"1485\":1,\"1488\":1,\"1494\":1,\"1497\":1,\"1508\":1,\"1511\":1,\"1518\":1,\"1519\":2,\"1520\":1,\"1522\":1,\"1526\":1,\"1536\":1,\"1538\":1,\"1541\":1,\"1545\":1,\"1552\":1,\"1553\":2,\"1554\":1,\"1556\":1,\"1564\":1,\"1566\":1,\"1573\":1,\"1574\":2,\"1575\":1,\"1577\":1,\"1579\":1,\"1581\":1,\"1583\":1,\"1587\":1,\"1588\":2,\"1589\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1603\":1,\"1604\":2,\"1606\":1,\"1608\":1,\"1610\":1,\"1612\":1,\"1617\":1,\"1619\":1,\"1621\":1,\"1624\":1,\"1626\":1,\"1628\":1,\"1634\":1,\"1636\":1,\"1641\":1,\"1644\":1,\"1647\":1,\"1654\":1,\"1657\":1,\"1665\":1,\"1667\":1,\"1675\":1,\"1685\":1,\"1688\":1,\"1699\":1,\"1702\":1,\"1722\":1,\"1725\":1,\"1730\":1,\"1737\":1,\"1747\":1,\"1750\":1,\"1758\":1,\"1772\":1,\"1782\":1,\"1797\":1,\"1813\":1,\"1817\":1,\"1822\":1,\"1849\":1,\"1851\":1,\"1853\":1,\"1870\":1,\"1873\":1,\"1890\":1,\"1916\":1,\"1920\":1,\"1924\":1,\"1935\":1,\"1938\":1,\"1941\":1,\"1949\":1,\"1961\":1,\"1968\":1,\"1978\":1,\"1989\":1,\"2000\":1,\"2007\":1,\"2009\":1,\"2021\":1,\"2025\":1,\"2030\":1,\"2037\":1,\"2043\":1,\"2151\":1,\"2152\":1,\"2153\":1,\"2154\":1,\"2207\":1},\"1\":{\"22\":2,\"139\":3,\"141\":2,\"142\":3,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":3,\"150\":4,\"151\":3,\"152\":2,\"153\":2,\"154\":3,\"155\":1,\"159\":5,\"160\":3,\"161\":4,\"162\":1,\"163\":3,\"165\":2,\"166\":2,\"172\":1,\"173\":4,\"174\":3,\"176\":3,\"188\":2,\"189\":2,\"190\":3,\"196\":2,\"199\":2,\"203\":1,\"204\":1,\"208\":1,\"211\":1,\"212\":2,\"213\":2,\"214\":2,\"219\":4,\"221\":2,\"222\":2,\"223\":3,\"224\":2,\"225\":2,\"234\":6,\"235\":1,\"238\":2,\"240\":2,\"247\":2,\"253\":1,\"336\":2,\"378\":2,\"384\":8,\"390\":8,\"393\":6,\"394\":1,\"398\":9,\"399\":9,\"403\":1,\"408\":5,\"409\":2,\"410\":4,\"428\":3,\"434\":9,\"445\":3,\"446\":16,\"447\":1,\"448\":1,\"449\":18,\"457\":6,\"458\":4,\"459\":2,\"460\":1,\"480\":2,\"484\":3,\"485\":1,\"486\":3,\"487\":1,\"488\":3,\"489\":6,\"491\":2,\"492\":2,\"494\":1,\"495\":2,\"499\":1,\"502\":1,\"515\":2,\"517\":2,\"543\":2,\"549\":2,\"550\":1,\"551\":2,\"552\":1,\"555\":4,\"556\":2,\"557\":3,\"558\":3,\"565\":2,\"569\":1,\"589\":4,\"590\":2,\"608\":4,\"610\":3,\"619\":1,\"623\":1,\"624\":2,\"625\":2,\"634\":10,\"635\":2,\"636\":2,\"639\":2,\"641\":14,\"642\":4,\"643\":8,\"644\":2,\"659\":5,\"660\":2,\"661\":2,\"680\":1,\"688\":2,\"700\":1,\"722\":1,\"726\":2,\"728\":1,\"731\":1,\"732\":5,\"733\":2,\"737\":1,\"738\":21,\"739\":1,\"780\":1,\"805\":1,\"827\":1,\"852\":2,\"856\":1,\"866\":1,\"875\":1,\"888\":1,\"889\":6,\"894\":2,\"895\":20,\"901\":1,\"903\":7,\"911\":25,\"918\":1,\"919\":1,\"921\":2,\"927\":9,\"935\":2,\"936\":2,\"937\":2,\"941\":2,\"942\":2,\"943\":2,\"944\":2,\"947\":4,\"948\":3,\"954\":5,\"955\":10,\"958\":7,\"959\":13,\"960\":5,\"964\":9,\"965\":8,\"1025\":1,\"1028\":1,\"1038\":1,\"1040\":1,\"1130\":1,\"1133\":2,\"1134\":2,\"1135\":1,\"1136\":1,\"1138\":1,\"1139\":3,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":10,\"1151\":3,\"1152\":2,\"1154\":4,\"1155\":4,\"1156\":1,\"1165\":4,\"1166\":2,\"1167\":2,\"1168\":2,\"1169\":2,\"1170\":2,\"1176\":1,\"1178\":2,\"1201\":1,\"1202\":2,\"1203\":1,\"1209\":5,\"1210\":1,\"1217\":1,\"1218\":1,\"1221\":3,\"1222\":1,\"1224\":1,\"1226\":2,\"1227\":2,\"1229\":1,\"1230\":5,\"1232\":1,\"1276\":1,\"1286\":2,\"1297\":1,\"1322\":1,\"1325\":1,\"1331\":2,\"1345\":3,\"1352\":1,\"1353\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1359\":2,\"1360\":1,\"1362\":1,\"1363\":2,\"1364\":1,\"1365\":1,\"1395\":2,\"1401\":1,\"1402\":1,\"1406\":1,\"1425\":1,\"1433\":1,\"1436\":1,\"1437\":1,\"1523\":1,\"1722\":1,\"1723\":2,\"1728\":1,\"1737\":1,\"1740\":2,\"1745\":1,\"1748\":2,\"1751\":2,\"1773\":2,\"1785\":1,\"1800\":1,\"1818\":1,\"1820\":3,\"1855\":1,\"1857\":1,\"1858\":2,\"1870\":1,\"1878\":1,\"1880\":1,\"1883\":1,\"1921\":1,\"1925\":1,\"1947\":2,\"1956\":1,\"1963\":1,\"1966\":1,\"1984\":1,\"1985\":1,\"1986\":1,\"1992\":1,\"2000\":1,\"2001\":1,\"2027\":1,\"2154\":3,\"2162\":1,\"2163\":1}}],[\"1️⃣\",{\"1\":{\"12\":2,\"2153\":1}}],[\"⛅\",{\"1\":{\"13\":2}}],[\"⚡\",{\"1\":{\"13\":2}}],[\"⛄\",{\"1\":{\"13\":2}}],[\"❄️\",{\"1\":{\"13\":2}}],[\"☁️\",{\"1\":{\"13\":2}}],[\"☔\",{\"1\":{\"13\":2}}],[\"☀️\",{\"1\":{\"13\":2}}],[\"⚪\",{\"1\":{\"12\":2}}],[\"⚫\",{\"1\":{\"12\":2}}],[\"✅\",{\"1\":{\"12\":2}}],[\"⬜\",{\"1\":{\"12\":2}}],[\"⬛\",{\"1\":{\"12\":2}}],[\"◻️\",{\"1\":{\"12\":2}}],[\"◼️\",{\"1\":{\"12\":2}}],[\"◽\",{\"1\":{\"12\":2}}],[\"◾\",{\"1\":{\"12\":2}}],[\"▫️\",{\"1\":{\"12\":2}}],[\"▪️\",{\"1\":{\"12\":2}}],[\"➰\",{\"1\":{\"12\":2}}],[\"☑️\",{\"1\":{\"12\":2}}],[\"✔️\",{\"1\":{\"12\":2}}],[\"➗\",{\"1\":{\"12\":2}}],[\"➖\",{\"1\":{\"12\":2}}],[\"➕\",{\"1\":{\"12\":2}}],[\"✖️\",{\"1\":{\"12\":2}}],[\"⭕\",{\"1\":{\"12\":2}}],[\"️\",{\"1\":{\"12\":8}}],[\"️⃣\",{\"1\":{\"12\":2}}],[\"❌\",{\"1\":{\"12\":2}}],[\"™️\",{\"1\":{\"12\":2}}],[\"®️\",{\"1\":{\"12\":2}}],[\"©️\",{\"1\":{\"12\":2}}],[\"♻️\",{\"1\":{\"12\":2}}],[\"❎\",{\"1\":{\"12\":2}}],[\"⛎\",{\"1\":{\"12\":2}}],[\"♓\",{\"1\":{\"12\":2}}],[\"♒\",{\"1\":{\"12\":2}}],[\"♑\",{\"1\":{\"12\":2}}],[\"♐\",{\"1\":{\"12\":2}}],[\"♏\",{\"1\":{\"12\":2}}],[\"♎\",{\"1\":{\"12\":2}}],[\"♍\",{\"1\":{\"12\":2}}],[\"♌\",{\"1\":{\"12\":2}}],[\"♋\",{\"1\":{\"12\":2}}],[\"♊\",{\"1\":{\"12\":2}}],[\"♉\",{\"1\":{\"12\":2}}],[\"♈\",{\"1\":{\"12\":2}}],[\"✴️\",{\"1\":{\"12\":2}}],[\"❇️\",{\"1\":{\"12\":2}}],[\"✳️\",{\"1\":{\"12\":2}}],[\"⛔\",{\"1\":{\"12\":2}}],[\"ⓜ️\",{\"1\":{\"12\":2}}],[\"㊗️\",{\"1\":{\"12\":2}}],[\"㊙️\",{\"1\":{\"12\":2}}],[\"♿\",{\"1\":{\"12\":2}}],[\"ℹ️\",{\"1\":{\"12\":2}}],[\"⏩\",{\"1\":{\"12\":2}}],[\"⏪\",{\"1\":{\"12\":2}}],[\"↕️\",{\"1\":{\"12\":2}}],[\"↔️\",{\"1\":{\"12\":2}}],[\"↪️\",{\"1\":{\"12\":2}}],[\"↩️\",{\"1\":{\"12\":2}}],[\"⤴️\",{\"1\":{\"12\":2}}],[\"⤵️\",{\"1\":{\"12\":2}}],[\"⏫\",{\"1\":{\"12\":2}}],[\"⏬\",{\"1\":{\"12\":2}}],[\"↗️\",{\"1\":{\"12\":2}}],[\"↖️\",{\"1\":{\"12\":2}}],[\"⬆️\",{\"1\":{\"12\":2}}],[\"➡️\",{\"1\":{\"12\":2}}],[\"↘️\",{\"1\":{\"12\":2}}],[\"↙️\",{\"1\":{\"12\":2}}],[\"⬅️\",{\"1\":{\"12\":2}}],[\"▶️\",{\"1\":{\"12\":2}}],[\"⬇️\",{\"1\":{\"12\":2}}],[\"◀️\",{\"1\":{\"12\":2}}],[\"🪲\",{\"1\":{\"13\":2}}],[\"🥚\",{\"1\":{\"11\":2}}],[\"🤘\",{\"1\":{\"9\":2}}],[\"☕\",{\"1\":{\"11\":2}}],[\"♦️\",{\"1\":{\"11\":2}}],[\"♣️\",{\"1\":{\"11\":2}}],[\"♥️\",{\"1\":{\"11\":2}}],[\"♠️\",{\"1\":{\"11\":2}}],[\"⛳\",{\"1\":{\"11\":2}}],[\"⚾\",{\"1\":{\"11\":2}}],[\"⚽\",{\"1\":{\"11\":2}}],[\"✏️\",{\"1\":{\"11\":2}}],[\"✒️\",{\"1\":{\"11\":2}}],[\"✂️\",{\"1\":{\"11\":2}}],[\"✉️\",{\"1\":{\"11\":2}}],[\"➿\",{\"1\":{\"11\":2}}],[\"⌚\",{\"1\":{\"11\":2}}],[\"⏰\",{\"1\":{\"11\":2}}],[\"⏳\",{\"1\":{\"11\":2}}],[\"⌛\",{\"1\":{\"11\":2}}],[\"☎️\",{\"1\":{\"11\":4}}],[\"♨️\",{\"1\":{\"10\":2}}],[\"⚠️\",{\"1\":{\"10\":2}}],[\"⛽\",{\"1\":{\"10\":2}}],[\"✈️\",{\"1\":{\"10\":2}}],[\"⚓\",{\"1\":{\"10\":2}}],[\"⛵\",{\"1\":{\"10\":4}}],[\"⛲\",{\"1\":{\"10\":2}}],[\"⛺\",{\"1\":{\"10\":2}}],[\"⛪\",{\"1\":{\"10\":2}}],[\"ftp\",{\"1\":{\"1940\":1}}],[\"fclose\",{\"1\":{\"1192\":1,\"1195\":1,\"1196\":2}}],[\"fgetl\",{\"1\":{\"1192\":1}}],[\"fgets\",{\"1\":{\"1192\":1}}],[\"fscanf\",{\"1\":{\"1192\":2,\"1196\":1}}],[\"f2​\",{\"1\":{\"842\":1}}],[\"fprintf\",{\"1\":{\"726\":3,\"732\":4,\"1194\":2,\"1195\":2,\"1196\":1}}],[\"fval\",{\"1\":{\"726\":2,\"732\":2,\"738\":2}}],[\"ffnn\",{\"0\":{\"654\":1},\"1\":{\"653\":1}}],[\"friday\",{\"1\":{\"1494\":1,\"1604\":1,\"1606\":1,\"1608\":1,\"1610\":1,\"1612\":1}}],[\"fruit\",{\"1\":{\"1162\":3,\"1748\":2,\"1751\":2,\"1754\":2,\"1792\":6}}],[\"fragment\",{\"1\":{\"1941\":1}}],[\"frac\",{\"1\":{\"634\":1,\"851\":3}}],[\"framework\",{\"1\":{\"1681\":1,\"1780\":1}}],[\"frames=2\",{\"1\":{\"624\":1}}],[\"frame+1\",{\"1\":{\"624\":2}}],[\"frame\",{\"1\":{\"624\":3,\"2022\":7,\"2027\":8,\"2028\":10}}],[\"frontalface\",{\"1\":{\"827\":1}}],[\"from\",{\"1\":{\"133\":1,\"217\":1,\"229\":1,\"384\":1,\"460\":1,\"479\":1,\"481\":1,\"482\":1,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"489\":1,\"497\":4,\"498\":1,\"499\":1,\"500\":1,\"501\":3,\"502\":1,\"503\":1,\"517\":2,\"524\":4,\"535\":5,\"543\":2,\"549\":2,\"550\":2,\"551\":3,\"552\":2,\"569\":4,\"571\":4,\"577\":4,\"578\":4,\"579\":4,\"580\":4,\"581\":4,\"588\":4,\"589\":4,\"590\":2,\"601\":4,\"602\":4,\"603\":4,\"604\":4,\"605\":4,\"606\":4,\"607\":4,\"608\":9,\"609\":7,\"610\":3,\"619\":2,\"622\":3,\"658\":3,\"680\":1,\"700\":1,\"722\":1,\"801\":1,\"802\":1,\"805\":1,\"821\":1,\"822\":1,\"852\":1,\"856\":2,\"916\":1,\"917\":1,\"918\":1,\"919\":1,\"920\":1,\"921\":1,\"923\":1,\"924\":1,\"925\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"943\":1,\"944\":1,\"1509\":2,\"1619\":1,\"1624\":1,\"1762\":1,\"1766\":1,\"1890\":1,\"1981\":1,\"1982\":1,\"1984\":1}}],[\"frowning\",{\"1\":{\"9\":2}}],[\"flies\",{\"1\":{\"1709\":1}}],[\"flip\",{\"1\":{\"1883\":1,\"1885\":1,\"1890\":1,\"1891\":1}}],[\"flipud\",{\"1\":{\"803\":1}}],[\"flipped\",{\"1\":{\"803\":3}}],[\"fly\",{\"1\":{\"1709\":2}}],[\"flyable\",{\"1\":{\"1709\":2}}],[\"flags\",{\"0\":{\"1953\":1},\"1\":{\"1951\":1}}],[\"flag\",{\"1\":{\"1292\":1}}],[\"flatten\",{\"1\":{\"610\":1,\"661\":1}}],[\"flexiblesum\",{\"1\":{\"1178\":2}}],[\"floor函数\",{\"1\":{\"689\":1}}],[\"floor\",{\"1\":{\"688\":2}}],[\"flowlayoutexample\",{\"1\":{\"2027\":1}}],[\"flowlayout\",{\"1\":{\"2026\":1,\"2027\":4}}],[\"flow\",{\"1\":{\"395\":1,\"396\":3,\"398\":13,\"399\":13}}],[\"floydwarshall\",{\"1\":{\"960\":2}}],[\"floyd\",{\"0\":{\"960\":1},\"1\":{\"392\":1,\"957\":1}}],[\"floatbuffer\",{\"1\":{\"1884\":1}}],[\"floatobj\",{\"1\":{\"1705\":2}}],[\"float等\",{\"1\":{\"1387\":1}}],[\"float强制转换为long\",{\"1\":{\"1295\":1}}],[\"float自动转换为double\",{\"1\":{\"1294\":1}}],[\"floatvalue\",{\"1\":{\"1382\":1,\"1384\":1,\"1704\":1}}],[\"floatval\",{\"1\":{\"1294\":2,\"1295\":2}}],[\"floating\",{\"0\":{\"1287\":1}}],[\"float32\",{\"1\":{\"610\":2,\"826\":1}}],[\"float\",{\"1\":{\"137\":1,\"185\":2,\"186\":7,\"187\":2,\"410\":1,\"1287\":1,\"1294\":2,\"1295\":2,\"1380\":1,\"1383\":1,\"1384\":1,\"1696\":3,\"1705\":3}}],[\"f1000workspace\",{\"1\":{\"1080\":1}}],[\"f1000\",{\"0\":{\"1080\":1}}],[\"f1\",{\"1\":{\"582\":2}}],[\"fedora\",{\"1\":{\"1102\":1}}],[\"feature\",{\"1\":{\"528\":1,\"589\":1,\"659\":1}}],[\"features=3\",{\"1\":{\"623\":1}}],[\"features\",{\"1\":{\"446\":1,\"659\":1}}],[\"female\",{\"1\":{\"481\":2}}],[\"feedforward\",{\"0\":{\"654\":1},\"1\":{\"441\":1,\"653\":1}}],[\"fnn\",{\"1\":{\"441\":1}}],[\"future2\",{\"1\":{\"1963\":3}}],[\"future1\",{\"1\":{\"1963\":3}}],[\"future<integer>\",{\"1\":{\"1963\":2}}],[\"future\",{\"1\":{\"1960\":1,\"1963\":1}}],[\"fun\",{\"1\":{\"384\":1,\"722\":1,\"1954\":1}}],[\"funcanimation\",{\"1\":{\"624\":1,\"626\":1}}],[\"func\",{\"1\":{\"226\":2,\"943\":3,\"1990\":2}}],[\"functools\",{\"1\":{\"217\":2}}],[\"function<string\",{\"1\":{\"1691\":1}}],[\"function<t\",{\"1\":{\"1691\":1}}],[\"functiontests\",{\"1\":{\"1185\":1}}],[\"functionname\",{\"1\":{\"1172\":1}}],[\"functionalinterface注解来标识函数式接口\",{\"1\":{\"1990\":1}}],[\"functionalinterface\",{\"1\":{\"1686\":1,\"1843\":2,\"1990\":1}}],[\"functional\",{\"1\":{\"247\":1}}],[\"function\",{\"1\":{\"214\":4,\"216\":9,\"226\":4,\"398\":2,\"399\":2,\"428\":3,\"429\":1,\"432\":1,\"434\":5,\"435\":1,\"440\":2,\"489\":1,\"715\":1,\"923\":2,\"958\":1,\"959\":1,\"960\":1,\"964\":3,\"965\":1,\"1127\":1,\"1172\":2,\"1173\":1,\"1174\":1,\"1175\":2,\"1178\":1,\"1179\":1,\"1182\":1,\"1183\":2,\"1185\":2,\"1186\":1,\"1691\":1,\"1990\":1}}],[\"fulkerson算法的一个实现\",{\"1\":{\"399\":1}}],[\"fulkerson算法的实现之一\",{\"1\":{\"397\":1}}],[\"fulkerson算法\",{\"0\":{\"398\":1},\"1\":{\"382\":1,\"397\":1,\"398\":1}}],[\"full\",{\"1\":{\"248\":6,\"1102\":2}}],[\"f\",{\"1\":{\"210\":1,\"211\":2,\"242\":3,\"243\":2,\"246\":1,\"248\":3,\"261\":1,\"262\":2,\"378\":5,\"384\":2,\"396\":2,\"409\":1,\"423\":2,\"427\":2,\"428\":30,\"429\":1,\"434\":4,\"435\":1,\"447\":1,\"448\":1,\"449\":2,\"460\":2,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"483\":6,\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"497\":2,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"610\":1,\"619\":1,\"624\":1,\"700\":2,\"722\":3,\"726\":2,\"732\":2,\"738\":2,\"740\":1,\"832\":1,\"837\":1,\"863\":1,\"880\":1,\"881\":1,\"884\":1,\"892\":1,\"917\":2,\"918\":1,\"919\":1,\"920\":1,\"921\":4,\"923\":1,\"924\":5,\"925\":5,\"935\":2,\"1144\":1,\"1176\":2,\"1177\":2,\"1192\":1,\"1194\":1,\"1195\":1,\"1196\":2,\"1224\":1,\"1225\":2,\"1226\":3,\"1292\":1}}],[\"fox\",{\"1\":{\"2048\":1}}],[\"food\",{\"1\":{\"1511\":1,\"1554\":2}}],[\"fos\",{\"1\":{\"1436\":2,\"1871\":2}}],[\"fopen\",{\"1\":{\"1192\":2,\"1195\":2,\"1196\":2}}],[\"fotor\",{\"1\":{\"796\":1}}],[\"fourier\",{\"1\":{\"925\":5}}],[\"fourth\",{\"1\":{\"153\":2}}],[\"foundation\",{\"1\":{\"2020\":1}}],[\"found\",{\"1\":{\"202\":2,\"398\":4,\"399\":4,\"1416\":1,\"2048\":1,\"2284\":1}}],[\"for循环\",{\"1\":{\"2159\":1}}],[\"for循环通常用于当循环次数已知时\",{\"1\":{\"1324\":1}}],[\"forward\",{\"1\":{\"1823\":1}}],[\"fortress\",{\"1\":{\"1655\":1}}],[\"forname\",{\"1\":{\"1636\":1,\"1639\":1,\"1651\":1,\"1827\":2,\"1978\":2}}],[\"foreach\",{\"1\":{\"1692\":1,\"1820\":2,\"1991\":1}}],[\"forecast\",{\"1\":{\"488\":4}}],[\"forest\",{\"0\":{\"580\":1,\"604\":1},\"1\":{\"391\":1,\"530\":1,\"531\":1,\"580\":1,\"593\":1,\"597\":1,\"604\":1}}],[\"force\",{\"1\":{\"410\":3}}],[\"fordfulkerson\",{\"1\":{\"398\":2}}],[\"ford\",{\"0\":{\"398\":1,\"403\":1},\"1\":{\"397\":2,\"398\":1,\"403\":1,\"405\":1,\"406\":2}}],[\"ford算法\",{\"0\":{\"959\":1},\"1\":{\"392\":1,\"957\":1}}],[\"formatfield\",{\"1\":{\"1655\":5}}],[\"format=\",{\"1\":{\"1654\":1}}],[\"formatted\",{\"1\":{\"1407\":1,\"2047\":1}}],[\"formatteddatetime\",{\"1\":{\"2047\":2}}],[\"formatteddate\",{\"1\":{\"1407\":2}}],[\"formatter\",{\"1\":{\"1407\":3,\"2047\":2}}],[\"format\",{\"1\":{\"216\":1,\"927\":1,\"1407\":2,\"1654\":8,\"1655\":3,\"1675\":1,\"1677\":1,\"2047\":2}}],[\"for\",{\"0\":{\"204\":1,\"1325\":1},\"1\":{\"133\":1,\"148\":1,\"163\":1,\"173\":1,\"176\":1,\"204\":3,\"206\":1,\"207\":1,\"208\":2,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"242\":1,\"243\":1,\"252\":1,\"257\":1,\"259\":1,\"398\":1,\"399\":1,\"408\":2,\"409\":13,\"410\":2,\"428\":3,\"434\":4,\"447\":1,\"448\":1,\"449\":2,\"641\":1,\"642\":1,\"649\":1,\"659\":1,\"680\":2,\"688\":2,\"700\":3,\"738\":3,\"754\":1,\"827\":1,\"889\":3,\"895\":1,\"903\":3,\"911\":2,\"927\":2,\"958\":1,\"959\":5,\"960\":3,\"964\":3,\"965\":3,\"1165\":4,\"1166\":1,\"1167\":1,\"1168\":1,\"1169\":2,\"1170\":1,\"1178\":1,\"1324\":1,\"1325\":1,\"1329\":1,\"1330\":1,\"1331\":2,\"1332\":1,\"1339\":1,\"1356\":1,\"1357\":1,\"1360\":2,\"1542\":1,\"1608\":1,\"1610\":1,\"1612\":1,\"1661\":1,\"1754\":1,\"1786\":1,\"1788\":1,\"1790\":1,\"1801\":2,\"1803\":1,\"1805\":1,\"1807\":1,\"1809\":1,\"1815\":4,\"1831\":3,\"1839\":1,\"1865\":1,\"1914\":1,\"1923\":1,\"1933\":1,\"1961\":1,\"1962\":1,\"1963\":1,\"1966\":1}}],[\"fatal\",{\"1\":{\"1922\":2}}],[\"failed\",{\"1\":{\"1439\":1}}],[\"fair\",{\"1\":{\"797\":1}}],[\"faster\",{\"0\":{\"405\":1}}],[\"facade\",{\"1\":{\"1914\":2,\"1923\":1}}],[\"factored\",{\"1\":{\"917\":3}}],[\"factorization\",{\"1\":{\"599\":1}}],[\"factorial\",{\"1\":{\"213\":3,\"1345\":2}}],[\"factor\",{\"1\":{\"215\":2,\"599\":1,\"917\":2,\"947\":7,\"948\":3,\"1183\":2}}],[\"faces\",{\"1\":{\"827\":3}}],[\"facebook\",{\"1\":{\"797\":1}}],[\"face\",{\"1\":{\"9\":2,\"827\":2}}],[\"false\",{\"1\":{\"133\":1,\"139\":7,\"172\":1,\"195\":2,\"398\":2,\"399\":2,\"409\":4,\"958\":1,\"965\":1,\"1289\":1,\"1302\":1,\"1370\":1,\"1661\":2,\"1668\":1,\"1671\":1,\"1676\":2,\"1677\":3,\"1759\":1,\"1773\":1,\"1887\":1,\"1890\":1,\"1985\":2}}],[\"fixed\",{\"1\":{\"1855\":1}}],[\"fibonaccigenerator\",{\"1\":{\"1818\":4}}],[\"fifo\",{\"1\":{\"1727\":1,\"1750\":1,\"1756\":1,\"1758\":1}}],[\"fiction\",{\"1\":{\"1654\":2,\"1655\":1}}],[\"fis\",{\"1\":{\"1436\":2,\"1870\":2}}],[\"fisher\",{\"0\":{\"927\":1},\"1\":{\"927\":3}}],[\"fish\",{\"1\":{\"420\":1,\"1514\":2}}],[\"fields\",{\"1\":{\"1831\":1}}],[\"field\",{\"1\":{\"1151\":1,\"1152\":1,\"1402\":3,\"1588\":4,\"1591\":4,\"1641\":3,\"1642\":2,\"1651\":7,\"1655\":2,\"1826\":1,\"1829\":5,\"1831\":4,\"1845\":1}}],[\"fig\",{\"1\":{\"623\":2,\"624\":2,\"680\":2,\"688\":1}}],[\"figsize=\",{\"1\":{\"550\":2,\"569\":1,\"590\":1,\"661\":1,\"947\":1,\"948\":1}}],[\"figure1\",{\"1\":{\"1211\":2}}],[\"figure\",{\"1\":{\"550\":2,\"555\":1,\"556\":2,\"557\":1,\"558\":1,\"569\":1,\"590\":1,\"623\":1,\"661\":1,\"680\":1,\"947\":1,\"948\":1,\"955\":1,\"1207\":1}}],[\"fitting\",{\"1\":{\"939\":4,\"942\":1,\"943\":1,\"944\":1,\"948\":2}}],[\"fitgmdist\",{\"1\":{\"558\":1}}],[\"fit\",{\"1\":{\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":3,\"489\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":2,\"502\":1,\"503\":1,\"517\":1,\"524\":1,\"535\":2,\"543\":1,\"549\":1,\"550\":1,\"551\":2,\"552\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":2,\"590\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":3,\"609\":2,\"610\":1,\"619\":2,\"659\":1,\"660\":1,\"941\":2,\"943\":2}}],[\"fitness\",{\"1\":{\"432\":1,\"434\":18,\"435\":1}}],[\"filtered\",{\"1\":{\"809\":2}}],[\"filters\",{\"1\":{\"802\":2}}],[\"filter\",{\"0\":{\"2087\":1},\"1\":{\"801\":1,\"1692\":1,\"1992\":1},\"2\":{\"2089\":1}}],[\"filtering\",{\"1\":{\"599\":2}}],[\"fillna\",{\"1\":{\"458\":1}}],[\"filechannelexample\",{\"1\":{\"1883\":1}}],[\"filechannel\",{\"1\":{\"1882\":1,\"1883\":6}}],[\"files等类\",{\"1\":{\"1441\":1}}],[\"files\",{\"1\":{\"1440\":4}}],[\"fileexample\",{\"1\":{\"1439\":1}}],[\"file类用于表示文件和目录\",{\"1\":{\"1439\":1}}],[\"fileoutputstream\",{\"1\":{\"1436\":4,\"1437\":2,\"1863\":1,\"1868\":1,\"1871\":4,\"1875\":1,\"1876\":1,\"2039\":1}}],[\"fileinputoutputstreamexample\",{\"1\":{\"1436\":1}}],[\"fileinputstream\",{\"1\":{\"1436\":4,\"1437\":2,\"1863\":1,\"1868\":1,\"1870\":4,\"1875\":1,\"1876\":1,\"2039\":1}}],[\"fileid\",{\"1\":{\"1192\":3,\"1195\":3,\"1196\":6}}],[\"filewriter\",{\"1\":{\"1433\":4,\"1434\":2,\"1874\":3,\"1875\":1,\"2039\":2}}],[\"filereaderwriterexample\",{\"1\":{\"1433\":1}}],[\"filereader\",{\"1\":{\"1433\":4,\"1434\":2,\"1873\":3,\"1875\":1,\"2039\":2}}],[\"file\",{\"1\":{\"251\":2,\"252\":4,\"253\":4,\"254\":3,\"255\":2,\"259\":2,\"1439\":16,\"1440\":3,\"1441\":1,\"1877\":1,\"1883\":3,\"2039\":1}}],[\"five\",{\"1\":{\"214\":2}}],[\"firstelement\",{\"1\":{\"1353\":1}}],[\"first\",{\"1\":{\"142\":1,\"151\":1,\"153\":2,\"248\":10,\"998\":1,\"1722\":1,\"1738\":1,\"1740\":1,\"1756\":2,\"1770\":1,\"2000\":1}}],[\"fire\",{\"0\":{\"74\":1}}],[\"finest\",{\"1\":{\"1917\":1,\"1918\":2}}],[\"finer\",{\"1\":{\"1917\":1,\"1918\":2}}],[\"fine\",{\"1\":{\"1917\":1,\"1918\":2}}],[\"finite\",{\"1\":{\"893\":1,\"902\":1,\"910\":1}}],[\"findbyid\",{\"1\":{\"1858\":1}}],[\"find\",{\"1\":{\"738\":1,\"964\":6,\"1416\":2,\"1949\":1,\"1951\":1,\"1954\":1,\"1956\":1,\"2048\":1}}],[\"findx7\",{\"1\":{\"69\":1,\"77\":1}}],[\"finalize\",{\"1\":{\"1672\":5,\"1678\":1}}],[\"finalmethod\",{\"1\":{\"1486\":1}}],[\"finalfield\",{\"1\":{\"1486\":1}}],[\"finalclass\",{\"1\":{\"1486\":1}}],[\"final\",{\"1\":{\"448\":1,\"449\":1,\"1277\":1,\"1292\":5,\"1308\":4,\"1309\":2,\"1347\":1,\"1486\":3,\"1495\":3,\"1502\":3,\"1548\":1,\"1558\":1,\"1574\":1,\"1608\":1,\"1612\":1,\"1670\":1,\"1673\":5,\"1843\":1,\"1862\":1,\"1863\":1,\"1864\":1,\"1918\":1,\"1922\":1,\"1926\":1,\"1969\":1,\"2009\":1,\"2013\":1}}],[\"finallyexample\",{\"1\":{\"1446\":1,\"1903\":1}}],[\"finally块中的代码无论是否发生异常都会执行\",{\"1\":{\"1446\":1}}],[\"finally\",{\"1\":{\"133\":1,\"1446\":1,\"1453\":1,\"1672\":1,\"1897\":1,\"1898\":3,\"1899\":1,\"1900\":1,\"1903\":4,\"1904\":1,\"1910\":1,\"1911\":1,\"1969\":1,\"1983\":1}}],[\"php\",{\"0\":{\"2138\":1},\"2\":{\"2139\":1,\"2140\":1}}],[\"photoshop\",{\"1\":{\"794\":1,\"795\":1}}],[\"pkgclass\",{\"1\":{\"1624\":2}}],[\"pugh\",{\"0\":{\"2013\":1}}],[\"pushes\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"push\",{\"1\":{\"1730\":2,\"1773\":1,\"1774\":3,\"1777\":3,\"1778\":2}}],[\"put\",{\"1\":{\"1728\":4,\"1732\":2,\"1740\":6,\"1767\":1,\"1768\":3,\"1798\":1,\"1800\":1,\"1801\":4,\"1803\":3,\"1804\":1,\"1805\":3,\"1807\":3,\"1809\":3,\"1890\":1}}],[\"puppy\",{\"1\":{\"1291\":1}}],[\"publication\",{\"1\":{\"1661\":1,\"1663\":2}}],[\"publicationyear\",{\"1\":{\"1661\":9}}],[\"publicmethod\",{\"1\":{\"1480\":1}}],[\"publicfield\",{\"1\":{\"1480\":1}}],[\"public\",{\"1\":{\"1274\":2,\"1275\":1,\"1277\":1,\"1283\":1,\"1292\":2,\"1301\":1,\"1302\":2,\"1303\":2,\"1305\":1,\"1307\":4,\"1309\":2,\"1335\":3,\"1336\":2,\"1338\":1,\"1339\":1,\"1341\":1,\"1342\":1,\"1343\":4,\"1344\":2,\"1345\":1,\"1346\":1,\"1370\":2,\"1373\":2,\"1376\":2,\"1384\":2,\"1392\":2,\"1393\":2,\"1394\":2,\"1395\":2,\"1396\":2,\"1401\":2,\"1402\":2,\"1404\":2,\"1405\":2,\"1406\":2,\"1407\":2,\"1416\":2,\"1418\":2,\"1422\":2,\"1425\":2,\"1427\":2,\"1428\":2,\"1433\":2,\"1434\":2,\"1436\":2,\"1437\":2,\"1439\":2,\"1440\":2,\"1445\":2,\"1446\":2,\"1447\":3,\"1448\":4,\"1471\":4,\"1474\":1,\"1477\":4,\"1480\":3,\"1481\":1,\"1483\":1,\"1485\":2,\"1486\":3,\"1488\":2,\"1489\":1,\"1490\":1,\"1491\":1,\"1492\":1,\"1494\":1,\"1495\":1,\"1497\":1,\"1498\":1,\"1499\":1,\"1500\":3,\"1501\":1,\"1502\":4,\"1503\":4,\"1504\":4,\"1505\":3,\"1506\":3,\"1511\":2,\"1512\":2,\"1513\":2,\"1514\":2,\"1515\":1,\"1516\":2,\"1519\":2,\"1520\":2,\"1523\":2,\"1528\":2,\"1530\":2,\"1533\":4,\"1536\":2,\"1541\":2,\"1545\":2,\"1546\":3,\"1547\":3,\"1548\":4,\"1554\":2,\"1556\":1,\"1557\":4,\"1558\":1,\"1561\":3,\"1564\":1,\"1567\":1,\"1568\":8,\"1574\":2,\"1577\":2,\"1579\":3,\"1581\":2,\"1583\":4,\"1588\":2,\"1591\":2,\"1594\":2,\"1597\":3,\"1606\":2,\"1608\":3,\"1610\":2,\"1612\":3,\"1619\":2,\"1621\":2,\"1622\":2,\"1623\":1,\"1624\":2,\"1651\":2,\"1654\":17,\"1655\":2,\"1659\":1,\"1661\":16,\"1667\":6,\"1668\":4,\"1669\":3,\"1670\":3,\"1671\":3,\"1673\":6,\"1675\":1,\"1676\":3,\"1677\":6,\"1680\":14,\"1682\":9,\"1705\":2,\"1709\":23,\"1711\":3,\"1712\":1,\"1713\":3,\"1714\":6,\"1748\":2,\"1751\":2,\"1754\":2,\"1762\":2,\"1764\":2,\"1766\":2,\"1768\":2,\"1774\":2,\"1777\":2,\"1786\":2,\"1788\":2,\"1790\":2,\"1792\":2,\"1801\":2,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1814\":2,\"1818\":5,\"1820\":2,\"1823\":2,\"1831\":5,\"1836\":4,\"1838\":1,\"1839\":1,\"1843\":5,\"1844\":3,\"1846\":2,\"1862\":1,\"1863\":5,\"1864\":1,\"1865\":5,\"1870\":2,\"1871\":2,\"1873\":2,\"1874\":2,\"1876\":4,\"1883\":2,\"1890\":2,\"1891\":2,\"1898\":2,\"1901\":2,\"1903\":2,\"1906\":3,\"1908\":3,\"1909\":3,\"1918\":2,\"1922\":2,\"1926\":2,\"1933\":2,\"1935\":2,\"1936\":2,\"1938\":2,\"1939\":2,\"1941\":2,\"1942\":2,\"1949\":2,\"1950\":2,\"1952\":2,\"1954\":2,\"1956\":2,\"1961\":3,\"1962\":3,\"1963\":3,\"1966\":3,\"1968\":4,\"1969\":2,\"1970\":4,\"1993\":2,\"1996\":2,\"2000\":3,\"2001\":1,\"2009\":2,\"2010\":2,\"2011\":2,\"2012\":2,\"2013\":2,\"2014\":2,\"2022\":3,\"2027\":2,\"2028\":2,\"2031\":1,\"2033\":3,\"2047\":2,\"2048\":2}}],[\"pulp\",{\"1\":{\"700\":1}}],[\"png\",{\"1\":{\"1211\":3}}],[\"pwd\",{\"1\":{\"1126\":1}}],[\"pc\",{\"1\":{\"1265\":1}}],[\"pcov\",{\"1\":{\"943\":1}}],[\"pca\",{\"0\":{\"616\":1,\"617\":1,\"619\":1},\"1\":{\"487\":4,\"541\":1,\"586\":1,\"590\":8,\"594\":1,\"614\":1,\"615\":2,\"617\":3,\"618\":1,\"619\":8,\"620\":2,\"622\":1,\"624\":1,\"625\":5}}],[\"p3​=1\",{\"1\":{\"875\":1}}],[\"p0​=100\",{\"1\":{\"875\":1}}],[\"pt+1​=1\",{\"1\":{\"875\":1}}],[\"pt+1​=pt​+rpt​\",{\"1\":{\"869\":1}}],[\"pt​\",{\"1\":{\"869\":1,\"873\":1}}],[\"pm\",{\"1\":{\"856\":3}}],[\"px∈x​\",{\"1\":{\"832\":1}}],[\"p=next\",{\"1\":{\"649\":1}}],[\"p=probabilities\",{\"1\":{\"434\":1}}],[\"ppo\",{\"1\":{\"596\":1}}],[\"pear\",{\"1\":{\"1792\":1}}],[\"pearson\",{\"1\":{\"482\":1}}],[\"pearsonr\",{\"1\":{\"482\":2}}],[\"peek\",{\"1\":{\"1759\":1,\"1762\":2,\"1766\":1,\"1773\":1,\"1774\":1,\"1777\":1,\"1778\":2}}],[\"perform\",{\"1\":{\"2000\":1}}],[\"period\",{\"1\":{\"1406\":8,\"2041\":1}}],[\"perimeter\",{\"1\":{\"816\":1}}],[\"permsize等\",{\"1\":{\"1267\":1}}],[\"permutations\",{\"1\":{\"410\":1}}],[\"person1\",{\"1\":{\"1671\":3}}],[\"person2\",{\"1\":{\"168\":1,\"1671\":2}}],[\"person\",{\"1\":{\"9\":6,\"168\":1,\"169\":3,\"170\":2,\"171\":6,\"172\":6,\"211\":2,\"242\":4,\"248\":5,\"1302\":1,\"1303\":2,\"1505\":2,\"1506\":2,\"1568\":12,\"1667\":7,\"1668\":6,\"1669\":1,\"1671\":5,\"1675\":1,\"1676\":6,\"1680\":6,\"1682\":12,\"1876\":11}}],[\"pso\",{\"1\":{\"420\":1}}],[\"p\",{\"1\":{\"384\":4,\"423\":1,\"460\":1,\"479\":3,\"481\":3,\"483\":3,\"564\":4,\"646\":2,\"649\":11,\"650\":1,\"699\":1,\"933\":1,\"941\":1,\"1173\":2}}],[\"p2​=1\",{\"1\":{\"875\":1}}],[\"p2​\",{\"1\":{\"384\":1}}],[\"p1​=1\",{\"1\":{\"875\":1}}],[\"p1​\",{\"1\":{\"384\":1}}],[\"please\",{\"1\":{\"1428\":1}}],[\"plus\",{\"1\":{\"1406\":2}}],[\"platform\",{\"1\":{\"1258\":3}}],[\"plate\",{\"1\":{\"699\":2,\"700\":3}}],[\"players\",{\"1\":{\"745\":1}}],[\"plot3\",{\"1\":{\"1206\":2}}],[\"plot\",{\"1\":{\"240\":2,\"393\":2,\"428\":1,\"459\":2,\"460\":1,\"489\":1,\"555\":1,\"557\":1,\"558\":1,\"643\":2,\"661\":2,\"680\":1,\"813\":1,\"852\":3,\"856\":1,\"889\":1,\"903\":1,\"911\":1,\"927\":1,\"935\":2,\"936\":2,\"937\":2,\"941\":2,\"942\":2,\"943\":2,\"944\":2,\"948\":4,\"955\":3,\"1201\":2,\"1209\":2,\"1210\":2,\"1212\":1}}],[\"plt\",{\"1\":{\"240\":6,\"428\":6,\"459\":9,\"460\":3,\"517\":4,\"543\":4,\"549\":4,\"550\":6,\"551\":3,\"552\":3,\"569\":7,\"590\":8,\"622\":1,\"623\":2,\"624\":2,\"625\":6,\"640\":1,\"643\":7,\"658\":1,\"661\":8,\"680\":3,\"688\":5,\"804\":3,\"852\":10,\"856\":10,\"889\":7,\"895\":7,\"903\":7,\"911\":7,\"927\":8,\"935\":5,\"936\":5,\"937\":5,\"941\":5,\"942\":5,\"943\":5,\"944\":5,\"947\":12,\"948\":13}}],[\"pde在物理学\",{\"1\":{\"879\":1}}],[\"pde\",{\"1\":{\"879\":1,\"882\":2,\"883\":1,\"886\":1}}],[\"pdist\",{\"1\":{\"556\":1}}],[\"pdf\",{\"1\":{\"460\":4,\"1110\":1,\"1230\":3,\"1655\":1}}],[\"pdb\",{\"1\":{\"246\":2}}],[\"pd\",{\"1\":{\"239\":3,\"458\":3,\"478\":2,\"481\":3,\"488\":2,\"658\":1,\"659\":1}}],[\"pyomo等\",{\"1\":{\"838\":1}}],[\"pytorch\",{\"1\":{\"797\":1}}],[\"python项目\",{\"0\":{\"2300\":1},\"2\":{\"2137\":1}}],[\"python数学建模基础\",{\"0\":{\"968\":1}}],[\"python数据分析\",{\"0\":{\"2299\":1}}],[\"python数据分析处理\",{\"0\":{\"456\":1}}],[\"python数据结构\",{\"0\":{\"266\":1}}],[\"python数据类型转换\",{\"0\":{\"184\":1}}],[\"python中可以使用scipy和numpy库进行数据拟合\",{\"1\":{\"940\":1}}],[\"python中可以使用scipy库进行插值\",{\"1\":{\"934\":1}}],[\"python中的拟合实例\",{\"0\":{\"940\":1}}],[\"python中的插值实例\",{\"0\":{\"934\":1}}],[\"python中的unittest模块是一个常用的单元测试框架\",{\"1\":{\"247\":1}}],[\"python描述微积分\",{\"0\":{\"2238\":1}}],[\"python描述偏微分方程\",{\"0\":{\"886\":1}}],[\"python描述统计分析\",{\"0\":{\"477\":1}}],[\"python代码\",{\"0\":{\"856\":1,\"895\":1,\"903\":1,\"911\":1}}],[\"python代码实现\",{\"0\":{\"852\":1}}],[\"python实现\",{\"0\":{\"889\":1,\"902\":1,\"910\":1}}],[\"python实现示例\",{\"0\":{\"700\":1}}],[\"python实现马尔科夫预测模型\",{\"0\":{\"648\":1}}],[\"python实现主成分数据降维\",{\"0\":{\"621\":1}}],[\"python实现回归分析\",{\"0\":{\"496\":1}}],[\"python工具\",{\"1\":{\"591\":1}}],[\"python为实现这些算法提供了丰富的工具和资源\",{\"1\":{\"583\":1}}],[\"python的图像处理\",{\"0\":{\"799\":1}}],[\"python的实现\",{\"0\":{\"639\":1}}],[\"python的判断分析算法实现\",{\"0\":{\"567\":1}}],[\"python的聚类算法实现\",{\"0\":{\"548\":1}}],[\"python的数据分析\",{\"0\":{\"356\":1}}],[\"python机器学习基础\",{\"0\":{\"365\":1}}],[\"python科学计算库\",{\"0\":{\"360\":1}}],[\"python进阶\",{\"0\":{\"299\":1},\"2\":{\"301\":1}}],[\"python爬虫\",{\"2\":{\"298\":1}}],[\"python网络爬虫\",{\"0\":{\"296\":1}}],[\"python编程库\",{\"0\":{\"289\":1}}],[\"python环境\",{\"0\":{\"279\":1,\"280\":1}}],[\"python资源\",{\"0\":{\"276\":1}}],[\"python学习手册2\",{\"0\":{\"265\":1}}],[\"python学习手册1\",{\"0\":{\"126\":1}}],[\"python内置的调试器\",{\"1\":{\"246\":1}}],[\"python面向对象编程\",{\"0\":{\"241\":1}}],[\"python自带了一些非常有用的内置模块\",{\"1\":{\"231\":1}}],[\"python模块使你能够将代码分割成多个文件\",{\"1\":{\"227\":1}}],[\"python模块\",{\"0\":{\"227\":1}}],[\"python循环与流程控制\",{\"0\":{\"200\":1}}],[\"python运算符\",{\"0\":{\"192\":1}}],[\"python提供了灵活的数据类型转换方式\",{\"1\":{\"191\":1}}],[\"python没有内置的常量类型\",{\"1\":{\"181\":1}}],[\"python变量和常量\",{\"0\":{\"178\":1}}],[\"python2\",{\"1\":{\"137\":1}}],[\"python3\",{\"0\":{\"284\":1},\"1\":{\"137\":2}}],[\"python基本数据类型\",{\"0\":{\"135\":1}}],[\"python基础语法\",{\"0\":{\"129\":1}}],[\"python基础\",{\"0\":{\"128\":1}}],[\"python最具特色的就是使用缩进来表示代码块\",{\"1\":{\"134\":1}}],[\"python保留字\",{\"0\":{\"133\":1}}],[\"python\",{\"0\":{\"127\":1,\"209\":1,\"302\":1,\"357\":1,\"517\":1,\"524\":1,\"587\":1,\"619\":1,\"946\":1,\"2117\":1,\"2298\":1},\"1\":{\"127\":1,\"130\":1,\"131\":1,\"133\":1,\"134\":2,\"135\":2,\"137\":2,\"138\":4,\"139\":2,\"140\":2,\"148\":1,\"149\":2,\"157\":1,\"158\":2,\"167\":2,\"174\":1,\"177\":1,\"378\":2,\"383\":1,\"456\":1,\"457\":1,\"459\":1,\"496\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"589\":1,\"600\":2,\"619\":1,\"794\":1,\"799\":2,\"800\":1,\"801\":1,\"803\":1,\"838\":1,\"913\":1,\"927\":1,\"1811\":1,\"1816\":1},\"2\":{\"263\":1,\"264\":1,\"277\":1,\"278\":1,\"287\":1,\"288\":1,\"294\":1,\"295\":1,\"297\":1,\"300\":1,\"362\":1,\"374\":1,\"2118\":1,\"2119\":1,\"2121\":1,\"2122\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2136\":1}}],[\"pyplot\",{\"1\":{\"240\":1,\"428\":1,\"459\":1,\"517\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"590\":1,\"622\":1,\"640\":1,\"658\":1,\"680\":1,\"688\":1,\"804\":1,\"852\":1,\"856\":1,\"889\":1,\"895\":1,\"903\":1,\"911\":1,\"927\":1,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1,\"947\":1,\"948\":1}}],[\"pypi\",{\"1\":{\"230\":1}}],[\"pi和math\",{\"1\":{\"1390\":1}}],[\"pie\",{\"1\":{\"1204\":2}}],[\"pixlr\",{\"1\":{\"796\":1}}],[\"pil\",{\"1\":{\"794\":1,\"801\":2,\"817\":1,\"821\":1,\"822\":1}}],[\"pillow\",{\"1\":{\"794\":1,\"801\":2}}],[\"pitch\",{\"1\":{\"680\":6,\"681\":1}}],[\"pipeline\",{\"1\":{\"501\":2}}],[\"pip\",{\"1\":{\"230\":4,\"800\":1,\"801\":1,\"802\":1,\"803\":1,\"804\":1,\"805\":1,\"914\":2}}],[\"pi\",{\"1\":{\"182\":4,\"646\":1,\"680\":2,\"889\":1,\"895\":2,\"903\":1,\"911\":1,\"1217\":2,\"1218\":3,\"1292\":1,\"1396\":3}}],[\"pair\",{\"1\":{\"1796\":1}}],[\"pages=\",{\"1\":{\"1654\":1}}],[\"pages\",{\"1\":{\"1654\":6}}],[\"packageclass\",{\"1\":{\"1624\":6}}],[\"package\",{\"1\":{\"1477\":4,\"1616\":1,\"1618\":1,\"1619\":2,\"1624\":4,\"1651\":1,\"1654\":5,\"1655\":1,\"1677\":1}}],[\"payoffs\",{\"1\":{\"745\":1}}],[\"patch\",{\"1\":{\"688\":1}}],[\"patternstring\",{\"1\":{\"2048\":2}}],[\"patternsyntaxexception\",{\"1\":{\"2043\":1}}],[\"pattern>\",{\"1\":{\"1925\":1}}],[\"pattern=\",{\"1\":{\"1921\":1}}],[\"pattern类用于编译正则表达式\",{\"1\":{\"1419\":1}}],[\"pattern类是正则表达式的编译表示\",{\"1\":{\"1415\":1}}],[\"pattern\",{\"1\":{\"584\":1,\"686\":1,\"1410\":1,\"1416\":5,\"1418\":5,\"1946\":4,\"1949\":6,\"1951\":4,\"1953\":6,\"1954\":6,\"1956\":4,\"1957\":1,\"2006\":1,\"2043\":1,\"2048\":5}}],[\"paths\",{\"1\":{\"1440\":2}}],[\"path=\",{\"1\":{\"805\":1}}],[\"path\",{\"0\":{\"405\":1},\"1\":{\"255\":3,\"389\":2,\"394\":2,\"397\":1,\"398\":6,\"399\":6,\"410\":17,\"680\":17,\"681\":1,\"953\":1,\"958\":6,\"959\":6,\"1126\":1,\"1440\":5,\"1941\":1}}],[\"pandas等\",{\"1\":{\"383\":1}}],[\"pandas\",{\"0\":{\"458\":1,\"2127\":1},\"1\":{\"239\":1,\"370\":1,\"456\":1,\"458\":3,\"478\":1,\"481\":1,\"488\":1,\"658\":1},\"2\":{\"2129\":1}}],[\"parse\",{\"1\":{\"1407\":1,\"1704\":1,\"1705\":1}}],[\"parsedint\",{\"1\":{\"1705\":2}}],[\"parsed\",{\"1\":{\"1407\":1}}],[\"parseddate\",{\"1\":{\"1407\":2}}],[\"parsedouble\",{\"1\":{\"1298\":1,\"1704\":1}}],[\"parseint\",{\"1\":{\"1298\":1,\"1704\":1,\"1705\":2}}],[\"parallelsort\",{\"1\":{\"1997\":1}}],[\"parabolic\",{\"1\":{\"897\":1}}],[\"params\",{\"1\":{\"1857\":2}}],[\"parameterizedtest\",{\"1\":{\"1857\":2}}],[\"parameterizedtest注解可以实现参数化测试\",{\"1\":{\"1857\":1}}],[\"parameters\",{\"1\":{\"1685\":2,\"1989\":2}}],[\"parametervalue\",{\"1\":{\"1645\":1}}],[\"parametric\",{\"1\":{\"672\":1}}],[\"param\",{\"1\":{\"641\":1,\"642\":4,\"649\":3,\"1283\":1,\"2000\":4,\"2001\":3}}],[\"pareto优化法\",{\"1\":{\"841\":1}}],[\"pareto最优解\",{\"1\":{\"840\":1}}],[\"parents\",{\"1\":{\"434\":14}}],[\"parent\",{\"1\":{\"398\":6,\"399\":6,\"964\":7,\"965\":3,\"1509\":3,\"1512\":5}}],[\"parentheses\",{\"1\":{\"150\":1}}],[\"particle\",{\"1\":{\"420\":1}}],[\"partial\",{\"1\":{\"217\":4,\"879\":1,\"891\":1,\"897\":1,\"905\":1}}],[\"password\",{\"1\":{\"1979\":3}}],[\"pass\",{\"1\":{\"133\":1,\"242\":1,\"1338\":1}}],[\"port\",{\"1\":{\"1930\":1,\"1935\":2,\"1936\":3,\"1938\":2,\"1939\":3}}],[\"pom\",{\"1\":{\"1920\":1,\"1924\":1}}],[\"pow\",{\"1\":{\"1394\":2,\"2037\":1}}],[\"powerful\",{\"1\":{\"1954\":1}}],[\"power\",{\"1\":{\"217\":3,\"1152\":1}}],[\"poll\",{\"1\":{\"1758\":1,\"1759\":1,\"1762\":1,\"1764\":1,\"1766\":1}}],[\"policy\",{\"1\":{\"596\":2}}],[\"poly1d\",{\"1\":{\"942\":1,\"948\":1}}],[\"polyfit\",{\"1\":{\"942\":1,\"948\":1}}],[\"polygon\",{\"1\":{\"672\":1}}],[\"poly\",{\"1\":{\"501\":18,\"937\":2,\"942\":2,\"948\":6}}],[\"polynomialfeatures\",{\"1\":{\"501\":2}}],[\"polynomial\",{\"0\":{\"494\":1,\"501\":1},\"1\":{\"501\":2,\"531\":1,\"933\":1,\"939\":1,\"942\":1,\"948\":2}}],[\"polymorphism\",{\"0\":{\"1472\":1},\"1\":{\"242\":1,\"1525\":1,\"1709\":1}}],[\"postgresql\",{\"1\":{\"1974\":1}}],[\"postman\",{\"0\":{\"322\":1},\"2\":{\"324\":1}}],[\"position\",{\"1\":{\"1610\":1,\"1774\":3,\"1885\":1}}],[\"positive\",{\"1\":{\"589\":1,\"1159\":1,\"1160\":2,\"1161\":1,\"1163\":3,\"1321\":1}}],[\"points\",{\"1\":{\"557\":1,\"680\":14,\"681\":2,\"935\":1,\"936\":1,\"937\":1,\"941\":1,\"942\":1,\"943\":1,\"944\":1}}],[\"point\",{\"0\":{\"1287\":1},\"1\":{\"434\":9,\"718\":1}}],[\"popped\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"popt\",{\"1\":{\"943\":2}}],[\"popmean=0\",{\"1\":{\"460\":1}}],[\"population++\",{\"1\":{\"1303\":1}}],[\"population\",{\"1\":{\"432\":1,\"434\":15,\"435\":1,\"1303\":2}}],[\"popitem\",{\"1\":{\"171\":2}}],[\"pop\",{\"1\":{\"146\":1,\"160\":1,\"171\":2,\"434\":6,\"1730\":1,\"1773\":1,\"1774\":2,\"1777\":2,\"1778\":2}}],[\"pouting\",{\"1\":{\"9\":2}}],[\"preparestatement\",{\"1\":{\"1984\":1}}],[\"preparedstatement\",{\"0\":{\"1984\":1},\"1\":{\"1974\":1,\"1984\":6}}],[\"preprocessing\",{\"1\":{\"501\":1,\"535\":1,\"551\":1,\"608\":1,\"619\":1,\"658\":1}}],[\"previous\",{\"1\":{\"1822\":2,\"1823\":1}}],[\"prev2\",{\"1\":{\"1818\":4}}],[\"prev1\",{\"1\":{\"1818\":5}}],[\"precision\",{\"1\":{\"582\":1,\"2154\":3}}],[\"predicate<integer>\",{\"1\":{\"1691\":1}}],[\"predicate<t>\",{\"1\":{\"1691\":1}}],[\"predicate\",{\"1\":{\"1691\":1,\"1990\":1}}],[\"predicted\",{\"1\":{\"643\":1,\"649\":2,\"661\":1}}],[\"predict\",{\"1\":{\"484\":1,\"486\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1,\"517\":1,\"524\":1,\"535\":1,\"543\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":2,\"642\":1,\"643\":1,\"649\":2,\"650\":1,\"661\":5}}],[\"prediction\",{\"1\":{\"448\":3,\"449\":3,\"643\":1,\"661\":1}}],[\"predictions\",{\"1\":{\"447\":3,\"449\":3,\"484\":1,\"486\":3,\"649\":3}}],[\"predictive\",{\"1\":{\"367\":1}}],[\"pred\",{\"1\":{\"497\":3,\"498\":3,\"499\":3,\"500\":3,\"501\":3,\"502\":3,\"503\":3,\"524\":2,\"535\":2,\"569\":2,\"571\":2,\"577\":2,\"578\":2,\"579\":2,\"580\":2,\"581\":2,\"588\":2,\"589\":2,\"601\":2,\"602\":2,\"603\":2,\"604\":2,\"605\":2,\"606\":2,\"607\":2,\"608\":2,\"609\":4,\"642\":7,\"643\":4}}],[\"preference\",{\"1\":{\"481\":2,\"754\":1}}],[\"provides\",{\"1\":{\"2000\":1}}],[\"provider\",{\"1\":{\"1857\":1}}],[\"protocol\",{\"1\":{\"1930\":1}}],[\"protectedmethod\",{\"1\":{\"1481\":1}}],[\"protectedfield\",{\"1\":{\"1481\":1}}],[\"protected\",{\"1\":{\"1277\":1,\"1307\":3,\"1481\":2,\"1506\":2,\"1515\":1,\"1519\":1,\"1623\":1,\"1671\":2,\"1672\":2,\"1677\":1,\"1712\":1}}],[\"property1\",{\"1\":{\"1183\":3}}],[\"properties\",{\"1\":{\"1183\":1}}],[\"proportion\",{\"1\":{\"852\":1}}],[\"processnumber\",{\"1\":{\"1838\":1}}],[\"processing\",{\"1\":{\"806\":1,\"1847\":1,\"1868\":1}}],[\"process\",{\"1\":{\"754\":1}}],[\"project\",{\"1\":{\"1631\":1}}],[\"projected\",{\"1\":{\"624\":2}}],[\"projection=\",{\"1\":{\"623\":1,\"680\":1}}],[\"projection\",{\"1\":{\"569\":1,\"594\":1,\"625\":1}}],[\"proximal\",{\"1\":{\"596\":1}}],[\"produce\",{\"1\":{\"1673\":1}}],[\"producerconsumer\",{\"1\":{\"1673\":1}}],[\"product\",{\"1\":{\"457\":1,\"921\":3,\"1173\":3,\"1221\":2}}],[\"prod\",{\"1\":{\"457\":1}}],[\"probabilities\",{\"1\":{\"434\":1}}],[\"prob\",{\"1\":{\"428\":2}}],[\"problems\",{\"1\":{\"705\":1}}],[\"problem\",{\"1\":{\"395\":1,\"400\":1,\"409\":1,\"410\":1,\"700\":7,\"735\":1}}],[\"programming\",{\"0\":{\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1},\"1\":{\"410\":1,\"415\":5,\"589\":1,\"714\":1,\"723\":1,\"729\":1,\"831\":1,\"839\":1,\"1661\":1,\"1663\":4,\"1707\":1}}],[\"profile\",{\"0\":{\"0\":1}}],[\"priorityblockingqueue\",{\"1\":{\"1767\":1}}],[\"priorityqueueexample\",{\"1\":{\"1764\":1}}],[\"priorityqueue<e>\",{\"1\":{\"1739\":1}}],[\"priorityqueue<>\",{\"1\":{\"1727\":1,\"1731\":1,\"1739\":1,\"1764\":1}}],[\"priorityqueue<integer>\",{\"1\":{\"1727\":1,\"1731\":1}}],[\"priorityqueue\",{\"1\":{\"1727\":5,\"1735\":1,\"1739\":3,\"1760\":1,\"1763\":1,\"1764\":9,\"1769\":1,\"2038\":1}}],[\"privatemethod\",{\"1\":{\"1483\":1}}],[\"privatefield\",{\"1\":{\"1483\":1}}],[\"private\",{\"1\":{\"1277\":1,\"1307\":3,\"1309\":1,\"1335\":1,\"1471\":3,\"1483\":2,\"1506\":2,\"1515\":1,\"1519\":1,\"1548\":1,\"1564\":1,\"1566\":1,\"1568\":2,\"1571\":1,\"1588\":1,\"1591\":1,\"1608\":1,\"1612\":1,\"1623\":1,\"1624\":2,\"1651\":2,\"1654\":5,\"1659\":1,\"1661\":5,\"1667\":2,\"1668\":2,\"1669\":2,\"1671\":2,\"1673\":2,\"1676\":2,\"1677\":3,\"1680\":7,\"1682\":2,\"1709\":3,\"1711\":2,\"1712\":1,\"1713\":2,\"1818\":4,\"1831\":2,\"1836\":1,\"1855\":1,\"1862\":3,\"1863\":3,\"1864\":3,\"1865\":2,\"1876\":2,\"1918\":1,\"1922\":1,\"1926\":1,\"1968\":2,\"1969\":2,\"1970\":1,\"2009\":2,\"2010\":2,\"2011\":2,\"2012\":2,\"2013\":3}}],[\"primarystage\",{\"1\":{\"2033\":4}}],[\"primitive\",{\"1\":{\"1384\":1}}],[\"primitiveint\",{\"1\":{\"1384\":3}}],[\"primmst\",{\"1\":{\"965\":2}}],[\"prim算法\",{\"0\":{\"965\":1},\"1\":{\"392\":1,\"963\":1}}],[\"price\",{\"1\":{\"659\":1,\"661\":4,\"1416\":1}}],[\"principles\",{\"1\":{\"998\":1}}],[\"principal\",{\"1\":{\"487\":3,\"541\":1,\"590\":2,\"594\":1,\"615\":1,\"625\":2}}],[\"printwriter\",{\"1\":{\"1875\":1,\"1935\":2,\"1936\":2}}],[\"printlist\",{\"1\":{\"1839\":1}}],[\"println\",{\"1\":{\"1274\":1,\"1292\":4,\"1301\":1,\"1302\":1,\"1321\":3,\"1322\":4,\"1324\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1329\":1,\"1330\":1,\"1331\":1,\"1335\":1,\"1336\":1,\"1339\":1,\"1356\":1,\"1357\":1,\"1360\":1,\"1370\":5,\"1373\":4,\"1376\":4,\"1384\":6,\"1392\":4,\"1393\":3,\"1394\":5,\"1395\":1,\"1396\":2,\"1401\":3,\"1402\":3,\"1404\":4,\"1405\":2,\"1406\":2,\"1407\":2,\"1416\":2,\"1418\":2,\"1422\":3,\"1424\":1,\"1425\":2,\"1426\":1,\"1427\":3,\"1428\":2,\"1434\":1,\"1439\":6,\"1440\":1,\"1445\":1,\"1446\":3,\"1447\":1,\"1448\":1,\"1468\":2,\"1470\":1,\"1472\":2,\"1473\":1,\"1474\":1,\"1476\":2,\"1497\":1,\"1499\":1,\"1500\":2,\"1501\":1,\"1502\":1,\"1503\":1,\"1504\":2,\"1506\":3,\"1509\":4,\"1511\":2,\"1512\":2,\"1513\":2,\"1514\":2,\"1516\":2,\"1520\":2,\"1523\":3,\"1528\":3,\"1530\":3,\"1533\":2,\"1536\":2,\"1538\":1,\"1545\":2,\"1546\":2,\"1547\":2,\"1548\":1,\"1554\":2,\"1557\":2,\"1561\":2,\"1568\":4,\"1577\":2,\"1579\":2,\"1581\":1,\"1583\":2,\"1588\":1,\"1591\":1,\"1594\":1,\"1597\":1,\"1606\":4,\"1608\":1,\"1610\":2,\"1612\":1,\"1619\":1,\"1624\":1,\"1651\":3,\"1654\":1,\"1655\":4,\"1661\":12,\"1667\":1,\"1670\":1,\"1671\":1,\"1677\":6,\"1682\":2,\"1688\":1,\"1690\":2,\"1692\":1,\"1705\":6,\"1709\":7,\"1714\":4,\"1748\":7,\"1751\":7,\"1754\":2,\"1762\":4,\"1764\":3,\"1766\":3,\"1768\":3,\"1774\":6,\"1777\":5,\"1786\":4,\"1788\":2,\"1790\":4,\"1792\":3,\"1801\":4,\"1803\":2,\"1805\":2,\"1807\":2,\"1809\":2,\"1814\":2,\"1815\":1,\"1820\":1,\"1823\":4,\"1831\":7,\"1836\":1,\"1838\":1,\"1839\":1,\"1846\":1,\"1863\":2,\"1873\":1,\"1876\":1,\"1890\":2,\"1891\":1,\"1898\":2,\"1901\":3,\"1903\":2,\"1906\":1,\"1908\":1,\"1909\":1,\"1933\":5,\"1935\":2,\"1936\":4,\"1938\":2,\"1939\":3,\"1941\":6,\"1942\":1,\"1949\":1,\"1950\":2,\"1952\":1,\"1954\":1,\"1956\":3,\"1961\":1,\"1962\":1,\"1963\":3,\"1966\":1,\"1970\":1,\"1979\":1,\"1981\":1,\"1982\":1,\"1984\":1,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":2,\"1994\":3,\"1995\":2,\"2031\":1,\"2033\":1,\"2037\":1,\"2047\":3,\"2048\":1}}],[\"printedbook\",{\"1\":{\"1654\":4,\"1655\":4,\"1659\":1}}],[\"printer2\",{\"1\":{\"1690\":1}}],[\"printer1\",{\"1\":{\"1690\":1}}],[\"printer\",{\"1\":{\"1528\":7}}],[\"printdefault\",{\"1\":{\"1561\":3}}],[\"printable\",{\"1\":{\"1561\":4}}],[\"printing\",{\"1\":{\"1528\":6,\"1561\":2,\"1579\":2}}],[\"printinfo\",{\"1\":{\"1476\":3}}],[\"printstacktrace\",{\"1\":{\"1433\":2,\"1434\":2,\"1436\":2,\"1437\":2,\"1439\":1,\"1440\":2,\"1548\":1,\"1863\":2,\"1870\":1,\"1871\":1,\"1873\":1,\"1874\":1,\"1876\":2,\"1890\":1,\"1891\":1,\"1933\":1,\"1935\":1,\"1936\":2,\"1938\":1,\"1939\":1,\"1941\":1,\"1942\":1,\"1963\":1,\"1966\":2,\"1970\":2,\"1978\":1,\"1979\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1983\":1,\"1985\":1}}],[\"printstreamexample\",{\"1\":{\"1425\":1}}],[\"printstream\",{\"1\":{\"1424\":1}}],[\"printf\",{\"1\":{\"1424\":1,\"1425\":1,\"1426\":1,\"1427\":1}}],[\"printnumbers\",{\"1\":{\"1339\":1}}],[\"print\",{\"1\":{\"28\":1,\"180\":2,\"182\":3,\"185\":3,\"186\":2,\"187\":2,\"188\":2,\"189\":2,\"190\":2,\"191\":1,\"201\":3,\"202\":1,\"203\":1,\"204\":2,\"206\":1,\"207\":1,\"208\":4,\"210\":1,\"211\":4,\"212\":2,\"213\":1,\"214\":2,\"215\":1,\"216\":2,\"217\":2,\"219\":6,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":3,\"229\":3,\"232\":2,\"233\":1,\"234\":3,\"235\":3,\"237\":2,\"238\":2,\"239\":2,\"242\":4,\"243\":1,\"245\":1,\"246\":3,\"248\":1,\"252\":2,\"255\":2,\"257\":1,\"258\":1,\"261\":3,\"262\":2,\"384\":2,\"409\":2,\"410\":2,\"428\":2,\"434\":2,\"447\":1,\"448\":3,\"449\":4,\"460\":2,\"478\":1,\"479\":1,\"480\":1,\"481\":2,\"482\":1,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"497\":2,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"502\":2,\"503\":2,\"524\":1,\"535\":1,\"569\":1,\"571\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"588\":1,\"589\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":2,\"609\":2,\"610\":1,\"619\":1,\"643\":2,\"649\":2,\"700\":1,\"722\":3,\"856\":2,\"917\":2,\"918\":1,\"919\":1,\"920\":1,\"921\":4,\"923\":1,\"924\":1,\"925\":1,\"1211\":2,\"1360\":1,\"1422\":3,\"1424\":1,\"1426\":1,\"1427\":3,\"1428\":1,\"1433\":1,\"1436\":1,\"1437\":1,\"1528\":6,\"1561\":5,\"1579\":3,\"1594\":2,\"1818\":1,\"1836\":1,\"1870\":1,\"1883\":1,\"1996\":1}}],[\"☝️\",{\"1\":{\"9\":2}}],[\"✋\",{\"1\":{\"9\":4}}],[\"✌️\",{\"1\":{\"9\":2}}],[\"✊\",{\"1\":{\"9\":2}}],[\"🌌\",{\"1\":{\"13\":2}}],[\"🌋\",{\"1\":{\"13\":2}}],[\"🌏\",{\"1\":{\"13\":2}}],[\"🌎\",{\"1\":{\"13\":2}}],[\"🌍\",{\"1\":{\"13\":2}}],[\"🌙\",{\"1\":{\"13\":2}}],[\"🌛\",{\"1\":{\"13\":2}}],[\"🌜\",{\"1\":{\"13\":2}}],[\"🌘\",{\"1\":{\"13\":2}}],[\"🌗\",{\"1\":{\"13\":2}}],[\"🌖\",{\"1\":{\"13\":2}}],[\"🌕\",{\"1\":{\"13\":2}}],[\"🌔\",{\"1\":{\"13\":2}}],[\"🌓\",{\"1\":{\"13\":2}}],[\"🌒\",{\"1\":{\"13\":2}}],[\"🌑\",{\"1\":{\"13\":2}}],[\"🌚\",{\"1\":{\"13\":2}}],[\"🌝\",{\"1\":{\"13\":2}}],[\"🌞\",{\"1\":{\"13\":2}}],[\"🌐\",{\"1\":{\"13\":2}}],[\"🌾\",{\"1\":{\"13\":2}}],[\"🌼\",{\"1\":{\"13\":2}}],[\"🌱\",{\"1\":{\"13\":2}}],[\"🌰\",{\"1\":{\"13\":2}}],[\"🌳\",{\"1\":{\"13\":2}}],[\"🌲\",{\"1\":{\"13\":2}}],[\"🌴\",{\"1\":{\"13\":2}}],[\"🌵\",{\"1\":{\"13\":2}}],[\"🍄\",{\"1\":{\"13\":2}}],[\"🌿\",{\"1\":{\"13\":2}}],[\"🍂\",{\"1\":{\"13\":2}}],[\"🍃\",{\"1\":{\"13\":2}}],[\"🍁\",{\"1\":{\"13\":2}}],[\"🌺\",{\"1\":{\"13\":2}}],[\"🌻\",{\"1\":{\"13\":2}}],[\"🌹\",{\"1\":{\"13\":2}}],[\"🍀\",{\"1\":{\"13\":2}}],[\"🌷\",{\"1\":{\"13\":2}}],[\"🌸\",{\"1\":{\"13\":2}}],[\"🌊\",{\"1\":{\"13\":2}}],[\"🌁\",{\"1\":{\"13\":2}}],[\"🌀\",{\"1\":{\"13\":2}}],[\"🅾️\",{\"1\":{\"12\":2}}],[\"🆎\",{\"1\":{\"12\":2}}],[\"🅱️\",{\"1\":{\"12\":2}}],[\"🅰️\",{\"1\":{\"12\":2}}],[\"🆚\",{\"1\":{\"12\":2}}],[\"🆔\",{\"1\":{\"12\":2}}],[\"🆘\",{\"1\":{\"12\":2}}],[\"🆑\",{\"1\":{\"12\":2}}],[\"🉐\",{\"1\":{\"12\":2}}],[\"🉑\",{\"1\":{\"12\":2}}],[\"🅿️\",{\"1\":{\"12\":2}}],[\"🈂️\",{\"1\":{\"12\":2}}],[\"🈁\",{\"1\":{\"12\":2}}],[\"🎦\",{\"1\":{\"12\":2}}],[\"🆖\",{\"1\":{\"12\":2}}],[\"🆓\",{\"1\":{\"12\":2}}],[\"🆒\",{\"1\":{\"12\":2}}],[\"🆙\",{\"1\":{\"12\":2}}],[\"🆕\",{\"1\":{\"12\":2}}],[\"🆗\",{\"1\":{\"12\":2}}],[\"🌽\",{\"1\":{\"11\":2}}],[\"🍅\",{\"1\":{\"11\":2}}],[\"🍆\",{\"1\":{\"11\":2}}],[\"🍠\",{\"1\":{\"11\":2}}],[\"🍍\",{\"1\":{\"11\":2}}],[\"🍐\",{\"1\":{\"11\":2}}],[\"🍌\",{\"1\":{\"11\":2}}],[\"🍈\",{\"1\":{\"11\":2}}],[\"🍑\",{\"1\":{\"11\":2}}],[\"🍓\",{\"1\":{\"11\":2}}],[\"🍉\",{\"1\":{\"11\":2}}],[\"🍇\",{\"1\":{\"11\":2}}],[\"🍒\",{\"1\":{\"11\":2}}],[\"🍋\",{\"1\":{\"11\":2}}],[\"🍊\",{\"1\":{\"11\":2}}],[\"🍏\",{\"1\":{\"11\":2}}],[\"🍎\",{\"1\":{\"11\":2}}],[\"🍯\",{\"1\":{\"11\":2}}],[\"🍭\",{\"1\":{\"11\":2}}],[\"🍬\",{\"1\":{\"11\":2}}],[\"🍫\",{\"1\":{\"11\":2}}],[\"🍪\",{\"1\":{\"11\":2}}],[\"🍰\",{\"1\":{\"11\":2}}],[\"🎂\",{\"1\":{\"11\":2}}],[\"🍧\",{\"1\":{\"11\":2}}],[\"🍨\",{\"1\":{\"11\":2}}],[\"🍦\",{\"1\":{\"11\":2}}],[\"🍮\",{\"1\":{\"11\":2}}],[\"🍩\",{\"1\":{\"11\":2}}],[\"🍞\",{\"1\":{\"11\":2}}],[\"🍡\",{\"1\":{\"11\":2}}],[\"🍢\",{\"1\":{\"11\":2}}],[\"🍲\",{\"1\":{\"11\":2}}],[\"🍜\",{\"1\":{\"11\":2}}],[\"🍚\",{\"1\":{\"11\":2}}],[\"🍘\",{\"1\":{\"11\":2}}],[\"🍙\",{\"1\":{\"11\":2}}],[\"🍥\",{\"1\":{\"11\":2}}],[\"🍣\",{\"1\":{\"11\":2}}],[\"🍱\",{\"1\":{\"11\":2}}],[\"🍤\",{\"1\":{\"11\":2}}],[\"🍛\",{\"1\":{\"11\":2}}],[\"🍝\",{\"1\":{\"11\":2}}],[\"🍖\",{\"1\":{\"11\":2}}],[\"🍗\",{\"1\":{\"11\":2}}],[\"🍟\",{\"1\":{\"11\":2}}],[\"🍔\",{\"1\":{\"11\":2}}],[\"🍕\",{\"1\":{\"11\":2}}],[\"🍴\",{\"1\":{\"11\":2}}],[\"🍷\",{\"1\":{\"11\":2}}],[\"🍹\",{\"1\":{\"11\":2}}],[\"🍸\",{\"1\":{\"11\":2}}],[\"🍻\",{\"1\":{\"11\":2}}],[\"🍺\",{\"1\":{\"11\":2}}],[\"🍼\",{\"1\":{\"11\":2}}],[\"🍶\",{\"1\":{\"11\":2}}],[\"🍵\",{\"1\":{\"11\":2}}],[\"🎣\",{\"1\":{\"11\":2}}],[\"🌂\",{\"1\":{\"11\":2}}],[\"🎩\",{\"1\":{\"11\":2}}],[\"🎀\",{\"1\":{\"11\":2}}],[\"🎽\",{\"1\":{\"11\":2}}],[\"🎸\",{\"1\":{\"11\":2}}],[\"🎷\",{\"1\":{\"11\":2}}],[\"🎺\",{\"1\":{\"11\":2}}],[\"🎧\",{\"1\":{\"11\":2}}],[\"🎤\",{\"1\":{\"11\":2}}],[\"🎨\",{\"1\":{\"11\":2}}],[\"🎬\",{\"1\":{\"11\":2}}],[\"🀄\",{\"1\":{\"11\":2}}],[\"🎯\",{\"1\":{\"11\":2}}],[\"🎲\",{\"1\":{\"11\":2}}],[\"🎴\",{\"1\":{\"11\":2}}],[\"🃏\",{\"1\":{\"11\":2}}],[\"🎮\",{\"1\":{\"11\":2}}],[\"🎻\",{\"1\":{\"11\":2}}],[\"🎹\",{\"1\":{\"11\":2}}],[\"🎼\",{\"1\":{\"11\":2}}],[\"🏆\",{\"1\":{\"11\":2}}],[\"🎿\",{\"1\":{\"11\":2}}],[\"🏄\",{\"1\":{\"11\":2}}],[\"🏊\",{\"1\":{\"11\":2}}],[\"🏂\",{\"1\":{\"11\":2}}],[\"🏇\",{\"1\":{\"11\":2}}],[\"🎳\",{\"1\":{\"11\":2}}],[\"🏉\",{\"1\":{\"11\":2}}],[\"🎱\",{\"1\":{\"11\":2}}],[\"🎾\",{\"1\":{\"11\":2}}],[\"🏀\",{\"1\":{\"11\":2}}],[\"🏈\",{\"1\":{\"11\":2}}],[\"🎥\",{\"1\":{\"11\":2}}],[\"🎈\",{\"1\":{\"11\":2}}],[\"🎊\",{\"1\":{\"11\":2}}],[\"🎉\",{\"1\":{\"11\":2}}],[\"🎋\",{\"1\":{\"11\":2}}],[\"🎁\",{\"1\":{\"11\":2}}],[\"🎄\",{\"1\":{\"11\":2}}],[\"🎅\",{\"1\":{\"11\":2}}],[\"🎃\",{\"1\":{\"11\":2}}],[\"🎑\",{\"1\":{\"11\":2}}],[\"🎐\",{\"1\":{\"11\":2}}],[\"🎇\",{\"1\":{\"11\":2}}],[\"🎆\",{\"1\":{\"11\":2}}],[\"🎏\",{\"1\":{\"11\":2}}],[\"🎓\",{\"1\":{\"11\":2}}],[\"🎒\",{\"1\":{\"11\":2}}],[\"🎎\",{\"1\":{\"11\":2}}],[\"🎍\",{\"1\":{\"11\":2}}],[\"🎭\",{\"1\":{\"10\":2}}],[\"🎪\",{\"1\":{\"10\":2}}],[\"🏮\",{\"1\":{\"10\":2}}],[\"🎌\",{\"1\":{\"10\":2}}],[\"🏁\",{\"1\":{\"10\":2}}],[\"🎰\",{\"1\":{\"10\":2}}],[\"🏧\",{\"1\":{\"10\":2}}],[\"🎫\",{\"1\":{\"10\":2}}],[\"🎢\",{\"1\":{\"10\":2}}],[\"🎡\",{\"1\":{\"10\":2}}],[\"🌈\",{\"1\":{\"10\":2}}],[\"🎠\",{\"1\":{\"10\":2}}],[\"🌉\",{\"1\":{\"10\":2}}],[\"🌠\",{\"1\":{\"10\":2}}],[\"🌅\",{\"1\":{\"10\":2}}],[\"🌄\",{\"1\":{\"10\":2}}],[\"🏭\",{\"1\":{\"10\":2}}],[\"🏰\",{\"1\":{\"10\":2}}],[\"🏯\",{\"1\":{\"10\":2}}],[\"🌆\",{\"1\":{\"10\":2}}],[\"🌇\",{\"1\":{\"10\":2}}],[\"🏤\",{\"1\":{\"10\":2}}],[\"🏬\",{\"1\":{\"10\":2}}],[\"🏨\",{\"1\":{\"10\":2}}],[\"🏩\",{\"1\":{\"10\":2}}],[\"🏪\",{\"1\":{\"10\":2}}],[\"🏦\",{\"1\":{\"10\":2}}],[\"🏥\",{\"1\":{\"10\":2}}],[\"🏣\",{\"1\":{\"10\":2}}],[\"🏢\",{\"1\":{\"10\":2}}],[\"🏫\",{\"1\":{\"10\":2}}],[\"🏡\",{\"1\":{\"10\":2}}],[\"🏠\",{\"1\":{\"10\":2}}],[\"🏃\",{\"1\":{\"9\":4}}],[\"🎵\",{\"1\":{\"9\":2}}],[\"🎶\",{\"1\":{\"9\":2}}],[\"🌟\",{\"1\":{\"9\":2}}],[\"❔\",{\"1\":{\"9\":2}}],[\"❕\",{\"1\":{\"9\":2}}],[\"❓\",{\"1\":{\"9\":2}}],[\"❗\",{\"1\":{\"9\":2,\"12\":2}}],[\"⭐\",{\"1\":{\"9\":2,\"1457\":1}}],[\"✨\",{\"1\":{\"9\":2}}],[\"❤️\",{\"1\":{\"9\":2}}],[\"🐚\",{\"1\":{\"13\":2}}],[\"💐\",{\"1\":{\"13\":2}}],[\"🐩\",{\"1\":{\"13\":2}}],[\"🐈\",{\"1\":{\"13\":2}}],[\"🐆\",{\"1\":{\"13\":2}}],[\"🐪\",{\"1\":{\"13\":2}}],[\"🐊\",{\"1\":{\"13\":2}}],[\"🐡\",{\"1\":{\"13\":2}}],[\"🐲\",{\"1\":{\"13\":2}}],[\"🐂\",{\"1\":{\"13\":2}}],[\"🐁\",{\"1\":{\"13\":2}}],[\"🐖\",{\"1\":{\"13\":2}}],[\"🐕\",{\"1\":{\"13\":2}}],[\"🐓\",{\"1\":{\"13\":2}}],[\"🐐\",{\"1\":{\"13\":2}}],[\"🐉\",{\"1\":{\"13\":2}}],[\"🐇\",{\"1\":{\"13\":2}}],[\"🐅\",{\"1\":{\"13\":2}}],[\"🐃\",{\"1\":{\"13\":2}}],[\"🐀\",{\"1\":{\"13\":2}}],[\"🐏\",{\"1\":{\"13\":2}}],[\"🐄\",{\"1\":{\"13\":2}}],[\"🐬\",{\"1\":{\"13\":2}}],[\"🐋\",{\"1\":{\"13\":2}}],[\"🐳\",{\"1\":{\"13\":2}}],[\"🐟\",{\"1\":{\"13\":2}}],[\"🐠\",{\"1\":{\"13\":2}}],[\"🐙\",{\"1\":{\"13\":2}}],[\"🐌\",{\"1\":{\"13\":2}}],[\"🐜\",{\"1\":{\"13\":2}}],[\"🐝\",{\"1\":{\"13\":2}}],[\"🐛\",{\"1\":{\"13\":2}}],[\"🐢\",{\"1\":{\"13\":2}}],[\"🐧\",{\"1\":{\"13\":2}}],[\"🐔\",{\"1\":{\"13\":2}}],[\"🐣\",{\"1\":{\"13\":2}}],[\"🐥\",{\"1\":{\"13\":2}}],[\"🐤\",{\"1\":{\"13\":2}}],[\"🐦\",{\"1\":{\"13\":2}}],[\"🐍\",{\"1\":{\"13\":2}}],[\"🐼\",{\"1\":{\"13\":2}}],[\"🐘\",{\"1\":{\"13\":2}}],[\"🐑\",{\"1\":{\"13\":2}}],[\"🐫\",{\"1\":{\"13\":2}}],[\"🐎\",{\"1\":{\"13\":2}}],[\"🐴\",{\"1\":{\"13\":2}}],[\"🐒\",{\"1\":{\"13\":2}}],[\"🐵\",{\"1\":{\"13\":2}}],[\"🐗\",{\"1\":{\"13\":2}}],[\"🐮\",{\"1\":{\"13\":2}}],[\"🐽\",{\"1\":{\"13\":2}}],[\"🐷\",{\"1\":{\"13\":2}}],[\"🐻\",{\"1\":{\"13\":2}}],[\"🐨\",{\"1\":{\"13\":2}}],[\"🐯\",{\"1\":{\"13\":2}}],[\"🐸\",{\"1\":{\"13\":2}}],[\"🐺\",{\"1\":{\"13\":2}}],[\"🐰\",{\"1\":{\"13\":2}}],[\"🐹\",{\"1\":{\"13\":2}}],[\"🐭\",{\"1\":{\"13\":2}}],[\"🐶\",{\"1\":{\"13\":2}}],[\"🐱\",{\"1\":{\"13\":2}}],[\"🔻\",{\"1\":{\"12\":2}}],[\"🔺\",{\"1\":{\"12\":2}}],[\"🔸\",{\"1\":{\"12\":2}}],[\"🔹\",{\"1\":{\"12\":2}}],[\"🔶\",{\"1\":{\"12\":2}}],[\"🔷\",{\"1\":{\"12\":2}}],[\"🔵\",{\"1\":{\"12\":2}}],[\"🔴\",{\"1\":{\"12\":2}}],[\"🔳\",{\"1\":{\"12\":2}}],[\"🔲\",{\"1\":{\"12\":2}}],[\"🔱\",{\"1\":{\"12\":2}}],[\"🔗\",{\"1\":{\"12\":2}}],[\"🔘\",{\"1\":{\"12\":2}}],[\"💯\",{\"1\":{\"12\":2}}],[\"💮\",{\"1\":{\"12\":2}}],[\"💲\",{\"1\":{\"12\":2}}],[\"🕤\",{\"1\":{\"12\":2}}],[\"🕘\",{\"1\":{\"12\":2}}],[\"🕣\",{\"1\":{\"12\":2}}],[\"🕗\",{\"1\":{\"12\":2}}],[\"🕢\",{\"1\":{\"12\":2}}],[\"🕖\",{\"1\":{\"12\":2}}],[\"🕡\",{\"1\":{\"12\":2}}],[\"🕕\",{\"1\":{\"12\":2}}],[\"🕠\",{\"1\":{\"12\":2}}],[\"🕔\",{\"1\":{\"12\":2}}],[\"🕟\",{\"1\":{\"12\":2}}],[\"🕓\",{\"1\":{\"12\":2}}],[\"🕞\",{\"1\":{\"12\":2}}],[\"🕒\",{\"1\":{\"12\":2}}],[\"🕝\",{\"1\":{\"12\":2}}],[\"🕑\",{\"1\":{\"12\":2}}],[\"🕧\",{\"1\":{\"12\":2}}],[\"🕛\",{\"1\":{\"12\":2}}],[\"🕦\",{\"1\":{\"12\":2}}],[\"🕚\",{\"1\":{\"12\":2}}],[\"🕥\",{\"1\":{\"12\":2}}],[\"🕙\",{\"1\":{\"12\":2}}],[\"🕜\",{\"1\":{\"12\":2}}],[\"🕐\",{\"1\":{\"12\":2}}],[\"🔜\",{\"1\":{\"12\":2}}],[\"🔛\",{\"1\":{\"12\":2}}],[\"🔙\",{\"1\":{\"12\":2}}],[\"🔚\",{\"1\":{\"12\":2}}],[\"💠\",{\"1\":{\"12\":2}}],[\"🔯\",{\"1\":{\"12\":2}}],[\"💱\",{\"1\":{\"12\":2}}],[\"💹\",{\"1\":{\"12\":2}}],[\"📴\",{\"1\":{\"12\":2}}],[\"📳\",{\"1\":{\"12\":2}}],[\"💟\",{\"1\":{\"12\":2}}],[\"🚸\",{\"1\":{\"12\":2}}],[\"🚷\",{\"1\":{\"12\":2}}],[\"🚳\",{\"1\":{\"12\":2}}],[\"🚱\",{\"1\":{\"12\":2}}],[\"🚯\",{\"1\":{\"12\":2}}],[\"📵\",{\"1\":{\"12\":2}}],[\"🔞\",{\"1\":{\"12\":2}}],[\"🚫\",{\"1\":{\"12\":2}}],[\"🛃\",{\"1\":{\"12\":2}}],[\"🛅\",{\"1\":{\"12\":2}}],[\"🛂\",{\"1\":{\"12\":2}}],[\"🚮\",{\"1\":{\"12\":2}}],[\"🚰\",{\"1\":{\"12\":2}}],[\"🚾\",{\"1\":{\"12\":2}}],[\"🛄\",{\"1\":{\"12\":2}}],[\"🚇\",{\"1\":{\"12\":2}}],[\"🚭\",{\"1\":{\"12\":2}}],[\"🚼\",{\"1\":{\"12\":2}}],[\"🚺\",{\"1\":{\"12\":2}}],[\"🚹\",{\"1\":{\"12\":2}}],[\"🚻\",{\"1\":{\"12\":2}}],[\"📶\",{\"1\":{\"12\":2}}],[\"🔝\",{\"1\":{\"12\":2}}],[\"🔂\",{\"1\":{\"12\":2}}],[\"🔁\",{\"1\":{\"12\":2}}],[\"🔀\",{\"1\":{\"12\":2}}],[\"🔄\",{\"1\":{\"12\":2}}],[\"🔃\",{\"1\":{\"12\":2}}],[\"🔼\",{\"1\":{\"12\":2}}],[\"🔽\",{\"1\":{\"12\":2}}],[\"🔤\",{\"1\":{\"12\":2}}],[\"🔡\",{\"1\":{\"12\":2}}],[\"🔠\",{\"1\":{\"12\":2}}],[\"🔣\",{\"1\":{\"12\":2}}],[\"🔢\",{\"1\":{\"12\":2}}],[\"🔟\",{\"1\":{\"12\":2}}],[\"👓\",{\"1\":{\"11\":2}}],[\"👛\",{\"1\":{\"11\":2}}],[\"👝\",{\"1\":{\"11\":2}}],[\"👜\",{\"1\":{\"11\":2}}],[\"💼\",{\"1\":{\"11\":2}}],[\"👒\",{\"1\":{\"11\":2}}],[\"👑\",{\"1\":{\"11\":2}}],[\"👙\",{\"1\":{\"11\":2}}],[\"👘\",{\"1\":{\"11\":2}}],[\"👖\",{\"1\":{\"11\":2}}],[\"👗\",{\"1\":{\"11\":2}}],[\"👚\",{\"1\":{\"11\":2}}],[\"👔\",{\"1\":{\"11\":2}}],[\"👕\",{\"1\":{\"11\":4}}],[\"👢\",{\"1\":{\"11\":2}}],[\"💄\",{\"1\":{\"11\":2}}],[\"👠\",{\"1\":{\"11\":2}}],[\"👡\",{\"1\":{\"11\":2}}],[\"👞\",{\"1\":{\"11\":4}}],[\"📖\",{\"1\":{\"11\":2}}],[\"📝\",{\"1\":{\"11\":4}}],[\"👾\",{\"1\":{\"11\":2}}],[\"💍\",{\"1\":{\"11\":2}}],[\"💎\",{\"1\":{\"11\":2}}],[\"🚴\",{\"1\":{\"11\":2}}],[\"🚵\",{\"1\":{\"11\":2}}],[\"📰\",{\"1\":{\"11\":2}}],[\"🔭\",{\"1\":{\"11\":2}}],[\"🔬\",{\"1\":{\"11\":2}}],[\"📛\",{\"1\":{\"11\":2}}],[\"🔖\",{\"1\":{\"11\":2}}],[\"📚\",{\"1\":{\"11\":2}}],[\"📒\",{\"1\":{\"11\":2}}],[\"📔\",{\"1\":{\"11\":2}}],[\"📓\",{\"1\":{\"11\":2}}],[\"📙\",{\"1\":{\"11\":2}}],[\"📘\",{\"1\":{\"11\":2}}],[\"📗\",{\"1\":{\"11\":2}}],[\"📕\",{\"1\":{\"11\":2}}],[\"📐\",{\"1\":{\"11\":2}}],[\"📏\",{\"1\":{\"11\":2}}],[\"📎\",{\"1\":{\"11\":2}}],[\"📌\",{\"1\":{\"11\":2}}],[\"📂\",{\"1\":{\"11\":2}}],[\"📁\",{\"1\":{\"11\":2}}],[\"📇\",{\"1\":{\"11\":2}}],[\"📅\",{\"1\":{\"11\":2}}],[\"📆\",{\"1\":{\"11\":2}}],[\"📋\",{\"1\":{\"11\":2}}],[\"📜\",{\"1\":{\"11\":2}}],[\"📉\",{\"1\":{\"11\":2}}],[\"📈\",{\"1\":{\"11\":2}}],[\"📊\",{\"1\":{\"11\":2}}],[\"📑\",{\"1\":{\"11\":2}}],[\"📃\",{\"1\":{\"11\":2}}],[\"📄\",{\"1\":{\"11\":2}}],[\"💉\",{\"1\":{\"11\":2}}],[\"💊\",{\"1\":{\"11\":2}}],[\"🔪\",{\"1\":{\"11\":2}}],[\"🔫\",{\"1\":{\"11\":2}}],[\"💣\",{\"1\":{\"11\":2}}],[\"🚬\",{\"1\":{\"11\":2}}],[\"🚪\",{\"1\":{\"11\":2}}],[\"📦\",{\"1\":{\"11\":2}}],[\"📭\",{\"1\":{\"11\":2}}],[\"📬\",{\"1\":{\"11\":2}}],[\"📪\",{\"1\":{\"11\":2}}],[\"📯\",{\"1\":{\"11\":2}}],[\"📨\",{\"1\":{\"11\":2}}],[\"📤\",{\"1\":{\"11\":2}}],[\"📥\",{\"1\":{\"11\":2}}],[\"💸\",{\"1\":{\"11\":2}}],[\"💳\",{\"1\":{\"11\":2}}],[\"💶\",{\"1\":{\"11\":2}}],[\"💷\",{\"1\":{\"11\":2}}],[\"💵\",{\"1\":{\"11\":2}}],[\"💴\",{\"1\":{\"11\":2}}],[\"💰\",{\"1\":{\"11\":2}}],[\"💺\",{\"1\":{\"11\":2}}],[\"🔨\",{\"1\":{\"11\":2}}],[\"🔩\",{\"1\":{\"11\":2}}],[\"🔧\",{\"1\":{\"11\":2}}],[\"🚽\",{\"1\":{\"11\":2}}],[\"🚿\",{\"1\":{\"11\":2}}],[\"🛁\",{\"1\":{\"11\":2}}],[\"🛀\",{\"1\":{\"11\":2}}],[\"📮\",{\"1\":{\"11\":2}}],[\"📫\",{\"1\":{\"11\":2}}],[\"📧\",{\"1\":{\"11\":4}}],[\"📲\",{\"1\":{\"11\":2}}],[\"🔋\",{\"1\":{\"11\":2}}],[\"🔌\",{\"1\":{\"11\":2}}],[\"🔅\",{\"1\":{\"11\":2}}],[\"🔆\",{\"1\":{\"11\":2}}],[\"🔦\",{\"1\":{\"11\":2}}],[\"💡\",{\"1\":{\"11\":2}}],[\"🔑\",{\"1\":{\"11\":2}}],[\"🔐\",{\"1\":{\"11\":2}}],[\"🔏\",{\"1\":{\"11\":2}}],[\"🔒\",{\"1\":{\"11\":2}}],[\"🔓\",{\"1\":{\"11\":2}}],[\"🔎\",{\"1\":{\"11\":2}}],[\"🔍\",{\"1\":{\"11\":2}}],[\"📡\",{\"1\":{\"11\":2}}],[\"📻\",{\"1\":{\"11\":2}}],[\"📣\",{\"1\":{\"11\":2}}],[\"📢\",{\"1\":{\"11\":2}}],[\"🔇\",{\"1\":{\"11\":2}}],[\"🔈\",{\"1\":{\"11\":2}}],[\"🔉\",{\"1\":{\"11\":2}}],[\"📼\",{\"1\":{\"11\":2}}],[\"💽\",{\"1\":{\"11\":2}}],[\"📠\",{\"1\":{\"11\":2}}],[\"📟\",{\"1\":{\"11\":2}}],[\"📞\",{\"1\":{\"11\":2}}],[\"📱\",{\"1\":{\"11\":2}}],[\"📺\",{\"1\":{\"11\":2}}],[\"💻\",{\"1\":{\"11\":2}}],[\"📹\",{\"1\":{\"11\":2}}],[\"📷\",{\"1\":{\"11\":2}}],[\"💾\",{\"1\":{\"11\":2}}],[\"📀\",{\"1\":{\"11\":2}}],[\"💿\",{\"1\":{\"11\":2}}],[\"🔮\",{\"1\":{\"11\":2}}],[\"🔕\",{\"1\":{\"11\":2}}],[\"🔔\",{\"1\":{\"11\":2}}],[\"👻\",{\"1\":{\"11\":2}}],[\"💝\",{\"1\":{\"11\":2}}],[\"🚩\",{\"1\":{\"10\":2}}],[\"📍\",{\"1\":{\"10\":2}}],[\"🗿\",{\"1\":{\"10\":2}}],[\"💈\",{\"1\":{\"10\":2}}],[\"🚏\",{\"1\":{\"10\":2}}],[\"🔰\",{\"1\":{\"10\":2}}],[\"🚧\",{\"1\":{\"10\":2}}],[\"🚥\",{\"1\":{\"10\":2}}],[\"🚦\",{\"1\":{\"10\":2}}],[\"🚎\",{\"1\":{\"10\":2}}],[\"🚃\",{\"1\":{\"10\":2}}],[\"🚝\",{\"1\":{\"10\":2}}],[\"🚈\",{\"1\":{\"10\":2}}],[\"🚄\",{\"1\":{\"10\":2}}],[\"🚅\",{\"1\":{\"10\":2}}],[\"🚆\",{\"1\":{\"10\":2}}],[\"🚉\",{\"1\":{\"10\":2}}],[\"🚋\",{\"1\":{\"10\":2}}],[\"🚚\",{\"1\":{\"10\":2}}],[\"🚐\",{\"1\":{\"10\":2}}],[\"🚑\",{\"1\":{\"10\":2}}],[\"🚒\",{\"1\":{\"10\":2}}],[\"🚔\",{\"1\":{\"10\":2}}],[\"🚓\",{\"1\":{\"10\":2}}],[\"🚨\",{\"1\":{\"10\":2}}],[\"🚍\",{\"1\":{\"10\":2}}],[\"🚌\",{\"1\":{\"10\":2}}],[\"🚛\",{\"1\":{\"10\":2}}],[\"🚖\",{\"1\":{\"10\":2}}],[\"🚕\",{\"1\":{\"10\":2}}],[\"🚗\",{\"1\":{\"10\":4}}],[\"🚘\",{\"1\":{\"10\":2}}],[\"🚙\",{\"1\":{\"10\":2}}],[\"🚜\",{\"1\":{\"10\":2}}],[\"🚠\",{\"1\":{\"10\":2}}],[\"🚟\",{\"1\":{\"10\":2}}],[\"🚡\",{\"1\":{\"10\":2}}],[\"🚲\",{\"1\":{\"10\":2}}],[\"🚞\",{\"1\":{\"10\":2}}],[\"🚊\",{\"1\":{\"10\":2}}],[\"🚂\",{\"1\":{\"10\":2}}],[\"🚁\",{\"1\":{\"10\":2}}],[\"🚀\",{\"1\":{\"10\":2}}],[\"🚣\",{\"1\":{\"10\":2}}],[\"🚤\",{\"1\":{\"10\":2}}],[\"🚢\",{\"1\":{\"10\":2}}],[\"🗽\",{\"1\":{\"10\":2}}],[\"🗻\",{\"1\":{\"10\":2}}],[\"🗾\",{\"1\":{\"10\":2}}],[\"🗼\",{\"1\":{\"10\":2}}],[\"💒\",{\"1\":{\"10\":2}}],[\"💭\",{\"1\":{\"9\":2}}],[\"💬\",{\"1\":{\"9\":2}}],[\"👥\",{\"1\":{\"9\":2}}],[\"👤\",{\"1\":{\"9\":2}}],[\"💌\",{\"1\":{\"9\":2}}],[\"👅\",{\"1\":{\"9\":2}}],[\"👃\",{\"1\":{\"9\":2}}],[\"👀\",{\"1\":{\"9\":2}}],[\"👂\",{\"1\":{\"9\":2}}],[\"💧\",{\"1\":{\"9\":2}}],[\"💋\",{\"1\":{\"9\":2}}],[\"👄\",{\"1\":{\"9\":2}}],[\"🐾\",{\"1\":{\"9\":2,\"13\":2}}],[\"💀\",{\"1\":{\"9\":2}}],[\"💂‍♂️\",{\"1\":{\"9\":2}}],[\"🙊\",{\"1\":{\"9\":2}}],[\"🙉\",{\"1\":{\"9\":2}}],[\"🙈\",{\"1\":{\"9\":2}}],[\"👺\",{\"1\":{\"9\":2}}],[\"👹\",{\"1\":{\"9\":2}}],[\"😾\",{\"1\":{\"9\":2}}],[\"😹\",{\"1\":{\"9\":2}}],[\"😿\",{\"1\":{\"9\":2}}],[\"🙀\",{\"1\":{\"9\":2}}],[\"😼\",{\"1\":{\"9\":2}}],[\"😽\",{\"1\":{\"9\":2}}],[\"😻\",{\"1\":{\"9\":2}}],[\"😸\",{\"1\":{\"9\":2}}],[\"😺\",{\"1\":{\"9\":2}}],[\"👸\",{\"1\":{\"9\":2}}],[\"👼\",{\"1\":{\"9\":2}}],[\"👮\",{\"1\":{\"9\":2}}],[\"👷\",{\"1\":{\"9\":2}}],[\"👳‍♂️\",{\"1\":{\"9\":2}}],[\"👲\",{\"1\":{\"9\":2}}],[\"👴\",{\"1\":{\"9\":2}}],[\"👵\",{\"1\":{\"9\":2}}],[\"👶\",{\"1\":{\"9\":2}}],[\"👨\",{\"1\":{\"9\":2}}],[\"👩\",{\"1\":{\"9\":2}}],[\"👧\",{\"1\":{\"9\":2}}],[\"👦\",{\"1\":{\"9\":2}}],[\"💅\",{\"1\":{\"9\":2}}],[\"💇\",{\"1\":{\"9\":2}}],[\"💆\",{\"1\":{\"9\":2}}],[\"💑\",{\"1\":{\"9\":2}}],[\"🙇\",{\"1\":{\"9\":2}}],[\"👰‍♀️\",{\"1\":{\"9\":2}}],[\"🙋\",{\"1\":{\"9\":2}}],[\"💁\",{\"1\":{\"9\":2}}],[\"🙅\",{\"1\":{\"9\":2}}],[\"🙆‍♀️\",{\"1\":{\"9\":2}}],[\"👯\",{\"1\":{\"9\":2}}],[\"💃\",{\"1\":{\"9\":2}}],[\"👭\",{\"1\":{\"9\":2}}],[\"👬\",{\"1\":{\"9\":2}}],[\"👪\",{\"1\":{\"9\":2}}],[\"👫\",{\"1\":{\"9\":2}}],[\"🖕\",{\"1\":{\"9\":2}}],[\"💪\",{\"1\":{\"9\":2}}],[\"👏\",{\"1\":{\"9\":2}}],[\"👆\",{\"1\":{\"9\":2}}],[\"🙏\",{\"1\":{\"9\":2}}],[\"🙌\",{\"1\":{\"9\":2}}],[\"👉\",{\"1\":{\"9\":2}}],[\"👈\",{\"1\":{\"9\":2}}],[\"👇\",{\"1\":{\"9\":2}}],[\"👐\",{\"1\":{\"9\":2}}],[\"👋\",{\"1\":{\"9\":2}}],[\"👊\",{\"1\":{\"9\":4}}],[\"👌\",{\"1\":{\"9\":2}}],[\"👎\",{\"1\":{\"9\":4}}],[\"👍\",{\"1\":{\"9\":4}}],[\"💩\",{\"1\":{\"9\":6}}],[\"🔥\",{\"1\":{\"9\":2}}],[\"💦\",{\"1\":{\"9\":2}}],[\"💨\",{\"1\":{\"9\":2}}],[\"💤\",{\"1\":{\"9\":2}}],[\"💢\",{\"1\":{\"9\":2}}],[\"💥\",{\"1\":{\"9\":4}}],[\"💫\",{\"1\":{\"9\":2}}],[\"💖\",{\"1\":{\"9\":2}}],[\"💘\",{\"1\":{\"9\":2}}],[\"💞\",{\"1\":{\"9\":2}}],[\"💕\",{\"1\":{\"9\":2}}],[\"💗\",{\"1\":{\"9\":2}}],[\"💓\",{\"1\":{\"9\":2}}],[\"💔\",{\"1\":{\"9\":2}}],[\"💚\",{\"1\":{\"9\":2}}],[\"💜\",{\"1\":{\"9\":2}}],[\"💙\",{\"1\":{\"9\":2}}],[\"💛\",{\"1\":{\"9\":2}}],[\"👽\",{\"1\":{\"9\":2}}],[\"😇\",{\"1\":{\"9\":2}}],[\"😶\",{\"1\":{\"9\":2}}],[\"😐\",{\"1\":{\"9\":2}}],[\"😈\",{\"1\":{\"9\":2}}],[\"👿\",{\"1\":{\"9\":2}}],[\"😵\",{\"1\":{\"9\":2}}],[\"😎\",{\"1\":{\"9\":2}}],[\"😷\",{\"1\":{\"9\":2}}],[\"😋\",{\"1\":{\"9\":2}}],[\"😪\",{\"1\":{\"9\":2}}],[\"😤\",{\"1\":{\"9\":2}}],[\"😡\",{\"1\":{\"9\":2}}],[\"😠\",{\"1\":{\"9\":2}}],[\"😫\",{\"1\":{\"9\":2}}],[\"😱\",{\"1\":{\"9\":2}}],[\"😲\",{\"1\":{\"9\":2}}],[\"😂\",{\"1\":{\"9\":2}}],[\"😭\",{\"1\":{\"9\":2}}],[\"😢\",{\"1\":{\"9\":2}}],[\"😣\",{\"1\":{\"9\":2}}],[\"😰\",{\"1\":{\"9\":2}}],[\"😨\",{\"1\":{\"9\":2}}],[\"😖\",{\"1\":{\"9\":2}}],[\"😞\",{\"1\":{\"9\":2}}],[\"😔\",{\"1\":{\"9\":2}}],[\"😩\",{\"1\":{\"9\":2}}],[\"😥\",{\"1\":{\"9\":2}}],[\"😓\",{\"1\":{\"9\":2}}],[\"😅\",{\"1\":{\"9\":2}}],[\"😒\",{\"1\":{\"9\":2}}],[\"😑\",{\"1\":{\"9\":2}}],[\"😯\",{\"1\":{\"9\":2}}],[\"😕\",{\"1\":{\"9\":2}}],[\"😬\",{\"1\":{\"9\":2}}],[\"😮\",{\"1\":{\"9\":2}}],[\"😧\",{\"1\":{\"9\":2}}],[\"😦\",{\"1\":{\"9\":2}}],[\"😟\",{\"1\":{\"9\":2}}],[\"😴\",{\"1\":{\"9\":2}}],[\"😛\",{\"1\":{\"9\":2}}],[\"😙\",{\"1\":{\"9\":2}}],[\"😗\",{\"1\":{\"9\":2}}],[\"😀\",{\"1\":{\"9\":2}}],[\"😝\",{\"1\":{\"9\":2}}],[\"😜\",{\"1\":{\"9\":2}}],[\"😉\",{\"1\":{\"9\":2}}],[\"😁\",{\"1\":{\"9\":2}}],[\"😌\",{\"1\":{\"9\":2}}],[\"😳\",{\"1\":{\"9\":2}}],[\"😚\",{\"1\":{\"9\":2}}],[\"😘\",{\"1\":{\"9\":2}}],[\"😍\",{\"1\":{\"9\":2}}],[\"😏\",{\"1\":{\"9\":2}}],[\"😃\",{\"1\":{\"9\":2}}],[\"😊\",{\"1\":{\"9\":2}}],[\"😆\",{\"1\":{\"9\":4}}],[\"😄\",{\"1\":{\"9\":2}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
