import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,i as n}from"./app-DfRKKd8F.js";const l={},e=n(`<h2 id="图像处理" tabindex="-1"><a class="header-anchor" href="#图像处理"><span>图像处理</span></a></h2><p>图像处理理论是计算机视觉和数字图像处理的重要基础，涉及多个领域的知识。以下是一些关键理论概念的简介：</p><h3 id="_1-图像的表示" tabindex="-1"><a class="header-anchor" href="#_1-图像的表示"><span>1. <strong>图像的表示</strong></span></a></h3><ul><li><strong>像素</strong>：图像是由许多像素组成的，每个像素代表图像中的一个点，并且具有颜色和亮度等属性。</li><li><strong>颜色模型</strong>：常见的颜色模型包括RGB（红绿蓝）、CMYK（青色、品红色、黄色和黑色）和灰度图像（仅有亮度信息）。</li></ul><h3 id="_2-图像变换" tabindex="-1"><a class="header-anchor" href="#_2-图像变换"><span>2. <strong>图像变换</strong></span></a></h3><ul><li><strong>傅里叶变换</strong>：用于将图像从空间域转换到频率域，帮助分析图像的频率特性，如噪声过滤。</li><li><strong>离散余弦变换（DCT）</strong>：用于图像压缩（如JPEG），通过将图像表示为一系列余弦函数的加权和。</li></ul><h3 id="_3-图像增强" tabindex="-1"><a class="header-anchor" href="#_3-图像增强"><span>3. <strong>图像增强</strong></span></a></h3><ul><li><strong>直方图均衡化</strong>：通过调整图像的亮度分布来增强对比度，使得图像的细节更加清晰。</li><li><strong>滤波</strong>：使用卷积核（如高斯滤波、拉普拉斯滤波）来平滑图像、去除噪声或增强边缘。</li></ul><h3 id="_4-图像分割" tabindex="-1"><a class="header-anchor" href="#_4-图像分割"><span>4. <strong>图像分割</strong></span></a></h3><ul><li><strong>阈值分割</strong>：通过选择适当的阈值，将图像分割为前景和背景。</li><li><strong>边缘检测</strong>：检测图像中强度变化剧烈的区域，常用算法包括Canny、Sobel和Prewitt。</li><li><strong>区域增长</strong>：基于初始的“种子”点，通过将相似的邻近像素合并来分割区域。</li></ul><h3 id="_5-形态学处理" tabindex="-1"><a class="header-anchor" href="#_5-形态学处理"><span>5. <strong>形态学处理</strong></span></a></h3><ul><li><strong>膨胀和腐蚀</strong>：用于处理二值图像的形态操作，可以去除噪声、填补空洞或突出物体的形态特征。</li><li><strong>开运算和闭运算</strong>：组合膨胀和腐蚀的操作，用于平滑物体边缘或断开细小的连接。</li></ul><h3 id="_6-特征提取" tabindex="-1"><a class="header-anchor" href="#_6-特征提取"><span>6. <strong>特征提取</strong></span></a></h3><ul><li><strong>角点检测</strong>：如Harris角点检测，用于在图像中检测出显著的角点，以便进行特征匹配和图像配准。</li><li><strong>纹理分析</strong>：利用统计方法（如共生矩阵）或频域方法（如小波变换）提取图像的纹理特征。</li></ul><h3 id="_7-图像复原" tabindex="-1"><a class="header-anchor" href="#_7-图像复原"><span>7. <strong>图像复原</strong></span></a></h3><ul><li><strong>去模糊</strong>：使用逆滤波、维纳滤波等方法恢复因模糊、噪声等引起的图像退化。</li><li><strong>插值方法</strong>：如双线性插值、双三次插值，用于放大或缩小图像时恢复图像的细节。</li></ul><h3 id="_8-机器学习与深度学习在图像处理中的应用" tabindex="-1"><a class="header-anchor" href="#_8-机器学习与深度学习在图像处理中的应用"><span>8. <strong>机器学习与深度学习在图像处理中的应用</strong></span></a></h3><ul><li><strong>卷积神经网络（CNN）</strong>：用于图像分类、对象检测等任务，通过自动学习图像的特征。</li><li><strong>生成对抗网络（GAN）</strong>：用于图像生成、去噪和超分辨率重建等。</li></ul><h2 id="图像处理的工具" tabindex="-1"><a class="header-anchor" href="#图像处理的工具"><span>图像处理的工具</span></a></h2><p>图像处理有许多工具可供使用，涵盖了从基本编辑到高级分析的各个方面。以下是一些常用的图像处理工具：</p><h3 id="_1-编程库和框架" tabindex="-1"><a class="header-anchor" href="#_1-编程库和框架"><span>1. <strong>编程库和框架</strong></span></a></h3><ul><li><strong>OpenCV</strong>：一个强大的开源计算机视觉库，支持多种编程语言（如Python、C++）。提供了图像读取、处理、分析等丰富的功能。</li><li><strong>Pillow</strong>：Python Imaging Library (PIL) 的一个分支，适用于图像处理的轻量级库，特别适合进行基本图像操作，如剪裁、旋转、滤镜应用等。</li><li><strong>scikit-image</strong>：基于Python的图像处理库，构建于SciPy之上，提供了丰富的图像处理算法和工具。</li><li><strong>MATLAB</strong>：拥有强大的图像处理工具箱，适合学术研究和工业应用，常用于原型开发和算法验证。</li><li><strong>GIMP</strong>：GNU图像处理程序，是一个免费的开源图像编辑工具，类似于Adobe Photoshop，支持各种图像编辑和处理操作。</li></ul><h3 id="_2-商业软件" tabindex="-1"><a class="header-anchor" href="#_2-商业软件"><span>2. <strong>商业软件</strong></span></a></h3><ul><li><strong>Adobe Photoshop</strong>：专业的图像编辑软件，提供了全面的图像处理和设计工具，适用于图像编辑、修复、增强、合成等。</li><li><strong>CorelDRAW</strong>：图像编辑和矢量图形设计软件，广泛用于印刷设计和多媒体制作。</li><li><strong>Adobe Lightroom</strong>：专注于照片的组织和处理，特别适合摄影师处理和调整大量图像。</li></ul><h3 id="_3-在线工具" tabindex="-1"><a class="header-anchor" href="#_3-在线工具"><span>3. <strong>在线工具</strong></span></a></h3><ul><li><strong>Canva</strong>：一种在线图形设计工具，提供了简单易用的界面，适合非专业用户进行图像编辑和设计。</li><li><strong>Fotor</strong>：一个在线图像编辑平台，提供了基本的图像处理功能，如裁剪、调整、滤镜应用等。</li><li><strong>Pixlr</strong>：在线图像编辑工具，具有类似Photoshop的界面和功能，可以在浏览器中直接使用。</li></ul><h3 id="_4-深度学习框架" tabindex="-1"><a class="header-anchor" href="#_4-深度学习框架"><span>4. <strong>深度学习框架</strong></span></a></h3><ul><li><strong>TensorFlow 和 Keras</strong>：用于图像处理和计算机视觉任务的深度学习框架，广泛应用于图像分类、对象检测、图像生成等任务。</li><li><strong>PyTorch</strong>：一个深度学习框架，提供灵活的动态计算图，非常适合研究和原型开发。</li><li><strong>Detectron2</strong>：Facebook AI Research (FAIR) 的开源对象检测平台，基于PyTorch，用于最先进的目标检测和分割任务。</li></ul><h3 id="_5-图像处理与分析平台" tabindex="-1"><a class="header-anchor" href="#_5-图像处理与分析平台"><span>5. <strong>图像处理与分析平台</strong></span></a></h3><ul><li><strong>ImageJ</strong>：一个基于Java的图像处理和分析工具，广泛用于生物医学图像分析，支持插件扩展和脚本编写。</li><li><strong>NI Vision</strong>：由National Instruments开发的图像处理工具，集成于LabVIEW中，适合工业视觉检测应用。</li></ul><h2 id="python的图像处理" tabindex="-1"><a class="header-anchor" href="#python的图像处理"><span>python的图像处理</span></a></h2><p>Python 是图像处理领域非常流行的编程语言，拥有丰富的库和工具来处理和分析图像。以下是一些常用的 Python 图像处理库及其功能介绍：</p><h3 id="_1-opencv" tabindex="-1"><a class="header-anchor" href="#_1-opencv"><span>1. <strong>OpenCV</strong></span></a></h3><ul><li><strong>功能</strong>：OpenCV 是一个强大的计算机视觉库，支持各种图像处理操作，如读取、显示、剪裁、旋转、缩放、滤波、边缘检测、特征提取等。它还支持视频处理、对象检测和跟踪、图像分割、深度学习模型的集成等高级功能。</li><li><strong>安装</strong>：<code>pip install opencv-python</code></li><li><strong>示例代码</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gray_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gray_image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-pillow-pil" tabindex="-1"><a class="header-anchor" href="#_2-pillow-pil"><span>2. <strong>Pillow (PIL)</strong></span></a></h3><ul><li><strong>功能</strong>：Pillow 是一个用于基本图像处理的库，可以执行图像打开、保存、剪裁、滤镜应用、颜色调整等操作。它是 Python Imaging Library (PIL) 的一个分支和改进版，适合需要简单图像处理的场景。</li><li><strong>安装</strong>：<code>pip install Pillow</code></li><li><strong>示例代码</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PIL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image, ImageFilter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image.open(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blurred_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image.filter(ImageFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLUR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blurred_image.save(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blurred_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-scikit-image" tabindex="-1"><a class="header-anchor" href="#_3-scikit-image"><span>3. <strong>scikit-image</strong></span></a></h3><ul><li><strong>功能</strong>：scikit-image 是一个基于 SciPy 的图像处理库，提供了高级的图像处理算法和工具，如图像分割、几何变换、颜色空间处理、特征提取、去噪等。它与其他科学计算库（如 NumPy 和 SciPy）无缝集成。</li><li><strong>安装</strong>：<code>pip install scikit-image</code></li><li><strong>示例代码</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> skimage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io, filters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">as_gray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">edges </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filters.sobel(image)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.imsave(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;edges.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, edges)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-numpy" tabindex="-1"><a class="header-anchor" href="#_4-numpy"><span>4. <strong>NumPy</strong></span></a></h3><ul><li><strong>功能</strong>：NumPy 是 Python 的一个强大的数值计算库，虽然它不是专门用于图像处理的，但由于图像可以被视为多维数组，NumPy 在图像处理中的作用非常重要。许多图像处理操作，如图像变换、滤波、颜色通道处理等，都可以通过 NumPy 实现。</li><li><strong>安装</strong>：<code>pip install numpy</code></li><li><strong>示例代码</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flipped_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.flipud(image)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;flipped_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, flipped_image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-matplotlib" tabindex="-1"><a class="header-anchor" href="#_5-matplotlib"><span>5. <strong>Matplotlib</strong></span></a></h3><ul><li><strong>功能</strong>：Matplotlib 是一个绘图库，虽然它主要用于数据可视化，但也可以用于显示和处理图像。它可以方便地展示图像，并进行一些简单的处理操作，如绘制直方图、调整颜色通道等。</li><li><strong>安装</strong>：<code>pip install matplotlib</code></li><li><strong>示例代码</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matplotlib.pyplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.imshow(cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.show()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_6-imageai" tabindex="-1"><a class="header-anchor" href="#_6-imageai"><span>6. <strong>ImageAI</strong></span></a></h3><ul><li><strong>功能</strong>：ImageAI 是一个基于深度学习的图像处理库，简化了图像分类、对象检测、图像识别等任务的实现。它支持多种预训练模型，如 ResNet、YOLO、RetinaNet 等。</li><li><strong>安装</strong>：<code>pip install imageai --upgrade</code></li><li><strong>示例代码</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageai.Detection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ObjectDetection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">detector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ObjectDetection()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">detector.setModelTypeAsRetinaNet()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">detector.setModelPath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resnet50_coco_best_v2.0.1.h5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">detector.loadModel()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">detections </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> detector.detectObjectsFromImage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input_image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">output_image_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;detected.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="matlab的图像处理" tabindex="-1"><a class="header-anchor" href="#matlab的图像处理"><span>MATLAB的图像处理</span></a></h2><p>MATLAB 是图像处理领域中非常强大且广泛使用的工具，尤其在学术研究和工程应用中。MATLAB 提供了丰富的图像处理工具箱（Image Processing Toolbox），可以处理各种图像分析任务。以下是 MATLAB 在图像处理中的主要功能和一些基本操作示例：</p><h3 id="_1-图像读取与显示" tabindex="-1"><a class="header-anchor" href="#_1-图像读取与显示"><span>1. <strong>图像读取与显示</strong></span></a></h3><ul><li><strong>功能</strong>：读取和显示图像文件。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 读取图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image = imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 显示图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(image);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 显示图像的基本信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imfinfo(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-图像转换" tabindex="-1"><a class="header-anchor" href="#_2-图像转换"><span>2. <strong>图像转换</strong></span></a></h3><ul><li><strong>功能</strong>：转换图像的颜色空间，进行灰度化等操作。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 转换为灰度图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image = rgb2gray(image);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 显示灰度图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(gray_image);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-图像增强-1" tabindex="-1"><a class="header-anchor" href="#_3-图像增强-1"><span>3. <strong>图像增强</strong></span></a></h3><ul><li><strong>功能</strong>：通过直方图均衡化、调整对比度和滤波等方法增强图像。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 直方图均衡化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enhanced_image = histeq(gray_image);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 显示增强后的图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(enhanced_image);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 应用高斯滤波</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gaussian_filtered_image = imgaussfilt(image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(gaussian_filtered_image);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-边缘检测" tabindex="-1"><a class="header-anchor" href="#_4-边缘检测"><span>4. <strong>边缘检测</strong></span></a></h3><ul><li><strong>功能</strong>：使用不同的算法（如 Sobel、Canny）检测图像中的边缘。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 使用 Canny 算法进行边缘检测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">edges = edge(gray_image, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Canny&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(edges);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-图像分割" tabindex="-1"><a class="header-anchor" href="#_5-图像分割"><span>5. <strong>图像分割</strong></span></a></h3><ul><li><strong>功能</strong>：使用阈值分割、区域生长或分水岭算法对图像进行分割。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% Otsu 阈值分割</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">level = graythresh(gray_image);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bw_image = imbinarize(gray_image, level);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(bw_image);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 分水岭算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L = watershed(imcomplement(gray_image));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(label2rgb(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_6-形态学操作" tabindex="-1"><a class="header-anchor" href="#_6-形态学操作"><span>6. <strong>形态学操作</strong></span></a></h3><ul><li><strong>功能</strong>：进行膨胀、腐蚀、开运算、闭运算等形态学操作，处理二值图像的形态特征。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 创建一个结构元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">se = strel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;disk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 进行膨胀操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dilated_image = imdilate(bw_image, se);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(dilated_image);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 进行腐蚀操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eroded_image = imerode(bw_image, se);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(eroded_image);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_7-特征提取" tabindex="-1"><a class="header-anchor" href="#_7-特征提取"><span>7. <strong>特征提取</strong></span></a></h3><ul><li><strong>功能</strong>：从图像中提取角点、边缘、纹理等特征，用于图像匹配和识别。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% Harris 角点检测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corners = detectHarrisFeatures(gray_image);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(image); hold </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plot(corners.selectStrongest(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_8-图像复原" tabindex="-1"><a class="header-anchor" href="#_8-图像复原"><span>8. <strong>图像复原</strong></span></a></h3><ul><li><strong>功能</strong>：去除图像中的噪声和模糊，进行去噪或反卷积处理。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 使用维纳滤波进行去噪</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">noisy_image = imnoise(gray_image, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gaussian&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">restored_image = wiener2(noisy_image, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(restored_image);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_9-图像的几何变换" tabindex="-1"><a class="header-anchor" href="#_9-图像的几何变换"><span>9. <strong>图像的几何变换</strong></span></a></h3><ul><li><strong>功能</strong>：执行图像的旋转、缩放、平移、仿射变换等。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 图像旋转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rotated_image = imrotate(image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(rotated_image);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 图像缩放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resized_image = imresize(image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imshow(resized_image);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_10-图像分析" tabindex="-1"><a class="header-anchor" href="#_10-图像分析"><span>10. <strong>图像分析</strong></span></a></h3><ul><li><strong>功能</strong>：计算图像的统计特性，进行区域属性测量（如区域面积、周长等）。</li><li><strong>示例代码</strong>：<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% 计算二值图像中区域的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stats = regionprops(bw_image, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Area&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Perimeter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">disp(stats);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="图像处理的实例" tabindex="-1"><a class="header-anchor" href="#图像处理的实例"><span>图像处理的实例</span></a></h2><p>以下是几个常见的图像处理实例，它们涵盖了基本的图像处理操作到一些高级的处理任务。每个实例都使用Python的库进行实现，主要使用OpenCV和Pillow（PIL）。</p><h3 id="实例-1-灰度转换" tabindex="-1"><a class="header-anchor" href="#实例-1-灰度转换"><span>实例 1：灰度转换</span></a></h3><p>将彩色图像转换为灰度图像是图像处理中的基本操作之一。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取彩色图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 转换为灰度图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存灰度图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gray_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gray_image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-2-高斯模糊" tabindex="-1"><a class="header-anchor" href="#实例-2-高斯模糊"><span>实例 2：高斯模糊</span></a></h3><p>高斯模糊用于去除图像中的噪声，平滑图像。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用高斯模糊</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blurred_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.GaussianBlur(image, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存模糊后的图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blurred_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, blurred_image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-3-边缘检测-canny算法" tabindex="-1"><a class="header-anchor" href="#实例-3-边缘检测-canny算法"><span>实例 3：边缘检测（Canny算法）</span></a></h3><p>使用Canny算法检测图像中的边缘，这对于许多计算机视觉任务是关键的一步。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像并转换为灰度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用Canny边缘检测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">edges </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.Canny(gray_image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存边缘检测结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;edges.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, edges)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-4-图像缩放" tabindex="-1"><a class="header-anchor" href="#实例-4-图像缩放"><span>实例 4：图像缩放</span></a></h3><p>图像缩放是图像处理中的基本几何变换操作之一。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PIL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image.open(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 缩放图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resized_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image.resize((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存缩放后的图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resized_image.save(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resized_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-5-图像旋转" tabindex="-1"><a class="header-anchor" href="#实例-5-图像旋转"><span>实例 5：图像旋转</span></a></h3><p>图像旋转是另一种常见的几何变换操作，通常用于数据增强或图像预处理。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PIL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image.open(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 旋转图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rotated_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image.rotate(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存旋转后的图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rotated_image.save(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rotated_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-6-图像直方图均衡化" tabindex="-1"><a class="header-anchor" href="#实例-6-图像直方图均衡化"><span>实例 6：图像直方图均衡化</span></a></h3><p>直方图均衡化用于增强图像对比度，使得图像的亮度分布更加均匀。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像并转换为灰度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用直方图均衡化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">equalized_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.equalizeHist(gray_image)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存均衡化后的图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;equalized_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, equalized_image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-7-图像二值化-thresholding" tabindex="-1"><a class="header-anchor" href="#实例-7-图像二值化-thresholding"><span>实例 7：图像二值化（Thresholding）</span></a></h3><p>二值化将图像转换为只有黑白两种颜色的图像，通常用于图像分割或边缘检测前的预处理。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像并转换为灰度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用二值化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_, binary_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.threshold(gray_image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">THRESH_BINARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存二值化后的图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;binary_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, binary_image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-8-图像形态学操作-膨胀与腐蚀" tabindex="-1"><a class="header-anchor" href="#实例-8-图像形态学操作-膨胀与腐蚀"><span>实例 8：图像形态学操作（膨胀与腐蚀）</span></a></h3><p>形态学操作用于处理图像的结构特征，常见操作包括膨胀、腐蚀、开运算、闭运算等。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取二值图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;binary_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建结构元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kernel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.ones((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), np.uint8)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 膨胀图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dilated_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.dilate(image, kernel, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 腐蚀图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eroded_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.erode(image, kernel, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dilated_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dilated_image)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;eroded_image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, eroded_image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-9-图像特征检测-harris角点检测" tabindex="-1"><a class="header-anchor" href="#实例-9-图像特征检测-harris角点检测"><span>实例 9：图像特征检测（Harris角点检测）</span></a></h3><p>Harris角点检测用于检测图像中的角点，常用于图像匹配和对象识别。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像并转换为灰度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Harris角点检测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.float32(gray_image)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cornerHarris(gray_image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.04</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将角点标注在原图上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image[dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dst.max()] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;harris_corners.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-10-人脸检测" tabindex="-1"><a class="header-anchor" href="#实例-10-人脸检测"><span>实例 10：人脸检测</span></a></h3><p>使用Haar级联分类器进行人脸检测，这是计算机视觉中的一个经典任务。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载预训练的人脸检测模型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">face_cascade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.CascadeClassifier(cv2.data.haarcascades </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;haarcascade_frontalface_default.xml&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取图像并转换为灰度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gray_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(image, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检测人脸</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">faces </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> face_cascade.detectMultiScale(gray_image, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scaleFactor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">minNeighbors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">minSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绘制矩形框标记人脸</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x, y, w, h) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> faces:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cv2.rectangle(image, (x, y), (x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cv2.imwrite(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;detected_faces.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, image)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,98),h=[e];function t(p,k){return a(),s("div",null,h)}const g=i(l,[["render",t],["__file","part23-图像处理.html.vue"]]),E=JSON.parse('{"path":"/documents/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/part23-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86.html","title":"图像处理","lang":"zh-CN","frontmatter":{"cover":"/assets/images/cover2.jpg","title":"图像处理","date":"2024-08-25T00:00:00.000Z","icon":"pen-to-square","author":null,"isOriginal":true,"category":["数学建模"],"tag":["数学建模"],"sticky":1,"star":1,"article":true,"timeline":true,"license":null,"description":"图像处理 图像处理理论是计算机视觉和数字图像处理的重要基础，涉及多个领域的知识。以下是一些关键理论概念的简介： 1. 图像的表示 像素：图像是由许多像素组成的，每个像素代表图像中的一个点，并且具有颜色和亮度等属性。 颜色模型：常见的颜色模型包括RGB（红绿蓝）、CMYK（青色、品红色、黄色和黑色）和灰度图像（仅有亮度信息）。 2. 图像变换 傅里叶变换...","head":[["meta",{"property":"og:url","content":"https://jianghu105.github.io/documents/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/part23-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Jianghu"}],["meta",{"property":"og:title","content":"图像处理"}],["meta",{"property":"og:description","content":"图像处理 图像处理理论是计算机视觉和数字图像处理的重要基础，涉及多个领域的知识。以下是一些关键理论概念的简介： 1. 图像的表示 像素：图像是由许多像素组成的，每个像素代表图像中的一个点，并且具有颜色和亮度等属性。 颜色模型：常见的颜色模型包括RGB（红绿蓝）、CMYK（青色、品红色、黄色和黑色）和灰度图像（仅有亮度信息）。 2. 图像变换 傅里叶变换..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jianghu105.github.io/assets/images/cover2.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://jianghu105.github.io/assets/images/cover2.jpg"}],["meta",{"name":"twitter:image:alt","content":"图像处理"}],["meta",{"property":"article:author","content":"Jianghu"}],["meta",{"property":"article:tag","content":"数学建模"}],["meta",{"property":"article:published_time","content":"2024-08-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图像处理\\",\\"image\\":[\\"https://jianghu105.github.io/assets/images/cover2.jpg\\"],\\"datePublished\\":\\"2024-08-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianghu\\",\\"url\\":\\"https://jianghu105.github.io/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"图像处理","slug":"图像处理","link":"#图像处理","children":[{"level":3,"title":"1. 图像的表示","slug":"_1-图像的表示","link":"#_1-图像的表示","children":[]},{"level":3,"title":"2. 图像变换","slug":"_2-图像变换","link":"#_2-图像变换","children":[]},{"level":3,"title":"3. 图像增强","slug":"_3-图像增强","link":"#_3-图像增强","children":[]},{"level":3,"title":"4. 图像分割","slug":"_4-图像分割","link":"#_4-图像分割","children":[]},{"level":3,"title":"5. 形态学处理","slug":"_5-形态学处理","link":"#_5-形态学处理","children":[]},{"level":3,"title":"6. 特征提取","slug":"_6-特征提取","link":"#_6-特征提取","children":[]},{"level":3,"title":"7. 图像复原","slug":"_7-图像复原","link":"#_7-图像复原","children":[]},{"level":3,"title":"8. 机器学习与深度学习在图像处理中的应用","slug":"_8-机器学习与深度学习在图像处理中的应用","link":"#_8-机器学习与深度学习在图像处理中的应用","children":[]}]},{"level":2,"title":"图像处理的工具","slug":"图像处理的工具","link":"#图像处理的工具","children":[{"level":3,"title":"1. 编程库和框架","slug":"_1-编程库和框架","link":"#_1-编程库和框架","children":[]},{"level":3,"title":"2. 商业软件","slug":"_2-商业软件","link":"#_2-商业软件","children":[]},{"level":3,"title":"3. 在线工具","slug":"_3-在线工具","link":"#_3-在线工具","children":[]},{"level":3,"title":"4. 深度学习框架","slug":"_4-深度学习框架","link":"#_4-深度学习框架","children":[]},{"level":3,"title":"5. 图像处理与分析平台","slug":"_5-图像处理与分析平台","link":"#_5-图像处理与分析平台","children":[]}]},{"level":2,"title":"python的图像处理","slug":"python的图像处理","link":"#python的图像处理","children":[{"level":3,"title":"1. OpenCV","slug":"_1-opencv","link":"#_1-opencv","children":[]},{"level":3,"title":"2. Pillow (PIL)","slug":"_2-pillow-pil","link":"#_2-pillow-pil","children":[]},{"level":3,"title":"3. scikit-image","slug":"_3-scikit-image","link":"#_3-scikit-image","children":[]},{"level":3,"title":"4. NumPy","slug":"_4-numpy","link":"#_4-numpy","children":[]},{"level":3,"title":"5. Matplotlib","slug":"_5-matplotlib","link":"#_5-matplotlib","children":[]},{"level":3,"title":"6. ImageAI","slug":"_6-imageai","link":"#_6-imageai","children":[]}]},{"level":2,"title":"MATLAB的图像处理","slug":"matlab的图像处理","link":"#matlab的图像处理","children":[{"level":3,"title":"1. 图像读取与显示","slug":"_1-图像读取与显示","link":"#_1-图像读取与显示","children":[]},{"level":3,"title":"2. 图像转换","slug":"_2-图像转换","link":"#_2-图像转换","children":[]},{"level":3,"title":"3. 图像增强","slug":"_3-图像增强-1","link":"#_3-图像增强-1","children":[]},{"level":3,"title":"4. 边缘检测","slug":"_4-边缘检测","link":"#_4-边缘检测","children":[]},{"level":3,"title":"5. 图像分割","slug":"_5-图像分割","link":"#_5-图像分割","children":[]},{"level":3,"title":"6. 形态学操作","slug":"_6-形态学操作","link":"#_6-形态学操作","children":[]},{"level":3,"title":"7. 特征提取","slug":"_7-特征提取","link":"#_7-特征提取","children":[]},{"level":3,"title":"8. 图像复原","slug":"_8-图像复原","link":"#_8-图像复原","children":[]},{"level":3,"title":"9. 图像的几何变换","slug":"_9-图像的几何变换","link":"#_9-图像的几何变换","children":[]},{"level":3,"title":"10. 图像分析","slug":"_10-图像分析","link":"#_10-图像分析","children":[]}]},{"level":2,"title":"图像处理的实例","slug":"图像处理的实例","link":"#图像处理的实例","children":[{"level":3,"title":"实例 1：灰度转换","slug":"实例-1-灰度转换","link":"#实例-1-灰度转换","children":[]},{"level":3,"title":"实例 2：高斯模糊","slug":"实例-2-高斯模糊","link":"#实例-2-高斯模糊","children":[]},{"level":3,"title":"实例 3：边缘检测（Canny算法）","slug":"实例-3-边缘检测-canny算法","link":"#实例-3-边缘检测-canny算法","children":[]},{"level":3,"title":"实例 4：图像缩放","slug":"实例-4-图像缩放","link":"#实例-4-图像缩放","children":[]},{"level":3,"title":"实例 5：图像旋转","slug":"实例-5-图像旋转","link":"#实例-5-图像旋转","children":[]},{"level":3,"title":"实例 6：图像直方图均衡化","slug":"实例-6-图像直方图均衡化","link":"#实例-6-图像直方图均衡化","children":[]},{"level":3,"title":"实例 7：图像二值化（Thresholding）","slug":"实例-7-图像二值化-thresholding","link":"#实例-7-图像二值化-thresholding","children":[]},{"level":3,"title":"实例 8：图像形态学操作（膨胀与腐蚀）","slug":"实例-8-图像形态学操作-膨胀与腐蚀","link":"#实例-8-图像形态学操作-膨胀与腐蚀","children":[]},{"level":3,"title":"实例 9：图像特征检测（Harris角点检测）","slug":"实例-9-图像特征检测-harris角点检测","link":"#实例-9-图像特征检测-harris角点检测","children":[]},{"level":3,"title":"实例 10：人脸检测","slug":"实例-10-人脸检测","link":"#实例-10-人脸检测","children":[]}]}],"git":{},"readingTime":{"minutes":12.02,"words":3605},"filePathRelative":"documents/数学建模/part23-图像处理.md","localizedDate":"2024年8月25日","excerpt":"","autoDesc":true}');export{g as comp,E as data};
