import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,i as n}from"./app-DfRKKd8F.js";const l={},e=n(`<h2 id="几何模型" tabindex="-1"><a class="header-anchor" href="#几何模型"><span>几何模型</span></a></h2><p>几何模型是指通过数学和计算技术来描述和表示几何对象或形状的数学模型。在计算机图形学、计算机辅助设计（CAD）、工程模拟和其他领域中，几何模型是基础工具。根据几何模型的构建方式和使用的数学工具，可以将其分为多种类型。以下是几种常见的几何模型：</p><h3 id="_1-实体模型-solid-models" tabindex="-1"><a class="header-anchor" href="#_1-实体模型-solid-models"><span>1. <strong>实体模型（Solid Models）</strong></span></a></h3><p>实体模型表示三维几何形状的体积和内部结构，通常用于工程设计和制造中。它们能够准确地描述物体的形状、体积和质量等特性。常见的实体模型包括：</p><ul><li><strong>边界表示法（Boundary Representation, B-Rep）</strong>：通过表示对象的表面来定义实体的几何形状，使用顶点、边和面来描述表面。</li><li><strong>构造实体几何（Constructive Solid Geometry, CSG）</strong>：使用基本几何体（如立方体、圆柱体等）通过布尔运算（如并、交、差）构造复杂的实体模型。</li></ul><p><strong>应用</strong>：产品设计、建筑建模、虚拟仿真。</p><h3 id="_2-曲面模型-surface-models" tabindex="-1"><a class="header-anchor" href="#_2-曲面模型-surface-models"><span>2. <strong>曲面模型（Surface Models）</strong></span></a></h3><p>曲面模型表示三维空间中的曲面而不关注物体的内部结构。它们通常用于表示光滑的自由形状，如汽车车身、船体、航空器等复杂曲面。</p><ul><li><strong>参数曲面（Parametric Surfaces）</strong>：通过参数化方程来定义曲面，例如贝塞尔曲面（Bezier Surfaces）、B样条曲面（B-Spline Surfaces）和NURBS（非均匀有理B样条）。</li><li><strong>多边形网格（Polygon Meshes）</strong>：使用三角形或四边形网格来近似曲面，广泛用于计算机图形学和游戏开发。</li></ul><p><strong>应用</strong>：工业设计、动画制作、3D打印。</p><h3 id="_3-线框模型-wireframe-models" tabindex="-1"><a class="header-anchor" href="#_3-线框模型-wireframe-models"><span>3. <strong>线框模型（Wireframe Models）</strong></span></a></h3><p>线框模型通过表示物体的边缘线来描述三维几何形状，不包含表面或体积信息。它是最简单的三维模型类型。</p><ul><li><strong>顶点和边表示</strong>：通过连接顶点的边线来构造模型，可以简单地描述复杂的几何结构。</li><li><strong>多视图表示</strong>：通常用于工程图中，以多种视角（如前视图、侧视图、俯视图）来显示物体的形状。</li></ul><p><strong>应用</strong>：初步设计、结构分析、建筑图纸。</p><h3 id="_4-点云模型-point-cloud-models" tabindex="-1"><a class="header-anchor" href="#_4-点云模型-point-cloud-models"><span>4. <strong>点云模型（Point Cloud Models）</strong></span></a></h3><p>点云模型使用大量的离散点来表示三维形状。这些点通常由激光扫描、结构光扫描或摄影测量生成，每个点都有一个三维坐标。</p><ul><li><strong>三维扫描</strong>：通过3D扫描仪生成的点云可以用来创建物体的数字模型。</li><li><strong>重建和拟合</strong>：点云数据可以用于重建曲面模型或拟合几何形状。</li></ul><p><strong>应用</strong>：逆向工程、地形测量、文化遗产保护。</p><h3 id="_5-体素模型-voxel-models" tabindex="-1"><a class="header-anchor" href="#_5-体素模型-voxel-models"><span>5. <strong>体素模型（Voxel Models）</strong></span></a></h3><p>体素模型使用三维像素（体素）来表示空间中的物体。每个体素表示空间中的一个小立方体，其组合可以表示复杂的三维结构。</p><ul><li><strong>体素化</strong>：通过将空间划分为体素，可以精确地表示三维形状和结构。</li><li><strong>三维纹理</strong>：体素模型可以用于表示体积数据，如医学成像中的CT和MRI数据。</li></ul><p><strong>应用</strong>：医学成像、游戏开发、科学计算。</p><h3 id="_6-隐式曲面-implicit-surfaces" tabindex="-1"><a class="header-anchor" href="#_6-隐式曲面-implicit-surfaces"><span>6. <strong>隐式曲面（Implicit Surfaces）</strong></span></a></h3><p>隐式曲面通过定义一个方程，所有满足方程的点都构成一个曲面。它们能够自然地表示复杂的形状，如气泡、液滴等。</p><ul><li><strong>隐函数表示</strong>：使用隐函数f(x, y, z) = 0来定义曲面。</li><li><strong>元球（Metaballs）</strong>：一种常见的隐式曲面，用于模拟液体或软体物体的形状。</li></ul><p><strong>应用</strong>：流体模拟、计算机动画、医学成像。</p><h3 id="_7-分形模型-fractal-models" tabindex="-1"><a class="header-anchor" href="#_7-分形模型-fractal-models"><span>7. <strong>分形模型（Fractal Models）</strong></span></a></h3><p>分形模型使用递归的数学方程来生成具有自相似特征的复杂几何形状，常用于自然物体的建模。</p><ul><li><strong>分形几何</strong>：通过分形几何描述自然界中复杂的形状，如海岸线、山脉、树木等。</li><li><strong>分形维度</strong>：分形模型具有分数维度，用于描述非整数维度的复杂性。</li></ul><p><strong>应用</strong>：自然景观建模、图像压缩、纹理生成。</p><p>通过使用不同的几何模型，设计人员、工程师和科学家能够有效地表示、分析和操作三维形状，以满足各种应用需求。</p><h2 id="管道包扎模型" tabindex="-1"><a class="header-anchor" href="#管道包扎模型"><span>管道包扎模型</span></a></h2><p><strong>管道包扎模型</strong>（Sweeping or Swept Surface Model）是几何建模中一种常见的技术，用于通过沿一条路径移动一个截面曲线（称为截面或轮廓）来生成三维形状。这种方法在生成管道、隧道、索道、曲线建筑结构等形状时非常有用。</p><h3 id="管道包扎模型的构建过程" tabindex="-1"><a class="header-anchor" href="#管道包扎模型的构建过程"><span>管道包扎模型的构建过程</span></a></h3><p>管道包扎模型通过以下几个步骤构建：</p><ol><li><p><strong>定义截面曲线</strong>：选择一个二维截面曲线，通常是一个简单的几何形状，如圆形、矩形、椭圆或任意形状的多边形。</p></li><li><p><strong>定义路径曲线</strong>：选择一条三维路径曲线，沿着这条曲线移动截面曲线。路径可以是直线、曲线、B样条曲线、NURBS曲线等。</p></li><li><p><strong>沿路径移动截面曲线</strong>：将截面曲线沿路径曲线移动，并在路径的每个点上生成一个截面副本。</p></li><li><p><strong>生成管道表面</strong>：通过连接沿路径曲线移动的截面曲线，生成一个三维表面或实体。这种表面在某些情况下被称为扫掠面（Swept Surface）或扫掠体（Swept Solid）。</p></li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matplotlib.pyplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpl_toolkits.mplot3d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Axes3D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义截面曲线（圆形）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate_circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radius, num_points):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    theta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.linspace(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.pi, num_points)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.cos(theta)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.sin(theta)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义路径曲线（螺旋线）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate_helix_path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radius, pitch, num_points, height):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.linspace(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height, num_points)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    theta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.pi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pitch)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.cos(theta)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.sin(theta)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, y, z</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 沿路径曲线移动截面曲线并生成管道表面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate_swept_surface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cross_section_radius, path_radius, pitch, height, num_path_points, num_cross_section_points):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path_x, path_y, path_z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> generate_helix_path(path_radius, pitch, num_path_points, height)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cross_section_x, cross_section_y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> generate_circle(cross_section_radius, num_cross_section_points)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 存储生成的表面点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    surface_x, surface_y, surface_z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [], [], []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num_path_points):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cx, cy, cz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path_x[i], path_y[i], path_z[i]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 旋转并平移截面曲线</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num_cross_section_points):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cross_section_x[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cross_section_y[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cz</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            surface_x.append(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            surface_y.append(y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            surface_z.append(z)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.array(surface_x), np.array(surface_y), np.array(surface_z)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 参数设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cross_section_radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 截面曲线的半径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path_radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 螺旋路径的半径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pitch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 螺旋路径的螺距</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 螺旋路径的高度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num_path_points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 路径上的点数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num_cross_section_points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 截面上的点数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成管道包扎模型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">surface_x, surface_y, surface_z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> generate_swept_surface(cross_section_radius, path_radius, pitch, height, num_path_points, num_cross_section_points)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绘制3D图形</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt.figure()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fig.add_subplot(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">projection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绘制管道表面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax.plot_trisurf(surface_x, surface_y, surface_z, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cyan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">edgecolor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;grey&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置图形的标签和视角</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax.set_xlabel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X axis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax.set_ylabel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Y axis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax.set_zlabel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Z axis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax.view_init(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">elev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">azim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.show()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码解释" tabindex="-1"><a class="header-anchor" href="#代码解释"><span>代码解释：</span></a></h3><ol><li><p><strong><code>generate_circle(radius, num_points)</code></strong>:</p><ul><li>生成一个圆形截面曲线的点，这些点将用于在三维空间中生成管道表面。</li></ul></li><li><p><strong><code>generate_helix_path(radius, pitch, num_points, height)</code></strong>:</p><ul><li>生成螺旋路径曲线，该路径将用于管道的包扎过程。路径曲线在Z轴方向上上升，形成螺旋形。</li></ul></li><li><p><strong><code>generate_swept_surface()</code></strong>:</p><ul><li>该函数将截面曲线沿路径曲线移动，生成三维管道表面。它通过对路径上的每个点进行平移和旋转来创建管道。</li></ul></li><li><p><strong>绘图</strong>:</p><ul><li>使用<code>matplotlib</code>中的<code>plot_trisurf</code>绘制三维表面。</li></ul></li></ol><h3 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果：</span></a></h3><p>该代码将在三维空间中生成一个沿螺旋路径的管道，并显示其3D视图。你可以通过调整参数来改变管道的形状和路径。</p><p>这个示例为基本的管道包扎模型实现，你可以根据需求进一步扩展，例如实现复杂的截面形状或路径曲线。</p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ol><li><p><strong>工程设计</strong>：用于设计管道系统、电缆布线、隧道等。在管道设计中，可以根据不同的截面形状和路径曲线生成复杂的管道几何形状。</p></li><li><p><strong>动画和游戏</strong>：用于生成角色的骨骼、肢体、触角等，或者用于轨道、路径的设计。</p></li><li><p><strong>建筑设计</strong>：用于创建具有复杂曲线和自由形状的建筑结构，如桥梁、走廊、通道等。</p></li><li><p><strong>工业制造</strong>：在生成制造工艺中的工具路径、材料流动轨迹、挤压成型的产品等。</p></li></ol><h3 id="优点和挑战" tabindex="-1"><a class="header-anchor" href="#优点和挑战"><span>优点和挑战</span></a></h3><ul><li><strong>优点</strong>：管道包扎模型能够生成非常复杂和自由的几何形状，适用于描述沿路径移动的各种形状。</li><li><strong>挑战</strong>：在构建过程中，需要处理路径曲线的弯曲、扭转，确保生成的形状符合设计要求。对于复杂路径和截面，可能需要更多的计算和调整。</li></ul><h2 id="铺瓷砖模型" tabindex="-1"><a class="header-anchor" href="#铺瓷砖模型"><span>铺瓷砖模型</span></a></h2><p>铺瓷砖模型在计算机图形学、建筑设计和虚拟现实等领域中非常常见。这个模型模拟了在一个平面或三维空间上铺设瓷砖的过程。通常，铺瓷砖模型会涉及到瓷砖的排列、对齐、填充和裁剪等步骤，以便在给定的区域内生成符合设计要求的瓷砖图案。</p><h3 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念"><span>1. 基本概念</span></a></h3><ul><li><strong>瓷砖（Tile）</strong>：铺设的基本单元，通常是矩形或正方形，也可以是六边形、菱形等几何形状。</li><li><strong>铺设区域（Tiling Area）</strong>：瓷砖铺设的目标区域，通常是一个矩形平面，但也可能是曲面或不规则形状。</li><li><strong>铺设方式（Tiling Pattern）</strong>：瓷砖在铺设区域内的排列方式，可以是平行排列、交错排列、旋转排列等。</li></ul><h3 id="_2-实现思路" tabindex="-1"><a class="header-anchor" href="#_2-实现思路"><span>2. 实现思路</span></a></h3><p>在Python中实现一个简单的铺瓷砖模型，可以使用<code>matplotlib</code>和<code>numpy</code>库来绘制瓷砖铺设的图形。我们将以一个简单的矩形区域内铺设正方形瓷砖为例。</p><h3 id="_3-实现代码" tabindex="-1"><a class="header-anchor" href="#_3-实现代码"><span>3. 实现代码</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matplotlib.pyplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw_tile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, x, y, width, height, color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lightgray&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;在指定位置绘制一个瓷砖&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt.Rectangle((x, y), width, height, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">edgecolor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;black&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ax.add_patch(rect)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tile_floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(area_width, area_height, tile_width, tile_height):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;在给定的区域内铺设瓷砖&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fig, ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt.subplots()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 设置绘图区域大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ax.set_xlim(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, area_width)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ax.set_ylim(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, area_height)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 计算瓷砖在X和Y方向上的数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num_tiles_x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(np.ceil(area_width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tile_width))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num_tiles_y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(np.ceil(area_height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tile_height))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 逐行铺设瓷砖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num_tiles_x):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num_tiles_y):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tile_width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tile_height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            draw_tile(ax, x, y, tile_width, tile_height)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ax.set_aspect(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;equal&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plt.gca().invert_yaxis()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plt.show()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 参数设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">area_width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 铺设区域的宽度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">area_height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 铺设区域的高度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tile_width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 瓷砖的宽度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tile_height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 瓷砖的高度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行铺瓷砖模型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tile_floor(area_width, area_height, tile_width, tile_height)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-代码解释" tabindex="-1"><a class="header-anchor" href="#_4-代码解释"><span>4. 代码解释</span></a></h3><ol><li><p><strong><code>draw_tile</code>函数</strong>:</p><ul><li>用于在指定的位置绘制一个瓷砖（矩形），颜色默认是浅灰色，边缘用黑色描绘。</li></ul></li><li><p><strong><code>tile_floor</code>函数</strong>:</p><ul><li>计算在指定区域内铺设瓷砖的数量，并调用<code>draw_tile</code>函数逐行铺设瓷砖。</li><li><code>np.ceil</code>用于确保即使瓷砖不能完全适配区域，也会尝试铺满整个区域。</li></ul></li><li><p><strong>绘图区域</strong>:</p><ul><li>使用<code>matplotlib</code>的<code>Rectangle</code>对象在指定的绘图区域内添加瓷砖。</li><li>设置了图形的长宽比为1，并反转Y轴以便更直观地展示铺设效果。</li></ul></li></ol><h3 id="_5-运行结果" tabindex="-1"><a class="header-anchor" href="#_5-运行结果"><span>5. 运行结果</span></a></h3><p>代码运行后，将在指定区域内铺设瓷砖，并显示铺设的图形。你可以调整<code>area_width</code>、<code>area_height</code>、<code>tile_width</code>和<code>tile_height</code>参数，来生成不同铺设方式的瓷砖图案。</p><h3 id="_6-扩展" tabindex="-1"><a class="header-anchor" href="#_6-扩展"><span>6. 扩展</span></a></h3><ul><li><strong>复杂图案</strong>：可以扩展该模型以支持更复杂的瓷砖形状（如六边形）和铺设图案（如菱形排列）。</li><li><strong>瓷砖颜色</strong>：可以根据设计要求改变瓷砖的颜色或生成不同颜色的瓷砖图案。</li><li><strong>三维铺设</strong>：如果铺设区域是三维的，瓷砖可以按照指定的模式铺设在曲面或立体表面上。</li></ul><p>通过这个模型，您可以在编程环境中模拟和可视化不同的瓷砖铺设方案，这对于建筑设计、室内装饰或虚拟现实开发等应用具有实际意义。</p><h2 id="钢板切割模型" tabindex="-1"><a class="header-anchor" href="#钢板切割模型"><span>钢板切割模型</span></a></h2><p>钢板切割模型是一种优化问题，通常用于在制造业中，通过最小化废料或优化材料使用来进行切割。它属于典型的裁剪（Cutting Stock）问题。这个模型涉及将大尺寸的钢板切割成各种尺寸的小块，以满足需求，并尽量减少剩余材料的浪费。</p><h3 id="_1-问题描述" tabindex="-1"><a class="header-anchor" href="#_1-问题描述"><span>1. 问题描述</span></a></h3><p>钢板切割模型的基本形式如下：</p><ul><li><strong>输入</strong>： <ul><li><strong>钢板的尺寸</strong>：通常是一个或多个固定尺寸的大钢板。</li><li><strong>需求尺寸</strong>：不同规格的小钢板及其需求数量。</li><li><strong>目标</strong>：在满足需求的情况下，尽量减少废料或使用最少数量的大钢板。</li></ul></li></ul><h3 id="_2-解决方案的策略" tabindex="-1"><a class="header-anchor" href="#_2-解决方案的策略"><span>2. 解决方案的策略</span></a></h3><p>解决钢板切割问题的策略主要包括以下几种：</p><ul><li><strong>启发式算法</strong>：如贪心算法、动态规划等，这些算法用于快速得到一个较优解，但不保证是最优解。</li><li><strong>整数规划（IP）</strong>：通过建立数学模型，利用整数规划来找到最优解。这种方法通常能够得到全局最优解，但计算复杂度较高。</li><li><strong>元启发式算法</strong>：如遗传算法、模拟退火等，适用于大规模问题，可以在较短时间内找到接近最优的解。</li></ul><h3 id="_3-简单示例" tabindex="-1"><a class="header-anchor" href="#_3-简单示例"><span>3. 简单示例</span></a></h3><p>假设有一块宽度为10米、长度为20米的钢板，需要切割成以下尺寸的小块：</p><ul><li>需求1：宽度2米、长度3米，数量为4块。</li><li>需求2：宽度5米、长度4米，数量为3块。</li></ul><h3 id="_4-数学模型" tabindex="-1"><a class="header-anchor" href="#_4-数学模型"><span>4. 数学模型</span></a></h3><p>对于这个简单的钢板切割问题，可以通过以下步骤来建立数学模型：</p><h4 id="_4-1-变量定义" tabindex="-1"><a class="header-anchor" href="#_4-1-变量定义"><span>4.1 变量定义</span></a></h4><ul><li>设<code>x_i</code>表示第<code>i</code>种切割模式的使用次数。</li><li>设<code>p_ij</code>表示第<code>i</code>种切割模式中第<code>j</code>种需求的小块数量。</li></ul><h4 id="_4-2-目标函数" tabindex="-1"><a class="header-anchor" href="#_4-2-目标函数"><span>4.2 目标函数</span></a></h4><p>目标是最小化使用的大钢板数量，或等价地最小化废料： [ \\text{Minimize} \\sum_{i} x_i ]</p><h4 id="_4-3-约束条件" tabindex="-1"><a class="header-anchor" href="#_4-3-约束条件"><span>4.3 约束条件</span></a></h4><ul><li><p>每种需求的小块必须得到满足： [ \\sum_{i} p_{ij} \\cdot x_i \\geq d_j ] 其中，<code>d_j</code>是第<code>j</code>种需求的数量。</p></li><li><p>每个切割模式下的小块不能超出大钢板的尺寸： [ \\text{Width}_i \\leq \\text{Width of large steel plate} ] [ \\text{Length}_i \\leq \\text{Length of large steel plate} ]</p></li></ul><h3 id="_5-python实现示例" tabindex="-1"><a class="header-anchor" href="#_5-python实现示例"><span>5. Python实现示例</span></a></h3><p>这里展示如何用Python来实现一个简单的钢板切割问题的求解（假设使用整数规划）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pulp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LpProblem, LpMinimize, LpVariable, lpSum</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 需求数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demands </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (宽, 长, 需求数量)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">steel_plate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 大钢板的宽和长</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建线性规划问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">problem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LpProblem(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Steel_Cutting_Problem&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LpMinimize)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义变量和目标函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_vars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [LpVariable(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Integer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(demands))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">problem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lpSum(x_vars)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加约束条件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, (width, length, quantity) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(demands):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    problem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_vars[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> steel_plate[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    problem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_vars[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> steel_plate[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    problem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_vars[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quantity</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 求解问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">problem.solve()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_vars):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;需求 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 使用的次数: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x.varValue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-实际应用中的考虑因素" tabindex="-1"><a class="header-anchor" href="#_6-实际应用中的考虑因素"><span>6. 实际应用中的考虑因素</span></a></h3><p>在实际应用中，钢板切割问题可能会更加复杂，需要考虑以下因素：</p><ul><li><strong>切割路径</strong>：最优的切割路径可以减少切割时间和成本。</li><li><strong>废料处理</strong>：剩余的废料可能需要进行回收或处理，因此需要考虑如何处理废料。</li><li><strong>多目标优化</strong>：有时不仅要考虑材料利用率，还需要考虑切割时间、成本等。</li></ul><p>钢板切割模型在制造业中的应用非常广泛，通过合理的优化算法可以显著降低材料浪费，提高生产效率。</p>`,88),h=[e];function t(p,k){return a(),i("div",null,h)}const E=s(l,[["render",t],["__file","part19-几何模型.html.vue"]]),g=JSON.parse('{"path":"/documents/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/part19-%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9E%8B.html","title":"几何模型","lang":"zh-CN","frontmatter":{"cover":"/assets/images/cover2.jpg","title":"几何模型","date":"2024-08-19T00:00:00.000Z","icon":"pen-to-square","author":null,"isOriginal":true,"category":["数学建模"],"tag":["数学建模"],"sticky":1,"star":1,"article":true,"timeline":true,"license":null,"description":"几何模型 几何模型是指通过数学和计算技术来描述和表示几何对象或形状的数学模型。在计算机图形学、计算机辅助设计（CAD）、工程模拟和其他领域中，几何模型是基础工具。根据几何模型的构建方式和使用的数学工具，可以将其分为多种类型。以下是几种常见的几何模型： 1. 实体模型（Solid Models） 实体模型表示三维几何形状的体积和内部结构，通常用于工程设计...","head":[["meta",{"property":"og:url","content":"https://jianghu105.github.io/documents/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/part19-%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Jianghu"}],["meta",{"property":"og:title","content":"几何模型"}],["meta",{"property":"og:description","content":"几何模型 几何模型是指通过数学和计算技术来描述和表示几何对象或形状的数学模型。在计算机图形学、计算机辅助设计（CAD）、工程模拟和其他领域中，几何模型是基础工具。根据几何模型的构建方式和使用的数学工具，可以将其分为多种类型。以下是几种常见的几何模型： 1. 实体模型（Solid Models） 实体模型表示三维几何形状的体积和内部结构，通常用于工程设计..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jianghu105.github.io/assets/images/cover2.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://jianghu105.github.io/assets/images/cover2.jpg"}],["meta",{"name":"twitter:image:alt","content":"几何模型"}],["meta",{"property":"article:author","content":"Jianghu"}],["meta",{"property":"article:tag","content":"数学建模"}],["meta",{"property":"article:published_time","content":"2024-08-19T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"几何模型\\",\\"image\\":[\\"https://jianghu105.github.io/assets/images/cover2.jpg\\"],\\"datePublished\\":\\"2024-08-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianghu\\",\\"url\\":\\"https://jianghu105.github.io/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"几何模型","slug":"几何模型","link":"#几何模型","children":[{"level":3,"title":"1. 实体模型（Solid Models）","slug":"_1-实体模型-solid-models","link":"#_1-实体模型-solid-models","children":[]},{"level":3,"title":"2. 曲面模型（Surface Models）","slug":"_2-曲面模型-surface-models","link":"#_2-曲面模型-surface-models","children":[]},{"level":3,"title":"3. 线框模型（Wireframe Models）","slug":"_3-线框模型-wireframe-models","link":"#_3-线框模型-wireframe-models","children":[]},{"level":3,"title":"4. 点云模型（Point Cloud Models）","slug":"_4-点云模型-point-cloud-models","link":"#_4-点云模型-point-cloud-models","children":[]},{"level":3,"title":"5. 体素模型（Voxel Models）","slug":"_5-体素模型-voxel-models","link":"#_5-体素模型-voxel-models","children":[]},{"level":3,"title":"6. 隐式曲面（Implicit Surfaces）","slug":"_6-隐式曲面-implicit-surfaces","link":"#_6-隐式曲面-implicit-surfaces","children":[]},{"level":3,"title":"7. 分形模型（Fractal Models）","slug":"_7-分形模型-fractal-models","link":"#_7-分形模型-fractal-models","children":[]}]},{"level":2,"title":"管道包扎模型","slug":"管道包扎模型","link":"#管道包扎模型","children":[{"level":3,"title":"管道包扎模型的构建过程","slug":"管道包扎模型的构建过程","link":"#管道包扎模型的构建过程","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"代码解释：","slug":"代码解释","link":"#代码解释","children":[]},{"level":3,"title":"运行结果：","slug":"运行结果","link":"#运行结果","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"优点和挑战","slug":"优点和挑战","link":"#优点和挑战","children":[]}]},{"level":2,"title":"铺瓷砖模型","slug":"铺瓷砖模型","link":"#铺瓷砖模型","children":[{"level":3,"title":"1. 基本概念","slug":"_1-基本概念","link":"#_1-基本概念","children":[]},{"level":3,"title":"2. 实现思路","slug":"_2-实现思路","link":"#_2-实现思路","children":[]},{"level":3,"title":"3. 实现代码","slug":"_3-实现代码","link":"#_3-实现代码","children":[]},{"level":3,"title":"4. 代码解释","slug":"_4-代码解释","link":"#_4-代码解释","children":[]},{"level":3,"title":"5. 运行结果","slug":"_5-运行结果","link":"#_5-运行结果","children":[]},{"level":3,"title":"6. 扩展","slug":"_6-扩展","link":"#_6-扩展","children":[]}]},{"level":2,"title":"钢板切割模型","slug":"钢板切割模型","link":"#钢板切割模型","children":[{"level":3,"title":"1. 问题描述","slug":"_1-问题描述","link":"#_1-问题描述","children":[]},{"level":3,"title":"2. 解决方案的策略","slug":"_2-解决方案的策略","link":"#_2-解决方案的策略","children":[]},{"level":3,"title":"3. 简单示例","slug":"_3-简单示例","link":"#_3-简单示例","children":[]},{"level":3,"title":"4. 数学模型","slug":"_4-数学模型","link":"#_4-数学模型","children":[]},{"level":3,"title":"5. Python实现示例","slug":"_5-python实现示例","link":"#_5-python实现示例","children":[]},{"level":3,"title":"6. 实际应用中的考虑因素","slug":"_6-实际应用中的考虑因素","link":"#_6-实际应用中的考虑因素","children":[]}]}],"git":{},"readingTime":{"minutes":13.57,"words":4070},"filePathRelative":"documents/数学建模/part19-几何模型.md","localizedDate":"2024年8月19日","excerpt":"","autoDesc":true}');export{E as comp,g as data};
